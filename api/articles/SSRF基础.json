{"title":"SSRF基础","uid":"019bd9770b9072b146cab74b0206ca70","slug":"SSRF基础","date":"2022-02-28T11:46:22.000Z","updated":"2022-03-01T14:28:56.953Z","comments":true,"path":"api/articles/SSRF基础.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"SSRF漏洞概述\"><a href=\"#SSRF漏洞概述\" class=\"headerlink\" title=\"SSRF漏洞概述\"></a>SSRF漏洞概述</h2><p>SSRF，全称Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器发起请求的一个安全漏洞，<strong>SSRF的主要攻击目标为外网无法访问的内部系统</strong>。</p>\n<p>以下为SSRF脑图：</p>\n<p><img src=\"/post/SSRF%E5%9F%BA%E7%A1%80.htm/image-20220301211927969.png\" alt=\"image-20220301211927969\"></p>\n<h2 id=\"SSRF漏洞原理\"><a href=\"#SSRF漏洞原理\" class=\"headerlink\" title=\"SSRF漏洞原理\"></a>SSRF漏洞原理</h2><p><strong>SSRF形成的原因</strong>是服务端提供了从其他服务器应用获取数据的功能，在用户可控的情况下，未对目标地址进行过滤与限制，导致了此漏洞的产生。</p>\n<p>大多数web应用都提供了从其他的服务器上获取数据的功能。使用指定的URL，web应用便可以获取图片，下载文件，读取文件内容等。SSRF的实质是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p>\n<p><img src=\"/post/SSRF%E5%9F%BA%E7%A1%80.htm/image-20220301213738983.png\" alt=\"image-20220301213738983\"></p>\n<h2 id=\"SSRF漏洞危害\"><a href=\"#SSRF漏洞危害\" class=\"headerlink\" title=\"SSRF漏洞危害\"></a>SSRF漏洞危害</h2><p>1.内外网的端口和服务扫描</p>\n<p>2.攻击运行在内网或本地的应用程序</p>\n<p>3.对内网web应用进行指纹识别，识别企业内部的资产信息</p>\n<p>4.攻击内网的web应用，主要是使用GET参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）</p>\n<p>5.利用file协议读取本地敏感数据文件等</p>\n<h2 id=\"SSRF漏洞攻击\"><a href=\"#SSRF漏洞攻击\" class=\"headerlink\" title=\"SSRF漏洞攻击\"></a>SSRF漏洞攻击</h2><p>1、获取web应用可达服务器服务的banner信息以及收集内网web应用的指纹识别， 如开放的端口，中间件版本信息等。 </p>\n<p>2、攻击运行在内网的系统或应用程序，获取内网各系统弱口令进行内网漫游、对有 漏洞的内网web应用实施攻击获取webshell，如st2命令执行、discuz ssrf通过redis 实施getshell等。 </p>\n<p>3、利用有脆弱性的组件结合**ftp:&#x2F;&#x2F;<strong>，</strong>file:&#x2F;&#x2F;&#x2F;<strong>，</strong>gopher:&#x2F;&#x2F;<strong>，</strong>dict:&#x2F;&#x2F;**等协议实施攻击。如 FFmpeg任意文件读取，xxe攻击等。</p>\n<p>漏洞攻击：端口扫描，指纹识别，漏洞利用，内网探针等。</p>\n<p>各个协议调用探针：http,file,dict,ftp,gopher 等。</p>\n<h2 id=\"SSRF防御策略\"><a href=\"#SSRF防御策略\" class=\"headerlink\" title=\"SSRF防御策略\"></a>SSRF防御策略</h2><p>1、过滤返回信息，验证远程服务器对请求的响应是比较容易的方法； </p>\n<p>2、统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态； </p>\n<p>3、限制请求的端口为http常用的端口，比如，80,443,8080,8090； </p>\n<p>4、黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网； </p>\n<p>5、禁用不需要的协议。仅允许http和https请求； </p>\n<p>6、使用正则对参数进行效验，防止畸形请求绕过黑名单。</p>\n<p>参考文章：<br><a href=\"https://www.t00ls.net/articles-41070.html\">https://www.t00ls.net/articles-41070.html</a></p>\n","text":"SSRF漏洞概述SSRF，全称Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器发起请求的一个安全漏洞，SSRF的主要攻击目标为外网无法访问的内部系统。 以下为SSRF脑图： SSRF漏洞原理SSRF形成的原因是服务端提供了从其...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"SSRF","slug":"SSRF","count":2,"path":"api/categories/SSRF.json"}],"tags":[{"name":"SSRF","slug":"SSRF","count":2,"path":"api/tags/SSRF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">SSRF漏洞概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">SSRF漏洞原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E6%BC%8F%E6%B4%9E%E5%8D%B1%E5%AE%B3\"><span class=\"toc-text\">SSRF漏洞危害</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">SSRF漏洞攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E9%98%B2%E5%BE%A1%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">SSRF防御策略</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CSRF靶场","uid":"929e59ca2c7119d6b3905dcf4adc61b6","slug":"CSRF靶场","date":"2022-03-08T03:07:17.000Z","updated":"2022-03-09T03:25:19.499Z","comments":true,"path":"api/articles/CSRF靶场.json","keywords":null,"cover":[],"text":"环境准备1、靶场环境：Pikachu-CSRF 2、攻击机：Win10 CSRF（get）0x00首先进行登录： 0x01抓包构造伪链接： 0x02构造url伪链接，将地址修改为china： pikachu-master&#x2F;vul&#x2F;csrf&#x2F;csrfg...","link":"","photos":[],"count_time":{"symbolsCount":839,"symbolsTime":"1 mins."},"categories":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/categories/CSRF.json"}],"tags":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/tags/CSRF.json"},{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSRF基础","uid":"62ffee5f16300f5ee280e534fb47e7f9","slug":"CSRF基础","date":"2022-02-27T13:48:11.000Z","updated":"2022-02-27T15:41:09.282Z","comments":true,"path":"api/articles/CSRF基础.json","keywords":null,"cover":[],"text":"前言在跨站的世界中，CSRF同样扮演者及其重要的角色。CSRF全称为Cross Site Request Forgery，即跨站请求伪造。CSRF很容易与XSS混淆，所以，这里需要注意两个关键点：跨站点的请求与请求是伪造的。 跨站点的请求：跨站点的请求是其他站点或者恶意请求可能来...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/categories/CSRF.json"}],"tags":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/tags/CSRF.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}