{"title":"POST注入-二次注入","uid":"47679b9d369f170d867be494752fa62e","slug":"POST注入-二次注入","date":"2022-02-09T03:31:17.000Z","updated":"2022-02-13T15:33:50.663Z","comments":true,"path":"api/articles/POST注入-二次注入.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>[TOC]</p>\n<p>##二次注入原理</p>\n<p>二次注入，主要分为两步；</p>\n<p><strong>第一步：插入恶意数据</strong></p>\n<p>​        第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，但是addslashes有一个特点就是虽然参数在过滤后会添加 “\\” 进行转义，但是“\\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据；</p>\n<p><strong>第二步：引用恶意数据</strong></p>\n<p>​        在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。</p>\n<h2 id=\"Less-24\"><a href=\"#Less-24\" class=\"headerlink\" title=\"Less-24\"></a>Less-24</h2><p>由源码可得<code>username</code>和<code>password</code>字段使用了函数<code>mysql_real_escape_string()</code>对特殊字符进行了转义<strong>（mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。）</strong></p>\n<p><img src=\"/post/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.htm/image-20220209115311975.png\" alt=\"image-20220209115311975\"></p>\n<p>插入数据库的恶意数据被数据库执行的语句：</p>\n<p><img src=\"/post/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.htm/image-20220209120153561.png\" alt=\"image-20220209120153561\"></p>\n<h2 id=\"插入恶意数据\"><a href=\"#插入恶意数据\" class=\"headerlink\" title=\"插入恶意数据\"></a>插入恶意数据</h2><p>将<code>admin&#39;#</code>进行注册，插入数据</p>\n<p><img src=\"/post/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.htm/image-20220209120745781.png\" alt=\"image-20220209120745781\"></p>\n<p><img src=\"/post/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.htm/image-20220209121134239.png\" alt=\"image-20220209121134239\"></p>\n<h2 id=\"引用恶意数据\"><a href=\"#引用恶意数据\" class=\"headerlink\" title=\"引用恶意数据\"></a>引用恶意数据</h2><p>数据库执行以下恶意语句：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"UPDATE users SET PASSWORD='123456' where username='admin'#' and password='' \"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>相当于执行的是：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> \"<span class=\"token constant\">UPDATE</span> users <span class=\"token constant\">SET</span> <span class=\"token constant\">PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'123456'</span> where username<span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'admin'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.htm/image-20220209121233408.png\" alt=\"image-20220209121233408\"></p>\n<p><img src=\"/post/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.htm/image-20220209121254617.png\" alt=\"image-20220209121254617\"></p>\n<p>可见<code>admin</code>密码已被修改</p>\n","text":"[TOC] ##二次注入原理 二次注入，主要分为两步； 第一步：插入恶意数据 ​ 第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，但是addslashes有一个特点就是虽然参数...","link":"","photos":[],"count_time":{"symbolsCount":687,"symbolsTime":"1 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"},{"name":"基础知识","slug":"基础知识","count":12,"path":"api/tags/基础知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Less-24\"><span class=\"toc-text\">Less-24</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%81%B6%E6%84%8F%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">插入恶意数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E6%81%B6%E6%84%8F%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">引用恶意数据</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SQL注入-HPP","uid":"ed28de52de42846cd0569a9a357ddaf1","slug":"SQL注入-HPP","date":"2022-02-10T05:11:20.000Z","updated":"2022-02-15T12:14:34.027Z","comments":true,"path":"api/articles/SQL注入-HPP.json","keywords":null,"cover":[],"text":"[TOC] ##服务器两层架构 服务器端有两个部分：第一部分为 tomcat 为引擎的 jsp 型服务器，第二部分为 apache为引擎的 php 服务器，真正提供 web 服务的是 php 服务器。工作流程为：client 访问服务器， 能直接访问到 tomcat 服务器，然后...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"},{"name":"基础知识","slug":"基础知识","count":12,"path":"api/tags/基础知识.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SQL注入-关键字过滤的注入","uid":"91c80453ca147ce2ce8eeaf9436ba64b","slug":"SQL注入-关键字过滤的注入","date":"2022-02-08T15:40:16.000Z","updated":"2022-02-13T15:39:14.145Z","comments":true,"path":"api/articles/SQL注入-关键字过滤的注入.json","keywords":null,"cover":[],"text":"[TOC] 关键字过滤的注入Less-23—Less-28a（Less-24除外）都是基于关键字过滤的注入，源码当中将--，#，or，and等关键字都过滤掉了，在这样的基础上进行 SQL注入。 Less-23由源码可以看到，接收到的id值将被函数preg_replace()进行过...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}