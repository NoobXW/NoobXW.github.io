{"title":"文件上传-解析漏洞","uid":"8822ebc3b04f9f9d5f4a65e981067804","slug":"文件上传-解析漏洞","date":"2022-02-17T13:22:37.000Z","updated":"2022-02-17T17:21:38.295Z","comments":true,"path":"api/articles/文件上传-解析漏洞.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于中间件会出现解析漏洞，若配合文件上传会出现很大的安全危害。这里以Vulhub靶场进行漏洞复现，在这之前要了解一下中间件，服务器和Web服务器的区别。</p>\n<h2 id=\"中间件，服务器和Web服务器的区别\"><a href=\"#中间件，服务器和Web服务器的区别\" class=\"headerlink\" title=\"中间件，服务器和Web服务器的区别\"></a>中间件，服务器和Web服务器的区别</h2><p><strong>一、服务器的定义：</strong></p>\n<p>服务器指的是一个<strong>管理资源并为用户提供服务的计算机软件</strong>，通常分为文件服务器、数据库服务器和应用程序服务器。运行以上软件的计算机或计算机系统也被称为服务器。</p>\n<p><strong>二、中间件</strong></p>\n<p>中间件是服务器上负责解析http请求的一组应用程序，负责接收并解析http请求数据包，在服务器上找到数据包所请求的文件后，将其返回给客户端，如果http数据包所请求的是一个动态脚本文件，如php等，中间件就要靠CGI与脚本语言解析软件进行交互，处理好动态脚本文件后，再将处理后的文件其返回给浏览器。</p>\n<p>说白了，中间件就是服务器上web端口（通常为80端口）的一个翻译官，负责告诉服务器用户要请求哪些文件，如果用户请求的是一个静态的html页面，就直接在服务器上找到对应文件并将其交给用户浏览器，如果用户请求的是一个动态页面如php，asp等，中间件在找到该文件后，将其交给对应的脚本语言解析程序，脚本语言解析程序将文件解析成html后，再把解析过的文件发送给浏览器。</p>\n<p>所以，浏览器本身并不能渲染解析动态脚本文件，以php为例，浏览器解析的.php文件，实际上是经服务器php程序解析后的html文件。</p>\n<p>再者，如果服务器上没有安装中间件，那么服务器就不能理解用户发来的http数据包是什么意思，当然也就无法对http请求包进行正确的响应。</p>\n<p><strong>三、Web服务器</strong></p>\n<p>web服务器就是安装了中间件的服务器，如装了Nginx、Apache服务等。</p>\n<p>原文链接：</p>\n<p><a href=\"https://www.cnblogs.com/greycdoer0/p/10484309.html\">https://www.cnblogs.com/greycdoer0/p/10484309.html</a></p>\n<h2 id=\"Tomcat-PUT方法任意写文件漏洞复现\"><a href=\"#Tomcat-PUT方法任意写文件漏洞复现\" class=\"headerlink\" title=\"Tomcat PUT方法任意写文件漏洞复现\"></a>Tomcat PUT方法任意写文件漏洞复现</h2><h3 id=\"0x00-漏洞原理\"><a href=\"#0x00-漏洞原理\" class=\"headerlink\" title=\"0x00 漏洞原理\"></a>0x00 漏洞原理</h3><p>在 Windows 服务器下，Tomcat配置文件&#x2F;conf&#x2F;web.xml中，将 readonly 参数设置为 false 时，即可通过 PUT 方式创建一个 JSP 文件，并可以执行任意代码。</p>\n<h3 id=\"0x01-漏洞环境\"><a href=\"#0x01-漏洞环境\" class=\"headerlink\" title=\"0x01 漏洞环境\"></a>0x01 漏洞环境</h3><p>vulhub&#x2F;tomcat&#x2F;CVE-2017-12615</p>\n<p>使用docker-compose build启动漏洞环境：</p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220217222258093.png\" alt=\"image-20220217222258093\"></p>\n<h3 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>首先访问一个不存在的文件1.jsp，可以看到404页面：</p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220217224530062.png\" alt=\"image-20220217224530062\"></p>\n<h3 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h3><p>根据漏洞原理，方式readonly为false时，使用PUT方式可对服务器写入文件；</p>\n<p>利用PUT方式请求创建文件：</p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218003341484.png\" alt=\"image-20220218003341484\"></p>\n<h3 id=\"0x04\"><a href=\"#0x04\" class=\"headerlink\" title=\"0x04\"></a>0x04</h3><p>再次请求1.jsp文件，访问成功；这里<code>shell</code>只是表达一个含义：可以写入JSP后门代码，最后使用后门工具进行控制。<br><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218003503775.png\" alt=\"image-20220218003503775\"></p>\n<hr>\n<h2 id=\"Apache未知扩展名解析漏洞\"><a href=\"#Apache未知扩展名解析漏洞\" class=\"headerlink\" title=\"Apache未知扩展名解析漏洞\"></a>Apache未知扩展名解析漏洞</h2><h3 id=\"0x00-未知扩展名解析漏洞\"><a href=\"#0x00-未知扩展名解析漏洞\" class=\"headerlink\" title=\"0x00 未知扩展名解析漏洞\"></a>0x00 未知扩展名解析漏洞</h3><p>Apache的解析漏洞依赖于一个特性：<strong>Apache默认</strong>一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别（不在<strong>mime.types</strong>文件内），则继续向左识别，直到识别到合法后缀才进行解析。</p>\n<p>例：x.php.xxx.yyy</p>\n<p>先识别最后的yyy，如果不识别，向前解析，直到识别到php</p>\n<h3 id=\"0x01-漏洞利用场景\"><a href=\"#0x01-漏洞利用场景\" class=\"headerlink\" title=\"0x01 漏洞利用场景\"></a>0x01 漏洞利用场景</h3><p>如果对方中间件Apache属于低版本，我们可以利用文件上传，上传一个不识别的文件后缀，利用解析漏洞规则成功解析文件，然后将写入其中的后门代码触发。</p>\n<p>##Apache HTTPD 多后缀解析漏洞</p>\n<p>###0x00 漏洞复现</p>\n<p>访问这个地址先进行文件上传，上传test.php.jpg文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;靶机IP&#x2F;uploadfiles&#x2F;index.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220217235146226.png\" alt=\"image-20220217235146226\"></p>\n<p>可以看到上传的文件路径：<br><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220217235218835.png\" alt=\"image-20220217235218835\"></p>\n<h3 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>按照路径访问文件，成功解析出其中的后门代码：</p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220217235251664.png\" alt=\"image-20220217235251664\"></p>\n<h3 id=\"0x02-1\"><a href=\"#0x02-1\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>由于<code>http://靶机IP/index.php</code>中是一个白名单检查文件后缀的上传组件，上传完成后并未重命名。我们可以通过上传文件名为<code>xxx.php.jpg</code>或<code>xxx.php.jpeg</code>的文件，利用Apache解析漏洞进行getshell。</p>\n<h2 id=\"Apache-HTTPD-换行解析漏洞（CVE-2017-15715）\"><a href=\"#Apache-HTTPD-换行解析漏洞（CVE-2017-15715）\" class=\"headerlink\" title=\"Apache HTTPD 换行解析漏洞（CVE-2017-15715）\"></a>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h2><h3 id=\"0x00-原理\"><a href=\"#0x00-原理\" class=\"headerlink\" title=\"0x00 原理\"></a>0x00 原理</h3><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。<strong>其2.4.0~2.4.29版本</strong>中存在一个解析漏洞，在解析PHP时，<code>1.php\\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p>\n<h3 id=\"0x01-漏洞复现\"><a href=\"#0x01-漏洞复现\" class=\"headerlink\" title=\"0x01 漏洞复现\"></a>0x01 漏洞复现</h3><p>启动靶场环境：</p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218001107559.png\" alt=\"image-20220218001107559\"></p>\n<h3 id=\"0x02-2\"><a href=\"#0x02-2\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>上传一个1.php文件，可以看到返回结果错误：</p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218001249309.png\" alt=\"image-20220218001249309\"></p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218001327227.png\" alt=\"image-20220218001327227\"></p>\n<h3 id=\"0x03-1\"><a href=\"#0x03-1\" class=\"headerlink\" title=\"0x03\"></a>0x03</h3><p>在1.php后面插入一个<code>\\x0A</code>，可以看到上传文件成功：<br><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218004948163.png\" alt=\"image-20220218004948163\"></p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218005046867.png\" alt=\"image-20220218005046867\"></p>\n<h3 id=\"0x04-1\"><a href=\"#0x04-1\" class=\"headerlink\" title=\"0x04\"></a>0x04</h3><p>访问文件，成功解析：由于文件不是php后缀，说明目标存在解析漏洞。</p>\n<p><img src=\"/post/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E.htm/image-20220218005121082.png\" alt=\"image-20220218005121082\"></p>\n<h2 id=\"IIS和Nginx解析漏洞\"><a href=\"#IIS和Nginx解析漏洞\" class=\"headerlink\" title=\"IIS和Nginx解析漏洞\"></a>IIS和Nginx解析漏洞</h2><h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>访问一张图片地址，后面增加<code>/.php</code>，图片文件被解为php文件，执行后门代码。</p>\n<p><strong>Nginx配置文件错误导致的解析漏洞</strong>：</p>\n<p>对于任意文件名，在后面添加&#x2F;xxx.php（xxx为任意字符）后,即可将文件作为php解析。</p>\n<p>**IIS 6.x **</p>\n<p><strong>基于文件名</strong>：</p>\n<p>该版本 默认会将 *.asp;.jpg 此种格式的文件名，当成Asp解析，原理是 服务器默认不解析; 号及其后面的内容，相当于截断。</p>\n<p><strong>基于文件夹名</strong> ：</p>\n<p>该版本 默认会将 *.asp&#x2F;目录下的所有文件当成Asp解析。</p>\n<h3 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h3><p>随便访问网站的图片地址，后面增加<code>/.php</code>，若出现错误，则无解析漏洞，若非错误提示，则存在此解析漏洞，后续只需寻找一个上传点即可获取权限。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>还有<strong>Nginx 文件名逻辑漏洞（CVE-2013-4547）</strong>等。</p>\n<p>参考文章：<br><a href=\"https://blog.werner.wiki/file-resolution-vulnerability-nginx/\">https://blog.werner.wiki/file-resolution-vulnerability-nginx/</a></p>\n","text":"前言由于中间件会出现解析漏洞，若配合文件上传会出现很大的安全危害。这里以Vulhub靶场进行漏洞复现，在这之前要了解一下中间件，服务器和Web服务器的区别。 中间件，服务器和Web服务器的区别一、服务器的定义： 服务器指的是一个管理资源并为用户提供服务的计算机软件，通常分为文件服...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"文件上传","slug":"文件上传","count":5,"path":"api/categories/文件上传.json"}],"tags":[{"name":"文件上传","slug":"文件上传","count":7,"path":"api/tags/文件上传.json"},{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8CWeb%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">中间件，服务器和Web服务器的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tomcat-PUT%E6%96%B9%E6%B3%95%E4%BB%BB%E6%84%8F%E5%86%99%E6%96%87%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0\"><span class=\"toc-text\">Tomcat PUT方法任意写文件漏洞复现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">0x00 漏洞原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">0x01 漏洞环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02\"><span class=\"toc-text\">0x02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x03\"><span class=\"toc-text\">0x03</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x04\"><span class=\"toc-text\">0x04</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Apache%E6%9C%AA%E7%9F%A5%E6%89%A9%E5%B1%95%E5%90%8D%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">Apache未知扩展名解析漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-%E6%9C%AA%E7%9F%A5%E6%89%A9%E5%B1%95%E5%90%8D%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">0x00 未知扩展名解析漏洞</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">0x01 漏洞利用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-1\"><span class=\"toc-text\">0x02</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Apache-HTTPD-%E6%8D%A2%E8%A1%8C%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-15715%EF%BC%89\"><span class=\"toc-text\">Apache HTTPD 换行解析漏洞（CVE-2017-15715）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">0x00 原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0\"><span class=\"toc-text\">0x01 漏洞复现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-2\"><span class=\"toc-text\">0x02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x03-1\"><span class=\"toc-text\">0x03</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x04-1\"><span class=\"toc-text\">0x04</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IIS%E5%92%8CNginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">IIS和Nginx解析漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">漏洞利用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">漏洞检测</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"文件上传-WAF绕过","uid":"07ba4ec78c8c1a3bf9ee409d03b686e2","slug":"文件上传-WAF绕过","date":"2022-02-18T07:45:11.000Z","updated":"2022-02-18T12:25:50.391Z","comments":true,"path":"api/articles/文件上传-WAF绕过.json","keywords":null,"cover":null,"text":"前言由于在真实环境当中，网站会有相应的软件防护，通常发现文件上传漏洞后还要进行WAF绕过，而类似的防护软件有safedog，BT等，所以需要了解防护的规则并且绕过防护。 当然，这里的WAF绕过是广义上的，不单单是指防护软件，类似前后端源码的防护规则也需要进行WAF绕过。 上传参数...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"文件上传","slug":"文件上传","count":5,"path":"api/categories/文件上传.json"}],"tags":[{"name":"文件上传","slug":"文件上传","count":7,"path":"api/tags/文件上传.json"},{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"文件上传-upload-labs","uid":"839a0bf2eef6223788002c9f68db568c","slug":"文件上传-upload-labs","date":"2022-02-14T06:12:41.000Z","updated":"2023-01-31T13:41:40.159Z","comments":true,"path":"api/articles/文件上传-upload-labs.json","keywords":null,"cover":[],"text":"Pass-01（前端JS绕过）0x00首先分析一下源码： $_FILES：PHP中的$_FILES 是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 $_FILES 为二维数组；如果为多个文件上传，那么 $_FILES 为三维数组。 m...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"文件上传","slug":"文件上传","count":5,"path":"api/categories/文件上传.json"}],"tags":[{"name":"文件上传","slug":"文件上传","count":7,"path":"api/tags/文件上传.json"},{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}