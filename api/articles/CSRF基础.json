{"title":"CSRF基础","uid":"62ffee5f16300f5ee280e534fb47e7f9","slug":"CSRF基础","date":"2022-02-27T13:48:11.000Z","updated":"2022-02-27T15:41:09.282Z","comments":true,"path":"api/articles/CSRF基础.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在跨站的世界中，CSRF同样扮演者及其重要的角色。CSRF全称为<code>Cross Site Request Forgery</code>，即跨站请求伪造。CSRF很容易与XSS混淆，所以，这里需要注意两个关键点：<strong>跨站点的请求</strong>与<strong>请求是伪造的</strong>。</p>\n<p><strong>跨站点的请求</strong>：跨站点的请求是其他站点或者恶意请求可能来自本站。</p>\n<p><strong>请求是伪造的</strong>：如果的请求的发出不是用户的意愿，那么这个请求就是伪造的。</p>\n<h2 id=\"CSRF原理\"><a href=\"#CSRF原理\" class=\"headerlink\" title=\"CSRF原理\"></a>CSRF原理</h2><p>CSRF攻击利用网站对于用户网页浏览器的信任，挟持用户当前已登陆的Web应用程序，去执行并非用户本意的操作。</p>\n<p>图解：</p>\n<p><img src=\"/post/CSRF%E5%9F%BA%E7%A1%80.htm/image-20220227221614451.png\" alt=\"image-20220227221614451\"></p>\n<p><img src=\"/post/CSRF%E5%9F%BA%E7%A1%80.htm/image-20220227221640987.png\" alt=\"image-20220227221640987\"></p>\n<p>由上图可知，若要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>\n<p>1、登录受信任的网站，并在本地生成Cookie。</p>\n<p>2、在没有退出受信任网站的情况下访问恶意构造的网站。</p>\n<h2 id=\"CSRF漏洞检测\"><a href=\"#CSRF漏洞检测\" class=\"headerlink\" title=\"CSRF漏洞检测\"></a>CSRF漏洞检测</h2><h3 id=\"手工检测\"><a href=\"#手工检测\" class=\"headerlink\" title=\"手工检测\"></a>手工检测</h3><ul>\n<li>CSRF只能通过用户受信任的网站操作进行攻击,实际上就是劫持用户操作。</li>\n<li>在检测前首先需要确定Web应用程序的所有功能</li>\n<li>以及确定哪些操作是敏感的</li>\n<li>比如修改密码、转账、发表留言等功能</li>\n</ul>\n<p>1、首先需要抓取用户的数据包，在数据包中搜集信息</p>\n<p>2、手工编写CSRF POC</p>\n<p>3、提交POC查看内容是否被修改</p>\n<h3 id=\"工具检测\"><a href=\"#工具检测\" class=\"headerlink\" title=\"工具检测\"></a>工具检测</h3><p>利用Brupsuit抓取用户数据包，再自动生成CSRF POC进行检测。</p>\n<h2 id=\"CSRF攻击类型\"><a href=\"#CSRF攻击类型\" class=\"headerlink\" title=\"CSRF攻击类型\"></a>CSRF攻击类型</h2><h3 id=\"GET型CSRF-攻击\"><a href=\"#GET型CSRF-攻击\" class=\"headerlink\" title=\"GET型CSRF 攻击\"></a>GET型CSRF 攻击</h3><p>抓取用户访问受信任网站的数据包获取到Cookie，然后再恶意网站上编写一个CSRF页面，利用<code>img</code>标签的<code>src</code>属性指向目标网站，之后欺骗用户访问CSRF页面。</p>\n<p>注意三个关键点：</p>\n<p>1、跨域发出了一个GET请求；</p>\n<p>2、可以无JavaScript参与；</p>\n<p>3、请求是身份认证后的。</p>\n<h3 id=\"POST型CSRF-攻击\"><a href=\"#POST型CSRF-攻击\" class=\"headerlink\" title=\"POST型CSRF 攻击\"></a>POST型CSRF 攻击</h3><p>通过<code>JavaScript</code>自动生成一份表单，表单的<code>action</code>地址指向目标网站的某个地址，表单的相关字段都准备好，写入构造CSRF页面中，即可发出请求。当目标网站的用户被欺骗访问恶意网站的CSRF页面，一个跨域伪造的POST表单请求就发出了，同样，请求中带有目标网站的Cookie。</p>\n<p>###HTML CSRF 攻击</p>\n<p>在HTML中设置src&#x2F;href等链接地址的标签都可以发出一个GET请求，例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">lowsrc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n......<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>CSS样式中的：</p>\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">@import &quot;&quot;\nbackground:url(&quot;&quot;)\n......<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>以上是发出<code>GET</code>请求，<code>POST</code>请求只能通过<code>form</code>提交方式。</p>\n<p>还有另外两种方式：</p>\n<p><strong>JSON HiJacking 攻击</strong></p>\n<p><strong>Flash CSRF 攻击</strong></p>\n<h2 id=\"CSRF危害\"><a href=\"#CSRF危害\" class=\"headerlink\" title=\"CSRF危害\"></a>CSRF危害</h2><p>1、篡改目标网站上的用户数据</p>\n<p>2、盗取用户隐私数据</p>\n<p>3、作为其他攻击向量的辅助攻击手法 </p>\n<p>4、传播CSRF蠕虫</p>\n<h2 id=\"CSRF防御策略\"><a href=\"#CSRF防御策略\" class=\"headerlink\" title=\"CSRF防御策略\"></a>CSRF防御策略</h2><p>1、尽量使用POST，限制GET：由于GET接口只需要构造一个img标签即可实行CSRF攻击；但POST也不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p>\n<p>2、浏览器Cookie策略</p>\n<p>3、加验证码：验证码，强制用户必须与应用进行交互，才能完成最终请求。</p>\n<p>4、检验Referer来源：请求时判断请求链接是否为当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）</p>\n<p>5、设置随机Token：利用Token的随机性</p>\n","text":"前言在跨站的世界中，CSRF同样扮演者及其重要的角色。CSRF全称为Cross Site Request Forgery，即跨站请求伪造。CSRF很容易与XSS混淆，所以，这里需要注意两个关键点：跨站点的请求与请求是伪造的。 跨站点的请求：跨站点的请求是其他站点或者恶意请求可能来...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/categories/CSRF.json"}],"tags":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/tags/CSRF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">CSRF原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">CSRF漏洞检测</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%B7%A5%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">手工检测</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">工具检测</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF%E6%94%BB%E5%87%BB%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">CSRF攻击类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GET%E5%9E%8BCSRF-%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">GET型CSRF 攻击</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#POST%E5%9E%8BCSRF-%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">POST型CSRF 攻击</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF%E5%8D%B1%E5%AE%B3\"><span class=\"toc-text\">CSRF危害</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF%E9%98%B2%E5%BE%A1%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">CSRF防御策略</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SSRF基础","uid":"019bd9770b9072b146cab74b0206ca70","slug":"SSRF基础","date":"2022-02-28T11:46:22.000Z","updated":"2022-03-01T14:28:56.953Z","comments":true,"path":"api/articles/SSRF基础.json","keywords":null,"cover":[],"text":"SSRF漏洞概述SSRF，全称Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器发起请求的一个安全漏洞，SSRF的主要攻击目标为外网无法访问的内部系统。 以下为SSRF脑图： SSRF漏洞原理SSRF形成的原因是服务端提供了从其...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"SSRF","slug":"SSRF","count":2,"path":"api/categories/SSRF.json"}],"tags":[{"name":"SSRF","slug":"SSRF","count":2,"path":"api/tags/SSRF.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CTF文件包含","uid":"eac6c9303fed0a97a442c644f7607a6d","slug":"CTF文件包含","date":"2022-02-24T10:45:14.000Z","updated":"2022-07-23T15:42:12.756Z","comments":true,"path":"api/articles/CTF文件包含.json","keywords":null,"cover":[],"text":"前言在CTF在线平台解题时遇到CTF形式的文件包含漏洞，记录一下解题思路。 CTF文件包含以BUUCTF一道题为例：[ACTF2020 新生赛]Include 1 ###0x00 打开靶机环境提示： ###0x01 点击tips： 0x02可以看到有 ?file&#x3D;fla...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"CTF","slug":"CTF","count":10,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":19,"path":"api/tags/CTF.json"},{"name":"PHP","slug":"PHP","count":5,"path":"api/tags/PHP.json"},{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}