{"title":"WAF绕过-漏洞发现之代理池指纹被动探针","uid":"60c32b8c4d5a420db76927924181a57e","slug":"WAF绕过-漏洞发现之代理池指纹被动探针","date":"2022-06-10T10:48:38.000Z","updated":"2022-06-10T12:00:36.685Z","comments":true,"path":"api/articles/WAF绕过-漏洞发现之代理池指纹被动探针.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>脑图：<br><img src=\"/post/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8C%87%E7%BA%B9%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88.htm/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0.png\" alt=\"WAF绕过-漏洞发现\"></p>\n<h2 id=\"0x01-漏洞发现触发WAF点-针对xray-awvs等\"><a href=\"#0x01-漏洞发现触发WAF点-针对xray-awvs等\" class=\"headerlink\" title=\"0x01 漏洞发现触发WAF点-针对xray,awvs等\"></a>0x01 漏洞发现触发WAF点-针对xray,awvs等</h2><p>1、扫描速度-(代理池，延迟，白名单等)：速度过快肯定会被拦截</p>\n<p>2、工具指纹-(特征修改，伪造模拟真实用户等)</p>\n<p>3、漏洞Payload-(数据变异，数据加密，白名单等)</p>\n<p>（热门的扫描工具（awvs，xray等）一般会被WAF拦截，针对单点的漏洞发现工具一般不会被拦截）</p>\n<h2 id=\"0x02-代理池Proxy-pool项目搭建及使用\"><a href=\"#0x02-代理池Proxy-pool项目搭建及使用\" class=\"headerlink\" title=\"0x02 代理池Proxy_pool项目搭建及使用\"></a>0x02 代理池Proxy_pool项目搭建及使用</h2><p>使用方法：</p>\n<p>启用Redis数据库：“此电脑”右键“管理”“服务和应用程序”“Redis”右键“启用”</p>\n<p>setting.py，在“HOST”处填写本地地址</p>\n<p>setting.py，在“DB_CONN”处以“’redis:&#x2F;&#x2F;:password@ip:port&#x2F;db’”的格式填写Redis数据库的账号密码还有IP端口</p>\n<p>运行“proxyPool.py”，加参数“schedule”启动调度程序，加参数“server”启动api服务</p>\n<p>程序会将收集到的可用的代理写到数据库中。</p>\n<p>代理池项目地址：</p>\n<p><a href=\"https://github.com/jhao104/proxy_pool\">https://github.com/jhao104/proxy_pool</a></p>\n<h2 id=\"0x03-Aliyun-os-awvs漏扫注入测试绕过-延时白名单\"><a href=\"#0x03-Aliyun-os-awvs漏扫注入测试绕过-延时白名单\" class=\"headerlink\" title=\"0x03 Aliyun_os-awvs漏扫注入测试绕过-延时白名单\"></a>0x03 Aliyun_os-awvs漏扫注入测试绕过-延时白名单</h2><p><strong>对阿里云和宝塔的绕过基本采用延迟。</strong></p>\n<p>awvs可以改变数据包内容，因此可以绕过工具指纹和漏洞payload检测，但xray没有相关功能所以没法绕过</p>\n<p>不同工具的判定方式不一样，一个工具被拦截可以换个工具试试</p>\n<p>新开发或冷门的扫描工具可能未被WAF收集，因此可以绕过工具指纹和漏洞payload检测</p>\n<p>如果工具没法控制发送速度，可以用burpsuite做漏扫工具的代理，使用鼠标点击器定速放出数据包。</p>\n<h2 id=\"0x04-BT-awvs-xray漏扫Payload绕过-延时被动\"><a href=\"#0x04-BT-awvs-xray漏扫Payload绕过-延时被动\" class=\"headerlink\" title=\"0x04 BT-awvs+xray漏扫Payload绕过-延时被动\"></a>0x04 BT-awvs+xray漏扫Payload绕过-延时被动</h2><p>xray扫描不会被宝塔拦截，可能是因为宝塔暂未收录xray的信息</p>\n<p>awvs联动xray扫描：</p>\n<p>正常设置awvs，然后设置代理，代理可以直接设置为xray，也可以设置为burpsuite来看数据包发包情况，然后再转发到xray（被动扫描）。地址为“127.0.0.1”，端口自己设置。</p>\n<p>如果使用burpsuite，设置代理，从参照被动扫描部分</p>\n<p>打开xray，被动扫描，输入命令“.\\xray的程序名 webscan –listen 地址:端口”，地址端口与被动扫描的一致。</p>\n<p>启动xray，然后启动awvs，开始扫描</p>\n<p>（绕过安全狗同理）</p>\n","text":"0x00脑图： 0x01 漏洞发现触发WAF点-针对xray,awvs等1、扫描速度-(代理池，延迟，白名单等)：速度过快肯定会被拦截 2、工具指纹-(特征修改，伪造模拟真实用户等) 3、漏洞Payload-(数据变异，数据加密，白名单等) （热门的扫描工具（awvs，xray等...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E8%A7%A6%E5%8F%91WAF%E7%82%B9-%E9%92%88%E5%AF%B9xray-awvs%E7%AD%89\"><span class=\"toc-text\">0x01 漏洞发现触发WAF点-针对xray,awvs等</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-%E4%BB%A3%E7%90%86%E6%B1%A0Proxy-pool%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">0x02 代理池Proxy_pool项目搭建及使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-Aliyun-os-awvs%E6%BC%8F%E6%89%AB%E6%B3%A8%E5%85%A5%E6%B5%8B%E8%AF%95%E7%BB%95%E8%BF%87-%E5%BB%B6%E6%97%B6%E7%99%BD%E5%90%8D%E5%8D%95\"><span class=\"toc-text\">0x03 Aliyun_os-awvs漏扫注入测试绕过-延时白名单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-BT-awvs-xray%E6%BC%8F%E6%89%ABPayload%E7%BB%95%E8%BF%87-%E5%BB%B6%E6%97%B6%E8%A2%AB%E5%8A%A8\"><span class=\"toc-text\">0x04 BT-awvs+xray漏扫Payload绕过-延时被动</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"WAF绕过-漏洞利用之注入上传跨站等绕过","uid":"33e492c349a108568658a2914e822de5","slug":"WAF绕过-漏洞利用之注入上传跨站等绕过","date":"2022-06-10T14:12:41.000Z","updated":"2022-06-10T15:42:56.054Z","comments":true,"path":"api/articles/WAF绕过-漏洞利用之注入上传跨站等绕过.json","keywords":null,"cover":[],"text":"0x00脑图： 0x01 SQL注入使用如sqlmap等工具注入时，为防止CC拦截，修改数据包us头模仿爬虫，或使用代理池 安全狗：参考之前payload Aliyun：基本修改指纹即可 宝塔：匹配关键字，包括“&#x2F;*”，注入语句的每个“&#x2F;*”都改为“%00&#...","link":"","photos":[],"count_time":{"symbolsCount":614,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"WAF绕过-信息搜集反爬虫延时代理池技术","uid":"7994f7b150cfea785dcbebf986580404","slug":"WAF绕过-信息搜集反爬虫延时代理池技术","date":"2022-06-09T08:30:59.000Z","updated":"2022-06-09T09:52:21.731Z","comments":true,"path":"api/articles/WAF绕过-信息搜集反爬虫延时代理池技术.json","keywords":null,"cover":[],"text":"0x00脑图： 0x01 绕过手法1、请求方法：改变数据包的请求方法，如从Head改为更常见的Get 2、模拟用户：修改整个数据包，使它更像一般用户发送的数据 3、延时：两次访问间设置合适的时间间隔，以防触发拦截机制 4、代理池：使用代理访问，避开对单个IP的限制 5、爬虫引擎：...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}