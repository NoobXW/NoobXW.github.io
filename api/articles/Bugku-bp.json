{"title":"Bugku-bp","uid":"dbee8267c0ff772e8e935645576bc24d","slug":"Bugku-bp","date":"2022-07-22T02:21:04.000Z","updated":"2022-07-22T02:50:25.943Z","comments":true,"path":"api/articles/Bugku-bp.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>Bugku一道弱口令爆破题目，比平时的爆破略微有些不同。</p>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>打开靶场，提示使用弱口令top1000，而且应该是z开头的六位密码：</p>\n<p><img src=\"/post/Bugku-bp.htm/image-20220722102240226.png\" alt=\"image-20220722102240226\"></p>\n<p><img src=\"/post/Bugku-bp.htm/image-20220722102227793.png\" alt=\"image-20220722102227793\"></p>\n<h2 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2><p>从网上下载好top1000弱口令字典直接使用bp设置好参数进行爆破：<br><img src=\"/post/Bugku-bp.htm/image-20220722102553838.png\" alt=\"image-20220722102553838\"></p>\n<p><img src=\"/post/Bugku-bp.htm/image-20220722102607162.png\" alt=\"image-20220722102607162\"></p>\n<h2 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p><img src=\"/post/Bugku-bp.htm/image-20220722102708768.png\" alt=\"image-20220722102708768\"></p>\n<p>观察长度都一样，没有任何一个不同，这就是与平时爆破不同的地方；</p>\n<p>无非两种情况：<br>1、正确的密码不在字典当中；</p>\n<p>2、正确的密码在已使用的密码字典中，但是不论输入的密码是否正确，Response的长度都是908</p>\n<p>不管使用什么字典，都是908；</p>\n<p>查看返回包看看有什么不同：<br><img src=\"/post/Bugku-bp.htm/image-20220722103101425.png\" alt=\"image-20220722103101425\"></p>\n<p>每一条回应包都有一段这样的JS代码，提示密码错误，这里可以猜想，正确的回应包应该和现在的回应包有所不同。二者之间的差异应该就在这段JS代码当中。</p>\n<p>JS代码中声明了<code>var r = &#123;code: &#39;bugku10000&#39;&#125;</code>这样一个变量，若是<code>r.code</code>等于<code>bugku10000</code>就返回密码错误，否则就返回正确。</p>\n<p>既然报错返回包中会有<code>&#123;code: &#39;bugku10000&#39;&#125;</code>此字段，那就将此字段放入爆破模块进行匹配，返回不同结果则表示为正确的密码。</p>\n<p>这时需要用到Intruder中的Grep-Match功能：</p>\n<p><img src=\"/post/Bugku-bp.htm/image-20220722103745865.png\" alt=\"image-20220722103745865\"></p>\n<p>该功能可以帮我们分析<strong>Response中是否含有给定字符串</strong>。</p>\n<h2 id=\"0x04\"><a href=\"#0x04\" class=\"headerlink\" title=\"0x04\"></a>0x04</h2><p>继续爆破，不过此时就不是观察长度来判断，而是观察所加入的字段来判断：<br><img src=\"/post/Bugku-bp.htm/image-20220722104108241.png\" alt=\"image-20220722104108241\"></p>\n<p>观察<code>&#123;code: &#39;bugku10000&#39;&#125;</code>字段，看到其他密码都被打了☑，只有最有一个没有，尝试登录：<br><img src=\"/post/Bugku-bp.htm/image-20220722104404323.png\" alt=\"image-20220722104404323\"></p>\n<p>得到flag。</p>\n<h2 id=\"0x05\"><a href=\"#0x05\" class=\"headerlink\" title=\"0x05\"></a>0x05</h2><p>再观察对应返回包：</p>\n<p>正确返回包返回的是hacker1000</p>\n<p><img src=\"/post/Bugku-bp.htm/image-20220722104453822.png\" alt=\"image-20220722104453822\"></p>\n<p>错误返回包返回的还是bugku10000</p>\n<p><img src=\"/post/Bugku-bp.htm/image-20220722104505096.png\" alt=\"image-20220722104505096\"></p>\n<h2 id=\"0x06-总结\"><a href=\"#0x06-总结\" class=\"headerlink\" title=\"0x06 总结\"></a>0x06 总结</h2><p>与平时爆破不同的是这次观察的不是长度，这也说明，可能有时进行爆破密码正确也不一定能够直接观察出来，还需要查看回显数据包进行进一步检测，需要配合回显数据包的数据进行密码爆破。关注点有时可能并不是一个，而是多个。</p>\n","text":"0x00Bugku一道弱口令爆破题目，比平时的爆破略微有些不同。 0x01打开靶场，提示使用弱口令top1000，而且应该是z开头的六位密码： 0x02从网上下载好top1000弱口令字典直接使用bp设置好参数进行爆破： 0x03 观察长度都一样，没有任何一个不同，这就是与平时爆...","link":"","photos":[],"count_time":{"symbolsCount":856,"symbolsTime":"1 mins."},"categories":[{"name":"CTF","slug":"CTF","count":10,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":19,"path":"api/tags/CTF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02\"><span class=\"toc-text\">0x02</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03\"><span class=\"toc-text\">0x03</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04\"><span class=\"toc-text\">0x04</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05\"><span class=\"toc-text\">0x05</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x06-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">0x06 总结</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BUU-HardSQL","uid":"fc23abf567ea93cff7f9b201441e8d7a","slug":"BUU-HardSQL","date":"2022-07-22T11:29:37.000Z","updated":"2022-07-22T11:55:11.704Z","comments":true,"path":"api/articles/BUU-HardSQL.json","keywords":null,"cover":[],"text":"0x00BUU一到SQL注入题目。 0x01打开靶场： 先试试万能密码： 这里应该是把空格过滤了，测试一下： 输入admin’ ‘，还是返回同样的页面： 使用括号替换空格发现出现报错，没有出现那几个汉字，证明确实过滤了空格： 空格绕过原理： 括号是来包含子查询的，任何可以计算出结...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"CTF","slug":"CTF","count":19,"path":"api/tags/CTF.json"},{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BUU-WarmUp","uid":"b677a8964f78654f7fae8209041bf9e6","slug":"BUU-WarmUp","date":"2022-07-21T09:28:21.000Z","updated":"2022-07-23T15:38:34.333Z","comments":true,"path":"api/articles/BUU-WarmUp.json","keywords":null,"cover":[],"text":"0x00BUU，Web题目WarmUp，PHP代码审计。 0x01打开靶场只有一个表情包： 查看源码发现source.php文件，直接访问： 出现源代码。 看到源码中存在一个hint.php文件，直接访问： 提示flag在ffffllllaaaagggg当中，告诉了flag的文件...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"CTF","slug":"CTF","count":10,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":19,"path":"api/tags/CTF.json"},{"name":"代码审计","slug":"代码审计","count":6,"path":"api/tags/代码审计.json"},{"name":"PHP","slug":"PHP","count":5,"path":"api/tags/PHP.json"},{"name":"文件包含","slug":"文件包含","count":2,"path":"api/tags/文件包含.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}