{"title":"RCE代码及命令执行漏洞","uid":"99ef65eed770437be60664bb9539a369","slug":"RCE代码及命令执行漏洞","date":"2022-03-12T07:42:14.000Z","updated":"2022-03-12T08:38:19.341Z","comments":true,"path":"api/articles/RCE代码及命令执行漏洞.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏洞。同样调用系统命令处理，将造成命令执行漏洞。</p>\n<p>脑图：</p>\n<p><img src=\"/post/RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.htm/image-20220312160620185.png\" alt=\"image-20220312160620185\"></p>\n<h2 id=\"RCE漏洞原理\"><a href=\"#RCE漏洞原理\" class=\"headerlink\" title=\"RCE漏洞原理\"></a>RCE漏洞原理</h2><p>RCE(remote command&#x2F;code execute，远程命令执行)漏洞，一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。<br>一般会给用户提供一个<code>ping</code>操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次<code>ping</code>测试，并返回测试结果。如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。</p>\n<p>直白一点：</p>\n<p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。RCE分为远程命令执行ping和远程代码执行evel。</p>\n<h2 id=\"检测RCE漏洞\"><a href=\"#检测RCE漏洞\" class=\"headerlink\" title=\"检测RCE漏洞\"></a>检测RCE漏洞</h2><p><strong>涉及系统命令执行函数：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">system()\npassthru()\nexec()\nshell_exec()\npopen()\nproc_open()\npcntl_exec()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>黑盒测试：网站中有特殊功能，比如Ping、数据库备份等等。</p>\n<p>白盒测试：查看命令执行函数是否做过滤。命令执行函数如下：</p>\n<p>​    PHP代码执行函数：eval()、assert()、preg_replace()、create_function()、array_map()、call_user_func()、call_user_func_array()、array_filter()、uasort()</p>\n<p>​    PHP命令执行函数：system()、exec()、shell_exec()、pcntl_exec()、popen()、proc_popen()、passthru()</p>\n<h2 id=\"RCE漏洞危害\"><a href=\"#RCE漏洞危害\" class=\"headerlink\" title=\"RCE漏洞危害\"></a>RCE漏洞危害</h2><p>高危：</p>\n<p>直接获取服务器权限；</p>\n<p>获取敏感数据，文件；</p>\n<p>写入恶意文件getshell。</p>\n<h2 id=\"RCE漏洞利用\"><a href=\"#RCE漏洞利用\" class=\"headerlink\" title=\"RCE漏洞利用\"></a>RCE漏洞利用</h2><h5 id=\"windows下管道符\"><a href=\"#windows下管道符\" class=\"headerlink\" title=\"windows下管道符\"></a>windows下管道符</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">“;”：执行完前面的语句再执行后面的语句。\n“|”：显示后面语句的执行结果。\n“||”：当前面的语句执行出错时，执行后面的语句。\n“&amp;”：两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。\n“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"linux下管道符\"><a href=\"#linux下管道符\" class=\"headerlink\" title=\"linux下管道符\"></a>linux下管道符</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">“;”：执行完前面的语句再执行后面的语句。 \n“|”：显示后面语句的执行结果。 \n“||”：当前面的语句执行出错时，执行后面的语句。\n“&amp;”：两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。 “&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>##RCE漏洞防范:</p>\n<p>1、在进入危险函数前进行严格的检测和过滤；</p>\n<p>2、尽量不要使用命令执行函数。</p>\n","text":"前言在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏洞。同样调用系统命令处理，将造成命令执行漏洞。 脑图： RCE漏洞原理RCE(rem...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"RCE","slug":"RCE","count":3,"path":"api/categories/RCE.json"}],"tags":[{"name":"RCE","slug":"RCE","count":4,"path":"api/tags/RCE.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RCE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">RCE漏洞原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%B5%8BRCE%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">检测RCE漏洞</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RCE%E6%BC%8F%E6%B4%9E%E5%8D%B1%E5%AE%B3\"><span class=\"toc-text\">RCE漏洞危害</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RCE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">RCE漏洞利用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#windows%E4%B8%8B%E7%AE%A1%E9%81%93%E7%AC%A6\"><span class=\"toc-text\">windows下管道符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#linux%E4%B8%8B%E7%AE%A1%E9%81%93%E7%AC%A6\"><span class=\"toc-text\">linux下管道符</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"墨者学院-命令执行","uid":"63b4d5992a8dc61b2cccec272a36e569","slug":"墨者学院-命令执行","date":"2022-03-13T01:39:21.000Z","updated":"2022-03-20T11:50:42.422Z","comments":true,"path":"api/articles/墨者学院-命令执行.json","keywords":null,"cover":[],"text":"#命令执行注入 0x00启动靶场环境 0x01提示输入ip地址 先测试一下 可以看到成功ping的返回信息。 0x02接下来尝试使用管道符执行ls命令查看目录 这里判断的时候出现弹窗提示ip格式不对，先看下源码是不是前端验证 果然，那这里的话就需要绕过前端验证。 0x03抓包进行...","link":"","photos":[],"count_time":{"symbolsCount":529,"symbolsTime":"1 mins."},"categories":[{"name":"RCE","slug":"RCE","count":3,"path":"api/categories/RCE.json"}],"tags":[{"name":"CTF","slug":"CTF","count":19,"path":"api/tags/CTF.json"},{"name":"RCE","slug":"RCE","count":4,"path":"api/tags/RCE.json"},{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSRF靶场","uid":"929e59ca2c7119d6b3905dcf4adc61b6","slug":"CSRF靶场","date":"2022-03-08T03:07:17.000Z","updated":"2022-03-09T03:25:19.499Z","comments":true,"path":"api/articles/CSRF靶场.json","keywords":null,"cover":[],"text":"环境准备1、靶场环境：Pikachu-CSRF 2、攻击机：Win10 CSRF（get）0x00首先进行登录： 0x01抓包构造伪链接： 0x02构造url伪链接，将地址修改为china： pikachu-master&#x2F;vul&#x2F;csrf&#x2F;csrfg...","link":"","photos":[],"count_time":{"symbolsCount":839,"symbolsTime":"1 mins."},"categories":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/categories/CSRF.json"}],"tags":[{"name":"CSRF","slug":"CSRF","count":2,"path":"api/tags/CSRF.json"},{"name":"靶场","slug":"靶场","count":12,"path":"api/tags/靶场.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}