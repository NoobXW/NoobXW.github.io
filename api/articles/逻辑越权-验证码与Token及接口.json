{"title":"逻辑越权-验证码与Token及接口","uid":"e9b18ef1b67c7f0e9290c6534e851593","slug":"逻辑越权-验证码与Token及接口","date":"2022-06-02T08:18:09.000Z","updated":"2022-06-03T11:11:24.010Z","comments":true,"path":"api/articles/逻辑越权-验证码与Token及接口.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>脑图</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220602162201155.png\" alt=\"image-20220602162201155\"></p>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p><strong>1、验证码安全</strong></p>\n<p>分类: 图片，手机或邮箱，语音，视频，操作等<br>原理: 验证生成或验证过程中的逻辑问题<br>危害: 账户权限泄漏，短信轰炸，遍历，任意用户操作等<br>漏洞: 客户端回显，验证码复用，验证码爆破，绕过等<br>—验证码爆破：没有次数限制，验证码有效时间内不变</p>\n<p>—验证码识别：用工具识别验证码</p>\n<p>—复用：用上一次的验证码来绕过下一次的验证</p>\n<p>—回显：验证码在前端数据包显示</p>\n<p><strong>2、token 安全</strong></p>\n<p>Token的定义<br>Token是服务端生成的一串字符串。当客户端第一次登录后，服务器生成一个Token并将此Token返回给客户端，Token可以代替用户名和密码作为身份的验证。</p>\n<p>每次客户端与服务器端通信，会得到新的Token<br>基本上述同理，主要是验证中可存在绕过可继续后续测试<br>token 爆破，token 客户端回显等<br>—token 爆破—token后面会跟上一个字符串，如果知道规律可以进行爆破</p>\n<p>—token 客户端回显—token的数据会在前端数据包（request）里面显示</p>\n<p>—token固定—虽然有token，但是可以通过上一次的token操作下一次的数据包（表面上有，实际没有）</p>\n<p><strong>3、验证码识别插件工具使用</strong></p>\n<p>captcha-killer<br>Pkav_Http_Fuzz<br>reCAPTCHA 等</p>\n<p><strong>4、接口安全问题</strong></p>\n<p>调用，遍历，未授权，篡改等<br>调用案例：短信轰炸<br>遍历案列：UID 等遍历<br>callback 回调 JSONP（使用callback相当于回调，需要取数据，可能会符合一些漏洞的条件，形成安全问题）</p>\n<h2 id=\"0x02-Token\"><a href=\"#0x02-Token\" class=\"headerlink\" title=\"0x02 Token\"></a>0x02 Token</h2><p><strong>1、token定义：</strong></p>\n<p>token是服务端生成的一串字符串，以作客户端请求的一个令牌。当第一次登录后，服务器生成一个token便将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p>\n<p><strong>2、token的目的</strong></p>\n<p>为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>\n<p><strong>3、token时效性</strong></p>\n<ul>\n<li>极度敏感的信息，如钱或银行数据。不要在本地存放Token，存放在内存中，这样随着App关闭Token也就没有了</li>\n<li>对于敏感但跟钱无关，如教育App的学习进度，可以设置为一个月</li>\n<li>对于游戏、社交类App，时间可以更长些，半年或一年</li>\n</ul>\n<p>参考文章：<a href=\"https://blog.csdn.net/m0_37518413/article/details/103190957\">https://blog.csdn.net/m0_37518413/article/details/103190957</a></p>\n<h2 id=\"0x03-验证码识别插件及工具操作演示-实例\"><a href=\"#0x03-验证码识别插件及工具操作演示-实例\" class=\"headerlink\" title=\"0x03 验证码识别插件及工具操作演示-实例\"></a>0x03 验证码识别插件及工具操作演示-实例</h2><h3 id=\"0x00-1\"><a href=\"#0x00-1\" class=\"headerlink\" title=\"0x00\"></a>0x00</h3><p>利用Pkav_Http_Fuzz工具识别验证码</p>\n<h3 id=\"0x01-1\"><a href=\"#0x01-1\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>后台登录框，显示有验证码</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220602220915374.png\" alt=\"image-20220602220915374\"></p>\n<h3 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>打开验证码地址</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603164258803.png\" alt=\"image-20220603164258803\"></p>\n<p>###0x03</p>\n<p>抓取其数据包</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603165415615.png\" alt=\"image-20220603165415615\"></p>\n<p>###0x04</p>\n<p>将数据包头部除去GET方式和Host以及Cookie字段，其他字段和验证码地址放入Pkav_Http_Fuzz识别工具识别（只能识别简单验证码）</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603165837815.png\" alt=\"image-20220603165837815\"></p>\n<p>点击识别测试，可以看到识别到了验证码</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603165902341.png\" alt=\"image-20220603165902341\"></p>\n<h3 id=\"0x05-总结\"><a href=\"#0x05-总结\" class=\"headerlink\" title=\"0x05 总结\"></a>0x05 总结</h3><p>1、识别精度有限</p>\n<p>2、缺少接口，只能加载能够下载的识别库</p>\n<p>3、只能识别简单的验证码</p>\n<p>4、只能使用自带的发包器，不能结合到burpsuite</p>\n<h2 id=\"0x04-利用BP插件captch-killer识别验证码\"><a href=\"#0x04-利用BP插件captch-killer识别验证码\" class=\"headerlink\" title=\"0x04 利用BP插件captch-killer识别验证码\"></a>0x04 利用BP插件captch-killer识别验证码</h2><h3 id=\"0x00-2\"><a href=\"#0x00-2\" class=\"headerlink\" title=\"0x00\"></a>0x00</h3><p>插件captch-killer详解文章：</p>\n<p><a href=\"https://www.cnblogs.com/nul1/p/12071115.html\">https://www.cnblogs.com/nul1/p/12071115.html</a></p>\n<h3 id=\"0x01-2\"><a href=\"#0x01-2\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>抓包，右键点击插件，如图：</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603171121799.png\" alt=\"image-20220603171121799\"></p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603171220840.png\" alt=\"image-20220603171220840\"></p>\n<h3 id=\"0x02-1\"><a href=\"#0x02-1\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>点击获取验证码</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603171314484.png\" alt=\"image-20220603171314484\"></p>\n<h3 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h3><p>验证码爆破内容看链接文章，由于接口付费，就不实操了。</p>\n<p>具体使用方法：</p>\n<p>使用burpsuite抓包，右键发送到“captcha-killer”“Send to captcha panel”</p>\n<p>接口URL填识别平台的接口地址</p>\n<p>开始识别</p>\n<p>爆破时使用该插件：“Attack type”选择“Pitchfork”，“Payload type”选择“Extension-generated”，“Extension payload generator”选择“captcha-killer”。不要用多线程。</p>\n<h2 id=\"0x05-验证码绕过本地及远程验证-本地及实例\"><a href=\"#0x05-验证码绕过本地及远程验证-本地及实例\" class=\"headerlink\" title=\"0x05 验证码绕过本地及远程验证-本地及实例\"></a>0x05 验证码绕过本地及远程验证-本地及实例</h2><h3 id=\"0x00-3\"><a href=\"#0x00-3\" class=\"headerlink\" title=\"0x00\"></a>0x00</h3><p>靶场：pikachu</p>\n<h3 id=\"0x01-基于服务端的验证码绕过（on-server）\"><a href=\"#0x01-基于服务端的验证码绕过（on-server）\" class=\"headerlink\" title=\"0x01 基于服务端的验证码绕过（on server）\"></a>0x01 基于服务端的验证码绕过（on server）</h3><p>当随便输入用户名和密码并输入正确验证码后会提示账户不存在</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603172749010.png\" alt=\"image-20220603172749010\"></p>\n<h3 id=\"0x02-2\"><a href=\"#0x02-2\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>当时输入正确账户输入错误验证码时会提示验证码错误</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603172933598.png\" alt=\"image-20220603172933598\"></p>\n<p>这里表明是存在验证码检测的。</p>\n<h3 id=\"0x03-1\"><a href=\"#0x03-1\" class=\"headerlink\" title=\"0x03\"></a>0x03</h3><p>抓取正确验证码的数据包，返回结果没有报验证码错误</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603174011681.png\" alt=\"image-20220603174011681\"></p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603174237714.png\" alt=\"image-20220603174237714\"></p>\n<h3 id=\"0x04\"><a href=\"#0x04\" class=\"headerlink\" title=\"0x04\"></a>0x04</h3><p>修改用户名和密码，观察返回包报错信息</p>\n<p>修改密码继续放包，可以看到没有报验证码错误信息，表明这里验证码还是有效的，可以进行验证码复用。</p>\n<p>（由于一般情况，验证码只能使用一次，使用之后第二次复用就会报错）</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603174354021.png\" alt=\"image-20220603174354021\"></p>\n<h3 id=\"0x05\"><a href=\"#0x05\" class=\"headerlink\" title=\"0x05\"></a>0x05</h3><p>这里就可以复用验证码进行爆破。</p>\n<p>设置爆破字段</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603174909366.png\" alt=\"image-20220603174909366\"></p>\n<p>设置好爆破字典</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603175206475.png\" alt=\"image-20220603175206475\"></p>\n<p>开始爆破。</p>\n<p>可以看到长度不同的表示爆破成功，账户密码为<code>admin，123456</code>。</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603175341992.png\" alt=\"image-20220603175341992\"></p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603175532425.png\" alt=\"image-20220603175532425\"></p>\n<h3 id=\"0x06\"><a href=\"#0x06\" class=\"headerlink\" title=\"0x06\"></a>0x06</h3><p>进行一下代码审计，查看为什么能够验证码复用。</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603174729392.png\" alt=\"image-20220603174729392\"></p>\n<p>从代码中可以看到验证码在验证完成后没有销毁session导致验证重复使用；<code>session</code>在登录之后是会存在一段时间，而在这段时间没有一直可以利用<code>session</code>值。</p>\n<h3 id=\"0x06-基于客户端的验证码绕过（on-client）\"><a href=\"#0x06-基于客户端的验证码绕过（on-client）\" class=\"headerlink\" title=\"0x06 基于客户端的验证码绕过（on client）\"></a>0x06 基于客户端的验证码绕过（on client）</h3><h3 id=\"0x00-4\"><a href=\"#0x00-4\" class=\"headerlink\" title=\"0x00\"></a>0x00</h3><p>前端验证源代码</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603180355216.png\" alt=\"image-20220603180355216\"></p>\n<h3 id=\"0x01-3\"><a href=\"#0x01-3\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>有些前端验证看不到源代码，是由于加载<code>js</code>文件实现前端验证。</p>\n<p>将验证文件写入新建的<code>1.js</code>中，在主页面文件中加载<code>1.js</code>文件，刷新页面擦查看数据包</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603181029337.png\" alt=\"image-20220603181029337\"></p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603181204536.png\" alt=\"image-20220603181204536\"></p>\n<h3 id=\"0x02-3\"><a href=\"#0x02-3\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>随便输入验证码直接抓包，可以看到前端验证并没有执行，数据包直接发送到服务端给出了回复包，成功绕过。</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603181454949.png\" alt=\"image-20220603181454949\"></p>\n<h2 id=\"0x06-Token客户端回显绕过登录爆破演示-实例\"><a href=\"#0x06-Token客户端回显绕过登录爆破演示-实例\" class=\"headerlink\" title=\"0x06 Token客户端回显绕过登录爆破演示-实例\"></a>0x06 Token客户端回显绕过登录爆破演示-实例</h2><h3 id=\"0x00-Token简介\"><a href=\"#0x00-Token简介\" class=\"headerlink\" title=\"0x00 Token简介\"></a>0x00 Token简介</h3><p>1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p>\n<p>2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p>\n<p>3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>\n<p>什么是token（例如：在下订单的时候，使用token会防止重复下订单）</p>\n<h3 id=\"0x01-4\"><a href=\"#0x01-4\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>随意输入账号密码抓包，带有token值</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603182315565.png\" alt=\"image-20220603182315565\"></p>\n<h3 id=\"0x02-4\"><a href=\"#0x02-4\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>重新抓包查看token</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603182541034.png\" alt=\"image-20220603182541034\"></p>\n<p>两次token值不同；每一次登录时候就会产生一个token值。</p>\n<h3 id=\"0x03-2\"><a href=\"#0x03-2\" class=\"headerlink\" title=\"0x03\"></a>0x03</h3><p>放包查看回复包的token值</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603183253758.png\" alt=\"image-20220603183253758\"></p>\n<p>这里抓取的数据包中的token值就是回复包中的token值。</p>\n<h3 id=\"0x04-1\"><a href=\"#0x04-1\" class=\"headerlink\" title=\"0x04\"></a>0x04</h3><p>利用BP爆破</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603183612788.png\" alt=\"image-20220603183612788\"></p>\n<p>这里线程必须是1，不能多线程。</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603183736910.png\" alt=\"image-20220603183736910\"></p>\n<p>设置重定向Always</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603184033573.png\" alt=\"image-20220603184033573\"></p>\n<p> 设置grep extract匹配用法，点击添加，查找到token值选择，点击ok。</p>\n<p>（截取回显数据包某个字段，使用正则表达式去匹配这个值。）</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603184347929.png\" alt=\"image-20220603184347929\"></p>\n<p>payload2中设置token值使用正则表达式匹配。</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603184605934.png\" alt=\"image-20220603184605934\"></p>\n<h3 id=\"0x05-1\"><a href=\"#0x05-1\" class=\"headerlink\" title=\"0x05\"></a>0x05</h3><p>爆破结果显示token值是上一次回复包的token值。</p>\n<p>先截取回复包中的token值，然后再匹配截取到的token值去提交数据包。</p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603184812665.png\" alt=\"image-20220603184812665\"></p>\n<h2 id=\"0x07-Callback自定义返回调用安全-漏洞测试-实例\"><a href=\"#0x07-Callback自定义返回调用安全-漏洞测试-实例\" class=\"headerlink\" title=\"0x07 Callback自定义返回调用安全-漏洞测试-实例\"></a>0x07 Callback自定义返回调用安全-漏洞测试-实例</h2><h3 id=\"0x00-5\"><a href=\"#0x00-5\" class=\"headerlink\" title=\"0x00\"></a>0x00</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 什么是callback</p>\n<p>—一般而言，函数的形参是指由外往内向函数体传递变量的入口，但此处加了callback后则完全相反，它是指函数体在完成某种使命后调用外部函数的出口！这时候应该明白什么叫”回调”了吧，也就是回头调用外部函数的意思。 </p></blockquote>\n<h3 id=\"0x01-5\"><a href=\"#0x01-5\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>这里callback后的数据代表微信登陆，然后将微信登陆数据返回给callback</p>\n<p>callback参数可以更改，可以和跨站漏洞结合</p>\n<p>-在<code>网页源代码搜索传递的参数</code>，如果存在，意味着URL传递的参数会在网页的前端回显，那么，也意味着可以构造XSS漏洞（测试有没有过滤，完不完整） </p>\n<p><img src=\"/post/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3.htm/image-20220603190327493.png\" alt=\"image-20220603190327493\"></p>\n<h2 id=\"0x08-上述在实战中如何做到漏洞发现-bp功能点\"><a href=\"#0x08-上述在实战中如何做到漏洞发现-bp功能点\" class=\"headerlink\" title=\"0x08 上述在实战中如何做到漏洞发现-bp功能点\"></a>0x08 上述在实战中如何做到漏洞发现-bp功能点</h2><p><strong>原理：逻辑漏洞挖功能点和参数值（关键的参数：id，callback，filename，uid等等）</strong></p>\n<p>抓包发送到爬虫（bp右键点击tools中的find references）</p>\n<p>搜索关键字（使用 discover content模块过滤搜索内容，相当于帮你筛选）</p>\n<p><strong>工作原理相当于集成扫描工具，搜集更多的信息。</strong></p>\n","text":"0x00脑图 0x011、验证码安全 分类: 图片，手机或邮箱，语音，视频，操作等原理: 验证生成或验证过程中的逻辑问题危害: 账户权限泄漏，短信轰炸，遍历，任意用户操作等漏洞: 客户端回显，验证码复用，验证码爆破，绕过等—验证码爆破：没有次数限制，验证码有效时间内不变 —验证码...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"逻辑越权","slug":"逻辑越权","count":6,"path":"api/categories/逻辑越权.json"}],"tags":[{"name":"逻辑越权","slug":"逻辑越权","count":6,"path":"api/tags/逻辑越权.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-Token\"><span class=\"toc-text\">0x02 Token</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%B7%A5%E5%85%B7%E6%93%8D%E4%BD%9C%E6%BC%94%E7%A4%BA-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">0x03 验证码识别插件及工具操作演示-实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-1\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-1\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02\"><span class=\"toc-text\">0x02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x05-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">0x05 总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-%E5%88%A9%E7%94%A8BP%E6%8F%92%E4%BB%B6captch-killer%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">0x04 利用BP插件captch-killer识别验证码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-2\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-2\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-1\"><span class=\"toc-text\">0x02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x03\"><span class=\"toc-text\">0x03</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05-%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87%E6%9C%AC%E5%9C%B0%E5%8F%8A%E8%BF%9C%E7%A8%8B%E9%AA%8C%E8%AF%81-%E6%9C%AC%E5%9C%B0%E5%8F%8A%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">0x05 验证码绕过本地及远程验证-本地及实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-3\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87%EF%BC%88on-server%EF%BC%89\"><span class=\"toc-text\">0x01 基于服务端的验证码绕过（on server）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-2\"><span class=\"toc-text\">0x02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x03-1\"><span class=\"toc-text\">0x03</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x04\"><span class=\"toc-text\">0x04</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x05\"><span class=\"toc-text\">0x05</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x06\"><span class=\"toc-text\">0x06</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x06-%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87%EF%BC%88on-client%EF%BC%89\"><span class=\"toc-text\">0x06 基于客户端的验证码绕过（on client）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-4\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-3\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-3\"><span class=\"toc-text\">0x02</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x06-Token%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9B%9E%E6%98%BE%E7%BB%95%E8%BF%87%E7%99%BB%E5%BD%95%E7%88%86%E7%A0%B4%E6%BC%94%E7%A4%BA-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">0x06 Token客户端回显绕过登录爆破演示-实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-Token%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x00 Token简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-4\"><span class=\"toc-text\">0x01</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-4\"><span class=\"toc-text\">0x02</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x03-2\"><span class=\"toc-text\">0x03</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x04-1\"><span class=\"toc-text\">0x04</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x05-1\"><span class=\"toc-text\">0x05</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x07-Callback%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E5%AE%89%E5%85%A8-%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">0x07 Callback自定义返回调用安全-漏洞测试-实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00-5\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-5\"><span class=\"toc-text\">0x01</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x08-%E4%B8%8A%E8%BF%B0%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-bp%E5%8A%9F%E8%83%BD%E7%82%B9\"><span class=\"toc-text\">0x08 上述在实战中如何做到漏洞发现-bp功能点</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"反序列化-PHP","uid":"87006ba4a5e8f65e132df547ebdb643d","slug":"反序列化-PHP","date":"2022-06-04T01:51:34.000Z","updated":"2022-06-04T13:29:05.897Z","comments":true,"path":"api/articles/反序列化-PHP.json","keywords":null,"cover":[],"text":"0x00脑图 0x01 原理序列化：将对象转化为字节序列 反序列化：将字节序列转化为对象 0x02 PHP反序列化未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL 注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"反序列化","slug":"反序列化","count":5,"path":"api/categories/反序列化.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":5,"path":"api/tags/反序列化.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"逻辑越权-找回机制与接口爆破","uid":"539bd4c95e28f22aa63a4256033042d5","slug":"逻辑越权-找回机制与接口爆破","date":"2022-06-01T10:04:03.000Z","updated":"2022-06-03T08:48:22.128Z","comments":true,"path":"api/articles/逻辑越权-找回机制与接口爆破.json","keywords":null,"cover":[],"text":"0x001.找回重置机制 客户端回显：验证码在客户端的浏览器或数据包中可以看到 Response状态值：页面通过该值返回输入的验证码的对错，可以修改数据包中的值，有回复的状态值如0&#x2F;1，我们可以更改状态值来实现绕过 验证码爆破：如果验证码范围不大，验证码有效时间足够，没...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"逻辑越权","slug":"逻辑越权","count":6,"path":"api/categories/逻辑越权.json"}],"tags":[{"name":"逻辑越权","slug":"逻辑越权","count":6,"path":"api/tags/逻辑越权.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}