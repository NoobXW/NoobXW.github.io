{"title":"WAF绕过-信息搜集反爬虫延时代理池技术","uid":"7994f7b150cfea785dcbebf986580404","slug":"WAF绕过-信息搜集反爬虫延时代理池技术","date":"2022-06-09T08:30:59.000Z","updated":"2022-06-09T09:52:21.731Z","comments":true,"path":"api/articles/WAF绕过-信息搜集反爬虫延时代理池技术.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>脑图：</p>\n<p><img src=\"/post/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E5%8F%8D%E7%88%AC%E8%99%AB%E5%BB%B6%E6%97%B6%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8A%80%E6%9C%AF.htm/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.png\" alt=\"WAF绕过-信息搜集\"></p>\n<h2 id=\"0x01-绕过手法\"><a href=\"#0x01-绕过手法\" class=\"headerlink\" title=\"0x01 绕过手法\"></a>0x01 绕过手法</h2><p>1、请求方法：改变数据包的请求方法，如从Head改为更常见的Get</p>\n<p>2、模拟用户：修改整个数据包，使它更像一般用户发送的数据</p>\n<p>3、延时：两次访问间设置合适的时间间隔，以防触发拦截机制</p>\n<p>4、代理池：使用代理访问，避开对单个IP的限制</p>\n<p>5、爬虫引擎：为数据包添加搜索引擎的User-Agent，来模仿搜索引擎的爬虫</p>\n<p>6、白名单机制：白名单不受任何拦截机制限制</p>\n<h2 id=\"0x02-Safedog-默认拦截机制分析绕过-未开CC\"><a href=\"#0x02-Safedog-默认拦截机制分析绕过-未开CC\" class=\"headerlink\" title=\"0x02 Safedog-默认拦截机制分析绕过-未开CC\"></a>0x02 Safedog-默认拦截机制分析绕过-未开CC</h2><p>使用WebPathBrute扫描目录，所有地址的状态码都是200，与事实不符</p>\n<p>将HTTP方法从“Head”改为“Get”即可绕过，Head方法快但会被拦截。</p>\n<h2 id=\"0x03-Safedog-默认拦截机制分析绕过-开启CC\"><a href=\"#0x03-Safedog-默认拦截机制分析绕过-开启CC\" class=\"headerlink\" title=\"0x03 Safedog-默认拦截机制分析绕过-开启CC\"></a>0x03 Safedog-默认拦截机制分析绕过-开启CC</h2><p>CC攻击防护会设置单IP访问上限和代理访问上限，请求过于频繁会被拦截使用延迟扫描，设置合适的访问间隔用一般用户的数据包加搜索引擎的User-Agent，来模仿搜索引擎的爬虫使用代理访问，代理访问上限主要防备CC攻击，不一定会阻止目录扫描 。</p>\n<p>修改数据包UA实现爬虫引擎：例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Mozilla&#x2F;5.0 (compatible; Baiduspider-render&#x2F;2.0; +http:&#x2F;&#x2F;www.baidu.com&#x2F;search&#x2F;spider.html)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>各大搜索引擎的User-Agent：</p>\n<p><a href=\"https://www.cnblogs.com/iack/p/3557371.html\">https://www.cnblogs.com/iack/p/3557371.html</a> </p>\n<h2 id=\"0x04-Aliyun-os-默认拦截机制分析绕过\"><a href=\"#0x04-Aliyun-os-默认拦截机制分析绕过\" class=\"headerlink\" title=\"0x04 Aliyun_os-默认拦截机制分析绕过\"></a>0x04 Aliyun_os-默认拦截机制分析绕过</h2><p>无法修改，触发就会被封禁，只能通过延时或代理池绕过，无法通过爬虫引擎绕过。</p>\n<p>##0x05 BT(防火墙插件)-默认拦截机制分析绕过</p>\n<p>有CC攻击防护，还数据包内容过滤，可以通过延时或代理池绕过，绕过对特定关键词的检查，进一步使用延时或代理池，或对关键词变形。</p>\n<h2 id=\"0x06-Python脚本搜索引擎爬虫模拟\"><a href=\"#0x06-Python脚本搜索引擎爬虫模拟\" class=\"headerlink\" title=\"0x06 Python脚本搜索引擎爬虫模拟\"></a>0x06 Python脚本搜索引擎爬虫模拟</h2><p>import requests</p>\n<p>import time</p>\n<p>headers&#x3D;{</p>\n<p>‘Connection’: ‘keep-alive’,</p>\n<p>‘Cache-Control’: ‘max-age&#x3D;0’,</p>\n<p>‘Upgrade-Insecure-Requests’: ‘1’,</p>\n<p>模拟用户 Kit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.105 Safari&#x2F;537.36</p>\n<p>模拟引擎 Mozilla&#x2F;5.0 (compatible; Baiduspider-render&#x2F;2.0; +<a href=\"http://www.baidu.com/search/spider.html\">http://www.baidu.com/search/spider.html</a>)</p>\n<p>‘User-Agent’: </p>\n<p>‘Mozilla&#x2F;5.0 </p>\n<p>(compatible; </p>\n<p>Baiduspider-render&#x2F;2.0;+<a href=\"http://www.baidu.com/search/spider.html\">http://www.baidu.com/search/spider.html</a>)’,</p>\n<p>‘Sec-Fetch-Dest’: ‘document’,</p>\n<p>‘Accept’:’text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9’,</p>\n<p>‘Sec-Fetch-Site’: ‘none’,</p>\n<p>‘Sec-Fetch-Mode’: ‘navigate’,</p>\n<p>‘Sec-Fetch-User’: ‘?1’,</p>\n<p>‘Accept-Encoding’: ‘gzip, deflate, br’,</p>\n<p>‘Accept-Language’: ‘zh-CN,zh;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7’,</p>\n<p>‘Cookie’: ‘xxx’,#根据当前访问 cookie</p>\n<p>}</p>\n<p>for paths in open(‘php_b.txt’,encoding&#x3D;’utf-8’):</p>\n<p>url&#x3D;’<a href=\"http://192.168.0.103:8081/\">http://192.168.0.103:8081/</a>‘</p>\n<p>paths&#x3D;paths.replace(‘\\n’,’’)</p>\n<p>urls&#x3D;url+paths</p>\n<p>如需测试加代理，或加入代理池需加代理</p>\n<p>proxy &#x3D; {</p>\n<p>‘http’: ‘127.0.0.1:7777’}</p>\n<p>try:</p>\n<p>code&#x3D;requests.get(urls,headers&#x3D;headers,verify&#x3D;False).status_code</p>\n<p>print(urls+’|’+str(code))</p>\n<p>if code&#x3D;&#x3D;200 or code&#x3D;&#x3D;403:</p>\n<p>print(urls+’|’+str(code))</p>\n<p>except Exception as err:</p>\n<p>print(‘connecting error’)</p>\n<p>time.sleep(3)  模拟用户需延时 引擎可用可不用（根据请求速度）</p>\n<h2 id=\"0x07-代理池\"><a href=\"#0x07-代理池\" class=\"headerlink\" title=\"0x07 代理池\"></a>0x07 代理池</h2><p>使用代理池绕过WAF单个IP拦截，如下图：</p>\n<p><img src=\"/post/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E5%8F%8D%E7%88%AC%E8%99%AB%E5%BB%B6%E6%97%B6%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8A%80%E6%9C%AF.htm/image-20220609174330424.png\" alt=\"image-20220609174330424\"></p>\n","text":"0x00脑图： 0x01 绕过手法1、请求方法：改变数据包的请求方法，如从Head改为更常见的Get 2、模拟用户：修改整个数据包，使它更像一般用户发送的数据 3、延时：两次访问间设置合适的时间间隔，以防触发拦截机制 4、代理池：使用代理访问，避开对单个IP的限制 5、爬虫引擎：...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E7%BB%95%E8%BF%87%E6%89%8B%E6%B3%95\"><span class=\"toc-text\">0x01 绕过手法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-Safedog-%E9%BB%98%E8%AE%A4%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90%E7%BB%95%E8%BF%87-%E6%9C%AA%E5%BC%80CC\"><span class=\"toc-text\">0x02 Safedog-默认拦截机制分析绕过-未开CC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-Safedog-%E9%BB%98%E8%AE%A4%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90%E7%BB%95%E8%BF%87-%E5%BC%80%E5%90%AFCC\"><span class=\"toc-text\">0x03 Safedog-默认拦截机制分析绕过-开启CC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-Aliyun-os-%E9%BB%98%E8%AE%A4%E6%8B%A6%E6%88%AA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">0x04 Aliyun_os-默认拦截机制分析绕过</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x06-Python%E8%84%9A%E6%9C%AC%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%88%AC%E8%99%AB%E6%A8%A1%E6%8B%9F\"><span class=\"toc-text\">0x06 Python脚本搜索引擎爬虫模拟</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x07-%E4%BB%A3%E7%90%86%E6%B1%A0\"><span class=\"toc-text\">0x07 代理池</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"WAF绕过-漏洞发现之代理池指纹被动探针","uid":"60c32b8c4d5a420db76927924181a57e","slug":"WAF绕过-漏洞发现之代理池指纹被动探针","date":"2022-06-10T10:48:38.000Z","updated":"2022-06-10T12:00:36.685Z","comments":true,"path":"api/articles/WAF绕过-漏洞发现之代理池指纹被动探针.json","keywords":null,"cover":[],"text":"0x00脑图： 0x01 漏洞发现触发WAF点-针对xray,awvs等1、扫描速度-(代理池，延迟，白名单等)：速度过快肯定会被拦截 2、工具指纹-(特征修改，伪造模拟真实用户等) 3、漏洞Payload-(数据变异，数据加密，白名单等) （热门的扫描工具（awvs，xray等...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Bypass WAF","slug":"Bypass-WAF","count":7,"path":"api/tags/Bypass-WAF.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"漏洞发现-API接口服务类","uid":"3453cd6915cc1680ff9c8ccd16d4f69e","slug":"漏洞发现-API接口服务类","date":"2022-06-08T07:03:31.000Z","updated":"2022-06-08T13:07:39.886Z","comments":true,"path":"api/articles/漏洞发现-API接口服务类.json","keywords":null,"cover":[],"text":"0x00脑图： 0x01 端口服务类安全测试根据前期信息收集针对目标端口服务类探针后进行的安全测试；主要涉及攻击方法：口令安全，WEB类漏洞，版本漏洞等，其中产生的危害可大可小。属于端口服务&#x2F;第三方服务类安全测试面。一般在已知应用无思路的情况下选用的安全测试方案。 0x...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"漏洞检测","slug":"漏洞检测","count":4,"path":"api/categories/漏洞检测.json"}],"tags":[{"name":"漏洞检测","slug":"漏洞检测","count":4,"path":"api/tags/漏洞检测.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}