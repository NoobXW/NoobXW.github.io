{"title":"WEB漏洞知识点","uid":"cadd35667758fe128c74aec131ce6e19","slug":"WEB漏洞知识点","date":"2022-01-30T07:21:56.000Z","updated":"2022-02-13T15:47:15.060Z","comments":true,"path":"api/articles/WEB漏洞知识点.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>[TOC]</p>\n<p>##前言</p>\n<p>WEB层面涉及的漏洞关系到渗透过程中的方方面面，漏洞的危害等级以及影响的范围等，要明白各个漏洞的形成原理，并且要明白如何去发现，如何去利用。</p>\n<p><img src=\"/post/WEB%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E7%82%B9.htm/image-20220130153259561.png\" alt=\"image-20220130153259561\"></p>\n<h2 id=\"常见漏洞原理\"><a href=\"#常见漏洞原理\" class=\"headerlink\" title=\"常见漏洞原理\"></a>常见漏洞原理</h2><ol>\n<li><p><strong>SQL注入</strong>：简称注入攻击、SQL注入，被广泛用于非法获取网站控制权，是发生在应用程序的数据库层上的安全漏洞。在设计程序，忽略了对输入字符串中夹带的SQL指令的检查，被数据库误认为是正常的SQL指令而运行，从而使数据库受到攻击，可能导致数据被窃取、更改、删除，以及进一步导致网站被嵌入恶意代码、被植入后门程序等危害。<br>通常情况下，SQL注入的位置包括：<br>（1）表单提交，主要是POST请求，也包括GET请求；<br>（2）URL参数提交，主要为GET请求参数；<br>（3）Cookie参数提交；<br>（4）HTTP请求头部的一些可修改的值，比如Referer、User_Agent等；<br>（5）一些边缘的输入点，比如.mp3文件的一些文件信息等。</p>\n</li>\n<li><p><strong>文件上传</strong>：文件上传漏洞通常由于网页代码中的文件上传路径变量过滤不严造成的，如果文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，攻击者可通过 Web 访问的目录上传任意文件，包括网站后门文件（webshell），进而远程控制网站服务器。<br>因此，在开发网站及应用程序过程中，需严格限制和校验上传的文件，禁止上传恶意代码的文件。同时限制相关目录的执行权限，防范webshell攻击。</p>\n</li>\n<li><p><strong>XSS跨站</strong>：跨站脚本攻击（Cross-site scripting，通常简称为XSS）发生在客户端，可被用于进行窃取隐私、钓鱼欺骗、窃取密码、传播恶意代码等攻击。<br>XSS攻击使用到的技术主要为HTML和Javascript，也包括VBScript和ActionScript等。XSS攻击对WEB服务器虽无直接危害，但是它借助网站进行传播，使网站的使用用户受到攻击，导致网站用户帐号被窃取，从而对网站也产生了较严重的危害。<br>XSS类型包括：<br>（1）非持久型跨站：即反射型跨站脚本漏洞，是目前最普遍的跨站类型。跨站代码一般存在于链接中，请求这样的链接时，跨站代码经过服务端反射回来，这类跨站的代码不存储到服务端（比如数据库中）。上面章节所举的例子就是这类情况。<br>（2）持久型跨站：这是危害最直接的跨站类型，跨站代码存储于服务端（比如数据库中）。常见情况是某用户在论坛发贴，如果论坛没有过滤用户输入的Javascript代码数据，就会导致其他浏览此贴的用户的浏览器会执行发贴人所嵌入的Javascript代码。<br>（3）DOM跨站（DOM XSS）：是一种发生在客户端DOM（Document Object Model文档对象模型）中的跨站漏洞，很大原因是因为客户端脚本处理逻辑导致的安全问题。 </p>\n</li>\n<li><p><strong>文件包含</strong>：由攻击者向Web服务器发送请求时，在URL添加非法参数，Web服务器端程序变量过滤不严，把非法的文件名作为参数处理。这些非法的文件名可以是服务器本地的某个文件，也可以是远端的某个恶意文件。由于这种漏洞是由PHP变量过滤不严导致的，所以<strong>只有基于PHP开发的Web应用程序才有可能存在文件包含漏洞</strong>。</p>\n</li>\n<li><p><strong>CSRF</strong>：跨站请求伪造，它利用受害者尚未失效的身份认证信息（cookie，会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。</p>\n</li>\n<li><p><strong>SSRF</strong>：服务端请求伪造，由攻击者构造形成由服务端发起请求的一个安全漏洞。 一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统） SSRF漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p>\n</li>\n<li><p><strong>目录遍历</strong>： 目录遍历漏洞是攻击者向Web服务器发送请求，通过在URL中或在有特殊意义的目录中附加“..&#x2F;”、或者附加“..&#x2F;”的一些变形（如“..\\”或“..&#x2F;&#x2F;”甚至其编码），导致攻击者能够访问未授权的目录，以及在Web服务器的根目录以外执行命令。</p>\n</li>\n<li><p><strong>命令执行</strong>：命令执行漏洞是通过URL发起请求，在Web服务器端执行未授权的命令，获取系统信息，篡改系统配置，控制整个系统，使系统瘫痪等。</p>\n<p>命令执行漏洞主要有两种情况：</p>\n<p>   –通过目录遍历漏洞，访问系统文件夹，执行指定的系统命令；</p>\n<p>  –攻击者提交特殊的字符或者命令，Web程序没有进行检测或者绕过Web应用程序过滤，把用户提交的请求作为指令进行解析，导致执行任意命令。</p>\n</li>\n</ol>\n","text":"[TOC] ##前言 WEB层面涉及的漏洞关系到渗透过程中的方方面面，漏洞的危害等级以及影响的范围等，要明白各个漏洞的形成原理，并且要明白如何去发现，如何去利用。 常见漏洞原理 SQL注入：简称注入攻击、SQL注入，被广泛用于非法获取网站控制权，是发生在应用程序的数据库层上的安全...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"基础知识","slug":"基础知识","count":8,"path":"api/categories/基础知识.json"}],"tags":[{"name":"基础知识","slug":"基础知识","count":12,"path":"api/tags/基础知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">常见漏洞原理</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"简要SQL注入","uid":"7636cfd8370edb30f65feb72ed748040","slug":"简要SQL注入","date":"2022-01-30T13:05:54.000Z","updated":"2022-02-13T15:48:59.624Z","comments":true,"path":"api/articles/简要SQL注入.json","keywords":null,"cover":[],"text":"[TOC] 前言SQL 注入漏洞是重点部分，其中 SQL 注入 又非常复杂，区分各种数据库类型，提交方法，数据类型等注入等，此类漏洞是 WEB 安全中严重的安全漏洞，学习如何利用，挖掘，修复。 SQL注入图解 手工注入原理手工注入：构造不同的sql语句，用户输入的数据拼接到原本的...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"SQL注入","slug":"SQL注入","count":20,"path":"api/categories/SQL注入.json"}],"tags":[{"name":"SQL注入","slug":"SQL注入","count":21,"path":"api/tags/SQL注入.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"架构，搭建，WAF等","uid":"e1bdafc064990b71004087aa4da077ab","slug":"架构，搭建，WAF等","date":"2022-01-28T11:21:46.000Z","updated":"2022-02-13T15:48:41.525Z","comments":true,"path":"api/articles/架构，搭建，WAF等.json","keywords":null,"cover":[],"text":"[TOC] 前言在安全测试中，信息收集是非常重要的一个环节，此环节的信息将影响 到后续的成功几率，掌握信息的多少将决定发现漏洞机会大小，换言之决定着是否能完成目标的测试任务。渗透测试的思路 就是从信息收集这里开始。 所谓信息搜集，其实就是为了扩大攻击面，信息搜集的越多，攻击的范围...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"信息搜集","slug":"信息搜集","count":10,"path":"api/categories/信息搜集.json"}],"tags":[{"name":"信息搜集","slug":"信息搜集","count":11,"path":"api/tags/信息搜集.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}